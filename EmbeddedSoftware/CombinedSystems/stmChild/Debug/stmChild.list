
stmChild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011690  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  08011820  08011820  00021820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120f4  080120f4  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080120f4  080120f4  000220f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080120fc  080120fc  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080120fc  080120fc  000220fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012100  08012100  00022100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08012104  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000200  08012304  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08012304  0003078c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002251a  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047a2  00000000  00000000  0005274a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  00056ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001838  00000000  00000000  00058910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020eb4  00000000  00000000  0005a148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000245dd  00000000  00000000  0007affc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2ba8  00000000  00000000  0009f5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008744  00000000  00000000  001621d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0016a918  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0016a954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011808 	.word	0x08011808

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08011808 	.word	0x08011808

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <encodeMeasurementData>:


#include "DataHandling.h"

//Function to encode measurement data into bytes
void encodeMeasurementData(struct measurementData* data, uint8_t dataArray[], uint8_t* dataSize){
 8000ff8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ffc:	b0b8      	sub	sp, #224	; 0xe0
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8001004:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001008:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94

	//Long word to store all bits from measuremetn data
	uint64_t measurementValue = 0;//data->measurementTime;
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	//encode saved depth value
	uint8_t depthSign = (data->depthValue>0);
 8001018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	bfcc      	ite	gt
 8001022:	2301      	movgt	r3, #1
 8001024:	2300      	movle	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	uint64_t depthValue = data->depthValue>0?data->depthValue:data->depthValue*-1;
 800102c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	bfb8      	it	lt
 8001036:	425b      	neglt	r3, r3
 8001038:	17da      	asrs	r2, r3, #31
 800103a:	653b      	str	r3, [r7, #80]	; 0x50
 800103c:	657a      	str	r2, [r7, #84]	; 0x54
 800103e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001042:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	measurementValue = measurementValue|(((uint64_t)depthSign)<<depthValueSignShift);
 8001046:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800104a:	2200      	movs	r2, #0
 800104c:	4698      	mov	r8, r3
 800104e:	4691      	mov	r9, r2
 8001050:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001054:	ea42 0a08 	orr.w	sl, r2, r8
 8001058:	ea43 0b09 	orr.w	fp, r3, r9
 800105c:	e9c7 ab34 	strd	sl, fp, [r7, #208]	; 0xd0
	measurementValue = measurementValue|((depthValue)<<depthValueShift);
 8001060:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001064:	1891      	adds	r1, r2, r2
 8001066:	64b9      	str	r1, [r7, #72]	; 0x48
 8001068:	415b      	adcs	r3, r3
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800106c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001070:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001074:	ea42 0600 	orr.w	r6, r2, r0
 8001078:	643e      	str	r6, [r7, #64]	; 0x40
 800107a:	430b      	orrs	r3, r1
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
 800107e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001082:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	//encode water pressure value
	measurementValue = measurementValue|(((uint64_t)data->waterPressureValue)<<waterPressureShift);
 8001086:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	17da      	asrs	r2, r3, #31
 800108e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001092:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001096:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800109a:	460b      	mov	r3, r1
 800109c:	14dd      	asrs	r5, r3, #19
 800109e:	460b      	mov	r3, r1
 80010a0:	035c      	lsls	r4, r3, #13
 80010a2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80010a6:	ea42 0104 	orr.w	r1, r2, r4
 80010aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80010ac:	432b      	orrs	r3, r5
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010b0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80010b4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	//encode surface temperature value
	uint8_t temperatureSign = (data->surfaceTemperatureValue>0);
 80010b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bfcc      	ite	gt
 80010c2:	2301      	movgt	r3, #1
 80010c4:	2300      	movle	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	uint64_t temperatureValue = data->surfaceTemperatureValue>0?data->surfaceTemperatureValue:data->surfaceTemperatureValue*-1;
 80010cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bfb8      	it	lt
 80010d6:	425b      	neglt	r3, r3
 80010d8:	17da      	asrs	r2, r3, #31
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
 80010dc:	637a      	str	r2, [r7, #52]	; 0x34
 80010de:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80010e2:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	measurementValue = measurementValue|(((uint64_t)temperatureSign)<<surfaceTemperatureSignShift);
 80010e6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80010ea:	2200      	movs	r2, #0
 80010ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80010ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80010f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80010f4:	460b      	mov	r3, r1
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	677b      	str	r3, [r7, #116]	; 0x74
 80010fa:	460b      	mov	r3, r1
 80010fc:	079b      	lsls	r3, r3, #30
 80010fe:	673b      	str	r3, [r7, #112]	; 0x70
 8001100:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001104:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001108:	4621      	mov	r1, r4
 800110a:	4311      	orrs	r1, r2
 800110c:	62b9      	str	r1, [r7, #40]	; 0x28
 800110e:	4629      	mov	r1, r5
 8001110:	4319      	orrs	r1, r3
 8001112:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001114:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001118:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	measurementValue = measurementValue|((temperatureValue)<<surfaceTemperatureShift);
 800111c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001120:	105b      	asrs	r3, r3, #1
 8001122:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001128:	07db      	lsls	r3, r3, #31
 800112a:	66bb      	str	r3, [r7, #104]	; 0x68
 800112c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001130:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001134:	4621      	mov	r1, r4
 8001136:	4311      	orrs	r1, r2
 8001138:	6239      	str	r1, [r7, #32]
 800113a:	4629      	mov	r1, r5
 800113c:	4319      	orrs	r1, r3
 800113e:	6279      	str	r1, [r7, #36]	; 0x24
 8001140:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001144:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	//encode underground temperature value
	uint8_t undergroundTemperatureSign = (data->undergroundTemperatureValue>0);
 8001148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	bfcc      	ite	gt
 8001152:	2301      	movgt	r3, #1
 8001154:	2300      	movle	r3, #0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	uint64_t undergroundTemperatureValue = data->undergroundTemperatureValue>0?data->undergroundTemperatureValue:data->undergroundTemperatureValue*-1;
 800115c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	bfb8      	it	lt
 8001166:	425b      	neglt	r3, r3
 8001168:	17da      	asrs	r2, r3, #31
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	61fa      	str	r2, [r7, #28]
 800116e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001172:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	measurementValue = measurementValue|(((uint64_t)undergroundTemperatureSign)<<undergroundTemperatureSignShift);
 8001176:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800117a:	2200      	movs	r2, #0
 800117c:	663b      	str	r3, [r7, #96]	; 0x60
 800117e:	667a      	str	r2, [r7, #100]	; 0x64
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800118a:	02cb      	lsls	r3, r1, #11
 800118c:	2200      	movs	r2, #0
 800118e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001192:	ea40 0402 	orr.w	r4, r0, r2
 8001196:	613c      	str	r4, [r7, #16]
 8001198:	430b      	orrs	r3, r1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80011a0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	measurementValue = measurementValue|((undergroundTemperatureValue)<<undergroundTemperatureShift);
 80011a4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	0303      	lsls	r3, r0, #12
 80011b2:	2200      	movs	r2, #0
 80011b4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80011b8:	ea40 0402 	orr.w	r4, r0, r2
 80011bc:	60bc      	str	r4, [r7, #8]
 80011be:	430b      	orrs	r3, r1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80011c6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	//encode battery state value
	measurementValue =  measurementValue|(((uint64_t)data->batteryStatus)<<batteryStatusShift);
 80011ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	17da      	asrs	r2, r3, #31
 80011d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80011d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80011e0:	060b      	lsls	r3, r1, #24
 80011e2:	2200      	movs	r2, #0
 80011e4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80011e8:	ea40 0402 	orr.w	r4, r0, r2
 80011ec:	603c      	str	r4, [r7, #0]
 80011ee:	430b      	orrs	r3, r1
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011f6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	//separate the long word into bytes and add them to byte array
	int iterator = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(int i = 0;i<=overallDataBitSize;i+=8){
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001206:	e02e      	b.n	8001266 <encodeMeasurementData+0x26e>
		dataArray[iterator] = (measurementValue>>(i))&0xFF;
 8001208:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800120c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001210:	f1c1 0420 	rsb	r4, r1, #32
 8001214:	f1a1 0020 	sub.w	r0, r1, #32
 8001218:	fa22 f501 	lsr.w	r5, r2, r1
 800121c:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 8001220:	fa03 f404 	lsl.w	r4, r3, r4
 8001224:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8001228:	4325      	orrs	r5, r4
 800122a:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 800122e:	fa23 f000 	lsr.w	r0, r3, r0
 8001232:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8001236:	4304      	orrs	r4, r0
 8001238:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800123c:	40cb      	lsrs	r3, r1
 800123e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001246:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800124a:	4413      	add	r3, r2
 800124c:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8001250:	701a      	strb	r2, [r3, #0]
		iterator++;
 8001252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001256:	3301      	adds	r3, #1
 8001258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(int i = 0;i<=overallDataBitSize;i+=8){
 800125c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001260:	3308      	adds	r3, #8
 8001262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800126a:	2b38      	cmp	r3, #56	; 0x38
 800126c:	ddcc      	ble.n	8001208 <encodeMeasurementData+0x210>
	}

	*dataSize = iterator;
 800126e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001272:	b2da      	uxtb	r2, r3
 8001274:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001278:	701a      	strb	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	37e0      	adds	r7, #224	; 0xe0
 800127e:	46bd      	mov	sp, r7
 8001280:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001284:	4770      	bx	lr
	...

08001288 <Flash_Write_Data>:

}

//Function to write data at specified address
uint32_t Flash_Write_Data (uint32_t startAddress, uint64_t *data, int numberOfWords)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]

	//Starting address holder
	uint32_t address = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
	address = startAddress;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	61bb      	str	r3, [r7, #24]


	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80012a0:	f005 fa40 	bl	8006724 <HAL_FLASH_Unlock>
	   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <Flash_Write_Data+0xd0>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a2b      	ldr	r2, [pc, #172]	; (8001358 <Flash_Write_Data+0xd0>)
 80012aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <Flash_Write_Data+0xd0>)
 80012b2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80012b6:	611a      	str	r2, [r3, #16]

	   /* Erase the user Flash area*/
	   if(address<FLASH_BASE || address>FLASH_END-FLASH_PAGE_SIZE) return 0;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012be:	d303      	bcc.n	80012c8 <Flash_Write_Data+0x40>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	4a26      	ldr	r2, [pc, #152]	; (800135c <Flash_Write_Data+0xd4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d301      	bcc.n	80012cc <Flash_Write_Data+0x44>
 80012c8:	2300      	movs	r3, #0
 80012ca:	e041      	b.n	8001350 <Flash_Write_Data+0xc8>

	   //uint32_t StartPage = (StartAddress-FLASH_BASE)/FLASH_PAGE_SIZE;
	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; //tyep of erasure
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <Flash_Write_Data+0xd8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.Page = (address-FLASH_BASE)/FLASH_PAGE_SIZE; //number of pages to erase
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80012d8:	0adb      	lsrs	r3, r3, #11
 80012da:	4a21      	ldr	r2, [pc, #132]	; (8001360 <Flash_Write_Data+0xd8>)
 80012dc:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages = ((numberOfWords*8)/FLASH_PAGE_SIZE)+1; //number of page to erase
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	0adb      	lsrs	r3, r3, #11
 80012e4:	3301      	adds	r3, #1
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <Flash_Write_Data+0xd8>)
 80012e8:	60d3      	str	r3, [r2, #12]
	   EraseInitStruct.Banks = FLASH_BANK_1; //active memory bank
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <Flash_Write_Data+0xd8>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	605a      	str	r2, [r3, #4]

	   //erase the relevant pages that will be used
	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	481a      	ldr	r0, [pc, #104]	; (8001360 <Flash_Write_Data+0xd8>)
 80012f8:	f005 fb06 	bl	8006908 <HAL_FLASHEx_Erase>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d01f      	beq.n	8001342 <Flash_Write_Data+0xba>
	   {
		 /*Error occurred while page erase.*/
		   HAL_FLASH_Lock();
 8001302:	f005 fa31 	bl	8006768 <HAL_FLASH_Lock>
		  return HAL_FLASH_GetError ();
 8001306:	f005 fa3f 	bl	8006788 <HAL_FLASH_GetError>
 800130a:	4603      	mov	r3, r0
 800130c:	e020      	b.n	8001350 <Flash_Write_Data+0xc8>

	   /* Program the user Flash area word by word*/
	 while (sofar<numberOfWords)
	 {
		 //program a double word to the page one at a time
		 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data[sofar]) == HAL_OK)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	4413      	add	r3, r2
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	2000      	movs	r0, #0
 800131e:	f005 f995 	bl	800664c <HAL_FLASH_Program>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d106      	bne.n	8001336 <Flash_Write_Data+0xae>
		 {
			 address += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	3308      	adds	r3, #8
 800132c:	61bb      	str	r3, [r7, #24]
			 sofar++;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	e005      	b.n	8001342 <Flash_Write_Data+0xba>
		 }
		 else{
		     /* Error occurred while writing data in Flash memory*/
			 HAL_FLASH_Lock();
 8001336:	f005 fa17 	bl	8006768 <HAL_FLASH_Lock>
			 return HAL_FLASH_GetError ();
 800133a:	f005 fa25 	bl	8006788 <HAL_FLASH_GetError>
 800133e:	4603      	mov	r3, r0
 8001340:	e006      	b.n	8001350 <Flash_Write_Data+0xc8>
	 while (sofar<numberOfWords)
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	dbe1      	blt.n	800130e <Flash_Write_Data+0x86>
		 }
	 }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800134a:	f005 fa0d 	bl	8006768 <HAL_FLASH_Lock>

	   return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40022000 	.word	0x40022000
 800135c:	0801f800 	.word	0x0801f800
 8001360:	2000021c 	.word	0x2000021c

08001364 <Flash_Read_Data>:

//Function to read data from specified address
void Flash_Read_Data (uint32_t StartPageAddress, uint64_t *RxBuf, uint16_t numberofwords)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	4613      	mov	r3, r2
 8001370:	80fb      	strh	r3, [r7, #6]
	//iterate over memory location
	while (1)
	{
		//add value from address to array
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	e9c1 2300 	strd	r2, r3, [r1]
		//increment active address
		StartPageAddress += 8;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3308      	adds	r3, #8
 8001382:	60fb      	str	r3, [r7, #12]
		//increment active array element
		RxBuf++;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3308      	adds	r3, #8
 8001388:	60bb      	str	r3, [r7, #8]
		//decrement number of words left to read
		numberofwords--;
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	3b01      	subs	r3, #1
 800138e:	80fb      	strh	r3, [r7, #6]
		//stop reading if no more words are needed
		if (!(numberofwords)) break;
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d000      	beq.n	8001398 <Flash_Read_Data+0x34>
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 8001396:	e7ec      	b.n	8001372 <Flash_Read_Data+0xe>
		if (!(numberofwords)) break;
 8001398:	bf00      	nop
	}
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <performDepthMeasurement>:
#include <ManagementChild.h>
#include "../Inc/FlashMemoryAccess.h"
#include "main.h"

//Function to perform depth measurement
void performDepthMeasurement(ADC_HandleTypeDef*  handle1, ADC_HandleTypeDef*  handle2, struct measurementData* data){
 80013a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ac:	b0a8      	sub	sp, #160	; 0xa0
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80013b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80013b4:	627a      	str	r2, [r7, #36]	; 0x24

	//Set up the ADC channel for depth measuring
	ADC_ChannelConfTypeDef sConfig = {0};
 80013b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013ba:	2300      	movs	r3, #0
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	6053      	str	r3, [r2, #4]
 80013c0:	6093      	str	r3, [r2, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
 80013c4:	6113      	str	r3, [r2, #16]
 80013c6:	6153      	str	r3, [r2, #20]
	//set all config parameters
	sConfig.Channel = ADC_CHANNEL_5;
 80013c8:	4b55      	ldr	r3, [pc, #340]	; (8001520 <performDepthMeasurement+0x178>)
 80013ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ce:	2306      	movs	r3, #6
 80013d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013da:	237f      	movs	r3, #127	; 0x7f
 80013dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013e0:	2304      	movs	r3, #4
 80013e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  sConfig.Offset = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	  //Set active config channel
	  if (HAL_ADC_ConfigChannel(handle1, &sConfig) != HAL_OK)
 80013ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013f0:	4619      	mov	r1, r3
 80013f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013f4:	f004 f932 	bl	800565c <HAL_ADC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <performDepthMeasurement+0x5a>
	  {
		Error_Handler();
 80013fe:	f001 fab5 	bl	800296c <Error_Handler>
	  }

	//Retrieve depth measurement calibration values from flash memory
	uint64_t supportVariables[numberOfDepthVariables];
	Flash_Read_Data(depthVariablesStartAddr, supportVariables, numberOfDepthVariables);
 8001402:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001406:	2207      	movs	r2, #7
 8001408:	4619      	mov	r1, r3
 800140a:	4846      	ldr	r0, [pc, #280]	; (8001524 <performDepthMeasurement+0x17c>)
 800140c:	f7ff ffaa 	bl	8001364 <Flash_Read_Data>

	//Define all depth measuring data and calibration values
	struct DepthData depthData;
	depthData.pos = ((int)supportVariables[0]);
 8001410:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001414:	4613      	mov	r3, r2
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
	depthData.output1 = ((int)supportVariables[1]);
 8001418:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800141c:	4613      	mov	r3, r2
 800141e:	63bb      	str	r3, [r7, #56]	; 0x38
	depthData.output2 = ((int)supportVariables[2]);
 8001420:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001424:	4613      	mov	r3, r2
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
	depthData.max_value_1 = ((int)supportVariables[3]);
 8001428:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800142c:	4613      	mov	r3, r2
 800142e:	643b      	str	r3, [r7, #64]	; 0x40
	depthData.min_value_1 = ((int)supportVariables[4]);
 8001430:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001434:	4613      	mov	r3, r2
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
	depthData.max_value_2 = ((int)supportVariables[5]);
 8001438:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800143c:	4613      	mov	r3, r2
 800143e:	64bb      	str	r3, [r7, #72]	; 0x48
	depthData.min_value_2 = ((int)supportVariables[6]);
 8001440:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001444:	4613      	mov	r3, r2
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c
	//printf("\r\nstored data: %d, %d, %d, %d, %d, %d, %d", depthData.pos, depthData.output1, depthData.output2, depthData.max_value_1, depthData.min_value_1, depthData.max_value_2, depthData.min_value_2);

	//Power on depth measuring device
	HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	4836      	ldr	r0, [pc, #216]	; (8001528 <performDepthMeasurement+0x180>)
 800144e:	f005 fd09 	bl	8006e64 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001452:	2064      	movs	r0, #100	; 0x64
 8001454:	f003 fb66 	bl	8004b24 <HAL_Delay>

	//Perform depth measurement
	calculateDistance(handle1, handle2, &depthData);
 8001458:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800145c:	461a      	mov	r2, r3
 800145e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001462:	f001 fe77 	bl	8003154 <calculateDistance>

	//Power of depth measuring device
	HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_RESET); // depth
 8001466:	2200      	movs	r2, #0
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	482f      	ldr	r0, [pc, #188]	; (8001528 <performDepthMeasurement+0x180>)
 800146c:	f005 fcfa 	bl	8006e64 <HAL_GPIO_WritePin>

	//Retrieve actual depth value
	data->depthValue = 100*(((float)depthData.pos)/35);
 8001470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800147a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800152c <performDepthMeasurement+0x184>
 800147e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001482:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001530 <performDepthMeasurement+0x188>
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148e:	ee17 2a90 	vmov	r2, s15
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	601a      	str	r2, [r3, #0]

	printf("\r\nCalculated distance: %d", data->depthValue);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	4825      	ldr	r0, [pc, #148]	; (8001534 <performDepthMeasurement+0x18c>)
 800149e:	f00b fdc9 	bl	800d034 <iprintf>

	//Save latest calibration values
	supportVariables[0] = (uint64_t)(depthData.pos);
 80014a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a4:	17da      	asrs	r2, r3, #31
 80014a6:	461c      	mov	r4, r3
 80014a8:	4615      	mov	r5, r2
 80014aa:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	supportVariables[1] = (uint64_t)(depthData.output1);
 80014ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b0:	17da      	asrs	r2, r3, #31
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	61fa      	str	r2, [r7, #28]
 80014b6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014ba:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	supportVariables[2] = (uint64_t)(depthData.output2);
 80014be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014c0:	17da      	asrs	r2, r3, #31
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	617a      	str	r2, [r7, #20]
 80014c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80014ca:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	supportVariables[3] = (uint64_t)(depthData.max_value_1);
 80014ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014d0:	17da      	asrs	r2, r3, #31
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	60fa      	str	r2, [r7, #12]
 80014d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014da:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	supportVariables[4] = (uint64_t)(depthData.min_value_1);
 80014de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014e0:	17da      	asrs	r2, r3, #31
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014ea:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	supportVariables[5] = (uint64_t)(depthData.max_value_2);
 80014ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014f0:	17da      	asrs	r2, r3, #31
 80014f2:	469a      	mov	sl, r3
 80014f4:	4693      	mov	fp, r2
 80014f6:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	supportVariables[6] = (uint64_t)(depthData.min_value_2);
 80014fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014fc:	17da      	asrs	r2, r3, #31
 80014fe:	4698      	mov	r8, r3
 8001500:	4691      	mov	r9, r2
 8001502:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
	//printf("\r\new data: %d, %d, %d, %d, %d, %d, %d", depthData.pos, depthData.output1, depthData.output2, depthData.max_value_1, depthData.min_value_1, depthData.max_value_2, depthData.min_value_2);
	Flash_Write_Data(depthVariablesStartAddr, supportVariables, numberOfDepthVariables);
 8001506:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800150a:	2207      	movs	r2, #7
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <performDepthMeasurement+0x17c>)
 8001510:	f7ff feba 	bl	8001288 <Flash_Write_Data>

}
 8001514:	bf00      	nop
 8001516:	37a0      	adds	r7, #160	; 0xa0
 8001518:	46bd      	mov	sp, r7
 800151a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800151e:	bf00      	nop
 8001520:	14f00020 	.word	0x14f00020
 8001524:	0801a000 	.word	0x0801a000
 8001528:	48000400 	.word	0x48000400
 800152c:	420c0000 	.word	0x420c0000
 8001530:	42c80000 	.word	0x42c80000
 8001534:	08011820 	.word	0x08011820

08001538 <performPressureMeasurement>:

//Function to perform pressure measurement
void performPressureMeasurement(I2C_HandleTypeDef* handle, struct measurementData* data){
 8001538:	b580      	push	{r7, lr}
 800153a:	b090      	sub	sp, #64	; 0x40
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]

	//Power on pressure measuring device
	HAL_GPIO_WritePin(i2cGPIO, i2cGPIOPin, GPIO_PIN_SET); //pressure activation pin
 8001542:	2201      	movs	r2, #1
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	4853      	ldr	r0, [pc, #332]	; (8001694 <performPressureMeasurement+0x15c>)
 8001548:	f005 fc8c 	bl	8006e64 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800154c:	2064      	movs	r0, #100	; 0x64
 800154e:	f003 fae9 	bl	8004b24 <HAL_Delay>

	//Define pressure sensor
	lps28dfw_info_t sensorInfo1;
	sensorInfo1.handle = handle;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	613b      	str	r3, [r7, #16]

	//Connect to pressure sensor
	if(beginLPS28(&sensorInfo1, LPS28DFW_I2C_ADDRESS_DEFAULT) == LPS28DFW_OK)
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	215c      	movs	r1, #92	; 0x5c
 800155c:	4618      	mov	r0, r3
 800155e:	f002 f95d 	bl	800381c <beginLPS28>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 8088 	bne.w	800167a <performPressureMeasurement+0x142>
	{

		//Configure pressure sensor for best performance
		lps28dfw_md_t modeConfig =
 800156a:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <performPressureMeasurement+0x160>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	60fb      	str	r3, [r7, #12]
			.fs  = fs_LPS28DFW_1260hPa,      // Full scale range
			.odr = odr_LPS28DFW_4Hz,         // Output data rate
			.avg = avg_LPS28DFW_512_AVG,      // Average filter
			.lpf = lpf_LPS28DFW_LPF_ODR_DIV_9 // Low-pass filter
		};
		setModeConfig(&sensorInfo1, &modeConfig);
 8001570:	f107 020c 	add.w	r2, r7, #12
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f002 f9a3 	bl	80038c6 <setModeConfig>

		//Delay for pressure sensor to configure
		HAL_Delay(100);
 8001580:	2064      	movs	r0, #100	; 0x64
 8001582:	f003 facf 	bl	8004b24 <HAL_Delay>

		//Retrieve 4 values and get their average
		double runnningPressureValue = 0;
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		double runnningTemperatureValue = 0;
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		for(int i = 0;i<4;i++){
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a2:	e027      	b.n	80015f4 <performPressureMeasurement+0xbc>
			//get sensor value
			getSensorData(&sensorInfo1);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fb39 	bl	8003c20 <getSensorData>
			//add pressure value to running value
			runnningPressureValue += sensorInfo1.data.pressure.hpa;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffc9 	bl	8000548 <__aeabi_f2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80015be:	f7fe fe65 	bl	800028c <__adddf3>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			//add temperature value to running value
			runnningTemperatureValue += sensorInfo1.data.heat.deg_c;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffbb 	bl	8000548 <__aeabi_f2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015da:	f7fe fe57 	bl	800028c <__adddf3>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			//Have a delay to measure a new value
			HAL_Delay(300);
 80015e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015ea:	f003 fa9b 	bl	8004b24 <HAL_Delay>
		for(int i = 0;i<4;i++){
 80015ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f0:	3301      	adds	r3, #1
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	ddd4      	ble.n	80015a4 <performPressureMeasurement+0x6c>
		}

		//Retrieve average value
		runnningPressureValue = runnningPressureValue/4;
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <performPressureMeasurement+0x164>)
 8001600:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001604:	f7ff f922 	bl	800084c <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		runnningTemperatureValue = runnningTemperatureValue/4;
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <performPressureMeasurement+0x164>)
 8001616:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800161a:	f7ff f917 	bl	800084c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		//Add pressure data to measurement structure
		data->waterPressureValue = (uint32_t)(runnningPressureValue*100);
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <performPressureMeasurement+0x168>)
 800162c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001630:	f7fe ffe2 	bl	80005f8 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fab4 	bl	8000ba8 <__aeabi_d2uiz>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	605a      	str	r2, [r3, #4]
		data->undergroundTemperatureValue = (uint16_t)(runnningTemperatureValue*100);
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <performPressureMeasurement+0x168>)
 800164e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001652:	f7fe ffd1 	bl	80005f8 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff faa3 	bl	8000ba8 <__aeabi_d2uiz>
 8001662:	4603      	mov	r3, r0
 8001664:	b29b      	uxth	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	60da      	str	r2, [r3, #12]

		printf("\r\n Measured pressure: %d", data->waterPressureValue);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4619      	mov	r1, r3
 8001672:	480c      	ldr	r0, [pc, #48]	; (80016a4 <performPressureMeasurement+0x16c>)
 8001674:	f00b fcde 	bl	800d034 <iprintf>
 8001678:	e002      	b.n	8001680 <performPressureMeasurement+0x148>

	}
	else{

		printf("\r\nCould not connect to pressure sensor");
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <performPressureMeasurement+0x170>)
 800167c:	f00b fcda 	bl	800d034 <iprintf>

	}

	//Power off pressure measuring device
	HAL_GPIO_WritePin(i2cGPIO, i2cGPIOPin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <performPressureMeasurement+0x15c>)
 8001686:	f005 fbed 	bl	8006e64 <HAL_GPIO_WritePin>

}
 800168a:	bf00      	nop
 800168c:	3740      	adds	r7, #64	; 0x40
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	48000400 	.word	0x48000400
 8001698:	08011880 	.word	0x08011880
 800169c:	40100000 	.word	0x40100000
 80016a0:	40590000 	.word	0x40590000
 80016a4:	0801183c 	.word	0x0801183c
 80016a8:	08011858 	.word	0x08011858

080016ac <performTemperatureMeasurement>:

//Function to perform temperature measurement
void performTemperatureMeasurement(SPI_HandleTypeDef* handle, struct measurementData* data){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]

	//Power on temperature measuring device
	HAL_GPIO_WritePin(spiGPIO, spiGPIOPin, GPIO_PIN_SET); //temperature activation pin
 80016b6:	2201      	movs	r2, #1
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	482b      	ldr	r0, [pc, #172]	; (8001768 <performTemperatureMeasurement+0xbc>)
 80016bc:	f005 fbd2 	bl	8006e64 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80016c0:	2064      	movs	r0, #100	; 0x64
 80016c2:	f003 fa2f 	bl	8004b24 <HAL_Delay>

	//Configure temperature sensor for best performance
	configureSensor(handle);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f003 f95a 	bl	8004980 <configureSensor>

	//Retrieve 4 values and get their average
	double runnningValue = 0;
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0;i<4;i++){
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e013      	b.n	8001706 <performTemperatureMeasurement+0x5a>
		//add pressure value to running value
		runnningValue += getTemperatureVal(handle);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f003 f95e 	bl	80049a0 <getTemperatureVal>
 80016e4:	ec53 2b10 	vmov	r2, r3, d0
 80016e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ec:	f7fe fdce 	bl	800028c <__adddf3>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

		//Have a delay to measure a new value
		HAL_Delay(300);
 80016f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016fc:	f003 fa12 	bl	8004b24 <HAL_Delay>
	for(int i = 0;i<4;i++){
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3301      	adds	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b03      	cmp	r3, #3
 800170a:	dde8      	ble.n	80016de <performTemperatureMeasurement+0x32>
	}

	//Retrieve average value
	runnningValue = runnningValue/4;
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <performTemperatureMeasurement+0xc0>)
 8001712:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001716:	f7ff f899 	bl	800084c <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	//Add temperature data to measurement structure
	data->surfaceTemperatureValue = (uint16_t)(runnningValue*100);
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <performTemperatureMeasurement+0xc4>)
 8001728:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800172c:	f7fe ff64 	bl	80005f8 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff fa36 	bl	8000ba8 <__aeabi_d2uiz>
 800173c:	4603      	mov	r3, r0
 800173e:	b29b      	uxth	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	609a      	str	r2, [r3, #8]

	printf("\r\nMeasured temperature: %f", getTemperatureVal(handle));
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f003 f92a 	bl	80049a0 <getTemperatureVal>
 800174c:	ec53 2b10 	vmov	r2, r3, d0
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <performTemperatureMeasurement+0xc8>)
 8001752:	f00b fc6f 	bl	800d034 <iprintf>

	//Power off temperature measuring device
	HAL_GPIO_WritePin(spiGPIO, spiGPIOPin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <performTemperatureMeasurement+0xbc>)
 800175c:	f005 fb82 	bl	8006e64 <HAL_GPIO_WritePin>
}
 8001760:	bf00      	nop
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	48000400 	.word	0x48000400
 800176c:	40100000 	.word	0x40100000
 8001770:	40590000 	.word	0x40590000
 8001774:	08011884 	.word	0x08011884

08001778 <checkBattery>:

//Function to check battery state
void checkBattery(ADC_HandleTypeDef* adcHandle1, struct measurementData* data){
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]

	printf("\r\nChecking battery");
 8001782:	4845      	ldr	r0, [pc, #276]	; (8001898 <checkBattery+0x120>)
 8001784:	f00b fc56 	bl	800d034 <iprintf>

	//Set up the ADC channel for battery checking
	ADC_ChannelConfTypeDef sConfig = {0};
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]

	//set all config parameters
	sConfig.Channel = ADC_CHANNEL_6;
 800179a:	4b40      	ldr	r3, [pc, #256]	; (800189c <checkBattery+0x124>)
 800179c:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800179e:	2306      	movs	r3, #6
 80017a0:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017a6:	237f      	movs	r3, #127	; 0x7f
 80017a8:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017aa:	2304      	movs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
	  //Set active config channel
	  if (HAL_ADC_ConfigChannel(adcHandle1, &sConfig) != HAL_OK)
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f003 ff4f 	bl	800565c <HAL_ADC_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <checkBattery+0x50>
	  {
		Error_Handler();
 80017c4:	f001 f8d2 	bl	800296c <Error_Handler>
	  }

	 //Power on battery connection device
	 HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	4834      	ldr	r0, [pc, #208]	; (80018a0 <checkBattery+0x128>)
 80017ce:	f005 fb49 	bl	8006e64 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 80017d2:	2064      	movs	r0, #100	; 0x64
 80017d4:	f003 f9a6 	bl	8004b24 <HAL_Delay>

	 //Retrive ADC data from battery channel
	 HAL_ADC_Start(adcHandle1);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f003 fd6b 	bl	80052b4 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(adcHandle1, 0xFFFF);
 80017de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f003 fe54 	bl	8005490 <HAL_ADC_PollForConversion>
	 uint16_t ADC_value = HAL_ADC_GetValue(adcHandle1);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f003 ff29 	bl	8005640 <HAL_ADC_GetValue>
 80017ee:	4603      	mov	r3, r0
 80017f0:	84fb      	strh	r3, [r7, #38]	; 0x26

	 //Calculate battery voltage based on ADC value
	 float voltage = ((ADC_value /4096.0) * Vref);
 80017f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe95 	bl	8000524 <__aeabi_i2d>
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <checkBattery+0x12c>)
 8001800:	f7ff f824 	bl	800084c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	a31e      	add	r3, pc, #120	; (adr r3, 8001888 <checkBattery+0x110>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe fef1 	bl	80005f8 <__aeabi_dmul>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f9e3 	bl	8000be8 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	623b      	str	r3, [r7, #32]
	 printf("ADC=%hu, Voltage= %.2f\r\n", ADC_value, voltage);
 8001826:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8001828:	6a38      	ldr	r0, [r7, #32]
 800182a:	f7fe fe8d 	bl	8000548 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4621      	mov	r1, r4
 8001834:	481c      	ldr	r0, [pc, #112]	; (80018a8 <checkBattery+0x130>)
 8001836:	f00b fbfd 	bl	800d034 <iprintf>
	 HAL_Delay(100);
 800183a:	2064      	movs	r0, #100	; 0x64
 800183c:	f003 f972 	bl	8004b24 <HAL_Delay>
	 /*higher voltage will be detected from the second battery*/
	 /*if the ADC pin detects a higher voltage turn on at second battery terminal*/
	 /*comm pin*/

	//Confirm if voltage specifies that first battery is depleted
	if (voltage > VOLTAGE_THRESHOLD){
 8001840:	6a38      	ldr	r0, [r7, #32]
 8001842:	f7fe fe81 	bl	8000548 <__aeabi_f2d>
 8001846:	a312      	add	r3, pc, #72	; (adr r3, 8001890 <checkBattery+0x118>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7ff f964 	bl	8000b18 <__aeabi_dcmpgt>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <checkBattery+0xec>
		 printf("First battery depleted");
 8001856:	4815      	ldr	r0, [pc, #84]	; (80018ac <checkBattery+0x134>)
 8001858:	f00b fbec 	bl	800d034 <iprintf>
		 data->batteryStatus = 0;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	e002      	b.n	800186a <checkBattery+0xf2>
	}
	 else{
		 printf("first battery ok");
 8001864:	4812      	ldr	r0, [pc, #72]	; (80018b0 <checkBattery+0x138>)
 8001866:	f00b fbe5 	bl	800d034 <iprintf>
	 }

	//Power off battery connection device
	 HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	480c      	ldr	r0, [pc, #48]	; (80018a0 <checkBattery+0x128>)
 8001870:	f005 faf8 	bl	8006e64 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8001874:	2064      	movs	r0, #100	; 0x64
 8001876:	f003 f955 	bl	8004b24 <HAL_Delay>

}
 800187a:	bf00      	nop
 800187c:	372c      	adds	r7, #44	; 0x2c
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	f3af 8000 	nop.w
 8001888:	66666666 	.word	0x66666666
 800188c:	400a6666 	.word	0x400a6666
 8001890:	66666666 	.word	0x66666666
 8001894:	40066666 	.word	0x40066666
 8001898:	080118a0 	.word	0x080118a0
 800189c:	19200040 	.word	0x19200040
 80018a0:	48000400 	.word	0x48000400
 80018a4:	40b00000 	.word	0x40b00000
 80018a8:	080118b4 	.word	0x080118b4
 80018ac:	080118d0 	.word	0x080118d0
 80018b0:	080118e8 	.word	0x080118e8

080018b4 <setRfListening>:

//Function listen to listen for RF requests
void setRfListening(struct measurementData* data, struct rfDataStorage* rfData, struct CommunicationHandles* handles){
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b0a1      	sub	sp, #132	; 0x84
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]

	//Power on battery communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET); //rf activation pin
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c6:	48bb      	ldr	r0, [pc, #748]	; (8001bb4 <setRfListening+0x300>)
 80018c8:	f005 facc 	bl	8006e64 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80018cc:	2064      	movs	r0, #100	; 0x64
 80018ce:	f003 f929 	bl	8004b24 <HAL_Delay>

	//Read management data from flash memory
	uint64_t managementBuf[managementDataNum];
	Flash_Read_Data(managementDataAddr, managementBuf, managementDataNum);
 80018d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d6:	2205      	movs	r2, #5
 80018d8:	4619      	mov	r1, r3
 80018da:	48b7      	ldr	r0, [pc, #732]	; (8001bb8 <setRfListening+0x304>)
 80018dc:	f7ff fd42 	bl	8001364 <Flash_Read_Data>

	//Initialize communications with retrieved device ID and discover flag
	init_comms(rfData, DEVICE_CHILD, managementBuf[0], managementBuf[3]);
 80018e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018e4:	4611      	mov	r1, r2
 80018e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018ea:	4613      	mov	r3, r2
 80018ec:	460a      	mov	r2, r1
 80018ee:	2199      	movs	r1, #153	; 0x99
 80018f0:	68b8      	ldr	r0, [r7, #8]
 80018f2:	f002 f9c2 	bl	8003c7a <init_comms>


	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	22fe      	movs	r2, #254	; 0xfe
 80018fa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_SEND_DATA;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2246      	movs	r2, #70	; 0x46
 8001902:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	//Specify child device as sender
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0xFF;
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	889b      	ldrh	r3, [r3, #4]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = (rfData->myDevice.device_id>>8)&0xFF;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	889b      	ldrh	r3, [r3, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29b      	uxth	r3, r3
 800191a:	b2da      	uxtb	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	//Specify mother as received
	rfData->activeTxMessage[MSG_TO_ID_POS1] = managementBuf[1]&0xFF;
 8001922:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = (managementBuf[1]>>8)&0xFF;
 800192e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	0a02      	lsrs	r2, r0, #8
 800193c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001940:	0a0b      	lsrs	r3, r1, #8
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = managementBuf[4];
 8001952:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	printf("\r\nmeasurement data to send: %d, %d, %d, %d, %d", data->depthValue, data->waterPressureValue, data->surfaceTemperatureValue, data->undergroundTemperatureValue, data->batteryStatus);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6858      	ldr	r0, [r3, #4]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	689c      	ldr	r4, [r3, #8]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	6912      	ldr	r2, [r2, #16]
 8001972:	9201      	str	r2, [sp, #4]
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	4623      	mov	r3, r4
 8001978:	4602      	mov	r2, r0
 800197a:	4890      	ldr	r0, [pc, #576]	; (8001bbc <setRfListening+0x308>)
 800197c:	f00b fb5a 	bl	800d034 <iprintf>

	//Encode data from measurement structure into bytes
	uint8_t encodedDataSize = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t encodedData[20];
	encodeMeasurementData(data, encodedData, &encodedDataSize);
 8001986:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800198a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198e:	4619      	mov	r1, r3
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff fb31 	bl	8000ff8 <encodeMeasurementData>

	//Add bytes into RF message
	for(int i = 0;i<encodedDataSize;i++){
 8001996:	2300      	movs	r3, #0
 8001998:	677b      	str	r3, [r7, #116]	; 0x74
 800199a:	e00e      	b.n	80019ba <setRfListening+0x106>

		rfData->activeTxMessage[MSG_BODY_START+i] = encodedData[i];
 800199c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800199e:	3309      	adds	r3, #9
 80019a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019a6:	440a      	add	r2, r1
 80019a8:	7811      	ldrb	r1, [r2, #0]
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	4413      	add	r3, r2
 80019ae:	460a      	mov	r2, r1
 80019b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	for(int i = 0;i<encodedDataSize;i++){
 80019b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019b6:	3301      	adds	r3, #1
 80019b8:	677b      	str	r3, [r7, #116]	; 0x74
 80019ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019be:	461a      	mov	r2, r3
 80019c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019c2:	4293      	cmp	r3, r2
 80019c4:	dbea      	blt.n	800199c <setRfListening+0xe8>

	}
	//Specify overall measuremetn data size in bytes
	rfData->activeTxMessageSize = encodedDataSize;
 80019c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	//DEfine how long child device should be listening to mother device
	int listening = 1;
 80019dc:	2301      	movs	r3, #1
 80019de:	673b      	str	r3, [r7, #112]	; 0x70
	int listeningCounter = 500;
 80019e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019e4:	66fb      	str	r3, [r7, #108]	; 0x6c

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f107 0114 	add.w	r1, r7, #20
 80019ee:	2200      	movs	r2, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f007 fa48 	bl	8008e86 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(handles->RTChandle, &sDate, RTC_FORMAT_BIN);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f107 0110 	add.w	r1, r7, #16
 80019fe:	2200      	movs	r2, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f007 fb23 	bl	800904c <HAL_RTC_GetDate>
	//Listen for mother device
	while(listening){
 8001a06:	e0c6      	b.n	8001b96 <setRfListening+0x2e2>

		//Handle received messages
		Comms_Handler(rfData);
 8001a08:	68b8      	ldr	r0, [r7, #8]
 8001a0a:	f002 f984 	bl	8003d16 <Comms_Handler>
		printf("\r\nListening of mother device");
 8001a0e:	486c      	ldr	r0, [pc, #432]	; (8001bc0 <setRfListening+0x30c>)
 8001a10:	f00b fb10 	bl	800d034 <iprintf>
		//iterate over potential messages list
		for(int i = 0; i<rfData->messageNum; i++){
 8001a14:	2300      	movs	r3, #0
 8001a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a18:	e0a9      	b.n	8001b6e <setRfListening+0x2ba>
			printf("\r\nmessage %d type: %x", i, rfData->activeRxMessage[i][MSG_TYPE_POS]);
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	33af      	adds	r3, #175	; 0xaf
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001a30:	4864      	ldr	r0, [pc, #400]	; (8001bc4 <setRfListening+0x310>)
 8001a32:	f00b faff 	bl	800d034 <iprintf>

			//If the "Done" message was received
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_DONE){
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	33af      	adds	r3, #175	; 0xaf
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b48      	cmp	r3, #72	; 0x48
 8001a4a:	d16a      	bne.n	8001b22 <setRfListening+0x26e>

				printf("scan done, received time: %d %d %d", rfData->activeRxMessage[i][MSG_BODY_START], rfData->activeRxMessage[i][MSG_BODY_START+1], rfData->activeRxMessage[i][MSG_BODY_START+2]);
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	33b7      	adds	r3, #183	; 0xb7
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	33b8      	adds	r3, #184	; 0xb8
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461c      	mov	r4, r3
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	33b9      	adds	r3, #185	; 0xb9
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	4622      	mov	r2, r4
 8001a88:	4601      	mov	r1, r0
 8001a8a:	484f      	ldr	r0, [pc, #316]	; (8001bc8 <setRfListening+0x314>)
 8001a8c:	f00b fad2 	bl	800d034 <iprintf>

				//Define time received by mother device
				sTime.Hours = rfData->activeRxMessage[i][MSG_BODY_START];
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	33b7      	adds	r3, #183	; 0xb7
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	753b      	strb	r3, [r7, #20]
				sTime.Minutes = rfData->activeRxMessage[i][MSG_BODY_START+1];
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	33b8      	adds	r3, #184	; 0xb8
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	757b      	strb	r3, [r7, #21]
				sTime.Seconds = rfData->activeRxMessage[i][MSG_BODY_START+2];
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	33b9      	adds	r3, #185	; 0xb9
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	75bb      	strb	r3, [r7, #22]

				//Set latest time received by mother device to synchronize the devices
				if (HAL_RTC_SetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f107 0114 	add.w	r1, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f007 f938 	bl	8008d4c <HAL_RTC_SetTime>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <setRfListening+0x232>
				{
					//printf("Could not set time");
					Error_Handler();
 8001ae2:	f000 ff43 	bl	800296c <Error_Handler>
				}

				//Wait a delay
				HAL_Delay(1000);
 8001ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aea:	f003 f81b 	bl	8004b24 <HAL_Delay>

				//Forward the message further in addition to the default forwarding
				Send(rfData->activeRxMessage[i], rfData->activeRxMessage[i][MSG_SIZE_POS]+MSG_BODY_START);
 8001aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	33a8      	adds	r3, #168	; 0xa8
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	4413      	add	r3, r2
 8001afe:	1d98      	adds	r0, r3, #6
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	33b6      	adds	r3, #182	; 0xb6
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	3309      	adds	r3, #9
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4619      	mov	r1, r3
 8001b18:	f002 fd82 	bl	8004620 <Send>

				listening = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8001b20:	e02d      	b.n	8001b7e <setRfListening+0x2ca>
			}
			//If data is requested by mother device
			if (rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_GIVE_DATA)
 8001b22:	68b9      	ldr	r1, [r7, #8]
 8001b24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	33af      	adds	r3, #175	; 0xaf
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b47      	cmp	r3, #71	; 0x47
 8001b36:	d117      	bne.n	8001b68 <setRfListening+0x2b4>
			{
				if(rfData->toID[rfData->messageNum] == rfData->myDevice.device_id){
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	3344      	adds	r3, #68	; 0x44
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	88da      	ldrh	r2, [r3, #6]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	889b      	ldrh	r3, [r3, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d10b      	bne.n	8001b68 <setRfListening+0x2b4>
					//Send predefined data to mother deivce
					Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b5c:	3309      	adds	r3, #9
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f002 fd5c 	bl	8004620 <Send>
		for(int i = 0; i<rfData->messageNum; i++){
 8001b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001b74:	461a      	mov	r2, r3
 8001b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	f6ff af4e 	blt.w	8001a1a <setRfListening+0x166>
			}

		}

		//Stop listening if counter is done
		if(listeningCounter<=0){
 8001b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	dc02      	bgt.n	8001b8a <setRfListening+0x2d6>

			listening = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	673b      	str	r3, [r7, #112]	; 0x70
 8001b88:	e005      	b.n	8001b96 <setRfListening+0x2e2>

		}
		else{
			//Update counter
			listeningCounter--;
 8001b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
			HAL_Delay(200);
 8001b90:	20c8      	movs	r0, #200	; 0xc8
 8001b92:	f002 ffc7 	bl	8004b24 <HAL_Delay>
	while(listening){
 8001b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f47f af35 	bne.w	8001a08 <setRfListening+0x154>
		}

	}

	//Power off battery communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba4:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <setRfListening+0x300>)
 8001ba6:	f005 f95d 	bl	8006e64 <HAL_GPIO_WritePin>
}
 8001baa:	bf00      	nop
 8001bac:	377c      	adds	r7, #124	; 0x7c
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	08019000 	.word	0x08019000
 8001bbc:	080118fc 	.word	0x080118fc
 8001bc0:	0801192c 	.word	0x0801192c
 8001bc4:	0801194c 	.word	0x0801194c
 8001bc8:	08011964 	.word	0x08011964

08001bcc <powerDownDevices>:

//Fucntion to power down all externally connected devices
void powerDownDevices(){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0

	//Power down all available peripherals
	HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_RESET); //depth
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2180      	movs	r1, #128	; 0x80
 8001bd4:	480a      	ldr	r0, [pc, #40]	; (8001c00 <powerDownDevices+0x34>)
 8001bd6:	f005 f945 	bl	8006e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(i2cGPIO, i2cGPIOPin, GPIO_PIN_RESET); //pressure
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	4808      	ldr	r0, [pc, #32]	; (8001c00 <powerDownDevices+0x34>)
 8001be0:	f005 f940 	bl	8006e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(spiGPIO, spiGPIOPin, GPIO_PIN_RESET); //temperature
 8001be4:	2200      	movs	r2, #0
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <powerDownDevices+0x34>)
 8001bea:	f005 f93b 	bl	8006e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET); //rf
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <powerDownDevices+0x34>)
 8001bf6:	f005 f935 	bl	8006e64 <HAL_GPIO_WritePin>

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	48000400 	.word	0x48000400

08001c04 <synchronizationSetup>:

//Function to perform child device setup and synchronization with mother device
void synchronizationSetup(struct rfDataStorage* rfData, struct CommunicationHandles* handles){
 8001c04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c08:	b094      	sub	sp, #80	; 0x50
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]

	//Systemtile holder
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f007 f933 	bl	8008e86 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(handles->RTChandle, &sDate, RTC_FORMAT_BIN);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f007 fa0e 	bl	800904c <HAL_RTC_GetDate>

	//Read device data from
	uint64_t managementBuf[managementDataNum];
	Flash_Read_Data(managementDataAddr, managementBuf, managementDataNum);
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	2205      	movs	r2, #5
 8001c36:	4619      	mov	r1, r3
 8001c38:	4872      	ldr	r0, [pc, #456]	; (8001e04 <synchronizationSetup+0x200>)
 8001c3a:	f7ff fb93 	bl	8001364 <Flash_Read_Data>

	//Initialize communications with retrieved device ID and discover flag
	init_comms(rfData, DEVICE_CHILD, managementBuf[0], 0);
 8001c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c42:	2300      	movs	r3, #0
 8001c44:	2199      	movs	r1, #153	; 0x99
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f002 f817 	bl	8003c7a <init_comms>

	//Specify child device as sender
	//rfData->activeTxMessage[MSG_FROM_ID_POS1] = managementBuf[0]&0xFF;
	//rfData->activeTxMessage[MSG_FROM_ID_POS2] = (managementBuf[0]>>8)&0xFF;

	printf("sent ID: %d->%d and %d", (uint16_t)managementBuf[1], rfData->activeTxMessage[MSG_FROM_ID_POS2], rfData->activeTxMessage[MSG_FROM_ID_POS1]);
 8001c4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c50:	b293      	uxth	r3, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8001c62:	4869      	ldr	r0, [pc, #420]	; (8001e08 <synchronizationSetup+0x204>)
 8001c64:	f00b f9e6 	bl	800d034 <iprintf>

	int listening = 1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	64fb      	str	r3, [r7, #76]	; 0x4c

	//Power on battery communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET); //rf activation pin
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c72:	4866      	ldr	r0, [pc, #408]	; (8001e0c <synchronizationSetup+0x208>)
 8001c74:	f005 f8f6 	bl	8006e64 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c78:	2064      	movs	r0, #100	; 0x64
 8001c7a:	f002 ff53 	bl	8004b24 <HAL_Delay>

	while(listening){
 8001c7e:	e0aa      	b.n	8001dd6 <synchronizationSetup+0x1d2>
		printf("\r\nsignaling from id: %d", rfData->myDevice.device_id);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	889b      	ldrh	r3, [r3, #4]
 8001c84:	4619      	mov	r1, r3
 8001c86:	4862      	ldr	r0, [pc, #392]	; (8001e10 <synchronizationSetup+0x20c>)
 8001c88:	f00b f9d4 	bl	800d034 <iprintf>

		//Handle received messages
		Comms_Handler(rfData);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f002 f842 	bl	8003d16 <Comms_Handler>

		//iterate over potential messages list
		for(int i = 0; i<rfData->messageNum; i++){
 8001c92:	2300      	movs	r3, #0
 8001c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c96:	e093      	b.n	8001dc0 <synchronizationSetup+0x1bc>

			printf("message %d type: %x", i, rfData->activeRxMessage[i][MSG_TYPE_POS]);
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	33af      	adds	r3, #175	; 0xaf
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001cae:	4859      	ldr	r0, [pc, #356]	; (8001e14 <synchronizationSetup+0x210>)
 8001cb0:	f00b f9c0 	bl	800d034 <iprintf>
			//If "You There" was received from mother device
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_YOUR_THERE)
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	33af      	adds	r3, #175	; 0xaf
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b45      	cmp	r3, #69	; 0x45
 8001cc8:	d177      	bne.n	8001dba <synchronizationSetup+0x1b6>
			{
				printf("Comparing IDs: %d and %d", rfData->myDevice.device_id, rfData->toID[i]);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	889b      	ldrh	r3, [r3, #4]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd4:	3344      	adds	r3, #68	; 0x44
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	88db      	ldrh	r3, [r3, #6]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	484e      	ldr	r0, [pc, #312]	; (8001e18 <synchronizationSetup+0x214>)
 8001ce0:	f00b f9a8 	bl	800d034 <iprintf>
				if(rfData->myDevice.device_id == rfData->toID[i])
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	889a      	ldrh	r2, [r3, #4]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cec:	3344      	adds	r3, #68	; 0x44
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	440b      	add	r3, r1
 8001cf2:	88db      	ldrh	r3, [r3, #6]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d160      	bne.n	8001dba <synchronizationSetup+0x1b6>
				{
					//Set device as discovered
					rfData->myDevice.device_is_discovered = true;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	721a      	strb	r2, [r3, #8]

					//Set time value received from mother device
					sTime.Hours = rfData->activeRxMessage[i][MSG_BODY_START];
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	33b7      	adds	r3, #183	; 0xb7
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					sTime.Minutes = rfData->activeRxMessage[i][MSG_BODY_START+1];
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	33b8      	adds	r3, #184	; 0xb8
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					sTime.Seconds = rfData->activeRxMessage[i][MSG_BODY_START+2];
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	33b9      	adds	r3, #185	; 0xb9
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

					printf("Device discovered, time set to: %d::%d::%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001d40:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d44:	4619      	mov	r1, r3
 8001d46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d50:	4832      	ldr	r0, [pc, #200]	; (8001e1c <synchronizationSetup+0x218>)
 8001d52:	f00b f96f 	bl	800d034 <iprintf>

					//Set time received by mother device to synchronize the devices
					if (HAL_RTC_SetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f006 fff3 	bl	8008d4c <HAL_RTC_SetTime>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <synchronizationSetup+0x172>
					{
						printf("Error setting time");
 8001d6c:	482c      	ldr	r0, [pc, #176]	; (8001e20 <synchronizationSetup+0x21c>)
 8001d6e:	f00b f961 	bl	800d034 <iprintf>
						Error_Handler();
 8001d72:	f000 fdfb 	bl	800296c <Error_Handler>
					}

					//Set configuration flags for device discovery
					if(!managementBuf[3]){
 8001d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	d11a      	bne.n	8001db4 <synchronizationSetup+0x1b0>
						managementBuf[1] = rfData->fromID[i]; //Found mother device ID
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d82:	3340      	adds	r3, #64	; 0x40
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	889b      	ldrh	r3, [r3, #4]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	461c      	mov	r4, r3
 8001d90:	4615      	mov	r5, r2
 8001d92:	e9c7 4504 	strd	r4, r5, [r7, #16]
						managementBuf[3] = 1; //discovered flag
 8001d96:	f04f 0201 	mov.w	r2, #1
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
						//specified required number of mesh hops to reach mother device
						managementBuf[4] = rfData->activeTxMessage[MSG_NUM_HOPS_POS];
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2200      	movs	r2, #0
 8001dac:	4698      	mov	r8, r3
 8001dae:	4691      	mov	r9, r2
 8001db0:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28

					}

					listening = false;
 8001db4:	2300      	movs	r3, #0
 8001db6:	64fb      	str	r3, [r7, #76]	; 0x4c
					break;
 8001db8:	e00a      	b.n	8001dd0 <synchronizationSetup+0x1cc>
		for(int i = 0; i<rfData->messageNum; i++){
 8001dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	f6ff af64 	blt.w	8001c98 <synchronizationSetup+0x94>
				}

			}

		}
		HAL_Delay(100);
 8001dd0:	2064      	movs	r0, #100	; 0x64
 8001dd2:	f002 fea7 	bl	8004b24 <HAL_Delay>
	while(listening){
 8001dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f47f af51 	bne.w	8001c80 <synchronizationSetup+0x7c>
	}

	//Power off battery communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de4:	4809      	ldr	r0, [pc, #36]	; (8001e0c <synchronizationSetup+0x208>)
 8001de6:	f005 f83d 	bl	8006e64 <HAL_GPIO_WritePin>

	//Write updated device data to flash memory
	Flash_Write_Data(managementDataAddr, managementBuf, managementDataNum);
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	2205      	movs	r2, #5
 8001df0:	4619      	mov	r1, r3
 8001df2:	4804      	ldr	r0, [pc, #16]	; (8001e04 <synchronizationSetup+0x200>)
 8001df4:	f7ff fa48 	bl	8001288 <Flash_Write_Data>

}
 8001df8:	bf00      	nop
 8001dfa:	3750      	adds	r7, #80	; 0x50
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e02:	bf00      	nop
 8001e04:	08019000 	.word	0x08019000
 8001e08:	08011988 	.word	0x08011988
 8001e0c:	48000400 	.word	0x48000400
 8001e10:	080119a0 	.word	0x080119a0
 8001e14:	080119b8 	.word	0x080119b8
 8001e18:	080119cc 	.word	0x080119cc
 8001e1c:	080119e8 	.word	0x080119e8
 8001e20:	08011a14 	.word	0x08011a14

08001e24 <memorySetup>:

//Function to setup memory for operation
void memorySetup(){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b098      	sub	sp, #96	; 0x60
 8001e28:	af00      	add	r7, sp, #0

	//Retrive management data from flash memory
	uint64_t setupData[managementDataNum];
	Flash_Read_Data(managementDataAddr, setupData, managementDataNum);
 8001e2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e2e:	2205      	movs	r2, #5
 8001e30:	4619      	mov	r1, r3
 8001e32:	4810      	ldr	r0, [pc, #64]	; (8001e74 <memorySetup+0x50>)
 8001e34:	f7ff fa96 	bl	8001364 <Flash_Read_Data>

	//Set setup flag, implying that setup is complete
	setupData[2] = 1;
 8001e38:	f04f 0201 	mov.w	r2, #1
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	//Write refreshed setup data
	Flash_Write_Data(managementDataAddr, setupData, managementDataNum);
 8001e44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e48:	2205      	movs	r2, #5
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4809      	ldr	r0, [pc, #36]	; (8001e74 <memorySetup+0x50>)
 8001e4e:	f7ff fa1b 	bl	8001288 <Flash_Write_Data>

	//Refresh all depth calibration values
	uint64_t depthVariables[numberOfDepthVariables] = {0,0,0,0,0,0,0};
 8001e52:	463b      	mov	r3, r7
 8001e54:	2238      	movs	r2, #56	; 0x38
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f00a f989 	bl	800c170 <memset>
	Flash_Write_Data(depthVariablesStartAddr, depthVariables, numberOfDepthVariables);
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2207      	movs	r2, #7
 8001e62:	4619      	mov	r1, r3
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <memorySetup+0x54>)
 8001e66:	f7ff fa0f 	bl	8001288 <Flash_Write_Data>

}
 8001e6a:	bf00      	nop
 8001e6c:	3760      	adds	r7, #96	; 0x60
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	08019000 	.word	0x08019000
 8001e78:	0801a000 	.word	0x0801a000

08001e7c <mainSetup>:

//Function to setup device for operation
int mainSetup(struct rfDataStorage* rfData, struct CommunicationHandles* handles){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]

	//Check if user wants to reset device IDs
	if(IDhandling()){
 8001e86:	f000 f833 	bl	8001ef0 <IDhandling>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <mainSetup+0x18>
		return 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e020      	b.n	8001ed6 <mainSetup+0x5a>
	}

	//Power dewn all devices
	powerDownDevices();
 8001e94:	f7ff fe9a 	bl	8001bcc <powerDownDevices>

	//Retrieve setup bit from flash memory
	uint64_t setupBit[1];
	Flash_Read_Data(setupAddr, setupBit, 1);
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480f      	ldr	r0, [pc, #60]	; (8001ee0 <mainSetup+0x64>)
 8001ea2:	f7ff fa5f 	bl	8001364 <Flash_Read_Data>

	//Check if setup should be performed
	if(setupBit[0]!=1){
 8001ea6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eaa:	1e51      	subs	r1, r2, #1
 8001eac:	430b      	orrs	r3, r1
 8001eae:	d011      	beq.n	8001ed4 <mainSetup+0x58>

		printf("\r\nMain setup\n");
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <mainSetup+0x68>)
 8001eb2:	f00b f945 	bl	800d140 <puts>

		//Perform child device synchronization with mother device
		synchronizationSetup(rfData, handles);
 8001eb6:	6839      	ldr	r1, [r7, #0]
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fea3 	bl	8001c04 <synchronizationSetup>

		//Set memory values for setup
		printf("\r\nSynchro Done\n");
 8001ebe:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <mainSetup+0x6c>)
 8001ec0:	f00b f93e 	bl	800d140 <puts>
		memorySetup();
 8001ec4:	f7ff ffae 	bl	8001e24 <memorySetup>

		//Go into shutdown mode and start normal operation
		printf("\r\nSetup Done\n");
 8001ec8:	4808      	ldr	r0, [pc, #32]	; (8001eec <mainSetup+0x70>)
 8001eca:	f00b f939 	bl	800d140 <puts>
		setShutdownMode(handles);
 8001ece:	6838      	ldr	r0, [r7, #0]
 8001ed0:	f000 f896 	bl	8002000 <setShutdownMode>
	}
	return 1;
 8001ed4:	2301      	movs	r3, #1
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	08019010 	.word	0x08019010
 8001ee4:	08011a28 	.word	0x08011a28
 8001ee8:	08011a38 	.word	0x08011a38
 8001eec:	08011a48 	.word	0x08011a48

08001ef0 <IDhandling>:

//Function to handle device ID changes
int IDhandling(){
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b090      	sub	sp, #64	; 0x40
 8001ef4:	af00      	add	r7, sp, #0

	printf("\r\nChecking ID set pin : %d ", HAL_GPIO_ReadPin(idSetGPIO, idSetGPIOPin));
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	4837      	ldr	r0, [pc, #220]	; (8001fd8 <IDhandling+0xe8>)
 8001efa:	f004 ff9b 	bl	8006e34 <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4836      	ldr	r0, [pc, #216]	; (8001fdc <IDhandling+0xec>)
 8001f04:	f00b f896 	bl	800d034 <iprintf>

	//Check if user pressed cinfiguration button
	if(HAL_GPIO_ReadPin(idSetGPIO, idSetGPIOPin) == GPIO_PIN_SET)
 8001f08:	2104      	movs	r1, #4
 8001f0a:	4833      	ldr	r0, [pc, #204]	; (8001fd8 <IDhandling+0xe8>)
 8001f0c:	f004 ff92 	bl	8006e34 <HAL_GPIO_ReadPin>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d15a      	bne.n	8001fcc <IDhandling+0xdc>
	{
		uint64_t managementBuf[managementDataNum] = {15, 70, 0, 0, 0};
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <IDhandling+0xf0>)
 8001f18:	463c      	mov	r4, r7
 8001f1a:	461d      	mov	r5, r3
 8001f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f28:	e884 0003 	stmia.w	r4, {r0, r1}
		uint64_t rxBuf[2];
		int buf;

		//Request user to set child device ID
		printf("\r\nSet device ID");
 8001f2c:	482d      	ldr	r0, [pc, #180]	; (8001fe4 <IDhandling+0xf4>)
 8001f2e:	f00b f881 	bl	800d034 <iprintf>
		setvbuf( stdin, NULL, _IONBF, 0 );
 8001f32:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <IDhandling+0xf8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6858      	ldr	r0, [r3, #4]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f00b f92f 	bl	800d1a0 <setvbuf>
		scanf("%d", &buf);
 8001f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4828      	ldr	r0, [pc, #160]	; (8001fec <IDhandling+0xfc>)
 8001f4a:	f00b f911 	bl	800d170 <iscanf>
		printf("\r\nData to write: %ld", (uint32_t)buf);
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	4619      	mov	r1, r3
 8001f52:	4827      	ldr	r0, [pc, #156]	; (8001ff0 <IDhandling+0x100>)
 8001f54:	f00b f86e 	bl	800d034 <iprintf>
		managementBuf[0] = 15;//buf;
 8001f58:	f04f 020f 	mov.w	r2, #15
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9c7 2300 	strd	r2, r3, [r7]

		//Set other configuration flags
		managementBuf[1] = 0; //setup flag
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		managementBuf[2] = 0; //setup flag
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	e9c7 2304 	strd	r2, r3, [r7, #16]
		managementBuf[3] = 0; //device discovery flag
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9c7 2306 	strd	r2, r3, [r7, #24]
		managementBuf[4] = 0; //device mesh hops value
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9c7 2308 	strd	r2, r3, [r7, #32]

		//Write configuration data to flash memory
		if(Flash_Write_Data(IDaddressAddr, managementBuf, managementDataNum) == HAL_OK){
 8001f94:	463b      	mov	r3, r7
 8001f96:	2205      	movs	r2, #5
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4816      	ldr	r0, [pc, #88]	; (8001ff4 <IDhandling+0x104>)
 8001f9c:	f7ff f974 	bl	8001288 <Flash_Write_Data>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <IDhandling+0xd2>

			//Read written ID values for confirmation
			Flash_Read_Data(IDaddressAddr, rxBuf, 2);
 8001fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001faa:	2202      	movs	r2, #2
 8001fac:	4619      	mov	r1, r3
 8001fae:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <IDhandling+0x104>)
 8001fb0:	f7ff f9d8 	bl	8001364 <Flash_Read_Data>
			printf("\r\nID set to %ld", (uint32_t)managementBuf[0]);
 8001fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480e      	ldr	r0, [pc, #56]	; (8001ff8 <IDhandling+0x108>)
 8001fbe:	f00b f839 	bl	800d034 <iprintf>

		}

		printf("\r\nSetup bit set to zero");
 8001fc2:	480e      	ldr	r0, [pc, #56]	; (8001ffc <IDhandling+0x10c>)
 8001fc4:	f00b f836 	bl	800d034 <iprintf>

		return 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <IDhandling+0xde>
	}

	return 0;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3740      	adds	r7, #64	; 0x40
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	48000400 	.word	0x48000400
 8001fdc:	08011a58 	.word	0x08011a58
 8001fe0:	08011ac8 	.word	0x08011ac8
 8001fe4:	08011a74 	.word	0x08011a74
 8001fe8:	2000002c 	.word	0x2000002c
 8001fec:	08011a84 	.word	0x08011a84
 8001ff0:	08011a88 	.word	0x08011a88
 8001ff4:	08019000 	.word	0x08019000
 8001ff8:	08011aa0 	.word	0x08011aa0
 8001ffc:	08011ab0 	.word	0x08011ab0

08002000 <setShutdownMode>:

//Function to to let device go into shutdown mode
void setShutdownMode(){
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	//__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
	//__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	//__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WRFBUSY);

	//Suspend system tick to prevent device from waking up beforehand
	powerDownDevices();
 8002004:	f7ff fde2 	bl	8001bcc <powerDownDevices>
	printf("\r\nEntering Shutdown Mode");
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <setShutdownMode+0x1c>)
 800200a:	f00b f813 	bl	800d034 <iprintf>
	HAL_SuspendTick();
 800200e:	f002 fdad 	bl	8004b6c <HAL_SuspendTick>
	HAL_PWREx_EnterSHUTDOWNMode();
 8002012:	f005 fd3d 	bl	8007a90 <HAL_PWREx_EnterSHUTDOWNMode>

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	08011af0 	.word	0x08011af0

08002020 <mainOperation>:

//Function to perform main device operation
void mainOperation(struct rfDataStorage* rfData, struct CommunicationHandles* handles)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
	printf("\r\nMain Operation");
 800202a:	4822      	ldr	r0, [pc, #136]	; (80020b4 <mainOperation+0x94>)
 800202c:	f00b f802 	bl	800d034 <iprintf>

	//Define measurement data structure
	struct measurementData data;
	data.depthValue = -46;
 8002030:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 8002034:	60fb      	str	r3, [r7, #12]
	data.waterPressureValue = 65700;
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <mainOperation+0x98>)
 8002038:	613b      	str	r3, [r7, #16]
	data.surfaceTemperatureValue = -5;
 800203a:	f06f 0304 	mvn.w	r3, #4
 800203e:	617b      	str	r3, [r7, #20]
	data.undergroundTemperatureValue = 7;
 8002040:	2307      	movs	r3, #7
 8002042:	61bb      	str	r3, [r7, #24]
	data.batteryStatus = 1;
 8002044:	2301      	movs	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
	HAL_RTC_GetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(handles->RTChandle, &sDate, RTC_FORMAT_BIN);
	printf("\r\nOperating at %02d::%02d::%02d",  sTime.Hours, sTime.Minutes, sTime.Seconds);*/

	//Perform depth measuring
	performDepthMeasurement(handles->ADChandle1, handles->ADChandle2, &data);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6898      	ldr	r0, [r3, #8]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f107 020c 	add.w	r2, r7, #12
 8002054:	4619      	mov	r1, r3
 8002056:	f7ff f9a7 	bl	80013a8 <performDepthMeasurement>
	//Perform pressure measuring
	performPressureMeasurement(handles->I2Chandle, &data);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f107 020c 	add.w	r2, r7, #12
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fa67 	bl	8001538 <performPressureMeasurement>
	//Perform temperature measuring
	performTemperatureMeasurement(handles->SPIhandle, &data);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f107 020c 	add.w	r2, r7, #12
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fb19 	bl	80016ac <performTemperatureMeasurement>
	//Perform battery checking
	checkBattery(handles->ADChandle1, &data);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f107 020c 	add.w	r2, r7, #12
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fb77 	bl	8001778 <checkBattery>
	checkBattery(handles->ADChandle1, &data);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f107 020c 	add.w	r2, r7, #12
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fb6f 	bl	8001778 <checkBattery>

	//Start listening for requests from mother device
	setRfListening(&data, rfData, handles);
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fc06 	bl	80018b4 <setRfListening>

	//Go into shutdown mode
	setShutdownMode();
 80020a8:	f7ff ffaa 	bl	8002000 <setShutdownMode>

}
 80020ac:	bf00      	nop
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	08011b0c 	.word	0x08011b0c
 80020b8:	000100a4 	.word	0x000100a4

080020bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b0f8      	sub	sp, #480	; 0x1e0
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	struct CommunicationHandles handles;
	handles.SPIhandle = &hspi2;
 80020c2:	4b48      	ldr	r3, [pc, #288]	; (80021e4 <main+0x128>)
 80020c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	handles.UARThandle = &hlpuart1;
 80020c8:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <main+0x12c>)
 80020ca:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	handles.ADChandle1 = &hadc1;
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <main+0x130>)
 80020d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	handles.ADChandle2 = &hadc2;
 80020d4:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <main+0x134>)
 80020d6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	handles.I2Chandle = &hi2c1;
 80020da:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <main+0x138>)
 80020dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	handles.RTChandle = &hrtc;
 80020e0:	4b45      	ldr	r3, [pc, #276]	; (80021f8 <main+0x13c>)
 80020e2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e6:	f002 fca8 	bl	8004a3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ea:	f000 f891 	bl	8002210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ee:	f000 fb77 	bl	80027e0 <MX_GPIO_Init>
  MX_RTC_Init();
 80020f2:	f000 fa73 	bl	80025dc <MX_RTC_Init>
  MX_I2C1_Init();
 80020f6:	f000 f9c1 	bl	800247c <MX_I2C1_Init>
  MX_RNG_Init();
 80020fa:	f000 fa5b 	bl	80025b4 <MX_RNG_Init>
  MX_LPUART1_UART_Init();
 80020fe:	f000 f9fd 	bl	80024fc <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8002102:	f000 fb2f 	bl	8002764 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8002106:	f000 fa25 	bl	8002554 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800210a:	f000 f8dd 	bl	80022c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800210e:	f000 f951 	bl	80023b4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8002112:	483a      	ldr	r0, [pc, #232]	; (80021fc <main+0x140>)
 8002114:	f000 fc30 	bl	8002978 <RetargetInit>

  HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 8002118:	2214      	movs	r2, #20
 800211a:	4939      	ldr	r1, [pc, #228]	; (8002200 <main+0x144>)
 800211c:	4832      	ldr	r0, [pc, #200]	; (80021e8 <main+0x12c>)
 800211e:	f008 fb59 	bl	800a7d4 <HAL_UART_Receive_IT>

  //HAL_Delay(100);
  struct rfDataStorage rfData;
  rfData.RXFIFO = &RXFIFO;
 8002122:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002126:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800212a:	4a36      	ldr	r2, [pc, #216]	; (8002204 <main+0x148>)
 800212c:	601a      	str	r2, [r3, #0]
  if(mainSetup(&rfData, &handles)){
 800212e:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fe9f 	bl	8001e7c <mainSetup>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <main+0x98>
  	  mainOperation(&rfData, &handles);
 8002144:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff66 	bl	8002020 <mainOperation>
  }

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002154:	2201      	movs	r2, #1
 8002156:	2140      	movs	r1, #64	; 0x40
 8002158:	482b      	ldr	r0, [pc, #172]	; (8002208 <main+0x14c>)
 800215a:	f004 fe83 	bl	8006e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	4829      	ldr	r0, [pc, #164]	; (8002208 <main+0x14c>)
 8002164:	f004 fe7e 	bl	8006e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800216e:	4826      	ldr	r0, [pc, #152]	; (8002208 <main+0x14c>)
 8002170:	f004 fe78 	bl	8006e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800217a:	4823      	ldr	r0, [pc, #140]	; (8002208 <main+0x14c>)
 800217c:	f004 fe72 	bl	8006e64 <HAL_GPIO_WritePin>
  //depth test
  struct DepthData depthData;
  depthData.pos = 0;
 8002180:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002184:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
  depthData.output1 = 0;
 800218c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002190:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  depthData.output2 = 0;
 8002198:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800219c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  depthData.max_value_1 = 0;
 80021a4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80021a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  depthData.min_value_1 = 0;
 80021b0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80021b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  depthData.max_value_2 = 0;
 80021bc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80021c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021c4:	2200      	movs	r2, #0
 80021c6:	615a      	str	r2, [r3, #20]
  depthData.min_value_2 = 0;
 80021c8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80021cc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
	  HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_SET);
	  HAL_Delay(100);
	  batteryTest(&hadc1);
	  HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_RESET);
*/
	  printf("\r\nLoop");
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <main+0x150>)
 80021d6:	f00a ff2d 	bl	800d034 <iprintf>

	  HAL_Delay(100);
 80021da:	2064      	movs	r0, #100	; 0x64
 80021dc:	f002 fca2 	bl	8004b24 <HAL_Delay>
	  printf("\r\nLoop");
 80021e0:	e7f8      	b.n	80021d4 <main+0x118>
 80021e2:	bf00      	nop
 80021e4:	2000048c 	.word	0x2000048c
 80021e8:	20000348 	.word	0x20000348
 80021ec:	2000022c 	.word	0x2000022c
 80021f0:	20000290 	.word	0x20000290
 80021f4:	200002f4 	.word	0x200002f4
 80021f8:	20000460 	.word	0x20000460
 80021fc:	200003cc 	.word	0x200003cc
 8002200:	20000754 	.word	0x20000754
 8002204:	200004f0 	.word	0x200004f0
 8002208:	48000800 	.word	0x48000800
 800220c:	08011b20 	.word	0x08011b20

08002210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b096      	sub	sp, #88	; 0x58
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	2244      	movs	r2, #68	; 0x44
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f009 ffa6 	bl	800c170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002224:	463b      	mov	r3, r7
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002232:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002236:	f005 fbd5 	bl	80079e4 <HAL_PWREx_ControlVoltageScaling>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002240:	f000 fb94 	bl	800296c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002244:	f005 fbb0 	bl	80079a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <SystemClock_Config+0xb4>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <SystemClock_Config+0xb4>)
 8002250:	f023 0318 	bic.w	r3, r3, #24
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002258:	2316      	movs	r3, #22
 800225a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800225c:	2301      	movs	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002266:	2340      	movs	r3, #64	; 0x40
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800226a:	2301      	movs	r3, #1
 800226c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002272:	2360      	movs	r3, #96	; 0x60
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002276:	2300      	movs	r3, #0
 8002278:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4618      	mov	r0, r3
 8002280:	f005 fc20 	bl	8007ac4 <HAL_RCC_OscConfig>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800228a:	f000 fb6f 	bl	800296c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800228e:	230f      	movs	r3, #15
 8002290:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002292:	2301      	movs	r3, #1
 8002294:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022a2:	463b      	mov	r3, r7
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f006 f86e 	bl	8008388 <HAL_RCC_ClockConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80022b2:	f000 fb5b 	bl	800296c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80022b6:	f006 fc11 	bl	8008adc <HAL_RCCEx_EnableMSIPLLMode>
}
 80022ba:	bf00      	nop
 80022bc:	3758      	adds	r7, #88	; 0x58
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000

080022c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80022ce:	f107 031c 	add.w	r3, r7, #28
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
 80022e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <MX_ADC1_Init+0xe0>)
 80022ec:	4a2f      	ldr	r2, [pc, #188]	; (80023ac <MX_ADC1_Init+0xe4>)
 80022ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <MX_ADC1_Init+0xe0>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <MX_ADC1_Init+0xe0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <MX_ADC1_Init+0xe0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <MX_ADC1_Init+0xe0>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <MX_ADC1_Init+0xe0>)
 800230a:	2204      	movs	r2, #4
 800230c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <MX_ADC1_Init+0xe0>)
 8002310:	2200      	movs	r2, #0
 8002312:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <MX_ADC1_Init+0xe0>)
 8002316:	2200      	movs	r2, #0
 8002318:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <MX_ADC1_Init+0xe0>)
 800231c:	2201      	movs	r2, #1
 800231e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <MX_ADC1_Init+0xe0>)
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002328:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <MX_ADC1_Init+0xe0>)
 800232a:	2200      	movs	r2, #0
 800232c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <MX_ADC1_Init+0xe0>)
 8002330:	2200      	movs	r2, #0
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <MX_ADC1_Init+0xe0>)
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <MX_ADC1_Init+0xe0>)
 800233e:	2200      	movs	r2, #0
 8002340:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <MX_ADC1_Init+0xe0>)
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800234a:	4817      	ldr	r0, [pc, #92]	; (80023a8 <MX_ADC1_Init+0xe0>)
 800234c:	f002 fe62 	bl	8005014 <HAL_ADC_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002356:	f000 fb09 	bl	800296c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	4810      	ldr	r0, [pc, #64]	; (80023a8 <MX_ADC1_Init+0xe0>)
 8002366:	f003 ff3d 	bl	80061e4 <HAL_ADCEx_MultiModeConfigChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002370:	f000 fafc 	bl	800296c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_ADC1_Init+0xe8>)
 8002376:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002378:	2306      	movs	r3, #6
 800237a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002380:	237f      	movs	r3, #127	; 0x7f
 8002382:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002384:	2304      	movs	r3, #4
 8002386:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_ADC1_Init+0xe0>)
 8002392:	f003 f963 	bl	800565c <HAL_ADC_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800239c:	f000 fae6 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	3728      	adds	r7, #40	; 0x28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	2000022c 	.word	0x2000022c
 80023ac:	50040000 	.word	0x50040000
 80023b0:	14f00020 	.word	0x14f00020

080023b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023ba:	463b      	mov	r3, r7
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
 80023c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <MX_ADC2_Init+0xbc>)
 80023cc:	4a29      	ldr	r2, [pc, #164]	; (8002474 <MX_ADC2_Init+0xc0>)
 80023ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <MX_ADC2_Init+0xbc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <MX_ADC2_Init+0xbc>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <MX_ADC2_Init+0xbc>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <MX_ADC2_Init+0xbc>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023e8:	4b21      	ldr	r3, [pc, #132]	; (8002470 <MX_ADC2_Init+0xbc>)
 80023ea:	2204      	movs	r2, #4
 80023ec:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <MX_ADC2_Init+0xbc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <MX_ADC2_Init+0xbc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <MX_ADC2_Init+0xbc>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <MX_ADC2_Init+0xbc>)
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <MX_ADC2_Init+0xbc>)
 800240a:	2200      	movs	r2, #0
 800240c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <MX_ADC2_Init+0xbc>)
 8002410:	2200      	movs	r2, #0
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <MX_ADC2_Init+0xbc>)
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <MX_ADC2_Init+0xbc>)
 800241e:	2200      	movs	r2, #0
 8002420:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <MX_ADC2_Init+0xbc>)
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800242a:	4811      	ldr	r0, [pc, #68]	; (8002470 <MX_ADC2_Init+0xbc>)
 800242c:	f002 fdf2 	bl	8005014 <HAL_ADC_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8002436:	f000 fa99 	bl	800296c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800243a:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <MX_ADC2_Init+0xc4>)
 800243c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800243e:	2306      	movs	r3, #6
 8002440:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8002442:	2301      	movs	r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002446:	237f      	movs	r3, #127	; 0x7f
 8002448:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800244a:	2304      	movs	r3, #4
 800244c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002452:	463b      	mov	r3, r7
 8002454:	4619      	mov	r1, r3
 8002456:	4806      	ldr	r0, [pc, #24]	; (8002470 <MX_ADC2_Init+0xbc>)
 8002458:	f003 f900 	bl	800565c <HAL_ADC_ConfigChannel>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8002462:	f000 fa83 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000290 	.word	0x20000290
 8002474:	50040100 	.word	0x50040100
 8002478:	08600004 	.word	0x08600004

0800247c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <MX_I2C1_Init+0x74>)
 8002482:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <MX_I2C1_Init+0x78>)
 8002484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8002486:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <MX_I2C1_Init+0x74>)
 8002488:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <MX_I2C1_Init+0x7c>)
 800248a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800248c:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <MX_I2C1_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <MX_I2C1_Init+0x74>)
 8002494:	2201      	movs	r2, #1
 8002496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <MX_I2C1_Init+0x74>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <MX_I2C1_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <MX_I2C1_Init+0x74>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_I2C1_Init+0x74>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_I2C1_Init+0x74>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024b6:	480e      	ldr	r0, [pc, #56]	; (80024f0 <MX_I2C1_Init+0x74>)
 80024b8:	f004 fcec 	bl	8006e94 <HAL_I2C_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80024c2:	f000 fa53 	bl	800296c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024c6:	2100      	movs	r1, #0
 80024c8:	4809      	ldr	r0, [pc, #36]	; (80024f0 <MX_I2C1_Init+0x74>)
 80024ca:	f005 f9d5 	bl	8007878 <HAL_I2CEx_ConfigAnalogFilter>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80024d4:	f000 fa4a 	bl	800296c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024d8:	2100      	movs	r1, #0
 80024da:	4805      	ldr	r0, [pc, #20]	; (80024f0 <MX_I2C1_Init+0x74>)
 80024dc:	f005 fa17 	bl	800790e <HAL_I2CEx_ConfigDigitalFilter>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024e6:	f000 fa41 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200002f4 	.word	0x200002f4
 80024f4:	40005400 	.word	0x40005400
 80024f8:	0010061a 	.word	0x0010061a

080024fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <MX_LPUART1_UART_Init+0x50>)
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <MX_LPUART1_UART_Init+0x54>)
 8002504:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_LPUART1_UART_Init+0x50>)
 8002508:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800250c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <MX_LPUART1_UART_Init+0x50>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <MX_LPUART1_UART_Init+0x50>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_LPUART1_UART_Init+0x50>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <MX_LPUART1_UART_Init+0x50>)
 8002522:	220c      	movs	r2, #12
 8002524:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_LPUART1_UART_Init+0x50>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <MX_LPUART1_UART_Init+0x50>)
 800252e:	2200      	movs	r2, #0
 8002530:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_LPUART1_UART_Init+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <MX_LPUART1_UART_Init+0x50>)
 800253a:	f007 ff29 	bl	800a390 <HAL_UART_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002544:	f000 fa12 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000348 	.word	0x20000348
 8002550:	40008000 	.word	0x40008000

08002554 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <MX_USART3_UART_Init+0x58>)
 800255a:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <MX_USART3_UART_Init+0x5c>)
 800255c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <MX_USART3_UART_Init+0x58>)
 8002560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002564:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <MX_USART3_UART_Init+0x58>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <MX_USART3_UART_Init+0x58>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <MX_USART3_UART_Init+0x58>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <MX_USART3_UART_Init+0x58>)
 800257a:	220c      	movs	r2, #12
 800257c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <MX_USART3_UART_Init+0x58>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <MX_USART3_UART_Init+0x58>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <MX_USART3_UART_Init+0x58>)
 800258c:	2200      	movs	r2, #0
 800258e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <MX_USART3_UART_Init+0x58>)
 8002592:	2200      	movs	r2, #0
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_USART3_UART_Init+0x58>)
 8002598:	f007 fefa 	bl	800a390 <HAL_UART_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80025a2:	f000 f9e3 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200003cc 	.word	0x200003cc
 80025b0:	40004800 	.word	0x40004800

080025b4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <MX_RNG_Init+0x20>)
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <MX_RNG_Init+0x24>)
 80025bc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80025be:	4805      	ldr	r0, [pc, #20]	; (80025d4 <MX_RNG_Init+0x20>)
 80025c0:	f006 fa9c 	bl	8008afc <HAL_RNG_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80025ca:	f000 f9cf 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000450 	.word	0x20000450
 80025d8:	50060800 	.word	0x50060800

080025dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b092      	sub	sp, #72	; 0x48
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80025e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80025f2:	2300      	movs	r3, #0
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	222c      	movs	r2, #44	; 0x2c
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f009 fdb7 	bl	800c170 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002602:	4b55      	ldr	r3, [pc, #340]	; (8002758 <MX_RTC_Init+0x17c>)
 8002604:	4a55      	ldr	r2, [pc, #340]	; (800275c <MX_RTC_Init+0x180>)
 8002606:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <MX_RTC_Init+0x17c>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800260e:	4b52      	ldr	r3, [pc, #328]	; (8002758 <MX_RTC_Init+0x17c>)
 8002610:	227f      	movs	r2, #127	; 0x7f
 8002612:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <MX_RTC_Init+0x17c>)
 8002616:	22ff      	movs	r2, #255	; 0xff
 8002618:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800261a:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <MX_RTC_Init+0x17c>)
 800261c:	2200      	movs	r2, #0
 800261e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002620:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <MX_RTC_Init+0x17c>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <MX_RTC_Init+0x17c>)
 8002628:	2200      	movs	r2, #0
 800262a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800262c:	4b4a      	ldr	r3, [pc, #296]	; (8002758 <MX_RTC_Init+0x17c>)
 800262e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002632:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <MX_RTC_Init+0x17c>)
 8002636:	2200      	movs	r2, #0
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800263a:	4847      	ldr	r0, [pc, #284]	; (8002758 <MX_RTC_Init+0x17c>)
 800263c:	f006 fb04 	bl	8008c48 <HAL_RTC_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 8002646:	f000 f991 	bl	800296c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != RTC_BKUP_DEFINE_CODE)
 800264a:	2100      	movs	r1, #0
 800264c:	4842      	ldr	r0, [pc, #264]	; (8002758 <MX_RTC_Init+0x17c>)
 800264e:	f006 ff71 	bl	8009534 <HAL_RTCEx_BKUPRead>
 8002652:	4603      	mov	r3, r0
 8002654:	f240 3227 	movw	r2, #807	; 0x327
 8002658:	4293      	cmp	r3, r2
 800265a:	d037      	beq.n	80026cc <MX_RTC_Init+0xf0>
  	// Clear Backup registor : recover to current RTC information

  	// Set to Time/Date from current Time/Date

  	// Write a data in ad RTC Backup data register
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, RTC_BKUP_DEFINE_CODE);
 800265c:	f240 3227 	movw	r2, #807	; 0x327
 8002660:	2100      	movs	r1, #0
 8002662:	483d      	ldr	r0, [pc, #244]	; (8002758 <MX_RTC_Init+0x17c>)
 8002664:	f006 ff46 	bl	80094f4 <HAL_RTCEx_BKUPWrite>

  	sTime.Hours = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  	  sTime.Minutes = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  	  sTime.Seconds = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800267a:	2300      	movs	r3, #0
 800267c:	643b      	str	r3, [r7, #64]	; 0x40
  	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	647b      	str	r3, [r7, #68]	; 0x44
  	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002682:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002686:	2200      	movs	r2, #0
 8002688:	4619      	mov	r1, r3
 800268a:	4833      	ldr	r0, [pc, #204]	; (8002758 <MX_RTC_Init+0x17c>)
 800268c:	f006 fb5e 	bl	8008d4c <HAL_RTC_SetTime>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_RTC_Init+0xbe>
  	  {
  		Error_Handler();
 8002696:	f000 f969 	bl	800296c <Error_Handler>
  	  }
  	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800269a:	2301      	movs	r3, #1
 800269c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  	  sDate.Month = RTC_MONTH_JANUARY;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  	  sDate.Date = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  	  sDate.Year = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80026b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026b6:	2200      	movs	r2, #0
 80026b8:	4619      	mov	r1, r3
 80026ba:	4827      	ldr	r0, [pc, #156]	; (8002758 <MX_RTC_Init+0x17c>)
 80026bc:	f006 fc3f 	bl	8008f3e <HAL_RTC_SetDate>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d010      	beq.n	80026e8 <MX_RTC_Init+0x10c>
  	  {
  		Error_Handler();
 80026c6:	f000 f951 	bl	800296c <Error_Handler>
 80026ca:	e00d      	b.n	80026e8 <MX_RTC_Init+0x10c>
  	  }

    } else
    {
  	// Only read time and date
  	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80026cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026d0:	2200      	movs	r2, #0
 80026d2:	4619      	mov	r1, r3
 80026d4:	4820      	ldr	r0, [pc, #128]	; (8002758 <MX_RTC_Init+0x17c>)
 80026d6:	f006 fbd6 	bl	8008e86 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80026da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026de:	2200      	movs	r2, #0
 80026e0:	4619      	mov	r1, r3
 80026e2:	481d      	ldr	r0, [pc, #116]	; (8002758 <MX_RTC_Init+0x17c>)
 80026e4:	f006 fcb2 	bl	800904c <HAL_RTC_GetDate>
  /** Initialize RTC and set the Time and Date
  */

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <MX_RTC_Init+0x184>)
 8002702:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002704:	2300      	movs	r3, #0
 8002706:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8002708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8002714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	4619      	mov	r1, r3
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <MX_RTC_Init+0x17c>)
 8002722:	f006 fce1 	bl	80090e8 <HAL_RTC_SetAlarm_IT>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 800272c:	f000 f91e 	bl	800296c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Seconds = 30;
 8002730:	231e      	movs	r3, #30
 8002732:	71bb      	strb	r3, [r7, #6]
  sAlarm.Alarm = RTC_ALARM_B;
 8002734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	2200      	movs	r2, #0
 800273e:	4619      	mov	r1, r3
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <MX_RTC_Init+0x17c>)
 8002742:	f006 fcd1 	bl	80090e8 <HAL_RTC_SetAlarm_IT>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_RTC_Init+0x174>
  {
    Error_Handler();
 800274c:	f000 f90e 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002750:	bf00      	nop
 8002752:	3748      	adds	r7, #72	; 0x48
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000460 	.word	0x20000460
 800275c:	40002800 	.word	0x40002800
 8002760:	80808000 	.word	0x80808000

08002764 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <MX_SPI2_Init+0x74>)
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <MX_SPI2_Init+0x78>)
 800276c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <MX_SPI2_Init+0x74>)
 8002770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002774:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <MX_SPI2_Init+0x74>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <MX_SPI2_Init+0x74>)
 800277e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002782:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_SPI2_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <MX_SPI2_Init+0x74>)
 800278c:	2200      	movs	r2, #0
 800278e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_SPI2_Init+0x74>)
 8002792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002796:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MX_SPI2_Init+0x74>)
 800279a:	2210      	movs	r2, #16
 800279c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_SPI2_Init+0x74>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_SPI2_Init+0x74>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <MX_SPI2_Init+0x74>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <MX_SPI2_Init+0x74>)
 80027b2:	2207      	movs	r2, #7
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <MX_SPI2_Init+0x74>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_SPI2_Init+0x74>)
 80027be:	2208      	movs	r2, #8
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MX_SPI2_Init+0x74>)
 80027c4:	f006 fed3 	bl	800956e <HAL_SPI_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80027ce:	f000 f8cd 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000048c 	.word	0x2000048c
 80027dc:	40003800 	.word	0x40003800

080027e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <MX_GPIO_Init+0x114>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <MX_GPIO_Init+0x114>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <MX_GPIO_Init+0x114>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800280e:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <MX_GPIO_Init+0x114>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	4a38      	ldr	r2, [pc, #224]	; (80028f4 <MX_GPIO_Init+0x114>)
 8002814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281a:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <MX_GPIO_Init+0x114>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	4b33      	ldr	r3, [pc, #204]	; (80028f4 <MX_GPIO_Init+0x114>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	4a32      	ldr	r2, [pc, #200]	; (80028f4 <MX_GPIO_Init+0x114>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002832:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <MX_GPIO_Init+0x114>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <MX_GPIO_Init+0x114>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	4a2c      	ldr	r2, [pc, #176]	; (80028f4 <MX_GPIO_Init+0x114>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <MX_GPIO_Init+0x114>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002856:	2200      	movs	r2, #0
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285e:	f004 fb01 	bl	8006e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_6
 8002862:	2200      	movs	r2, #0
 8002864:	f241 31e1 	movw	r1, #5089	; 0x13e1
 8002868:	4823      	ldr	r0, [pc, #140]	; (80028f8 <MX_GPIO_Init+0x118>)
 800286a:	f004 fafb 	bl	8006e64 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800286e:	2200      	movs	r2, #0
 8002870:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002874:	4821      	ldr	r0, [pc, #132]	; (80028fc <MX_GPIO_Init+0x11c>)
 8002876:	f004 faf5 	bl	8006e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287e:	2301      	movs	r3, #1
 8002880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002894:	f004 f95c 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_6
 8002898:	f241 33e1 	movw	r3, #5089	; 0x13e1
 800289c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289e:	2301      	movs	r3, #1
 80028a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4619      	mov	r1, r3
 80028b0:	4811      	ldr	r0, [pc, #68]	; (80028f8 <MX_GPIO_Init+0x118>)
 80028b2:	f004 f94d 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80028b6:	2306      	movs	r3, #6
 80028b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	480b      	ldr	r0, [pc, #44]	; (80028f8 <MX_GPIO_Init+0x118>)
 80028ca:	f004 f941 	bl	8006b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80028ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80028d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_GPIO_Init+0x11c>)
 80028e8:	f004 f932 	bl	8006b50 <HAL_GPIO_Init>

}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	48000400 	.word	0x48000400
 80028fc:	48000800 	.word	0x48000800

08002900 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	//printf("\r\nreceived uart message");
	for (int i = 0; i < MSG_SIZE_TRANSFER; i++)
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e012      	b.n	8002934 <HAL_UART_RxCpltCallback+0x34>
	{
			printf("\r\nreceived uart message: %x", UART2_rxBuffer[i]);
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <HAL_UART_RxCpltCallback+0x5c>)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	4811      	ldr	r0, [pc, #68]	; (8002960 <HAL_UART_RxCpltCallback+0x60>)
 800291a:	f00a fb8b 	bl	800d034 <iprintf>
			enqueue(&RXFIFO, UART2_rxBuffer[i]);
 800291e:	4a0f      	ldr	r2, [pc, #60]	; (800295c <HAL_UART_RxCpltCallback+0x5c>)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	480e      	ldr	r0, [pc, #56]	; (8002964 <HAL_UART_RxCpltCallback+0x64>)
 800292a:	f001 ff21 	bl	8004770 <enqueue>
	for (int i = 0; i < MSG_SIZE_TRANSFER; i++)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3301      	adds	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b13      	cmp	r3, #19
 8002938:	dde9      	ble.n	800290e <HAL_UART_RxCpltCallback+0xe>
	}
	//Setup new receive interrupt
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 800293a:	2214      	movs	r2, #20
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <HAL_UART_RxCpltCallback+0x5c>)
 800293e:	480a      	ldr	r0, [pc, #40]	; (8002968 <HAL_UART_RxCpltCallback+0x68>)
 8002940:	f007 ff48 	bl	800a7d4 <HAL_UART_Receive_IT>

	//Abort new interrupt to clear the buffer
	HAL_UART_Abort_IT(&hlpuart1);
 8002944:	4808      	ldr	r0, [pc, #32]	; (8002968 <HAL_UART_RxCpltCallback+0x68>)
 8002946:	f007 ff9b 	bl	800a880 <HAL_UART_Abort_IT>

	//Setup new clean receive interrupt
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 800294a:	2214      	movs	r2, #20
 800294c:	4903      	ldr	r1, [pc, #12]	; (800295c <HAL_UART_RxCpltCallback+0x5c>)
 800294e:	4806      	ldr	r0, [pc, #24]	; (8002968 <HAL_UART_RxCpltCallback+0x68>)
 8002950:	f007 ff40 	bl	800a7d4 <HAL_UART_Receive_IT>
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000754 	.word	0x20000754
 8002960:	08011b28 	.word	0x08011b28
 8002964:	200004f0 	.word	0x200004f0
 8002968:	20000348 	.word	0x20000348

0800296c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
}
 8002972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002974:	e7fe      	b.n	8002974 <Error_Handler+0x8>
	...

08002978 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <RetargetInit+0x28>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <RetargetInit+0x2c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6898      	ldr	r0, [r3, #8]
 800298c:	2300      	movs	r3, #0
 800298e:	2202      	movs	r2, #2
 8002990:	2100      	movs	r1, #0
 8002992:	f00a fc05 	bl	800d1a0 <setvbuf>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000768 	.word	0x20000768
 80029a4:	2000002c 	.word	0x2000002c

080029a8 <_isatty>:

int _isatty(int fd) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	db04      	blt.n	80029c0 <_isatty+0x18>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	dc01      	bgt.n	80029c0 <_isatty+0x18>
    return 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	e005      	b.n	80029cc <_isatty+0x24>

  errno = EBADF;
 80029c0:	f009 fba4 	bl	800c10c <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2209      	movs	r2, #9
 80029c8:	601a      	str	r2, [r3, #0]
  return 0;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_write>:

int _write(int fd, char* ptr, int len) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d002      	beq.n	80029ec <_write+0x18>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d111      	bne.n	8002a10 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <_write+0x54>)
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	f007 fd17 	bl	800a42c <HAL_UART_Transmit>
 80029fe:	4603      	mov	r3, r0
 8002a00:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <_write+0x38>
      return len;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	e008      	b.n	8002a1e <_write+0x4a>
    else
      return EIO;
 8002a0c:	2305      	movs	r3, #5
 8002a0e:	e006      	b.n	8002a1e <_write+0x4a>
  }
  errno = EBADF;
 8002a10:	f009 fb7c 	bl	800c10c <__errno>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2209      	movs	r2, #9
 8002a18:	601a      	str	r2, [r3, #0]
  return -1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000768 	.word	0x20000768

08002a2c <_close>:

int _close(int fd) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	db04      	blt.n	8002a44 <_close+0x18>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	dc01      	bgt.n	8002a44 <_close+0x18>
    return 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e006      	b.n	8002a52 <_close+0x26>

  errno = EBADF;
 8002a44:	f009 fb62 	bl	800c10c <__errno>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2209      	movs	r2, #9
 8002a4c:	601a      	str	r2, [r3, #0]
  return -1;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002a66:	f009 fb51 	bl	800c10c <__errno>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2209      	movs	r2, #9
 8002a6e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_read>:

int _read(int fd, char* ptr, int len) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d110      	bne.n	8002ab0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <_read+0x4c>)
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	2201      	movs	r2, #1
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	f007 fd5b 	bl	800a554 <HAL_UART_Receive>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <_read+0x30>
      return 1;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e008      	b.n	8002abe <_read+0x42>
    else
      return EIO;
 8002aac:	2305      	movs	r3, #5
 8002aae:	e006      	b.n	8002abe <_read+0x42>
  }
  errno = EBADF;
 8002ab0:	f009 fb2c 	bl	800c10c <__errno>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2209      	movs	r2, #9
 8002ab8:	601a      	str	r2, [r3, #0]
  return -1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000768 	.word	0x20000768

08002acc <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db08      	blt.n	8002aee <_fstat+0x22>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	dc05      	bgt.n	8002aee <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae8:	605a      	str	r2, [r3, #4]
    return 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e005      	b.n	8002afa <_fstat+0x2e>
  }

  errno = EBADF;
 8002aee:	f009 fb0d 	bl	800c10c <__errno>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2209      	movs	r2, #9
 8002af6:	601a      	str	r2, [r3, #0]
  return 0;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_MspInit+0x44>)
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0e:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <HAL_MspInit+0x44>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6613      	str	r3, [r2, #96]	; 0x60
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_MspInit+0x44>)
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_MspInit+0x44>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <HAL_MspInit+0x44>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_MspInit+0x44>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000

08002b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	; 0x30
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a33      	ldr	r2, [pc, #204]	; (8002c38 <HAL_ADC_MspInit+0xec>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12e      	bne.n	8002bcc <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002b6e:	4b33      	ldr	r3, [pc, #204]	; (8002c3c <HAL_ADC_MspInit+0xf0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a31      	ldr	r2, [pc, #196]	; (8002c3c <HAL_ADC_MspInit+0xf0>)
 8002b76:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <HAL_ADC_MspInit+0xf0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10b      	bne.n	8002b98 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002b80:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002b86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba4:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002bb4:	230b      	movs	r3, #11
 8002bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc6:	f003 ffc3 	bl	8006b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002bca:	e031      	b.n	8002c30 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <HAL_ADC_MspInit+0xf8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d12c      	bne.n	8002c30 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002bd6:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_ADC_MspInit+0xf0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <HAL_ADC_MspInit+0xf0>)
 8002bde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <HAL_ADC_MspInit+0xf0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10b      	bne.n	8002c00 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002bee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_ADC_MspInit+0xf4>)
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c1c:	230b      	movs	r3, #11
 8002c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c24:	f107 031c 	add.w	r3, r7, #28
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4807      	ldr	r0, [pc, #28]	; (8002c48 <HAL_ADC_MspInit+0xfc>)
 8002c2c:	f003 ff90 	bl	8006b50 <HAL_GPIO_Init>
}
 8002c30:	bf00      	nop
 8002c32:	3730      	adds	r7, #48	; 0x30
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	50040000 	.word	0x50040000
 8002c3c:	2000076c 	.word	0x2000076c
 8002c40:	40021000 	.word	0x40021000
 8002c44:	50040100 	.word	0x50040100
 8002c48:	48000800 	.word	0x48000800

08002c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b096      	sub	sp, #88	; 0x58
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c64:	f107 0310 	add.w	r3, r7, #16
 8002c68:	2234      	movs	r2, #52	; 0x34
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f009 fa7f 	bl	800c170 <memset>
  if(hi2c->Instance==I2C1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_I2C_MspInit+0xa8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d137      	bne.n	8002cec <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c7c:	2340      	movs	r3, #64	; 0x40
 8002c7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c84:	f107 0310 	add.w	r3, r7, #16
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f005 fda1 	bl	80087d0 <HAL_RCCEx_PeriphCLKConfig>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c94:	f7ff fe6a 	bl	800296c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_I2C_MspInit+0xac>)
 8002c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <HAL_I2C_MspInit+0xac>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_I2C_MspInit+0xac>)
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cb0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cb4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cb6:	2312      	movs	r3, #18
 8002cb8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd0:	f003 ff3e 	bl	8006b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_I2C_MspInit+0xac>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_I2C_MspInit+0xac>)
 8002cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cde:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_I2C_MspInit+0xac>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cec:	bf00      	nop
 8002cee:	3758      	adds	r7, #88	; 0x58
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40005400 	.word	0x40005400
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b09a      	sub	sp, #104	; 0x68
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d14:	f107 0320 	add.w	r3, r7, #32
 8002d18:	2234      	movs	r2, #52	; 0x34
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f009 fa27 	bl	800c170 <memset>
  if(huart->Instance==LPUART1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a4f      	ldr	r2, [pc, #316]	; (8002e64 <HAL_UART_MspInit+0x168>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d13f      	bne.n	8002dac <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d30:	2300      	movs	r3, #0
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d34:	f107 0320 	add.w	r3, r7, #32
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f005 fd49 	bl	80087d0 <HAL_RCCEx_PeriphCLKConfig>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d44:	f7ff fe12 	bl	800296c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d48:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	4a46      	ldr	r2, [pc, #280]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002d54:	4b44      	ldr	r3, [pc, #272]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d60:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d64:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d6c:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d78:	230c      	movs	r3, #12
 8002d7a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d90:	4619      	mov	r1, r3
 8002d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d96:	f003 fedb 	bl	8006b50 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2046      	movs	r0, #70	; 0x46
 8002da0:	f003 fb9f 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002da4:	2046      	movs	r0, #70	; 0x46
 8002da6:	f003 fbb8 	bl	800651a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002daa:	e057      	b.n	8002e5c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2e      	ldr	r2, [pc, #184]	; (8002e6c <HAL_UART_MspInit+0x170>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d152      	bne.n	8002e5c <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002db6:	2304      	movs	r3, #4
 8002db8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dbe:	f107 0320 	add.w	r3, r7, #32
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f005 fd04 	bl	80087d0 <HAL_RCCEx_PeriphCLKConfig>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002dce:	f7ff fdcd 	bl	800296c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_UART_MspInit+0x16c>)
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	2303      	movs	r3, #3
 8002e28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e32:	4619      	mov	r1, r3
 8002e34:	480e      	ldr	r0, [pc, #56]	; (8002e70 <HAL_UART_MspInit+0x174>)
 8002e36:	f003 fe8b 	bl	8006b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e3e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e54:	4619      	mov	r1, r3
 8002e56:	4807      	ldr	r0, [pc, #28]	; (8002e74 <HAL_UART_MspInit+0x178>)
 8002e58:	f003 fe7a 	bl	8006b50 <HAL_GPIO_Init>
}
 8002e5c:	bf00      	nop
 8002e5e:	3768      	adds	r7, #104	; 0x68
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40008000 	.word	0x40008000
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40004800 	.word	0x40004800
 8002e70:	48000800 	.word	0x48000800
 8002e74:	48000400 	.word	0x48000400

08002e78 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b090      	sub	sp, #64	; 0x40
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e80:	f107 030c 	add.w	r3, r7, #12
 8002e84:	2234      	movs	r2, #52	; 0x34
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f009 f971 	bl	800c170 <memset>
  if(hrng->Instance==RNG)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <HAL_RNG_MspInit+0x60>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d11b      	bne.n	8002ed0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002e98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e9c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8002e9e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8002ea2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ea4:	f107 030c 	add.w	r3, r7, #12
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f005 fc91 	bl	80087d0 <HAL_RCCEx_PeriphCLKConfig>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002eb4:	f7ff fd5a 	bl	800296c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RNG_MspInit+0x64>)
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_RNG_MspInit+0x64>)
 8002ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RNG_MspInit+0x64>)
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002ed0:	bf00      	nop
 8002ed2:	3740      	adds	r7, #64	; 0x40
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	50060800 	.word	0x50060800
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b090      	sub	sp, #64	; 0x40
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee8:	f107 030c 	add.w	r3, r7, #12
 8002eec:	2234      	movs	r2, #52	; 0x34
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f009 f93d 	bl	800c170 <memset>
  if(hrtc->Instance==RTC)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <HAL_RTC_MspInit+0x68>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d11f      	bne.n	8002f40 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f04:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 fc5d 	bl	80087d0 <HAL_RCCEx_PeriphCLKConfig>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002f1c:	f7ff fd26 	bl	800296c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_RTC_MspInit+0x6c>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RTC_MspInit+0x6c>)
 8002f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002f30:	2200      	movs	r2, #0
 8002f32:	2100      	movs	r1, #0
 8002f34:	2029      	movs	r0, #41	; 0x29
 8002f36:	f003 fad4 	bl	80064e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002f3a:	2029      	movs	r0, #41	; 0x29
 8002f3c:	f003 faed 	bl	800651a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f40:	bf00      	nop
 8002f42:	3740      	adds	r7, #64	; 0x40
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40002800 	.word	0x40002800
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <HAL_SPI_MspInit+0x7c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d128      	bne.n	8002fc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_SPI_MspInit+0x80>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <HAL_SPI_MspInit+0x80>)
 8002f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_SPI_MspInit+0x80>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_SPI_MspInit+0x80>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <HAL_SPI_MspInit+0x80>)
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_SPI_MspInit+0x80>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002fa2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fb4:	2305      	movs	r3, #5
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <HAL_SPI_MspInit+0x84>)
 8002fc0:	f003 fdc6 	bl	8006b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002fc4:	bf00      	nop
 8002fc6:	3728      	adds	r7, #40	; 0x28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40003800 	.word	0x40003800
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	48000400 	.word	0x48000400

08002fd8 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;
//extern uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <SDTimer_Handler+0x40>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <SDTimer_Handler+0x1c>
    Timer1--;
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <SDTimer_Handler+0x40>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <SDTimer_Handler+0x40>)
 8002ff2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <SDTimer_Handler+0x44>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d006      	beq.n	800300c <SDTimer_Handler+0x34>
    Timer2--;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <SDTimer_Handler+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b2da      	uxtb	r2, r3
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <SDTimer_Handler+0x44>)
 800300a:	701a      	strb	r2, [r3, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000771 	.word	0x20000771
 800301c:	20000772 	.word	0x20000772

08003020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003024:	e7fe      	b.n	8003024 <NMI_Handler+0x4>

08003026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800302a:	e7fe      	b.n	800302a <HardFault_Handler+0x4>

0800302c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003030:	e7fe      	b.n	8003030 <MemManage_Handler+0x4>

08003032 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003036:	e7fe      	b.n	8003036 <BusFault_Handler+0x4>

08003038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800303c:	e7fe      	b.n	800303c <UsageFault_Handler+0x4>

0800303e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 800306c:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <SysTick_Handler+0x30>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	3301      	adds	r3, #1
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <SysTick_Handler+0x30>)
 8003078:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <SysTick_Handler+0x30>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b09      	cmp	r3, #9
 8003082:	d904      	bls.n	800308e <SysTick_Handler+0x26>
  {
	FatFsCnt = 0;
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <SysTick_Handler+0x30>)
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 800308a:	f7ff ffa5 	bl	8002fd8 <SDTimer_Handler>
  /*if(Timer1 > 0)
		Timer1--;
	if(Timer2 > 0)
		Timer2--;*/
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800308e:	f001 fd29 	bl	8004ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000770 	.word	0x20000770

0800309c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80030a0:	4802      	ldr	r0, [pc, #8]	; (80030ac <RTC_Alarm_IRQHandler+0x10>)
 80030a2:	f006 f911 	bl	80092c8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000460 	.word	0x20000460

080030b0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80030b4:	4802      	ldr	r0, [pc, #8]	; (80030c0 <LPUART1_IRQHandler+0x10>)
 80030b6:	f007 fd0b 	bl	800aad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000348 	.word	0x20000348

080030c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <_sbrk+0x5c>)
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <_sbrk+0x60>)
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <_sbrk+0x64>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <_sbrk+0x64>)
 80030e2:	4a12      	ldr	r2, [pc, #72]	; (800312c <_sbrk+0x68>)
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <_sbrk+0x64>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d207      	bcs.n	8003104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f4:	f009 f80a 	bl	800c10c <__errno>
 80030f8:	4603      	mov	r3, r0
 80030fa:	220c      	movs	r2, #12
 80030fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e009      	b.n	8003118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <_sbrk+0x64>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	4a05      	ldr	r2, [pc, #20]	; (8003128 <_sbrk+0x64>)
 8003114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	2000a000 	.word	0x2000a000
 8003124:	00000400 	.word	0x00000400
 8003128:	20000774 	.word	0x20000774
 800312c:	20000790 	.word	0x20000790

08003130 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <SystemInit+0x20>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313a:	4a05      	ldr	r2, [pc, #20]	; (8003150 <SystemInit+0x20>)
 800313c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <calculateDistance>:
 */

#include "Depth/DepthMeasuring.h"


void calculateDistance(ADC_HandleTypeDef* adcHandle1, ADC_HandleTypeDef* adcHandle2, struct DepthData* depthData){
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b08c      	sub	sp, #48	; 0x30
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]

	int outPrev1 = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
	int outPrev2 = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
	float div1 = 0;
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
	float div2 = 0;
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
    HAL_ADC_Start(adcHandle1);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f002 f89d 	bl	80052b4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(adcHandle1, HAL_MAX_DELAY);
 800317a:	f04f 31ff 	mov.w	r1, #4294967295
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f002 f986 	bl	8005490 <HAL_ADC_PollForConversion>

	float raw_value1 = (float)HAL_ADC_GetValue(adcHandle1);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f002 fa5b 	bl	8005640 <HAL_ADC_GetValue>
 800318a:	ee07 0a90 	vmov	s15, r0
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	edc7 7a05 	vstr	s15, [r7, #20]
    HAL_ADC_Stop(adcHandle1);
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f002 f946 	bl	8005428 <HAL_ADC_Stop>

	HAL_ADC_Start(adcHandle2);
 800319c:	68b8      	ldr	r0, [r7, #8]
 800319e:	f002 f889 	bl	80052b4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(adcHandle2, HAL_MAX_DELAY);
 80031a2:	f04f 31ff 	mov.w	r1, #4294967295
 80031a6:	68b8      	ldr	r0, [r7, #8]
 80031a8:	f002 f972 	bl	8005490 <HAL_ADC_PollForConversion>
    float raw_value2 = (float)HAL_ADC_GetValue(adcHandle2);
 80031ac:	68b8      	ldr	r0, [r7, #8]
 80031ae:	f002 fa47 	bl	8005640 <HAL_ADC_GetValue>
 80031b2:	ee07 0a90 	vmov	s15, r0
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	edc7 7a04 	vstr	s15, [r7, #16]
    HAL_ADC_Stop(adcHandle2);
 80031be:	68b8      	ldr	r0, [r7, #8]
 80031c0:	f002 f932 	bl	8005428 <HAL_ADC_Stop>

    printf("\r\nRaw values: %f, %f", raw_value1, raw_value2);
 80031c4:	6978      	ldr	r0, [r7, #20]
 80031c6:	f7fd f9bf 	bl	8000548 <__aeabi_f2d>
 80031ca:	4604      	mov	r4, r0
 80031cc:	460d      	mov	r5, r1
 80031ce:	6938      	ldr	r0, [r7, #16]
 80031d0:	f7fd f9ba 	bl	8000548 <__aeabi_f2d>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	e9cd 2300 	strd	r2, r3, [sp]
 80031dc:	4622      	mov	r2, r4
 80031de:	462b      	mov	r3, r5
 80031e0:	4893      	ldr	r0, [pc, #588]	; (8003430 <calculateDistance+0x2dc>)
 80031e2:	f009 ff27 	bl	800d034 <iprintf>

    if (raw_value1 > depthData->max_value_1 ) depthData->max_value_1 = raw_value1 ;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80031f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fe:	dd07      	ble.n	8003210 <calculateDistance+0xbc>
 8003200:	edd7 7a05 	vldr	s15, [r7, #20]
 8003204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003208:	ee17 2a90 	vmov	r2, s15
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]
    if (raw_value2 > depthData->max_value_2 ) depthData->max_value_2 = raw_value2 ;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003228:	dd07      	ble.n	800323a <calculateDistance+0xe6>
 800322a:	edd7 7a04 	vldr	s15, [r7, #16]
 800322e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003232:	ee17 2a90 	vmov	r2, s15
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	615a      	str	r2, [r3, #20]
    if (raw_value1 < depthData->min_value_1 ) depthData->min_value_1 = raw_value1 ;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003246:	ed97 7a05 	vldr	s14, [r7, #20]
 800324a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800324e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003252:	d507      	bpl.n	8003264 <calculateDistance+0x110>
 8003254:	edd7 7a05 	vldr	s15, [r7, #20]
 8003258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800325c:	ee17 2a90 	vmov	r2, s15
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	611a      	str	r2, [r3, #16]
    if (raw_value2 < depthData->min_value_2 ) depthData->min_value_2 = raw_value2 ;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003270:	ed97 7a04 	vldr	s14, [r7, #16]
 8003274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	d507      	bpl.n	800328e <calculateDistance+0x13a>
 800327e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003286:	ee17 2a90 	vmov	r2, s15
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]

    div1 = depthData->max_value_1 / 29;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4a68      	ldr	r2, [pc, #416]	; (8003434 <calculateDistance+0x2e0>)
 8003294:	fb82 1203 	smull	r1, r2, r2, r3
 8003298:	441a      	add	r2, r3
 800329a:	1112      	asrs	r2, r2, #4
 800329c:	17db      	asrs	r3, r3, #31
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a8:	edc7 7a07 	vstr	s15, [r7, #28]
    div2 = depthData->max_value_2 / 29;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	4a60      	ldr	r2, [pc, #384]	; (8003434 <calculateDistance+0x2e0>)
 80032b2:	fb82 1203 	smull	r1, r2, r2, r3
 80032b6:	441a      	add	r2, r3
 80032b8:	1112      	asrs	r2, r2, #4
 80032ba:	17db      	asrs	r3, r3, #31
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032c6:	edc7 7a06 	vstr	s15, [r7, #24]
    outPrev1 = depthData->output1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
    outPrev2 = depthData->output2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	623b      	str	r3, [r7, #32]
    depthData->output1 = (int) raw_value1 / div1;
 80032d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80032da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80032e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ee:	ee17 2a90 	vmov	r2, s15
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	605a      	str	r2, [r3, #4]
	depthData->output2 = (int) raw_value2 / div2;
 80032f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003302:	ed97 7a06 	vldr	s14, [r7, #24]
 8003306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800330a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800330e:	ee17 2a90 	vmov	r2, s15
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	609a      	str	r2, [r3, #8]

    if (depthData->output1 == outPrev1 && depthData->output2 == outPrev2)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331c:	429a      	cmp	r2, r3
 800331e:	d105      	bne.n	800332c <calculateDistance+0x1d8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	429a      	cmp	r2, r3
 8003328:	f000 80b1 	beq.w	800348e <calculateDistance+0x33a>
	{
    	return;
	}
    if ( depthData->output2 > depthData->output1 && depthData->output2 < 29 && depthData->output1 < 2){
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	429a      	cmp	r2, r3
 8003336:	dd25      	ble.n	8003384 <calculateDistance+0x230>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b1c      	cmp	r3, #28
 800333e:	dc21      	bgt.n	8003384 <calculateDistance+0x230>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b01      	cmp	r3, #1
 8003346:	dc1d      	bgt.n	8003384 <calculateDistance+0x230>

		if (depthData->output2 > outPrev2) depthData->pos = depthData->pos + (depthData->output2 - outPrev2);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	429a      	cmp	r2, r3
 8003350:	da08      	bge.n	8003364 <calculateDistance+0x210>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6899      	ldr	r1, [r3, #8]
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	1acb      	subs	r3, r1, r3
 800335e:	441a      	add	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	601a      	str	r2, [r3, #0]
		if (depthData->output2 < outPrev2) depthData->pos = depthData->pos - (outPrev2 - depthData->output2);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	6a3a      	ldr	r2, [r7, #32]
 800336a:	429a      	cmp	r2, r3
 800336c:	f340 8091 	ble.w	8003492 <calculateDistance+0x33e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	6a39      	ldr	r1, [r7, #32]
 800337a:	1acb      	subs	r3, r1, r3
 800337c:	1ad2      	subs	r2, r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]
		return;
 8003382:	e086      	b.n	8003492 <calculateDistance+0x33e>
	}
    if (depthData->output2 > depthData->output1 && depthData->output1 > 1 && depthData->output2 > 18 )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	dd24      	ble.n	80033da <calculateDistance+0x286>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b01      	cmp	r3, #1
 8003396:	dd20      	ble.n	80033da <calculateDistance+0x286>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b12      	cmp	r3, #18
 800339e:	dd1c      	ble.n	80033da <calculateDistance+0x286>
	{

		if (depthData->output1 > outPrev1 ) depthData->pos = depthData->pos + (depthData->output1 - outPrev1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a6:	429a      	cmp	r2, r3
 80033a8:	da08      	bge.n	80033bc <calculateDistance+0x268>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	1acb      	subs	r3, r1, r3
 80033b6:	441a      	add	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	601a      	str	r2, [r3, #0]
		if (depthData->output1 < outPrev1 ) depthData->pos = depthData->pos - (outPrev1 - depthData->output1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c2:	429a      	cmp	r2, r3
 80033c4:	dd67      	ble.n	8003496 <calculateDistance+0x342>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d0:	1acb      	subs	r3, r1, r3
 80033d2:	1ad2      	subs	r2, r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	601a      	str	r2, [r3, #0]
		return;
 80033d8:	e05d      	b.n	8003496 <calculateDistance+0x342>
	}
    if (depthData->output1 > depthData->output2 && depthData->output2 > 1 && depthData->output1 > 25)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	dd28      	ble.n	8003438 <calculateDistance+0x2e4>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	dd24      	ble.n	8003438 <calculateDistance+0x2e4>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b19      	cmp	r3, #25
 80033f4:	dd20      	ble.n	8003438 <calculateDistance+0x2e4>
	{

		if (depthData->output2 > outPrev2) depthData->pos = depthData->pos - (depthData->output2 - outPrev2);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	6a3a      	ldr	r2, [r7, #32]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	da08      	bge.n	8003412 <calculateDistance+0x2be>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	1acb      	subs	r3, r1, r3
 800340c:	1ad2      	subs	r2, r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	601a      	str	r2, [r3, #0]
		if (depthData->output2 < outPrev2) depthData->pos = depthData->pos + (outPrev2 - depthData->output2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	6a3a      	ldr	r2, [r7, #32]
 8003418:	429a      	cmp	r2, r3
 800341a:	dd3e      	ble.n	800349a <calculateDistance+0x346>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	6a39      	ldr	r1, [r7, #32]
 8003426:	1acb      	subs	r3, r1, r3
 8003428:	441a      	add	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]
		return;
 800342e:	e034      	b.n	800349a <calculateDistance+0x346>
 8003430:	08011b44 	.word	0x08011b44
 8003434:	8d3dcb09 	.word	0x8d3dcb09
	}
    if (depthData->output1 > depthData->output2 && depthData->output1 < 29 && depthData->output2 < 2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	429a      	cmp	r2, r3
 8003442:	dd2c      	ble.n	800349e <calculateDistance+0x34a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b1c      	cmp	r3, #28
 800344a:	dc28      	bgt.n	800349e <calculateDistance+0x34a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	dc24      	bgt.n	800349e <calculateDistance+0x34a>
	{

		if (depthData->output1 > outPrev1) depthData->pos = depthData->pos - (depthData->output1 - outPrev1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345a:	429a      	cmp	r2, r3
 800345c:	da08      	bge.n	8003470 <calculateDistance+0x31c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	1acb      	subs	r3, r1, r3
 800346a:	1ad2      	subs	r2, r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]
		if (depthData->output1 < outPrev1) depthData->pos = depthData->pos + (outPrev1 - depthData->output1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	429a      	cmp	r2, r3
 8003478:	dd13      	ble.n	80034a2 <calculateDistance+0x34e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003484:	1acb      	subs	r3, r1, r3
 8003486:	441a      	add	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]
		return;
 800348c:	e009      	b.n	80034a2 <calculateDistance+0x34e>
    	return;
 800348e:	bf00      	nop
 8003490:	e008      	b.n	80034a4 <calculateDistance+0x350>
		return;
 8003492:	bf00      	nop
 8003494:	e006      	b.n	80034a4 <calculateDistance+0x350>
		return;
 8003496:	bf00      	nop
 8003498:	e004      	b.n	80034a4 <calculateDistance+0x350>
		return;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <calculateDistance+0x350>
	}

    return;
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <calculateDistance+0x350>
		return;
 80034a2:	bf00      	nop
}
 80034a4:	3728      	adds	r7, #40	; 0x28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bdb0      	pop	{r4, r5, r7, pc}
 80034aa:	bf00      	nop

080034ac <bytecpy>:
 */

#include "../Inc/Pressure/PressureSensing.h"

static void bytecpy(uint8_t *target, uint8_t *source)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
    if ((target != NULL) && (source != NULL))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d006      	beq.n	80034ca <bytecpy+0x1e>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <bytecpy+0x1e>
    {
        *target = *source;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	701a      	strb	r2, [r3, #0]
    }
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <lps28dfw_read_reg>:

int32_t lps28dfw_read_reg(I2C_HandleTypeDef* handle, uint8_t wantedAddress, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b08c      	sub	sp, #48	; 0x30
 80034da:	af02      	add	r7, sp, #8
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	72fb      	strb	r3, [r7, #11]
 80034e4:	4613      	mov	r3, r2
 80034e6:	72bb      	strb	r3, [r7, #10]
	//printf("\r\nreading reg");
	HAL_StatusTypeDef ret;
	uint8_t transmitBuf[12];
	// Make sure the number of bytes is statusid
	if(len == 0)
 80034e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <lps28dfw_read_reg+0x1e>
	{
		return LPS28DFW_E_COM_FAIL;
 80034ee:	f06f 0301 	mvn.w	r3, #1
 80034f2:	e045      	b.n	8003580 <lps28dfw_read_reg+0xaa>
	}
	uint8_t address = wantedAddress << 1;
 80034f4:	7afb      	ldrb	r3, [r7, #11]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// Jump to desired register address
	transmitBuf[0] = reg;
 80034fc:	7abb      	ldrb	r3, [r7, #10]
 80034fe:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(handle, address, transmitBuf, 1, 1000);
 8003500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003504:	b299      	uxth	r1, r3
 8003506:	f107 0214 	add.w	r2, r7, #20
 800350a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2301      	movs	r3, #1
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f003 fd4e 	bl	8006fb4 <HAL_I2C_Master_Transmit>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if ( ret != HAL_OK ) {
 800351e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <lps28dfw_read_reg+0x56>
		//printf("\r\nHAL read transmit error");
		return LPS28DFW_E_COM_FAIL;
 8003526:	f06f 0301 	mvn.w	r3, #1
 800352a:	e029      	b.n	8003580 <lps28dfw_read_reg+0xaa>
	}
	else{
		ret = HAL_I2C_Master_Receive(handle, address, transmitBuf, len, HAL_MAX_DELAY);
 800352c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003530:	b299      	uxth	r1, r3
 8003532:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003534:	f107 0214 	add.w	r2, r7, #20
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	9000      	str	r0, [sp, #0]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f003 fe2c 	bl	800719c <HAL_I2C_Master_Receive>
 8003544:	4603      	mov	r3, r0
 8003546:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		if ( ret != HAL_OK ) {
 800354a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <lps28dfw_read_reg+0x82>
			//printf("\r\nHAL read receive error");
			return LPS28DFW_E_COM_FAIL;
 8003552:	f06f 0301 	mvn.w	r3, #1
 8003556:	e013      	b.n	8003580 <lps28dfw_read_reg+0xaa>
		}
		else{

			for(int i = 0;i<len;i++){
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
 800355c:	e00b      	b.n	8003576 <lps28dfw_read_reg+0xa0>

				data[i] = transmitBuf[i];
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	4413      	add	r3, r2
 8003564:	f107 0114 	add.w	r1, r7, #20
 8003568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356a:	440a      	add	r2, r1
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i<len;i++){
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	3301      	adds	r3, #1
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
 8003576:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357a:	429a      	cmp	r2, r3
 800357c:	dbef      	blt.n	800355e <lps28dfw_read_reg+0x88>

			}

		}
	}
	return LPS28DFW_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3728      	adds	r7, #40	; 0x28
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <lps28dfw_write_reg>:

int32_t lps28dfw_write_reg(I2C_HandleTypeDef* handle, uint8_t wantedAddress, uint8_t reg, uint8_t *data,
                           uint16_t len)
{
 8003588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800358c:	b08b      	sub	sp, #44	; 0x2c
 800358e:	af02      	add	r7, sp, #8
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	72fb      	strb	r3, [r7, #11]
 8003598:	4613      	mov	r3, r2
 800359a:	72bb      	strb	r3, [r7, #10]
 800359c:	466b      	mov	r3, sp
 800359e:	461e      	mov	r6, r3
	HAL_StatusTypeDef ret;
	uint8_t transmitBuf[len+1];
 80035a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035a4:	1c59      	adds	r1, r3, #1
 80035a6:	1e4b      	subs	r3, r1, #1
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	460a      	mov	r2, r1
 80035ac:	2300      	movs	r3, #0
 80035ae:	4690      	mov	r8, r2
 80035b0:	4699      	mov	r9, r3
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c6:	460a      	mov	r2, r1
 80035c8:	2300      	movs	r3, #0
 80035ca:	4614      	mov	r4, r2
 80035cc:	461d      	mov	r5, r3
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	00eb      	lsls	r3, r5, #3
 80035d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035dc:	00e2      	lsls	r2, r4, #3
 80035de:	460b      	mov	r3, r1
 80035e0:	3307      	adds	r3, #7
 80035e2:	08db      	lsrs	r3, r3, #3
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	ebad 0d03 	sub.w	sp, sp, r3
 80035ea:	ab02      	add	r3, sp, #8
 80035ec:	3300      	adds	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
	// Make sure the number of bytes is status id
	if(len == 0)
 80035f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <lps28dfw_write_reg+0x76>
	{
		return LPS28DFW_E_COM_FAIL;
 80035f8:	f06f 0301 	mvn.w	r3, #1
 80035fc:	e030      	b.n	8003660 <lps28dfw_write_reg+0xd8>
	}

	uint8_t address = wantedAddress << 1;
 80035fe:	7afb      	ldrb	r3, [r7, #11]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	74fb      	strb	r3, [r7, #19]
	transmitBuf[0] = reg;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	7aba      	ldrb	r2, [r7, #10]
 8003608:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i<=len;i++){
 800360a:	2301      	movs	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	e00c      	b.n	800362a <lps28dfw_write_reg+0xa2>
		transmitBuf[i] = data[i-1];
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3b01      	subs	r3, #1
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	7819      	ldrb	r1, [r3, #0]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	4413      	add	r3, r2
 8003620:	460a      	mov	r2, r1
 8003622:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i<=len;i++){
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	3301      	adds	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	429a      	cmp	r2, r3
 8003632:	dded      	ble.n	8003610 <lps28dfw_write_reg+0x88>
	}
	ret = HAL_I2C_Master_Transmit(handle, address, transmitBuf, len+1, 1000);
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	b299      	uxth	r1, r3
 8003638:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800363c:	3301      	adds	r3, #1
 800363e:	b29b      	uxth	r3, r3
 8003640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003644:	9200      	str	r2, [sp, #0]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f003 fcb3 	bl	8006fb4 <HAL_I2C_Master_Transmit>
 800364e:	4603      	mov	r3, r0
 8003650:	74bb      	strb	r3, [r7, #18]
	if ( ret != HAL_OK ) {
 8003652:	7cbb      	ldrb	r3, [r7, #18]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <lps28dfw_write_reg+0xd6>
		return LPS28DFW_E_COM_FAIL;
 8003658:	f06f 0301 	mvn.w	r3, #1
 800365c:	e000      	b.n	8003660 <lps28dfw_write_reg+0xd8>
	}

	return LPS28DFW_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	46b5      	mov	sp, r6
}
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800366c <lps28dfw_from_fs1260_to_hPa>:

//conversions

float lps28dfw_from_fs1260_to_hPa(int32_t lsb)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
    return ((float)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003698 <lps28dfw_from_fs1260_to_hPa+0x2c>
 8003682:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003686:	eef0 7a66 	vmov.f32	s15, s13
}
 800368a:	eeb0 0a67 	vmov.f32	s0, s15
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	49800000 	.word	0x49800000

0800369c <lps28dfw_from_fs4000_to_hPa>:

float lps28dfw_from_fs4000_to_hPa(int32_t lsb)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
    return ((float)lsb /  524288.0f);   /* 2048.0f * 256 */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80036c8 <lps28dfw_from_fs4000_to_hPa+0x2c>
 80036b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036b6:	eef0 7a66 	vmov.f32	s15, s13
}
 80036ba:	eeb0 0a67 	vmov.f32	s0, s15
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	49000000 	.word	0x49000000

080036cc <lps28dfw_from_lsb_to_celsius>:

float lps28dfw_from_lsb_to_celsius(int16_t lsb)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	80fb      	strh	r3, [r7, #6]
    return ((float)lsb / 100.0f);
 80036d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80036fc <lps28dfw_from_lsb_to_celsius+0x30>
 80036e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036ea:	eef0 7a66 	vmov.f32	s15, s13
}
 80036ee:	eeb0 0a67 	vmov.f32	s0, s15
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	42c80000 	.word	0x42c80000

08003700 <initLPS28>:

/// @brief Enables the BDU and IF_ADD_INC bits in the control registers
/// @return Error code. 0 means success, negative means failure
int32_t initLPS28(lps28dfw_info_t* sensorData, uint8_t status)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af02      	add	r7, sp, #8
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
    lps28dfw_ctrl_reg2_t ctrl_reg2;
    lps28dfw_ctrl_reg3_t ctrl_reg3;
    uint8_t reg[2];
    int32_t ret;

    ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2, reg, 2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7919      	ldrb	r1, [r3, #4]
 8003714:	f107 0308 	add.w	r3, r7, #8
 8003718:	2202      	movs	r2, #2
 800371a:	9200      	str	r2, [sp, #0]
 800371c:	2211      	movs	r2, #17
 800371e:	f7ff feda 	bl	80034d6 <lps28dfw_read_reg>
 8003722:	6178      	str	r0, [r7, #20]
    if (ret == 0)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d172      	bne.n	8003810 <initLPS28+0x110>
    {
        bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 800372a:	f107 0208 	add.w	r2, r7, #8
 800372e:	f107 0310 	add.w	r3, r7, #16
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff feb9 	bl	80034ac <bytecpy>
        bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 800373a:	f107 0308 	add.w	r3, r7, #8
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff feb0 	bl	80034ac <bytecpy>

        switch (status)
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d016      	beq.n	8003780 <initLPS28+0x80>
 8003752:	2b02      	cmp	r3, #2
 8003754:	dc4b      	bgt.n	80037ee <initLPS28+0xee>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d023      	beq.n	80037a2 <initLPS28+0xa2>
 800375a:	2b01      	cmp	r3, #1
 800375c:	d147      	bne.n	80037ee <initLPS28+0xee>
        {
        case LPS28DFW_BOOT:
            ctrl_reg2.boot = PROPERTY_ENABLE;
 800375e:	7c3b      	ldrb	r3, [r7, #16]
 8003760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003764:	743b      	strb	r3, [r7, #16]
            ret = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	7919      	ldrb	r1, [r3, #4]
 800376e:	f107 0310 	add.w	r3, r7, #16
 8003772:	2201      	movs	r2, #1
 8003774:	9200      	str	r2, [sp, #0]
 8003776:	2211      	movs	r2, #17
 8003778:	f7ff ff06 	bl	8003588 <lps28dfw_write_reg>
 800377c:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl_reg2, 1);
            break;
 800377e:	e048      	b.n	8003812 <initLPS28+0x112>
        case LPS28DFW_RESET:
            ctrl_reg2.swreset = PROPERTY_ENABLE;
 8003780:	7c3b      	ldrb	r3, [r7, #16]
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	743b      	strb	r3, [r7, #16]
            ret = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7919      	ldrb	r1, [r3, #4]
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	2201      	movs	r2, #1
 8003796:	9200      	str	r2, [sp, #0]
 8003798:	2211      	movs	r2, #17
 800379a:	f7ff fef5 	bl	8003588 <lps28dfw_write_reg>
 800379e:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl_reg2, 1);
            break;
 80037a0:	e037      	b.n	8003812 <initLPS28+0x112>
        case LPS28DFW_DRV_RDY:
            ctrl_reg2.bdu = PROPERTY_ENABLE;
 80037a2:	7c3b      	ldrb	r3, [r7, #16]
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	743b      	strb	r3, [r7, #16]
            ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 80037aa:	7b3b      	ldrb	r3, [r7, #12]
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	733b      	strb	r3, [r7, #12]
            bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 80037b2:	f107 0210 	add.w	r2, r7, #16
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fe75 	bl	80034ac <bytecpy>
            bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 80037c2:	f107 020c 	add.w	r2, r7, #12
 80037c6:	f107 0308 	add.w	r3, r7, #8
 80037ca:	3301      	adds	r3, #1
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fe6c 	bl	80034ac <bytecpy>
            ret = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2, reg, 2);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7919      	ldrb	r1, [r3, #4]
 80037dc:	f107 0308 	add.w	r3, r7, #8
 80037e0:	2202      	movs	r2, #2
 80037e2:	9200      	str	r2, [sp, #0]
 80037e4:	2211      	movs	r2, #17
 80037e6:	f7ff fecf 	bl	8003588 <lps28dfw_write_reg>
 80037ea:	6178      	str	r0, [r7, #20]
            break;
 80037ec:	e011      	b.n	8003812 <initLPS28+0x112>
        default:
            ctrl_reg2.swreset = PROPERTY_ENABLE;
 80037ee:	7c3b      	ldrb	r3, [r7, #16]
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	743b      	strb	r3, [r7, #16]
            ret = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7919      	ldrb	r1, [r3, #4]
 80037fe:	f107 0310 	add.w	r3, r7, #16
 8003802:	2201      	movs	r2, #1
 8003804:	9200      	str	r2, [sp, #0]
 8003806:	2211      	movs	r2, #17
 8003808:	f7ff febe 	bl	8003588 <lps28dfw_write_reg>
 800380c:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl_reg2, 1);
            break;
 800380e:	e000      	b.n	8003812 <initLPS28+0x112>
        }

    }
 8003810:	bf00      	nop
    return ret;
 8003812:	697b      	ldr	r3, [r7, #20]

}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <beginLPS28>:
/// @brief Begin communication with the sensor over I2C
/// @param address I2C address of sensor
/// @param wirePort I2C port to use for communication, defaults to Wire
/// @return Error code. 0 means success, negative means failure
int32_t beginLPS28(lps28dfw_info_t* sensorData, uint8_t address)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af02      	add	r7, sp, #8
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
    // Variable to track errors returned by API calls
    int32_t err = LPS28DFW_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]

    // Check whether the sensor is actually connected
    uint8_t chipID;
    err = lps28dfw_read_reg(sensorData->handle, address, LPS28DFW_WHOAMI_ADDR, &chipID, 1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	f107 030b 	add.w	r3, r7, #11
 8003834:	78f9      	ldrb	r1, [r7, #3]
 8003836:	2201      	movs	r2, #1
 8003838:	9200      	str	r2, [sp, #0]
 800383a:	220f      	movs	r2, #15
 800383c:	f7ff fe4b 	bl	80034d6 <lps28dfw_read_reg>
 8003840:	60f8      	str	r0, [r7, #12]
    if(err != LPS28DFW_OK)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <beginLPS28+0x30>
    {
    	//printf("\r\nID read error");
        return err;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	e016      	b.n	800387a <beginLPS28+0x5e>
    }
    else{
    	//printf("\r\nRetrieved ID: %d", chipID);
    }
    if(chipID != LPS28DFW_WHOAMI)
 800384c:	7afb      	ldrb	r3, [r7, #11]
 800384e:	2bb4      	cmp	r3, #180	; 0xb4
 8003850:	d002      	beq.n	8003858 <beginLPS28+0x3c>
    {
        return LPS28DFW_E_NOT_CONNECTED;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e010      	b.n	800387a <beginLPS28+0x5e>
    }
    sensorData->i2cAddress = address;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	711a      	strb	r2, [r3, #4]
    // Sensor is connected, send soft reset to clear any provious configuratio
    err = resetLPS28(sensorData);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f80f 	bl	8003882 <resetLPS28>
 8003864:	60f8      	str	r0, [r7, #12]
    if(err != LPS28DFW_OK)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <beginLPS28+0x54>
    {
        return err;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	e004      	b.n	800387a <beginLPS28+0x5e>
    }

    // Send init command
    return initLPS28(sensorData, LPS28DFW_DRV_RDY);
 8003870:	2100      	movs	r1, #0
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff44 	bl	8003700 <initLPS28>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <resetLPS28>:
}

/// @brief Tells the sensor to reset itself
/// @return Error code. 0 means success, negative means failure
int32_t resetLPS28(lps28dfw_info_t* sensorData)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
    // Variable to track errors returned by API calls
    int32_t err = LPS28DFW_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]

    // Send reset command
    err = initLPS28(sensorData, LPS28DFW_RESET);
 800388e:	2102      	movs	r1, #2
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff35 	bl	8003700 <initLPS28>
 8003896:	60f8      	str	r0, [r7, #12]

    lps28dfw_stat_t status;
    do
    {
        err = getStatus(sensorData, &status);
 8003898:	f107 0308 	add.w	r3, r7, #8
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f891 	bl	80039c6 <getStatus>
 80038a4:	60f8      	str	r0, [r7, #12]
        if(err != LPS28DFW_OK)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <resetLPS28+0x2e>
        {
            return err;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	e006      	b.n	80038be <resetLPS28+0x3c>
        }
    }
    while(status.sw_reset);
 80038b0:	7a3b      	ldrb	r3, [r7, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ed      	bne.n	8003898 <resetLPS28+0x16>

    return LPS28DFW_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <setModeConfig>:

/// @brief Sets operational parameters of the sensor, such as range and ODR
/// @param config Struct of configuration parameters, see lps28dfw_md_t
/// @return Error code. 0 means success, negative means failure
int32_t setModeConfig(lps28dfw_info_t* sensorData, lps28dfw_md_t* config)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b088      	sub	sp, #32
 80038ca:	af02      	add	r7, sp, #8
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
    // Variable to track errors returned by API calls
    int32_t err = LPS28DFW_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

    lps28dfw_ctrl_reg1_t ctrl_reg1;
    lps28dfw_ctrl_reg2_t ctrl_reg2;
    uint8_t reg[2];

    err = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG1, reg, 2);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7919      	ldrb	r1, [r3, #4]
 80038dc:	f107 0308 	add.w	r3, r7, #8
 80038e0:	2202      	movs	r2, #2
 80038e2:	9200      	str	r2, [sp, #0]
 80038e4:	2210      	movs	r2, #16
 80038e6:	f7ff fdf6 	bl	80034d6 <lps28dfw_read_reg>
 80038ea:	6178      	str	r0, [r7, #20]
    if(err != LPS28DFW_OK)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <setModeConfig+0x30>
    {
        return err;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	e063      	b.n	80039be <setModeConfig+0xf8>
    }
    if (err == 0)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d155      	bne.n	80039a8 <setModeConfig+0xe2>
    {
        bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 80038fc:	f107 0208 	add.w	r2, r7, #8
 8003900:	f107 0310 	add.w	r3, r7, #16
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fdd0 	bl	80034ac <bytecpy>
        bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 800390c:	f107 0308 	add.w	r3, r7, #8
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	f107 030c 	add.w	r3, r7, #12
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fdc7 	bl	80034ac <bytecpy>

        ctrl_reg1.odr = (uint8_t)config->odr;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	785b      	ldrb	r3, [r3, #1]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	b2da      	uxtb	r2, r3
 8003928:	7c3b      	ldrb	r3, [r7, #16]
 800392a:	f362 03c6 	bfi	r3, r2, #3, #4
 800392e:	743b      	strb	r3, [r7, #16]
        ctrl_reg1.avg = (uint8_t)config->avg;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	789b      	ldrb	r3, [r3, #2]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	b2da      	uxtb	r2, r3
 800393a:	7c3b      	ldrb	r3, [r7, #16]
 800393c:	f362 0302 	bfi	r3, r2, #0, #3
 8003940:	743b      	strb	r3, [r7, #16]
        ctrl_reg2.en_lpfp = ((uint8_t)config->lpf & 0x01U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	78db      	ldrb	r3, [r3, #3]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	7b3b      	ldrb	r3, [r7, #12]
 800394e:	f362 1304 	bfi	r3, r2, #4, #1
 8003952:	733b      	strb	r3, [r7, #12]
        ctrl_reg2.lfpf_cfg = ((uint8_t)config->lpf & 0x02U) >> 2;
 8003954:	7b3b      	ldrb	r3, [r7, #12]
 8003956:	f36f 1345 	bfc	r3, #5, #1
 800395a:	733b      	strb	r3, [r7, #12]
        ctrl_reg2.fs_mode = (uint8_t)config->fs;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	b2da      	uxtb	r2, r3
 8003966:	7b3b      	ldrb	r3, [r7, #12]
 8003968:	f362 1386 	bfi	r3, r2, #6, #1
 800396c:	733b      	strb	r3, [r7, #12]

        bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 800396e:	f107 0210 	add.w	r2, r7, #16
 8003972:	f107 0308 	add.w	r3, r7, #8
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fd97 	bl	80034ac <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 800397e:	f107 020c 	add.w	r2, r7, #12
 8003982:	f107 0308 	add.w	r3, r7, #8
 8003986:	3301      	adds	r3, #1
 8003988:	4611      	mov	r1, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fd8e 	bl	80034ac <bytecpy>

        err = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG1, reg, 2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	7919      	ldrb	r1, [r3, #4]
 8003998:	f107 0308 	add.w	r3, r7, #8
 800399c:	2202      	movs	r2, #2
 800399e:	9200      	str	r2, [sp, #0]
 80039a0:	2210      	movs	r2, #16
 80039a2:	f7ff fdf1 	bl	8003588 <lps28dfw_write_reg>
 80039a6:	6178      	str	r0, [r7, #20]
    }

    if(err != LPS28DFW_OK)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <setModeConfig+0xec>
    {
        return err;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	e005      	b.n	80039be <setModeConfig+0xf8>
    }

    // Config set correctly, save config for use later
    memcpy(&(sensorData->modeConfig), config, sizeof(lps28dfw_md_t));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3305      	adds	r3, #5
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	601a      	str	r2, [r3, #0]

    return LPS28DFW_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <getStatus>:

/// @brief Gets sensor status bits, such as data ready, overrun, etc.
/// @param status Struct of status bits, see lps28dfw_stat_t
/// @return Error code. 0 means success, negative means failure
int32_t getStatus(lps28dfw_info_t* sensorData, lps28dfw_stat_t* stat)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b08a      	sub	sp, #40	; 0x28
 80039ca:	af02      	add	r7, sp, #8
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
    lps28dfw_int_source_t int_source;
    lps28dfw_ctrl_reg2_t ctrl_reg2;
    lps28dfw_status_t status;
    int32_t ret;

    ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7919      	ldrb	r1, [r3, #4]
 80039d8:	f107 0310 	add.w	r3, r7, #16
 80039dc:	2201      	movs	r2, #1
 80039de:	9200      	str	r2, [sp, #0]
 80039e0:	2211      	movs	r2, #17
 80039e2:	f7ff fd78 	bl	80034d6 <lps28dfw_read_reg>
 80039e6:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2, 1);
    if (ret == 0)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10b      	bne.n	8003a06 <getStatus+0x40>
    {
        ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_INT_SOURCE, (uint8_t *)&int_source, 1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7919      	ldrb	r1, [r3, #4]
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	2201      	movs	r2, #1
 80039fc:	9200      	str	r2, [sp, #0]
 80039fe:	2224      	movs	r2, #36	; 0x24
 8003a00:	f7ff fd69 	bl	80034d6 <lps28dfw_read_reg>
 8003a04:	61f8      	str	r0, [r7, #28]
    }
    if (ret == 0)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <getStatus+0x5e>
    {
        ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_STATUS, (uint8_t *)&status, 1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7919      	ldrb	r1, [r3, #4]
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	2201      	movs	r2, #1
 8003a1a:	9200      	str	r2, [sp, #0]
 8003a1c:	2227      	movs	r2, #39	; 0x27
 8003a1e:	f7ff fd5a 	bl	80034d6 <lps28dfw_read_reg>
 8003a22:	61f8      	str	r0, [r7, #28]
    }
    if (ret == 0)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <getStatus+0x7c>
    {
        ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_INTERRUPT_CFG,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7919      	ldrb	r1, [r3, #4]
 8003a32:	f107 0318 	add.w	r3, r7, #24
 8003a36:	2201      	movs	r2, #1
 8003a38:	9200      	str	r2, [sp, #0]
 8003a3a:	220b      	movs	r2, #11
 8003a3c:	f7ff fd4b 	bl	80034d6 <lps28dfw_read_reg>
 8003a40:	61f8      	str	r0, [r7, #28]
                                (uint8_t *)&interrupt_cfg, 1);
    }
    stat->sw_reset  = ctrl_reg2.swreset;
 8003a42:	7c3b      	ldrb	r3, [r7, #16]
 8003a44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003a48:	b2d9      	uxtb	r1, r3
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	7813      	ldrb	r3, [r2, #0]
 8003a4e:	f361 0300 	bfi	r3, r1, #0, #1
 8003a52:	7013      	strb	r3, [r2, #0]
    stat->boot      = int_source.boot_on;
 8003a54:	7d3b      	ldrb	r3, [r7, #20]
 8003a56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a5a:	b2d9      	uxtb	r1, r3
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	7813      	ldrb	r3, [r2, #0]
 8003a60:	f361 0341 	bfi	r3, r1, #1, #1
 8003a64:	7013      	strb	r3, [r2, #0]
    stat->drdy_pres = status.p_da;
 8003a66:	7b3b      	ldrb	r3, [r7, #12]
 8003a68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a6c:	b2d9      	uxtb	r1, r3
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	7813      	ldrb	r3, [r2, #0]
 8003a72:	f361 0382 	bfi	r3, r1, #2, #1
 8003a76:	7013      	strb	r3, [r2, #0]
    stat->drdy_temp = status.t_da;
 8003a78:	7b3b      	ldrb	r3, [r7, #12]
 8003a7a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003a7e:	b2d9      	uxtb	r1, r3
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	7813      	ldrb	r3, [r2, #0]
 8003a84:	f361 03c3 	bfi	r3, r1, #3, #1
 8003a88:	7013      	strb	r3, [r2, #0]
    stat->ovr_pres  = status.p_or;
 8003a8a:	7b3b      	ldrb	r3, [r7, #12]
 8003a8c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003a90:	b2d9      	uxtb	r1, r3
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	7813      	ldrb	r3, [r2, #0]
 8003a96:	f361 1304 	bfi	r3, r1, #4, #1
 8003a9a:	7013      	strb	r3, [r2, #0]
    stat->ovr_temp  = status.t_or;
 8003a9c:	7b3b      	ldrb	r3, [r7, #12]
 8003a9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003aa2:	b2d9      	uxtb	r1, r3
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	7813      	ldrb	r3, [r2, #0]
 8003aa8:	f361 1345 	bfi	r3, r1, #5, #1
 8003aac:	7013      	strb	r3, [r2, #0]
    stat->end_meas  = ~ctrl_reg2.oneshot;
 8003aae:	7c3b      	ldrb	r3, [r7, #16]
 8003ab0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	b2d9      	uxtb	r1, r3
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	7813      	ldrb	r3, [r2, #0]
 8003ac4:	f361 1386 	bfi	r3, r1, #6, #1
 8003ac8:	7013      	strb	r3, [r2, #0]
    stat->ref_done = ~interrupt_cfg.autozero;
 8003aca:	7e3b      	ldrb	r3, [r7, #24]
 8003acc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	b2d9      	uxtb	r1, r3
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	7813      	ldrb	r3, [r2, #0]
 8003ae0:	f361 13c7 	bfi	r3, r1, #7, #1
 8003ae4:	7013      	strb	r3, [r2, #0]

    return ret;
 8003ae6:	69fb      	ldr	r3, [r7, #28]

}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <lps28dfw_trigger_sw>:

int32_t lps28dfw_trigger_sw(lps28dfw_info_t* sensorData)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
    lps28dfw_ctrl_reg2_t ctrl_reg2;
    int32_t ret = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]

    if (sensorData->modeConfig.odr == odr_LPS28DFW_ONE_SHOT)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	799b      	ldrb	r3, [r3, #6]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11e      	bne.n	8003b42 <lps28dfw_trigger_sw+0x52>
    {
        ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7919      	ldrb	r1, [r3, #4]
 8003b0c:	f107 0308 	add.w	r3, r7, #8
 8003b10:	2201      	movs	r2, #1
 8003b12:	9200      	str	r2, [sp, #0]
 8003b14:	2211      	movs	r2, #17
 8003b16:	f7ff fcde 	bl	80034d6 <lps28dfw_read_reg>
 8003b1a:	60f8      	str	r0, [r7, #12]
        ctrl_reg2.oneshot = PROPERTY_ENABLE;
 8003b1c:	7a3b      	ldrb	r3, [r7, #8]
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	723b      	strb	r3, [r7, #8]
        if (ret == 0)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <lps28dfw_trigger_sw+0x52>
        {
            ret = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7919      	ldrb	r1, [r3, #4]
 8003b32:	f107 0308 	add.w	r3, r7, #8
 8003b36:	2201      	movs	r2, #1
 8003b38:	9200      	str	r2, [sp, #0]
 8003b3a:	2211      	movs	r2, #17
 8003b3c:	f7ff fd24 	bl	8003588 <lps28dfw_write_reg>
 8003b40:	60f8      	str	r0, [r7, #12]
        }
    }
    return ret;
 8003b42:	68fb      	ldr	r3, [r7, #12]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <lps28dfw_data_get>:

int32_t lps28dfw_data_get(lps28dfw_info_t* sensorData)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	6078      	str	r0, [r7, #4]
    uint8_t buff[5];
    int32_t ret;

    ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_PRESS_OUT_XL, buff, 5);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7919      	ldrb	r1, [r3, #4]
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	2205      	movs	r2, #5
 8003b62:	9200      	str	r2, [sp, #0]
 8003b64:	2228      	movs	r2, #40	; 0x28
 8003b66:	f7ff fcb6 	bl	80034d6 <lps28dfw_read_reg>
 8003b6a:	6178      	str	r0, [r7, #20]

    /* pressure conversion */
    sensorData->data.pressure.raw = (int32_t)buff[2];
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	611a      	str	r2, [r3, #16]
    sensorData->data.pressure.raw = (sensorData->data.pressure.raw * 256) + (int32_t) buff[1];
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	7b7a      	ldrb	r2, [r7, #13]
 8003b7c:	441a      	add	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
    sensorData->data.pressure.raw = (sensorData->data.pressure.raw * 256) + (int32_t) buff[0];
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	7b3a      	ldrb	r2, [r7, #12]
 8003b8a:	441a      	add	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	611a      	str	r2, [r3, #16]
    sensorData->data.pressure.raw = sensorData->data.pressure.raw * 256;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	021a      	lsls	r2, r3, #8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	611a      	str	r2, [r3, #16]

    switch (sensorData->modeConfig.fs)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	795b      	ldrb	r3, [r3, #5]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <lps28dfw_data_get+0x5c>
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d00b      	beq.n	8003bbe <lps28dfw_data_get+0x72>
 8003ba6:	e015      	b.n	8003bd4 <lps28dfw_data_get+0x88>
    {
    case fs_LPS28DFW_1260hPa:
        sensorData->data.pressure.hpa = lps28dfw_from_fs1260_to_hPa(sensorData->data.pressure.raw);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fd5d 	bl	800366c <lps28dfw_from_fs1260_to_hPa>
 8003bb2:	eef0 7a40 	vmov.f32	s15, s0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	edc3 7a03 	vstr	s15, [r3, #12]
        break;
 8003bbc:	e00f      	b.n	8003bde <lps28dfw_data_get+0x92>
    case fs_LPS28DFW_4000hPa:
        sensorData->data.pressure.hpa = lps28dfw_from_fs4000_to_hPa(sensorData->data.pressure.raw);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fd6a 	bl	800369c <lps28dfw_from_fs4000_to_hPa>
 8003bc8:	eef0 7a40 	vmov.f32	s15, s0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	edc3 7a03 	vstr	s15, [r3, #12]
        break;
 8003bd2:	e004      	b.n	8003bde <lps28dfw_data_get+0x92>
    default:
        sensorData->data.pressure.hpa = 0.0f;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	60da      	str	r2, [r3, #12]
        break;
 8003bdc:	bf00      	nop
    }

    /* temperature conversion */
    sensorData->data.heat.raw = (int16_t)buff[4];
 8003bde:	7c3b      	ldrb	r3, [r7, #16]
 8003be0:	b21a      	sxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	831a      	strh	r2, [r3, #24]
    sensorData->data.heat.raw = (sensorData->data.heat.raw * 256) + (int16_t) buff[3];
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	b21a      	sxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	831a      	strh	r2, [r3, #24]
    sensorData->data.heat.deg_c = lps28dfw_from_lsb_to_celsius(sensorData->data.heat.raw);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fd60 	bl	80036cc <lps28dfw_from_lsb_to_celsius>
 8003c0c:	eef0 7a40 	vmov.f32	s15, s0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	edc3 7a05 	vstr	s15, [r3, #20]

    return ret;
 8003c16:	697b      	ldr	r3, [r7, #20]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <getSensorData>:

/// @brief Gets pressure data from the sensor. This must be called to update
/// the data struct
/// @return Error code. 0 means success, negative means failure
int32_t getSensorData(lps28dfw_info_t* sensorData)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
    // Variable to track errors returned by API calls
    int32_t err = LPS28DFW_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
    //printf("\r\nTest1:");
    // Check whether we're in one-shot mode
    if(sensorData->modeConfig.odr == odr_LPS28DFW_ONE_SHOT)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	799b      	ldrb	r3, [r3, #6]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <getSensorData+0x26>
    {
        // We're in one-shot mode, trigger a measurement
        err = lps28dfw_trigger_sw(sensorData);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff5b 	bl	8003af0 <lps28dfw_trigger_sw>
 8003c3a:	60f8      	str	r0, [r7, #12]
        if(err != LPS28DFW_OK)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <getSensorData+0x26>
        {
            return err;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	e015      	b.n	8003c72 <getSensorData+0x52>
    //printf("\r\nTest2:");
    // Wait for measurement to finish
    lps28dfw_stat_t status;
    do
    {
        err = getStatus(sensorData, &status);
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff feba 	bl	80039c6 <getStatus>
 8003c52:	60f8      	str	r0, [r7, #12]
        if(err != LPS28DFW_OK)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <getSensorData+0x3e>
        {
            return err;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	e009      	b.n	8003c72 <getSensorData+0x52>
        }
    }
    while(!status.end_meas);
 8003c5e:	7a3b      	ldrb	r3, [r7, #8]
 8003c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0ed      	beq.n	8003c46 <getSensorData+0x26>
    //printf("\r\nTest3:");
    // Grab latest measurement
    return lps28dfw_data_get(sensorData);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ff6e 	bl	8003b4c <lps28dfw_data_get>
 8003c70:	4603      	mov	r3, r0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <init_comms>:
//uint8_t devices;
//device rfData->myDevice;

//Initialization of communications
void init_comms(struct rfDataStorage* rfData, uint8_t deviceType, int id, int discovered)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b086      	sub	sp, #24
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	460b      	mov	r3, r1
 8003c88:	72fb      	strb	r3, [r7, #11]
	//Create a fifo queuq
	create_queue(rfData->RXFIFO);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fd34 	bl	80046fc <create_queue>

	//Set device data
	rfData->myDevice.device_id = id;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	809a      	strh	r2, [r3, #4]
	rfData->myDevice.device_type = deviceType;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	7afa      	ldrb	r2, [r7, #11]
 8003ca0:	719a      	strb	r2, [r3, #6]
	rfData->myDevice.device_is_discovered = discovered;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	721a      	strb	r2, [r3, #8]

	//Set initila forwarding data
	rfData->count = 0;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	729a      	strb	r2, [r3, #10]
	rfData->num_fwds = 0;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	72da      	strb	r2, [r3, #11]

	//Set initial fifo data
	for(int i = 0;i<MAX_NUM_FWDS;i++){
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e020      	b.n	8003d06 <init_comms+0x8c>

		rfData->FWDFIFO[i].from_id = 0;
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	440b      	add	r3, r1
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[i].to_id = 0;
 8003cd8:	68f9      	ldr	r1, [r7, #12]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	440b      	add	r3, r1
 8003ce6:	330e      	adds	r3, #14
 8003ce8:	2200      	movs	r2, #0
 8003cea:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[i].type = 0;
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3310      	adds	r3, #16
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<MAX_NUM_FWDS;i++){
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	3301      	adds	r3, #1
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b13      	cmp	r3, #19
 8003d0a:	dddb      	ble.n	8003cc4 <init_comms+0x4a>

	}

}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <Comms_Handler>:

//The function to handle all communication traffic
void Comms_Handler(struct rfDataStorage* rfData)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b08c      	sub	sp, #48	; 0x30
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
	//If device is child
	if (rfData->myDevice.device_type == DEVICE_CHILD)					//Child Handler
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	799b      	ldrb	r3, [r3, #6]
 8003d22:	2b99      	cmp	r3, #153	; 0x99
 8003d24:	f040 813c 	bne.w	8003fa0 <Comms_Handler+0x28a>
	{
		//data holder
		uint8_t data = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73bb      	strb	r3, [r7, #14]

		//Refresh number of active messages
		rfData->messageNum = 0;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112

		//Iterate through fifo
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8003d34:	e11c      	b.n	8003f70 <Comms_Handler+0x25a>
		{
			//Dequeue first data point
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fd4a 	bl	80047d4 <dequeue>
 8003d40:	4603      	mov	r3, r0
 8003d42:	73bb      	strb	r3, [r7, #14]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 8003d44:	7bbb      	ldrb	r3, [r7, #14]
 8003d46:	2bfe      	cmp	r3, #254	; 0xfe
 8003d48:	f040 8112 	bne.w	8003f70 <Comms_Handler+0x25a>
			{

				//Set preamble message
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003d52:	4619      	mov	r1, r3
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	33ae      	adds	r3, #174	; 0xae
 8003d62:	22fe      	movs	r2, #254	; 0xfe
 8003d64:	701a      	strb	r2, [r3, #0]
				for(int i = 1;i<MSG_BODY_START;i++)
 8003d66:	2301      	movs	r3, #1
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6a:	e018      	b.n	8003d9e <Comms_Handler+0x88>
				{
					//Add control data to rx message
					rfData->activeRxMessage[rfData->messageNum][i] = dequeue(rfData->RXFIFO);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fd2f 	bl	80047d4 <dequeue>
 8003d76:	4602      	mov	r2, r0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003d7e:	4619      	mov	r1, r3
 8003d80:	b2d0      	uxtb	r0, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	441a      	add	r2, r3
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	4413      	add	r3, r2
 8003d92:	33ae      	adds	r3, #174	; 0xae
 8003d94:	4602      	mov	r2, r0
 8003d96:	701a      	strb	r2, [r3, #0]
				for(int i = 1;i<MSG_BODY_START;i++)
 8003d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	dde3      	ble.n	8003d6c <Comms_Handler+0x56>

				}

				//assign destination ID
				rfData->toID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS2]);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003daa:	4619      	mov	r1, r3
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	33b1      	adds	r3, #177	; 0xb1
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	b21a      	sxth	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4603      	mov	r3, r0
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4403      	add	r3, r0
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	33b0      	adds	r3, #176	; 0xb0
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b21a      	sxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003de4:	b291      	uxth	r1, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	3344      	adds	r3, #68	; 0x44
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4413      	add	r3, r2
 8003dee:	460a      	mov	r2, r1
 8003df0:	80da      	strh	r2, [r3, #6]

				//assign sender ID
				rfData->fromID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS2]);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003df8:	4619      	mov	r1, r3
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	33b3      	adds	r3, #179	; 0xb3
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	b21a      	sxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003e14:	4618      	mov	r0, r3
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4603      	mov	r3, r0
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4403      	add	r3, r0
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	33b2      	adds	r3, #178	; 0xb2
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	b21b      	sxth	r3, r3
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b21a      	sxth	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003e32:	b291      	uxth	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	3340      	adds	r3, #64	; 0x40
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4413      	add	r3, r2
 8003e3c:	460a      	mov	r2, r1
 8003e3e:	809a      	strh	r2, [r3, #4]

				//Retrieve message based on specified size
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8003e40:	2300      	movs	r3, #0
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e44:	e01a      	b.n	8003e7c <Comms_Handler+0x166>
				{
					data = dequeue(rfData->RXFIFO);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fcc2 	bl	80047d4 <dequeue>
 8003e50:	4603      	mov	r3, r0
 8003e52:	73bb      	strb	r3, [r7, #14]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	f103 0209 	add.w	r2, r3, #9
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4603      	mov	r3, r0
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4403      	add	r3, r0
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	4413      	add	r3, r2
 8003e70:	33ae      	adds	r3, #174	; 0xae
 8003e72:	7bba      	ldrb	r2, [r7, #14]
 8003e74:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	3301      	adds	r3, #1
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003e82:	4619      	mov	r1, r3
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	33b6      	adds	r3, #182	; 0xb6
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	dbd4      	blt.n	8003e46 <Comms_Handler+0x130>

				}

				//Handle message
				Message_Handler(rfData);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f9d1 	bl	8004244 <Message_Handler>

				int newMessage = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
				//Check if the received message was not received before during this fifo handling
				if(rfData->messageNum>0){
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d054      	beq.n	8003f5a <Comms_Handler+0x244>
					for(int i = 1;i<=rfData->messageNum;i++){
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	623b      	str	r3, [r7, #32]
 8003eb4:	e04a      	b.n	8003f4c <Comms_Handler+0x236>
						//check message type, destination ID and sender ID for comparison
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	33af      	adds	r3, #175	; 0xaf
 8003ecc:	7819      	ldrb	r1, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	1ad2      	subs	r2, r2, r3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4403      	add	r3, r0
 8003ee6:	33af      	adds	r3, #175	; 0xaf
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	4299      	cmp	r1, r3
 8003eec:	d12b      	bne.n	8003f46 <Comms_Handler+0x230>
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	3340      	adds	r3, #64	; 0x40
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	889a      	ldrh	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003f04:	4619      	mov	r1, r3
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	1acb      	subs	r3, r1, r3
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	3340      	adds	r3, #64	; 0x40
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	440b      	add	r3, r1
 8003f12:	889b      	ldrh	r3, [r3, #4]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d116      	bne.n	8003f46 <Comms_Handler+0x230>
						   rfData->toID[rfData->messageNum] == rfData->toID[rfData->messageNum-i]){
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	3344      	adds	r3, #68	; 0x44
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	88da      	ldrh	r2, [r3, #6]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	1acb      	subs	r3, r1, r3
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	3344      	adds	r3, #68	; 0x44
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	440b      	add	r3, r1
 8003f3c:	88db      	ldrh	r3, [r3, #6]
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d101      	bne.n	8003f46 <Comms_Handler+0x230>
								newMessage = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
					for(int i = 1;i<=rfData->messageNum;i++){
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	623b      	str	r3, [r7, #32]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003f52:	461a      	mov	r2, r3
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	4293      	cmp	r3, r2
 8003f58:	ddad      	ble.n	8003eb6 <Comms_Handler+0x1a0>
							}
					}
				}
				//Increment number of messages if new message was received
				if(newMessage){
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <Comms_Handler+0x25a>

					rfData->messageNum++;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003f66:	3301      	adds	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fbe9 	bl	800474c <is_empty>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f083 0301 	eor.w	r3, r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f47f aed7 	bne.w	8003d36 <Comms_Handler+0x20>

			}
		}

		//Perform discovery
		if(rfData->myDevice.device_is_discovered == false)			//if not discovered and theres no rfData->activeMessages
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	7a1b      	ldrb	r3, [r3, #8]
 8003f8c:	f083 0301 	eor.w	r3, r3, #1
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8136 	beq.w	8004204 <Comms_Handler+0x4ee>
		{
			//Im_Here(rfData);
			Discovery_Handler(rfData);						//go to discovery handler
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f937 	bl	800420c <Discovery_Handler>
			}
		}

	}

}
 8003f9e:	e131      	b.n	8004204 <Comms_Handler+0x4ee>
	else if (rfData->myDevice.device_type == DEVICE_PARENT)			//Parent Handler
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	799b      	ldrb	r3, [r3, #6]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f040 812d 	bne.w	8004204 <Comms_Handler+0x4ee>
		uint8_t data = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
		rfData->messageNum = 0;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8003fb6:	e119      	b.n	80041ec <Comms_Handler+0x4d6>
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fc09 	bl	80047d4 <dequeue>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	73fb      	strb	r3, [r7, #15]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	2bfe      	cmp	r3, #254	; 0xfe
 8003fca:	f040 810f 	bne.w	80041ec <Comms_Handler+0x4d6>
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	33ae      	adds	r3, #174	; 0xae
 8003fe4:	22fe      	movs	r2, #254	; 0xfe
 8003fe6:	701a      	strb	r2, [r3, #0]
				for(int i = 1;i<MSG_BODY_START;i++)
 8003fe8:	2301      	movs	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	e018      	b.n	8004020 <Comms_Handler+0x30a>
					rfData->activeRxMessage[rfData->messageNum][i] = dequeue(rfData->RXFIFO);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fbee 	bl	80047d4 <dequeue>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004000:	4619      	mov	r1, r3
 8004002:	b2d0      	uxtb	r0, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	460b      	mov	r3, r1
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	441a      	add	r2, r3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	33ae      	adds	r3, #174	; 0xae
 8004016:	4602      	mov	r2, r0
 8004018:	701a      	strb	r2, [r3, #0]
				for(int i = 1;i<MSG_BODY_START;i++)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3301      	adds	r3, #1
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b08      	cmp	r3, #8
 8004024:	dde3      	ble.n	8003fee <Comms_Handler+0x2d8>
				rfData->toID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS2]);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800402c:	4619      	mov	r1, r3
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	33b1      	adds	r3, #177	; 0xb1
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	b21a      	sxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004048:	4618      	mov	r0, r3
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4603      	mov	r3, r0
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4403      	add	r3, r0
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	33b0      	adds	r3, #176	; 0xb0
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	b21b      	sxth	r3, r3
 800405c:	4313      	orrs	r3, r2
 800405e:	b21a      	sxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004066:	b291      	uxth	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	3344      	adds	r3, #68	; 0x44
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	460a      	mov	r2, r1
 8004072:	80da      	strh	r2, [r3, #6]
				rfData->fromID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS2]);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800407a:	4619      	mov	r1, r3
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	33b3      	adds	r3, #179	; 0xb3
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	b21a      	sxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004096:	4618      	mov	r0, r3
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4603      	mov	r3, r0
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4403      	add	r3, r0
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	33b2      	adds	r3, #178	; 0xb2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b21b      	sxth	r3, r3
 80040aa:	4313      	orrs	r3, r2
 80040ac:	b21a      	sxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80040b4:	b291      	uxth	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	3340      	adds	r3, #64	; 0x40
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	4413      	add	r3, r2
 80040be:	460a      	mov	r2, r1
 80040c0:	809a      	strh	r2, [r3, #4]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e01a      	b.n	80040fe <Comms_Handler+0x3e8>
					data = dequeue(rfData->RXFIFO);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fb81 	bl	80047d4 <dequeue>
 80040d2:	4603      	mov	r3, r0
 80040d4:	73fb      	strb	r3, [r7, #15]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80040dc:	4618      	mov	r0, r3
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f103 0209 	add.w	r2, r3, #9
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4603      	mov	r3, r0
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4403      	add	r3, r0
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	4413      	add	r3, r2
 80040f2:	33ae      	adds	r3, #174	; 0xae
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	3301      	adds	r3, #1
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004104:	4619      	mov	r1, r3
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	33b6      	adds	r3, #182	; 0xb6
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	4293      	cmp	r3, r2
 800411c:	dbd4      	blt.n	80040c8 <Comms_Handler+0x3b2>
				int newMessage = 1;
 800411e:	2301      	movs	r3, #1
 8004120:	617b      	str	r3, [r7, #20]
				if(rfData->messageNum>0){
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004128:	2b00      	cmp	r3, #0
 800412a:	d054      	beq.n	80041d6 <Comms_Handler+0x4c0>
					for(int i = 1;i<=rfData->messageNum;i++){
 800412c:	2301      	movs	r3, #1
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	e04a      	b.n	80041c8 <Comms_Handler+0x4b2>
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004138:	4619      	mov	r1, r3
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	33af      	adds	r3, #175	; 0xaf
 8004148:	7819      	ldrb	r1, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004150:	461a      	mov	r2, r3
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad2      	subs	r2, r2, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4403      	add	r3, r0
 8004162:	33af      	adds	r3, #175	; 0xaf
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	4299      	cmp	r1, r3
 8004168:	d12b      	bne.n	80041c2 <Comms_Handler+0x4ac>
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	3340      	adds	r3, #64	; 0x40
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	889a      	ldrh	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004180:	4619      	mov	r1, r3
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1acb      	subs	r3, r1, r3
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	3340      	adds	r3, #64	; 0x40
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	440b      	add	r3, r1
 800418e:	889b      	ldrh	r3, [r3, #4]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8004190:	429a      	cmp	r2, r3
 8004192:	d116      	bne.n	80041c2 <Comms_Handler+0x4ac>
						   rfData->toID[rfData->messageNum] == rfData->toID[rfData->messageNum-i]){
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	3344      	adds	r3, #68	; 0x44
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	88da      	ldrh	r2, [r3, #6]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80041aa:	4619      	mov	r1, r3
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1acb      	subs	r3, r1, r3
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	3344      	adds	r3, #68	; 0x44
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	440b      	add	r3, r1
 80041b8:	88db      	ldrh	r3, [r3, #6]
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d101      	bne.n	80041c2 <Comms_Handler+0x4ac>
								newMessage = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
					for(int i = 1;i<=rfData->messageNum;i++){
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	3301      	adds	r3, #1
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80041ce:	461a      	mov	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4293      	cmp	r3, r2
 80041d4:	ddad      	ble.n	8004132 <Comms_Handler+0x41c>
				if(newMessage){
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <Comms_Handler+0x4d6>
					rfData->messageNum++;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80041e2:	3301      	adds	r3, #1
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 faab 	bl	800474c <is_empty>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f083 0301 	eor.w	r3, r3, #1
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f47f aeda 	bne.w	8003fb8 <Comms_Handler+0x2a2>
}
 8004204:	bf00      	nop
 8004206:	3730      	adds	r7, #48	; 0x30
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <Discovery_Handler>:

//Function to handle device discovery
void Discovery_Handler(struct rfDataStorage* rfData)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);
 8004214:	20c8      	movs	r0, #200	; 0xc8
 8004216:	f000 fc85 	bl	8004b24 <HAL_Delay>
	if(rfData->count == 0)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7a9b      	ldrb	r3, [r3, #10]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <Discovery_Handler+0x24>
	{
		Im_Here(rfData);								//send i'm here rfData->activeMessage
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9b4 	bl	8004590 <Im_Here>
		rfData->count = 10;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	220a      	movs	r2, #10
 800422c:	729a      	strb	r2, [r3, #10]
	else
	{
		rfData->count--;
	}

}
 800422e:	e005      	b.n	800423c <Discovery_Handler+0x30>
		rfData->count--;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7a9b      	ldrb	r3, [r3, #10]
 8004234:	3b01      	subs	r3, #1
 8004236:	b2da      	uxtb	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	729a      	strb	r2, [r3, #10]
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <Message_Handler>:

//Function to perform any unique message handling
void Message_Handler(struct rfDataStorage* rfData)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	//Check if the device is the destination of the message
	if (rfData->toID[rfData->messageNum] != rfData->myDevice.device_id)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	3344      	adds	r3, #68	; 0x44
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4413      	add	r3, r2
 800425a:	88da      	ldrh	r2, [r3, #6]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	889b      	ldrh	r3, [r3, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d002      	beq.n	800426a <Message_Handler+0x26>
	{
		//perform message forwarding
			Message_Forwarder(rfData);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f805 	bl	8004274 <Message_Forwarder>
	}

}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <Message_Forwarder>:

void Message_Forwarder(struct rfDataStorage* rfData)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	printf("\r\nForwarding message");
 800427c:	487b      	ldr	r0, [pc, #492]	; (800446c <Message_Forwarder+0x1f8>)
 800427e:	f008 fed9 	bl	800d034 <iprintf>
	//Check if message should be forwarded
	if( (rfData->num_fwds == 0) && (rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] < rfData->activeRxMessage[rfData->messageNum][MSG_MAX_HOPS_POS]) )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	7adb      	ldrb	r3, [r3, #11]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 8099 	bne.w	80043be <Message_Forwarder+0x14a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004292:	4619      	mov	r1, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	33b4      	adds	r3, #180	; 0xb4
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80042aa:	4618      	mov	r0, r3
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4603      	mov	r3, r0
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4403      	add	r3, r0
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	33b5      	adds	r3, #181	; 0xb5
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d27e      	bcs.n	80043be <Message_Forwarder+0x14a>
	{
		//increment number of hops
		rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80042c6:	461a      	mov	r2, r3
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	33b4      	adds	r3, #180	; 0xb4
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	3301      	adds	r3, #1
 80042da:	b2d8      	uxtb	r0, r3
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	33b4      	adds	r3, #180	; 0xb4
 80042ea:	4602      	mov	r2, r0
 80042ec:	701a      	strb	r2, [r3, #0]
		//Send tehe forwarded data
		Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80042f4:	461a      	mov	r2, r3
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	33a8      	adds	r3, #168	; 0xa8
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	1d98      	adds	r0, r3, #6
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800430c:	4619      	mov	r1, r3
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	33b6      	adds	r3, #182	; 0xb6
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	3309      	adds	r3, #9
 8004320:	b2db      	uxtb	r3, r3
 8004322:	4619      	mov	r1, r3
 8004324:	f000 f97c 	bl	8004620 <Send>
		//Add data to fifo FWD
		rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->fromID[rfData->messageNum];
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800432e:	4618      	mov	r0, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	7adb      	ldrb	r3, [r3, #11]
 8004334:	4619      	mov	r1, r3
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	f100 0340 	add.w	r3, r0, #64	; 0x40
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4413      	add	r3, r2
 8004340:	8898      	ldrh	r0, [r3, #4]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	440b      	add	r3, r1
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	330c      	adds	r3, #12
 8004350:	4602      	mov	r2, r0
 8004352:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->toID[rfData->messageNum];
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800435a:	4618      	mov	r0, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7adb      	ldrb	r3, [r3, #11]
 8004360:	4619      	mov	r1, r3
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	88d8      	ldrh	r0, [r3, #6]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	440b      	add	r3, r1
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	330e      	adds	r3, #14
 800437c:	4602      	mov	r2, r0
 800437e:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004386:	4618      	mov	r0, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	7adb      	ldrb	r3, [r3, #11]
 800438c:	4619      	mov	r1, r3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4603      	mov	r3, r0
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4403      	add	r3, r0
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	33af      	adds	r3, #175	; 0xaf
 800439c:	7818      	ldrb	r0, [r3, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	440b      	add	r3, r1
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	3310      	adds	r3, #16
 80043ac:	4602      	mov	r2, r0
 80043ae:	701a      	strb	r2, [r3, #0]
		//Increment numbe rof FWDs
		rfData->num_fwds++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	7adb      	ldrb	r3, [r3, #11]
 80043b4:	3301      	adds	r3, #1
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	72da      	strb	r2, [r3, #11]
			//Send tehe forwarded data
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
		}

	}
}
 80043bc:	e0e3      	b.n	8004586 <Message_Forwarder+0x312>
	else if ( rfData->activeRxMessage[MSG_NUM_HOPS_POS] < rfData->activeRxMessage[rfData->messageNum][MSG_MAX_HOPS_POS] )
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f503 7293 	add.w	r2, r3, #294	; 0x126
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80043ca:	4618      	mov	r0, r3
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4603      	mov	r3, r0
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4403      	add	r3, r0
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	33b5      	adds	r3, #181	; 0xb5
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	f080 80d2 	bcs.w	8004586 <Message_Forwarder+0x312>
		int dupe = false;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rfData->num_fwds; i++)
 80043e6:	2300      	movs	r3, #0
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	e044      	b.n	8004476 <Message_Forwarder+0x202>
			if ( rfData->fromID[rfData->messageNum] == rfData->FWDFIFO[i].from_id )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	3340      	adds	r3, #64	; 0x40
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4413      	add	r3, r2
 80043fa:	8899      	ldrh	r1, [r3, #4]
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4613      	mov	r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4413      	add	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4403      	add	r3, r0
 800440a:	330c      	adds	r3, #12
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	4299      	cmp	r1, r3
 8004410:	d12e      	bne.n	8004470 <Message_Forwarder+0x1fc>
				if ( rfData->toID[rfData->messageNum] == rfData->FWDFIFO[i].to_id)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	3344      	adds	r3, #68	; 0x44
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	88d9      	ldrh	r1, [r3, #6]
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4403      	add	r3, r0
 8004430:	330e      	adds	r3, #14
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	4299      	cmp	r1, r3
 8004436:	d11b      	bne.n	8004470 <Message_Forwarder+0x1fc>
					if ( rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->FWDFIFO[i].type )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800443e:	4619      	mov	r1, r3
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	33af      	adds	r3, #175	; 0xaf
 800444e:	7819      	ldrb	r1, [r3, #0]
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4403      	add	r3, r0
 800445e:	3310      	adds	r3, #16
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	4299      	cmp	r1, r3
 8004464:	d104      	bne.n	8004470 <Message_Forwarder+0x1fc>
						dupe = true;
 8004466:	2301      	movs	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
						break;
 800446a:	e00a      	b.n	8004482 <Message_Forwarder+0x20e>
 800446c:	08011b5c 	.word	0x08011b5c
		for (int i = 0; i < rfData->num_fwds; i++)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	3301      	adds	r3, #1
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7adb      	ldrb	r3, [r3, #11]
 800447a:	461a      	mov	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4293      	cmp	r3, r2
 8004480:	dbb4      	blt.n	80043ec <Message_Forwarder+0x178>
		if (dupe == false)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d17e      	bne.n	8004586 <Message_Forwarder+0x312>
			if ( rfData->num_fwds == MAX_NUM_FWDS ){rfData->num_fwds = 0;}
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7adb      	ldrb	r3, [r3, #11]
 800448c:	2b14      	cmp	r3, #20
 800448e:	d102      	bne.n	8004496 <Message_Forwarder+0x222>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	72da      	strb	r2, [r3, #11]
			rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->fromID[rfData->messageNum];
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800449c:	4618      	mov	r0, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	7adb      	ldrb	r3, [r3, #11]
 80044a2:	4619      	mov	r1, r3
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	f100 0340 	add.w	r3, r0, #64	; 0x40
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	8898      	ldrh	r0, [r3, #4]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	440b      	add	r3, r1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	330c      	adds	r3, #12
 80044be:	4602      	mov	r2, r0
 80044c0:	801a      	strh	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->toID[rfData->messageNum];
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80044c8:	4618      	mov	r0, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7adb      	ldrb	r3, [r3, #11]
 80044ce:	4619      	mov	r1, r3
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	f100 0344 	add.w	r3, r0, #68	; 0x44
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4413      	add	r3, r2
 80044da:	88d8      	ldrh	r0, [r3, #6]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	440b      	add	r3, r1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	330e      	adds	r3, #14
 80044ea:	4602      	mov	r2, r0
 80044ec:	801a      	strh	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80044f4:	4618      	mov	r0, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	7adb      	ldrb	r3, [r3, #11]
 80044fa:	4619      	mov	r1, r3
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	4603      	mov	r3, r0
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4403      	add	r3, r0
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	33af      	adds	r3, #175	; 0xaf
 800450a:	7818      	ldrb	r0, [r3, #0]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	440b      	add	r3, r1
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	4413      	add	r3, r2
 8004518:	3310      	adds	r3, #16
 800451a:	4602      	mov	r2, r0
 800451c:	701a      	strb	r2, [r3, #0]
			rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004524:	461a      	mov	r2, r3
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	33b4      	adds	r3, #180	; 0xb4
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	3301      	adds	r3, #1
 8004538:	b2d8      	uxtb	r0, r3
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	33b4      	adds	r3, #180	; 0xb4
 8004548:	4602      	mov	r2, r0
 800454a:	701a      	strb	r2, [r3, #0]
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004552:	461a      	mov	r2, r3
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	33a8      	adds	r3, #168	; 0xa8
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	1d98      	adds	r0, r3, #6
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800456a:	4619      	mov	r1, r3
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	460b      	mov	r3, r1
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	33b6      	adds	r3, #182	; 0xb6
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	3309      	adds	r3, #9
 800457e:	b2db      	uxtb	r3, r3
 8004580:	4619      	mov	r1, r3
 8004582:	f000 f84d 	bl	8004620 <Send>
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop

08004590 <Im_Here>:

//Function to send "I am here" message
void Im_Here(struct rfDataStorage* rfData)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	22fe      	movs	r2, #254	; 0xfe
 800459c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_IM_HERE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2243      	movs	r2, #67	; 0x43
 80045a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0x0F;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	889b      	ldrh	r3, [r3, #4]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = rfData->myDevice.device_id&0xF0;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	889b      	ldrh	r3, [r3, #4]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f023 030f 	bic.w	r3, r3, #15
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	rfData->activeTxMessage[MSG_TO_ID_POS1] = 0;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = 0;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = 10;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	220a      	movs	r2, #10
 80045e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rfData->activeTxMessageSize = 0;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800460c:	3309      	adds	r3, #9
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f000 f804 	bl	8004620 <Send>

}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <Send>:

//Function to send data through RF
void Send(uint8_t message[], uint8_t size)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
	//printf("Send comamnd");
	uint8_t fullMessage[MSG_SIZE_TRANSFER];

	for(int i = 0;i<size;i++){
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
 8004630:	e00c      	b.n	800464c <Send+0x2c>
		fullMessage[i] = message[i];
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	4413      	add	r3, r2
 8004638:	7819      	ldrb	r1, [r3, #0]
 800463a:	f107 0208 	add.w	r2, r7, #8
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	4413      	add	r3, r2
 8004642:	460a      	mov	r2, r1
 8004644:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<size;i++){
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	3301      	adds	r3, #1
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	429a      	cmp	r2, r3
 8004652:	dbee      	blt.n	8004632 <Send+0x12>
	}
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	e008      	b.n	800466c <Send+0x4c>
		fullMessage[i] = 0;
 800465a:	f107 0208 	add.w	r2, r7, #8
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	4413      	add	r3, r2
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	3301      	adds	r3, #1
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	2b13      	cmp	r3, #19
 8004670:	ddf3      	ble.n	800465a <Send+0x3a>
	}
	for(int i = 0 ;i<MSG_SIZE_TRANSFER;i++){
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	e00b      	b.n	8004690 <Send+0x70>

		printf("\r\nsending rf: %x", fullMessage[i]);
 8004678:	f107 0208 	add.w	r2, r7, #8
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	4619      	mov	r1, r3
 8004684:	480c      	ldr	r0, [pc, #48]	; (80046b8 <Send+0x98>)
 8004686:	f008 fcd5 	bl	800d034 <iprintf>
	for(int i = 0 ;i<MSG_SIZE_TRANSFER;i++){
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3301      	adds	r3, #1
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	2b13      	cmp	r3, #19
 8004694:	ddf0      	ble.n	8004678 <Send+0x58>

	}
	random_delay();
 8004696:	f000 f813 	bl	80046c0 <random_delay>
	HAL_UART_Transmit_IT(&hlpuart1, fullMessage, MSG_SIZE_TRANSFER);
 800469a:	f107 0308 	add.w	r3, r7, #8
 800469e:	2214      	movs	r2, #20
 80046a0:	4619      	mov	r1, r3
 80046a2:	4806      	ldr	r0, [pc, #24]	; (80046bc <Send+0x9c>)
 80046a4:	f006 f828 	bl	800a6f8 <HAL_UART_Transmit_IT>
	HAL_Delay(20);
 80046a8:	2014      	movs	r0, #20
 80046aa:	f000 fa3b 	bl	8004b24 <HAL_Delay>

}
 80046ae:	bf00      	nop
 80046b0:	3728      	adds	r7, #40	; 0x28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	08011b74 	.word	0x08011b74
 80046bc:	20000348 	.word	0x20000348

080046c0 <random_delay>:

//Function to add random delay
void random_delay()	//delays between 0 - 9999 (ms)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
	uint32_t randomNumber;
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 80046c6:	463b      	mov	r3, r7
 80046c8:	4619      	mov	r1, r3
 80046ca:	480a      	ldr	r0, [pc, #40]	; (80046f4 <random_delay+0x34>)
 80046cc:	f004 fa6d 	bl	8008baa <HAL_RNG_GenerateRandomNumber>
	uint32_t delay = randomNumber % 1000;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <random_delay+0x38>)
 80046d4:	fba2 1203 	umull	r1, r2, r2, r3
 80046d8:	0992      	lsrs	r2, r2, #6
 80046da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046de:	fb01 f202 	mul.w	r2, r1, r2
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	607b      	str	r3, [r7, #4]
	HAL_Delay(delay);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa1c 	bl	8004b24 <HAL_Delay>
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000450 	.word	0x20000450
 80046f8:	10624dd3 	.word	0x10624dd3

080046fc <create_queue>:

//Function to create a new queue for operation
void create_queue(struct Queue* queue) {
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  queue->head = 0;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
  queue->tail = 0;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
  queue->size = 0;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <is_full>:
void destroy_queue(struct Queue* queue) {
  free(queue);
}

//Function check if queue is full
bool is_full(struct Queue* queue) {
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  return (queue->size == MAX_SIZE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004736:	2b96      	cmp	r3, #150	; 0x96
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <is_empty>:

//Function to check if queue is empty
bool is_empty(struct Queue* queue) {
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return (queue->size == 0);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <enqueue>:

//Function to add a value to queue
void enqueue(struct Queue* queue, uint8_t value) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	70fb      	strb	r3, [r7, #3]
  if (is_full(queue)) {
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ffd3 	bl	8004728 <is_full>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d11f      	bne.n	80047c8 <enqueue+0x58>
    //printf("Queue is full\n");
    return;
  }
  queue->data[queue->tail] = value;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 800478e:	78f9      	ldrb	r1, [r7, #3]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  queue->tail = (queue->tail + 1) % MAX_SIZE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <enqueue+0x60>)
 80047a0:	fb83 1302 	smull	r1, r3, r3, r2
 80047a4:	1119      	asrs	r1, r3, #4
 80047a6:	17d3      	asrs	r3, r2, #31
 80047a8:	1acb      	subs	r3, r1, r3
 80047aa:	2196      	movs	r1, #150	; 0x96
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
  queue->size++;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 80047c6:	e000      	b.n	80047ca <enqueue+0x5a>
    return;
 80047c8:	bf00      	nop
}
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	1b4e81b5 	.word	0x1b4e81b5

080047d4 <dequeue>:

//Function to dequeue latest value from the queue
int dequeue(struct Queue* queue) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if (is_empty(queue)) {
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff ffb5 	bl	800474c <is_empty>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <dequeue+0x1a>
    //printf("Queue is empty\n");
    return -1;
 80047e8:	f04f 33ff 	mov.w	r3, #4294967295
 80047ec:	e01f      	b.n	800482e <dequeue+0x5a>
  }
  int value = queue->data[queue->head];
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fa:	60fb      	str	r3, [r7, #12]
  queue->head = (queue->head + 1) % MAX_SIZE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <dequeue+0x64>)
 8004806:	fb83 1302 	smull	r1, r3, r3, r2
 800480a:	1119      	asrs	r1, r3, #4
 800480c:	17d3      	asrs	r3, r2, #31
 800480e:	1acb      	subs	r3, r1, r3
 8004810:	2196      	movs	r1, #150	; 0x96
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
  queue->size--;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004824:	1e5a      	subs	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
  return value;
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	1b4e81b5 	.word	0x1b4e81b5

0800483c <sendSPI>:
 *      Author: Admin
 */

#include <Temperature/TemperatureSensing.h>

void sendSPI(SPI_HandleTypeDef* handle, uint8_t controlVal, uint8_t registerAddr, uint8_t messageHigh, uint8_t messageLow){
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	4603      	mov	r3, r0
 800484c:	70fb      	strb	r3, [r7, #3]
 800484e:	460b      	mov	r3, r1
 8004850:	70bb      	strb	r3, [r7, #2]
 8004852:	4613      	mov	r3, r2
 8004854:	707b      	strb	r3, [r7, #1]

  uint8_t spi_buf1[2];
  uint8_t spi_buf2[2];

  // Bytes to write to EEPROM
  spi_buf1[0] = registerAddr;
 8004856:	78bb      	ldrb	r3, [r7, #2]
 8004858:	733b      	strb	r3, [r7, #12]
  spi_buf1[1] = registerAddr;
 800485a:	78bb      	ldrb	r3, [r7, #2]
 800485c:	737b      	strb	r3, [r7, #13]
  spi_buf2[0] = messageHigh;
 800485e:	787b      	ldrb	r3, [r7, #1]
 8004860:	723b      	strb	r3, [r7, #8]
  spi_buf2[1] = messageLow;
 8004862:	7e3b      	ldrb	r3, [r7, #24]
 8004864:	727b      	strb	r3, [r7, #9]

  HAL_GPIO_WritePin(TPSPI_CSGP, TPSPI_CSPin, GPIO_PIN_RESET);
 8004866:	2200      	movs	r2, #0
 8004868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800486c:	4816      	ldr	r0, [pc, #88]	; (80048c8 <sendSPI+0x8c>)
 800486e:	f002 faf9 	bl	8006e64 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8004872:	2032      	movs	r0, #50	; 0x32
 8004874:	f000 f956 	bl	8004b24 <HAL_Delay>
  if (HAL_SPI_Transmit(handle, (uint8_t *)spi_buf1, 2, 100) != HAL_OK){
 8004878:	f107 010c 	add.w	r1, r7, #12
 800487c:	2364      	movs	r3, #100	; 0x64
 800487e:	2202      	movs	r2, #2
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f004 ff17 	bl	80096b4 <HAL_SPI_Transmit>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <sendSPI+0x56>

	  printf("SPI transmit1 error");
 800488c:	480f      	ldr	r0, [pc, #60]	; (80048cc <sendSPI+0x90>)
 800488e:	f008 fbd1 	bl	800d034 <iprintf>

  }

  if (HAL_SPI_Transmit(handle, (uint8_t *)spi_buf2, 2, 100) != HAL_OK){
 8004892:	f107 0108 	add.w	r1, r7, #8
 8004896:	2364      	movs	r3, #100	; 0x64
 8004898:	2202      	movs	r2, #2
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f004 ff0a 	bl	80096b4 <HAL_SPI_Transmit>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <sendSPI+0x70>

	  printf("SPI transmit2 error");
 80048a6:	480a      	ldr	r0, [pc, #40]	; (80048d0 <sendSPI+0x94>)
 80048a8:	f008 fbc4 	bl	800d034 <iprintf>

  }
  HAL_GPIO_WritePin(TPSPI_CSGP, TPSPI_CSPin, GPIO_PIN_SET);
 80048ac:	2201      	movs	r2, #1
 80048ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048b2:	4805      	ldr	r0, [pc, #20]	; (80048c8 <sendSPI+0x8c>)
 80048b4:	f002 fad6 	bl	8006e64 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80048b8:	2032      	movs	r0, #50	; 0x32
 80048ba:	f000 f933 	bl	8004b24 <HAL_Delay>

}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	48000400 	.word	0x48000400
 80048cc:	08011b88 	.word	0x08011b88
 80048d0:	08011b9c 	.word	0x08011b9c

080048d4 <getSPI>:

int getSPI(SPI_HandleTypeDef* handle, uint8_t controlVal, uint8_t registerAddr){
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
 80048e0:	4613      	mov	r3, r2
 80048e2:	70bb      	strb	r3, [r7, #2]

  uint8_t spi_buf[2];
  uint8_t spi_recv_buf[2];
  uint16_t receivedHighByte = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	82fb      	strh	r3, [r7, #22]
  uint16_t receivedLowByte = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	82bb      	strh	r3, [r7, #20]
  uint16_t receivedData = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	827b      	strh	r3, [r7, #18]

  spi_buf[0] = controlVal;
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	743b      	strb	r3, [r7, #16]
  spi_buf[1] = registerAddr;
 80048f4:	78bb      	ldrb	r3, [r7, #2]
 80048f6:	747b      	strb	r3, [r7, #17]
  HAL_GPIO_WritePin(TPSPI_CSGP, TPSPI_CSPin, GPIO_PIN_RESET);
 80048f8:	2200      	movs	r2, #0
 80048fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048fe:	481d      	ldr	r0, [pc, #116]	; (8004974 <getSPI+0xa0>)
 8004900:	f002 fab0 	bl	8006e64 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8004904:	2032      	movs	r0, #50	; 0x32
 8004906:	f000 f90d 	bl	8004b24 <HAL_Delay>
  if (HAL_SPI_Transmit(handle, (uint8_t *)spi_buf, 2, 100) != HAL_OK){
 800490a:	f107 0110 	add.w	r1, r7, #16
 800490e:	2364      	movs	r3, #100	; 0x64
 8004910:	2202      	movs	r2, #2
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f004 fece 	bl	80096b4 <HAL_SPI_Transmit>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <getSPI+0x50>

	  printf("SPI transmitReceive error");
 800491e:	4816      	ldr	r0, [pc, #88]	; (8004978 <getSPI+0xa4>)
 8004920:	f008 fb88 	bl	800d034 <iprintf>

  }
  if (HAL_SPI_Receive(handle, (uint8_t *)spi_recv_buf, 2, 100) != HAL_OK){
 8004924:	f107 010c 	add.w	r1, r7, #12
 8004928:	2364      	movs	r3, #100	; 0x64
 800492a:	2202      	movs	r2, #2
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f005 f82f 	bl	8009990 <HAL_SPI_Receive>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <getSPI+0x6a>

	  printf("SPI receive error");
 8004938:	4810      	ldr	r0, [pc, #64]	; (800497c <getSPI+0xa8>)
 800493a:	f008 fb7b 	bl	800d034 <iprintf>

  }
  HAL_GPIO_WritePin(TPSPI_CSGP, TPSPI_CSPin, GPIO_PIN_SET);
 800493e:	2201      	movs	r2, #1
 8004940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004944:	480b      	ldr	r0, [pc, #44]	; (8004974 <getSPI+0xa0>)
 8004946:	f002 fa8d 	bl	8006e64 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800494a:	2032      	movs	r0, #50	; 0x32
 800494c:	f000 f8ea 	bl	8004b24 <HAL_Delay>

  receivedHighByte = spi_recv_buf[0];
 8004950:	7b3b      	ldrb	r3, [r7, #12]
 8004952:	82fb      	strh	r3, [r7, #22]
  receivedLowByte = spi_recv_buf[1];
 8004954:	7b7b      	ldrb	r3, [r7, #13]
 8004956:	82bb      	strh	r3, [r7, #20]

  receivedData = (receivedHighByte<<8)|receivedLowByte;
 8004958:	8afb      	ldrh	r3, [r7, #22]
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	b21a      	sxth	r2, r3
 800495e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	b21b      	sxth	r3, r3
 8004966:	827b      	strh	r3, [r7, #18]

  return receivedData;
 8004968:	8a7b      	ldrh	r3, [r7, #18]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	48000400 	.word	0x48000400
 8004978:	08011bb0 	.word	0x08011bb0
 800497c:	08011bcc 	.word	0x08011bcc

08004980 <configureSensor>:

void configureSensor(SPI_HandleTypeDef* handle){
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af02      	add	r7, sp, #8
 8004986:	6078      	str	r0, [r7, #4]

  sendSPI(handle, TPwriteMask, TPconfigurationAddr, TPdefaultConfigHigh, TPdefaultConfigLow);
 8004988:	23a6      	movs	r3, #166	; 0xa6
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	2300      	movs	r3, #0
 800498e:	2203      	movs	r2, #3
 8004990:	2100      	movs	r1, #0
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff ff52 	bl	800483c <sendSPI>

}
 8004998:	bf00      	nop
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <getTemperatureVal>:

	return getSPI(handle, TPreadMask, TPuniqueID1Addr);

}

double getTemperatureVal(SPI_HandleTypeDef* handle){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  int receivedValue = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60fb      	str	r3, [r7, #12]

  receivedValue = getSPI(handle, TPreadMask, TPtemperatureResultAddr);
 80049ac:	2200      	movs	r2, #0
 80049ae:	2101      	movs	r1, #1
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff8f 	bl	80048d4 <getSPI>
 80049b6:	60f8      	str	r0, [r7, #12]

  receivedValue = receivedValue >> 2;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	109b      	asrs	r3, r3, #2
 80049bc:	60fb      	str	r3, [r7, #12]

  return (double)receivedValue*temperatureSensetivity;
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7fb fdb0 	bl	8000524 <__aeabi_i2d>
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <getTemperatureVal+0x44>)
 80049ca:	f7fb fe15 	bl	80005f8 <__aeabi_dmul>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80049d6:	eeb0 0a47 	vmov.f32	s0, s14
 80049da:	eef0 0a67 	vmov.f32	s1, s15
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	3fa00000 	.word	0x3fa00000

080049e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80049e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80049ec:	f7fe fba0 	bl	8003130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049f0:	480c      	ldr	r0, [pc, #48]	; (8004a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80049f2:	490d      	ldr	r1, [pc, #52]	; (8004a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80049f4:	4a0d      	ldr	r2, [pc, #52]	; (8004a2c <LoopForever+0xe>)
  movs r3, #0
 80049f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049f8:	e002      	b.n	8004a00 <LoopCopyDataInit>

080049fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049fe:	3304      	adds	r3, #4

08004a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a04:	d3f9      	bcc.n	80049fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a06:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a08:	4c0a      	ldr	r4, [pc, #40]	; (8004a34 <LoopForever+0x16>)
  movs r3, #0
 8004a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a0c:	e001      	b.n	8004a12 <LoopFillZerobss>

08004a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a10:	3204      	adds	r2, #4

08004a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a14:	d3fb      	bcc.n	8004a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a16:	f007 fb7f 	bl	800c118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a1a:	f7fd fb4f 	bl	80020bc <main>

08004a1e <LoopForever>:

LoopForever:
    b LoopForever
 8004a1e:	e7fe      	b.n	8004a1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004a20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a28:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8004a2c:	08012104 	.word	0x08012104
  ldr r2, =_sbss
 8004a30:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004a34:	2000078c 	.word	0x2000078c

08004a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a38:	e7fe      	b.n	8004a38 <ADC1_2_IRQHandler>

08004a3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a44:	2003      	movs	r0, #3
 8004a46:	f001 fd41 	bl	80064cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a4a:	200f      	movs	r0, #15
 8004a4c:	f000 f80e 	bl	8004a6c <HAL_InitTick>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	71fb      	strb	r3, [r7, #7]
 8004a5a:	e001      	b.n	8004a60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a5c:	f7fe f852 	bl	8002b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a60:	79fb      	ldrb	r3, [r7, #7]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004a78:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <HAL_InitTick+0x6c>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d023      	beq.n	8004ac8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004a80:	4b16      	ldr	r3, [pc, #88]	; (8004adc <HAL_InitTick+0x70>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <HAL_InitTick+0x6c>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	4618      	mov	r0, r3
 8004a98:	f001 fd4d 	bl	8006536 <HAL_SYSTICK_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b0f      	cmp	r3, #15
 8004aa6:	d809      	bhi.n	8004abc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	f001 fd17 	bl	80064e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ab4:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <HAL_InitTick+0x74>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e007      	b.n	8004acc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
 8004ac0:	e004      	b.n	8004acc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
 8004ac6:	e001      	b.n	8004acc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000008 	.word	0x20000008
 8004adc:	20000000 	.word	0x20000000
 8004ae0:	20000004 	.word	0x20000004

08004ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ae8:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_IncTick+0x20>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_IncTick+0x24>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4413      	add	r3, r2
 8004af4:	4a04      	ldr	r2, [pc, #16]	; (8004b08 <HAL_IncTick+0x24>)
 8004af6:	6013      	str	r3, [r2, #0]
}
 8004af8:	bf00      	nop
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000008 	.word	0x20000008
 8004b08:	20000778 	.word	0x20000778

08004b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <HAL_GetTick+0x14>)
 8004b12:	681b      	ldr	r3, [r3, #0]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000778 	.word	0x20000778

08004b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b2c:	f7ff ffee 	bl	8004b0c <HAL_GetTick>
 8004b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d005      	beq.n	8004b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <HAL_Delay+0x44>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b4a:	bf00      	nop
 8004b4c:	f7ff ffde 	bl	8004b0c <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d8f7      	bhi.n	8004b4c <HAL_Delay+0x28>
  {
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000008 	.word	0x20000008

08004b6c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_SuspendTick+0x1c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <HAL_SuspendTick+0x1c>)
 8004b76:	f023 0302 	bic.w	r3, r3, #2
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	e000e010 	.word	0xe000e010

08004b8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	609a      	str	r2, [r3, #8]
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3360      	adds	r3, #96	; 0x60
 8004c06:	461a      	mov	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <LL_ADC_SetOffset+0x44>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	03fff000 	.word	0x03fff000

08004c3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3360      	adds	r3, #96	; 0x60
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3360      	adds	r3, #96	; 0x60
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	615a      	str	r2, [r3, #20]
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b087      	sub	sp, #28
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3330      	adds	r3, #48	; 0x30
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	4413      	add	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	211f      	movs	r1, #31
 8004d16:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	401a      	ands	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	0e9b      	lsrs	r3, r3, #26
 8004d22:	f003 011f 	and.w	r1, r3, #31
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d30:	431a      	orrs	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3314      	adds	r3, #20
 8004d52:	461a      	mov	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	0e5b      	lsrs	r3, r3, #25
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	4413      	add	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	0d1b      	lsrs	r3, r3, #20
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	2107      	movs	r1, #7
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	401a      	ands	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	0d1b      	lsrs	r3, r3, #20
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	fa01 f303 	lsl.w	r3, r1, r3
 8004d86:	431a      	orrs	r2, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db0:	43db      	mvns	r3, r3
 8004db2:	401a      	ands	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0318 	and.w	r3, r3, #24
 8004dba:	4908      	ldr	r1, [pc, #32]	; (8004ddc <LL_ADC_SetChannelSingleDiff+0x44>)
 8004dbc:	40d9      	lsrs	r1, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	400b      	ands	r3, r1
 8004dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	0007ffff 	.word	0x0007ffff

08004de0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 031f 	and.w	r3, r3, #31
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6093      	str	r3, [r2, #8]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e50:	d101      	bne.n	8004e56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea0:	d101      	bne.n	8004ea6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ec8:	f043 0201 	orr.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ef0:	f043 0202 	orr.w	r2, r3, #2
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <LL_ADC_IsEnabled+0x18>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <LL_ADC_IsEnabled+0x1a>
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d101      	bne.n	8004f42 <LL_ADC_IsDisableOngoing+0x18>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <LL_ADC_IsDisableOngoing+0x1a>
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f64:	f043 0204 	orr.w	r2, r3, #4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f8c:	f043 0210 	orr.w	r2, r3, #16
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d101      	bne.n	8004fb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d101      	bne.n	8005006 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b089      	sub	sp, #36	; 0x24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005020:	2300      	movs	r3, #0
 8005022:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e131      	b.n	8005292 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fd fd85 	bl	8002b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff fef1 	bl	8004e3c <LL_ADC_IsDeepPowerDownEnabled>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fed7 	bl	8004e18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff ff0c 	bl	8004e8c <LL_ADC_IsInternalRegulatorEnabled>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d115      	bne.n	80050a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fef0 	bl	8004e64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005084:	4b85      	ldr	r3, [pc, #532]	; (800529c <HAL_ADC_Init+0x288>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	099b      	lsrs	r3, r3, #6
 800508a:	4a85      	ldr	r2, [pc, #532]	; (80052a0 <HAL_ADC_Init+0x28c>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	099b      	lsrs	r3, r3, #6
 8005092:	3301      	adds	r3, #1
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005098:	e002      	b.n	80050a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	3b01      	subs	r3, #1
 800509e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f9      	bne.n	800509a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff feee 	bl	8004e8c <LL_ADC_IsInternalRegulatorEnabled>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10d      	bne.n	80050d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	f043 0210 	orr.w	r2, r3, #16
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	f043 0201 	orr.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ff62 	bl	8004fa0 <LL_ADC_REG_IsConversionOngoing>
 80050dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f040 80ca 	bne.w	8005280 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f040 80c6 	bne.w	8005280 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80050fc:	f043 0202 	orr.w	r2, r3, #2
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fefb 	bl	8004f04 <LL_ADC_IsEnabled>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d110      	bne.n	8005136 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005114:	4863      	ldr	r0, [pc, #396]	; (80052a4 <HAL_ADC_Init+0x290>)
 8005116:	f7ff fef5 	bl	8004f04 <LL_ADC_IsEnabled>
 800511a:	4604      	mov	r4, r0
 800511c:	4862      	ldr	r0, [pc, #392]	; (80052a8 <HAL_ADC_Init+0x294>)
 800511e:	f7ff fef1 	bl	8004f04 <LL_ADC_IsEnabled>
 8005122:	4603      	mov	r3, r0
 8005124:	4323      	orrs	r3, r4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d105      	bne.n	8005136 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4619      	mov	r1, r3
 8005130:	485e      	ldr	r0, [pc, #376]	; (80052ac <HAL_ADC_Init+0x298>)
 8005132:	f7ff fd2b 	bl	8004b8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	7e5b      	ldrb	r3, [r3, #25]
 800513a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005140:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005146:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800514c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005154:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d106      	bne.n	8005172 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	3b01      	subs	r3, #1
 800516a:	045b      	lsls	r3, r3, #17
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4313      	orrs	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4313      	orrs	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	4b46      	ldr	r3, [pc, #280]	; (80052b0 <HAL_ADC_Init+0x29c>)
 8005196:	4013      	ands	r3, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	69b9      	ldr	r1, [r7, #24]
 800519e:	430b      	orrs	r3, r1
 80051a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fefa 	bl	8004fa0 <LL_ADC_REG_IsConversionOngoing>
 80051ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ff1b 	bl	8004fee <LL_ADC_INJ_IsConversionOngoing>
 80051b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d13d      	bne.n	800523c <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d13a      	bne.n	800523c <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80051ca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051d2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e2:	f023 0302 	bic.w	r3, r3, #2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	69b9      	ldr	r1, [r7, #24]
 80051ec:	430b      	orrs	r3, r1
 80051ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d118      	bne.n	800522c <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005204:	f023 0304 	bic.w	r3, r3, #4
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005210:	4311      	orrs	r1, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005216:	4311      	orrs	r1, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800521c:	430a      	orrs	r2, r1
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0201 	orr.w	r2, r2, #1
 8005228:	611a      	str	r2, [r3, #16]
 800522a:	e007      	b.n	800523c <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0201 	bic.w	r2, r2, #1
 800523a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d10c      	bne.n	800525e <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	f023 010f 	bic.w	r1, r3, #15
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	1e5a      	subs	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
 800525c:	e007      	b.n	800526e <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 020f 	bic.w	r2, r2, #15
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	f043 0201 	orr.w	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	655a      	str	r2, [r3, #84]	; 0x54
 800527e:	e007      	b.n	8005290 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005284:	f043 0210 	orr.w	r2, r3, #16
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005290:	7ffb      	ldrb	r3, [r7, #31]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3724      	adds	r7, #36	; 0x24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd90      	pop	{r4, r7, pc}
 800529a:	bf00      	nop
 800529c:	20000000 	.word	0x20000000
 80052a0:	053e2d63 	.word	0x053e2d63
 80052a4:	50040000 	.word	0x50040000
 80052a8:	50040100 	.word	0x50040100
 80052ac:	50040300 	.word	0x50040300
 80052b0:	fff0c007 	.word	0xfff0c007

080052b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052bc:	4857      	ldr	r0, [pc, #348]	; (800541c <HAL_ADC_Start+0x168>)
 80052be:	f7ff fd8f 	bl	8004de0 <LL_ADC_GetMultimode>
 80052c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fe69 	bl	8004fa0 <LL_ADC_REG_IsConversionOngoing>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f040 809c 	bne.w	800540e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_ADC_Start+0x30>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e097      	b.n	8005414 <HAL_ADC_Start+0x160>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fe6d 	bl	8005fcc <ADC_Enable>
 80052f2:	4603      	mov	r3, r0
 80052f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f040 8083 	bne.w	8005404 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005306:	f023 0301 	bic.w	r3, r3, #1
 800530a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a42      	ldr	r2, [pc, #264]	; (8005420 <HAL_ADC_Start+0x16c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d002      	beq.n	8005322 <HAL_ADC_Start+0x6e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	e000      	b.n	8005324 <HAL_ADC_Start+0x70>
 8005322:	4b40      	ldr	r3, [pc, #256]	; (8005424 <HAL_ADC_Start+0x170>)
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	4293      	cmp	r3, r2
 800532a:	d002      	beq.n	8005332 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d105      	bne.n	800533e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534a:	d106      	bne.n	800535a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005350:	f023 0206 	bic.w	r2, r3, #6
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	659a      	str	r2, [r3, #88]	; 0x58
 8005358:	e002      	b.n	8005360 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	221c      	movs	r2, #28
 8005366:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <HAL_ADC_Start+0x16c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d002      	beq.n	8005380 <HAL_ADC_Start+0xcc>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	e000      	b.n	8005382 <HAL_ADC_Start+0xce>
 8005380:	4b28      	ldr	r3, [pc, #160]	; (8005424 <HAL_ADC_Start+0x170>)
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	4293      	cmp	r3, r2
 8005388:	d008      	beq.n	800539c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b05      	cmp	r3, #5
 8005394:	d002      	beq.n	800539c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b09      	cmp	r3, #9
 800539a:	d114      	bne.n	80053c6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fdc6 	bl	8004f50 <LL_ADC_REG_StartConversion>
 80053c4:	e025      	b.n	8005412 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a12      	ldr	r2, [pc, #72]	; (8005420 <HAL_ADC_Start+0x16c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d002      	beq.n	80053e2 <HAL_ADC_Start+0x12e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	e000      	b.n	80053e4 <HAL_ADC_Start+0x130>
 80053e2:	4b10      	ldr	r3, [pc, #64]	; (8005424 <HAL_ADC_Start+0x170>)
 80053e4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00f      	beq.n	8005412 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	655a      	str	r2, [r3, #84]	; 0x54
 8005402:	e006      	b.n	8005412 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800540c:	e001      	b.n	8005412 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800540e:	2302      	movs	r3, #2
 8005410:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005412:	7dfb      	ldrb	r3, [r7, #23]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	50040300 	.word	0x50040300
 8005420:	50040100 	.word	0x50040100
 8005424:	50040000 	.word	0x50040000

08005428 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_ADC_Stop+0x16>
 800543a:	2302      	movs	r3, #2
 800543c:	e023      	b.n	8005486 <HAL_ADC_Stop+0x5e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005446:	2103      	movs	r1, #3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fd03 	bl	8005e54 <ADC_ConversionStop>
 800544e:	4603      	mov	r3, r0
 8005450:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d111      	bne.n	800547c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fe3d 	bl	80060d8 <ADC_Disable>
 800545e:	4603      	mov	r3, r0
 8005460:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d109      	bne.n	800547c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	f043 0201 	orr.w	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800549a:	4866      	ldr	r0, [pc, #408]	; (8005634 <HAL_ADC_PollForConversion+0x1a4>)
 800549c:	f7ff fca0 	bl	8004de0 <LL_ADC_GetMultimode>
 80054a0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d102      	bne.n	80054b0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80054aa:	2308      	movs	r3, #8
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	e02a      	b.n	8005506 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b05      	cmp	r3, #5
 80054ba:	d002      	beq.n	80054c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d111      	bne.n	80054e6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d4:	f043 0220 	orr.w	r2, r3, #32
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0a4      	b.n	800562a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80054e0:	2304      	movs	r3, #4
 80054e2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80054e4:	e00f      	b.n	8005506 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80054e6:	4853      	ldr	r0, [pc, #332]	; (8005634 <HAL_ADC_PollForConversion+0x1a4>)
 80054e8:	f7ff fc88 	bl	8004dfc <LL_ADC_GetMultiDMATransfer>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e093      	b.n	800562a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005502:	2304      	movs	r3, #4
 8005504:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005506:	f7ff fb01 	bl	8004b0c <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800550c:	e021      	b.n	8005552 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d01d      	beq.n	8005552 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005516:	f7ff faf9 	bl	8004b0c <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <HAL_ADC_PollForConversion+0x9c>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d112      	bne.n	8005552 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4013      	ands	r3, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10b      	bne.n	8005552 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	f043 0204 	orr.w	r2, r3, #4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e06b      	b.n	800562a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0d6      	beq.n	800550e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005564:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fba7 	bl	8004cc4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01c      	beq.n	80055b6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	7e5b      	ldrb	r3, [r3, #25]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d118      	bne.n	80055b6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b08      	cmp	r3, #8
 8005590:	d111      	bne.n	80055b6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d105      	bne.n	80055b6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	f043 0201 	orr.w	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_ADC_PollForConversion+0x1a8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d002      	beq.n	80055c6 <HAL_ADC_PollForConversion+0x136>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	e000      	b.n	80055c8 <HAL_ADC_PollForConversion+0x138>
 80055c6:	4b1d      	ldr	r3, [pc, #116]	; (800563c <HAL_ADC_PollForConversion+0x1ac>)
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d008      	beq.n	80055e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b05      	cmp	r3, #5
 80055da:	d002      	beq.n	80055e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b09      	cmp	r3, #9
 80055e0:	d104      	bne.n	80055ec <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	e00c      	b.n	8005606 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a11      	ldr	r2, [pc, #68]	; (8005638 <HAL_ADC_PollForConversion+0x1a8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d002      	beq.n	80055fc <HAL_ADC_PollForConversion+0x16c>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	e000      	b.n	80055fe <HAL_ADC_PollForConversion+0x16e>
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <HAL_ADC_PollForConversion+0x1ac>)
 80055fe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d104      	bne.n	8005616 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2208      	movs	r2, #8
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e008      	b.n	8005628 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	220c      	movs	r2, #12
 8005626:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3720      	adds	r7, #32
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	50040300 	.word	0x50040300
 8005638:	50040100 	.word	0x50040100
 800563c:	50040000 	.word	0x50040000

08005640 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b0b6      	sub	sp, #216	; 0xd8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_ADC_ConfigChannel+0x22>
 800567a:	2302      	movs	r3, #2
 800567c:	e3d5      	b.n	8005e2a <HAL_ADC_ConfigChannel+0x7ce>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fc88 	bl	8004fa0 <LL_ADC_REG_IsConversionOngoing>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	f040 83ba 	bne.w	8005e0c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b05      	cmp	r3, #5
 800569e:	d824      	bhi.n	80056ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	3b02      	subs	r3, #2
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d81b      	bhi.n	80056e2 <HAL_ADC_ConfigChannel+0x86>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <HAL_ADC_ConfigChannel+0x54>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	080056c9 	.word	0x080056c9
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	080056d9 	.word	0x080056d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	220c      	movs	r2, #12
 80056c4:	605a      	str	r2, [r3, #4]
          break;
 80056c6:	e011      	b.n	80056ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2212      	movs	r2, #18
 80056cc:	605a      	str	r2, [r3, #4]
          break;
 80056ce:	e00d      	b.n	80056ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2218      	movs	r2, #24
 80056d4:	605a      	str	r2, [r3, #4]
          break;
 80056d6:	e009      	b.n	80056ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056de:	605a      	str	r2, [r3, #4]
          break;
 80056e0:	e004      	b.n	80056ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2206      	movs	r2, #6
 80056e6:	605a      	str	r2, [r3, #4]
          break;
 80056e8:	e000      	b.n	80056ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80056ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6859      	ldr	r1, [r3, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	f7ff faf6 	bl	8004cea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fc4c 	bl	8004fa0 <LL_ADC_REG_IsConversionOngoing>
 8005708:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fc6c 	bl	8004fee <LL_ADC_INJ_IsConversionOngoing>
 8005716:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800571a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 81c1 	bne.w	8005aa6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005728:	2b00      	cmp	r3, #0
 800572a:	f040 81bc 	bne.w	8005aa6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005736:	d10f      	bne.n	8005758 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2200      	movs	r2, #0
 8005742:	4619      	mov	r1, r3
 8005744:	f7ff fafd 	bl	8004d42 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff faa4 	bl	8004c9e <LL_ADC_SetSamplingTimeCommonConfig>
 8005756:	e00e      	b.n	8005776 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	6819      	ldr	r1, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	461a      	mov	r2, r3
 8005766:	f7ff faec 	bl	8004d42 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff fa94 	bl	8004c9e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	08db      	lsrs	r3, r3, #3
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d00a      	beq.n	80057ae <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	6919      	ldr	r1, [r3, #16]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057a8:	f7ff fa24 	bl	8004bf4 <LL_ADC_SetOffset>
 80057ac:	e17b      	b.n	8005aa6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fa41 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <HAL_ADC_ConfigChannel+0x17e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff fa36 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 80057d0:	4603      	mov	r3, r0
 80057d2:	0e9b      	lsrs	r3, r3, #26
 80057d4:	f003 021f 	and.w	r2, r3, #31
 80057d8:	e01e      	b.n	8005818 <HAL_ADC_ConfigChannel+0x1bc>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2100      	movs	r1, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fa2b 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057f0:	fa93 f3a3 	rbit	r3, r3
 80057f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80057f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8005808:	2320      	movs	r3, #32
 800580a:	e004      	b.n	8005816 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800580c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005810:	fab3 f383 	clz	r3, r3
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <HAL_ADC_ConfigChannel+0x1d4>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	0e9b      	lsrs	r3, r3, #26
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	e018      	b.n	8005862 <HAL_ADC_ConfigChannel+0x206>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800583c:	fa93 f3a3 	rbit	r3, r3
 8005840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800584c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8005854:	2320      	movs	r3, #32
 8005856:	e004      	b.n	8005862 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8005858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800585c:	fab3 f383 	clz	r3, r3
 8005860:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005862:	429a      	cmp	r2, r3
 8005864:	d106      	bne.n	8005874 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff f9fa 	bl	8004c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2101      	movs	r1, #1
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff f9de 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 8005880:	4603      	mov	r3, r0
 8005882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <HAL_ADC_ConfigChannel+0x244>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2101      	movs	r1, #1
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff f9d3 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 8005896:	4603      	mov	r3, r0
 8005898:	0e9b      	lsrs	r3, r3, #26
 800589a:	f003 021f 	and.w	r2, r3, #31
 800589e:	e01e      	b.n	80058de <HAL_ADC_ConfigChannel+0x282>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2101      	movs	r1, #1
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff f9c8 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058b6:	fa93 f3a3 	rbit	r3, r3
 80058ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80058be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80058c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80058ce:	2320      	movs	r3, #32
 80058d0:	e004      	b.n	80058dc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80058d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058d6:	fab3 f383 	clz	r3, r3
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d105      	bne.n	80058f6 <HAL_ADC_ConfigChannel+0x29a>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	0e9b      	lsrs	r3, r3, #26
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	e018      	b.n	8005928 <HAL_ADC_ConfigChannel+0x2cc>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005902:	fa93 f3a3 	rbit	r3, r3
 8005906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800590a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800590e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800591a:	2320      	movs	r3, #32
 800591c:	e004      	b.n	8005928 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800591e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005922:	fab3 f383 	clz	r3, r3
 8005926:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005928:	429a      	cmp	r2, r3
 800592a:	d106      	bne.n	800593a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2200      	movs	r2, #0
 8005932:	2101      	movs	r1, #1
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff f997 	bl	8004c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2102      	movs	r1, #2
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff f97b 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 8005946:	4603      	mov	r3, r0
 8005948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <HAL_ADC_ConfigChannel+0x30a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2102      	movs	r1, #2
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff f970 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 800595c:	4603      	mov	r3, r0
 800595e:	0e9b      	lsrs	r3, r3, #26
 8005960:	f003 021f 	and.w	r2, r3, #31
 8005964:	e01e      	b.n	80059a4 <HAL_ADC_ConfigChannel+0x348>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2102      	movs	r1, #2
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff f965 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 8005972:	4603      	mov	r3, r0
 8005974:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800597c:	fa93 f3a3 	rbit	r3, r3
 8005980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800598c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8005994:	2320      	movs	r3, #32
 8005996:	e004      	b.n	80059a2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8005998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800599c:	fab3 f383 	clz	r3, r3
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d105      	bne.n	80059bc <HAL_ADC_ConfigChannel+0x360>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	0e9b      	lsrs	r3, r3, #26
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	e016      	b.n	80059ea <HAL_ADC_ConfigChannel+0x38e>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059c8:	fa93 f3a3 	rbit	r3, r3
 80059cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80059ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80059d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80059dc:	2320      	movs	r3, #32
 80059de:	e004      	b.n	80059ea <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80059e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059e4:	fab3 f383 	clz	r3, r3
 80059e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d106      	bne.n	80059fc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2200      	movs	r2, #0
 80059f4:	2102      	movs	r1, #2
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff f936 	bl	8004c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2103      	movs	r1, #3
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff f91a 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x3cc>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2103      	movs	r1, #3
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff f90f 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	0e9b      	lsrs	r3, r3, #26
 8005a22:	f003 021f 	and.w	r2, r3, #31
 8005a26:	e017      	b.n	8005a58 <HAL_ADC_ConfigChannel+0x3fc>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2103      	movs	r1, #3
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff f904 	bl	8004c3c <LL_ADC_GetOffsetChannel>
 8005a34:	4603      	mov	r3, r0
 8005a36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a3a:	fa93 f3a3 	rbit	r3, r3
 8005a3e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a42:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8005a4a:	2320      	movs	r3, #32
 8005a4c:	e003      	b.n	8005a56 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8005a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a50:	fab3 f383 	clz	r3, r3
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x414>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	0e9b      	lsrs	r3, r3, #26
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	e011      	b.n	8005a94 <HAL_ADC_ConfigChannel+0x438>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a78:	fa93 f3a3 	rbit	r3, r3
 8005a7c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8005a88:	2320      	movs	r3, #32
 8005a8a:	e003      	b.n	8005a94 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8005a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8e:	fab3 f383 	clz	r3, r3
 8005a92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d106      	bne.n	8005aa6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2103      	movs	r1, #3
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff f8e1 	bl	8004c68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff fa2a 	bl	8004f04 <LL_ADC_IsEnabled>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 8140 	bne.w	8005d38 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f7ff f967 	bl	8004d98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	4a8f      	ldr	r2, [pc, #572]	; (8005d0c <HAL_ADC_ConfigChannel+0x6b0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	f040 8131 	bne.w	8005d38 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <HAL_ADC_ConfigChannel+0x4a2>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	0e9b      	lsrs	r3, r3, #26
 8005aec:	3301      	adds	r3, #1
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2b09      	cmp	r3, #9
 8005af4:	bf94      	ite	ls
 8005af6:	2301      	movls	r3, #1
 8005af8:	2300      	movhi	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	e019      	b.n	8005b32 <HAL_ADC_ConfigChannel+0x4d6>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b06:	fa93 f3a3 	rbit	r3, r3
 8005b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b0e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005b16:	2320      	movs	r3, #32
 8005b18:	e003      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8005b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b1c:	fab3 f383 	clz	r3, r3
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	3301      	adds	r3, #1
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	2b09      	cmp	r3, #9
 8005b2a:	bf94      	ite	ls
 8005b2c:	2301      	movls	r3, #1
 8005b2e:	2300      	movhi	r3, #0
 8005b30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d079      	beq.n	8005c2a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d107      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0x4f6>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	0e9b      	lsrs	r3, r3, #26
 8005b48:	3301      	adds	r3, #1
 8005b4a:	069b      	lsls	r3, r3, #26
 8005b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b50:	e015      	b.n	8005b7e <HAL_ADC_ConfigChannel+0x522>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b5a:	fa93 f3a3 	rbit	r3, r3
 8005b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b62:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8005b6a:	2320      	movs	r3, #32
 8005b6c:	e003      	b.n	8005b76 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8005b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b70:	fab3 f383 	clz	r3, r3
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	3301      	adds	r3, #1
 8005b78:	069b      	lsls	r3, r3, #26
 8005b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d109      	bne.n	8005b9e <HAL_ADC_ConfigChannel+0x542>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	0e9b      	lsrs	r3, r3, #26
 8005b90:	3301      	adds	r3, #1
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	2101      	movs	r1, #1
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	e017      	b.n	8005bce <HAL_ADC_ConfigChannel+0x572>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba6:	fa93 f3a3 	rbit	r3, r3
 8005baa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	e003      	b.n	8005bc2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8005bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bbc:	fab3 f383 	clz	r3, r3
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	ea42 0103 	orr.w	r1, r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10a      	bne.n	8005bf4 <HAL_ADC_ConfigChannel+0x598>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	0e9b      	lsrs	r3, r3, #26
 8005be4:	3301      	adds	r3, #1
 8005be6:	f003 021f 	and.w	r2, r3, #31
 8005bea:	4613      	mov	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	051b      	lsls	r3, r3, #20
 8005bf2:	e018      	b.n	8005c26 <HAL_ADC_ConfigChannel+0x5ca>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	fa93 f3a3 	rbit	r3, r3
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8005c0c:	2320      	movs	r3, #32
 8005c0e:	e003      	b.n	8005c18 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8005c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c12:	fab3 f383 	clz	r3, r3
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f003 021f 	and.w	r2, r3, #31
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c26:	430b      	orrs	r3, r1
 8005c28:	e081      	b.n	8005d2e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d107      	bne.n	8005c46 <HAL_ADC_ConfigChannel+0x5ea>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	0e9b      	lsrs	r3, r3, #26
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	069b      	lsls	r3, r3, #26
 8005c40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c44:	e015      	b.n	8005c72 <HAL_ADC_ConfigChannel+0x616>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	fa93 f3a3 	rbit	r3, r3
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8005c5e:	2320      	movs	r3, #32
 8005c60:	e003      	b.n	8005c6a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	fab3 f383 	clz	r3, r3
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	069b      	lsls	r3, r3, #26
 8005c6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <HAL_ADC_ConfigChannel+0x636>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	0e9b      	lsrs	r3, r3, #26
 8005c84:	3301      	adds	r3, #1
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	e017      	b.n	8005cc2 <HAL_ADC_ConfigChannel+0x666>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	fa93 f3a3 	rbit	r3, r3
 8005c9e:	61fb      	str	r3, [r7, #28]
  return result;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8005caa:	2320      	movs	r3, #32
 8005cac:	e003      	b.n	8005cb6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	fab3 f383 	clz	r3, r3
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	ea42 0103 	orr.w	r1, r2, r3
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10d      	bne.n	8005cee <HAL_ADC_ConfigChannel+0x692>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	0e9b      	lsrs	r3, r3, #26
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f003 021f 	and.w	r2, r3, #31
 8005cde:	4613      	mov	r3, r2
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3b1e      	subs	r3, #30
 8005ce6:	051b      	lsls	r3, r3, #20
 8005ce8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cec:	e01e      	b.n	8005d2c <HAL_ADC_ConfigChannel+0x6d0>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	fa93 f3a3 	rbit	r3, r3
 8005cfa:	613b      	str	r3, [r7, #16]
  return result;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005d06:	2320      	movs	r3, #32
 8005d08:	e006      	b.n	8005d18 <HAL_ADC_ConfigChannel+0x6bc>
 8005d0a:	bf00      	nop
 8005d0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	fab3 f383 	clz	r3, r3
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	3301      	adds	r3, #1
 8005d1a:	f003 021f 	and.w	r2, r3, #31
 8005d1e:	4613      	mov	r3, r2
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	4413      	add	r3, r2
 8005d24:	3b1e      	subs	r3, #30
 8005d26:	051b      	lsls	r3, r3, #20
 8005d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	6892      	ldr	r2, [r2, #8]
 8005d32:	4619      	mov	r1, r3
 8005d34:	f7ff f805 	bl	8004d42 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4b3d      	ldr	r3, [pc, #244]	; (8005e34 <HAL_ADC_ConfigChannel+0x7d8>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d06c      	beq.n	8005e1e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d44:	483c      	ldr	r0, [pc, #240]	; (8005e38 <HAL_ADC_ConfigChannel+0x7dc>)
 8005d46:	f7fe ff47 	bl	8004bd8 <LL_ADC_GetCommonPathInternalCh>
 8005d4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3a      	ldr	r2, [pc, #232]	; (8005e3c <HAL_ADC_ConfigChannel+0x7e0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d127      	bne.n	8005da8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d121      	bne.n	8005da8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a35      	ldr	r2, [pc, #212]	; (8005e40 <HAL_ADC_ConfigChannel+0x7e4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d157      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d76:	4619      	mov	r1, r3
 8005d78:	482f      	ldr	r0, [pc, #188]	; (8005e38 <HAL_ADC_ConfigChannel+0x7dc>)
 8005d7a:	f7fe ff1a 	bl	8004bb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d7e:	4b31      	ldr	r3, [pc, #196]	; (8005e44 <HAL_ADC_ConfigChannel+0x7e8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	099b      	lsrs	r3, r3, #6
 8005d84:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <HAL_ADC_ConfigChannel+0x7ec>)
 8005d86:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8a:	099b      	lsrs	r3, r3, #6
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	4613      	mov	r3, r2
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d98:	e002      	b.n	8005da0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f9      	bne.n	8005d9a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005da6:	e03a      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a27      	ldr	r2, [pc, #156]	; (8005e4c <HAL_ADC_ConfigChannel+0x7f0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d113      	bne.n	8005dda <HAL_ADC_ConfigChannel+0x77e>
 8005db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10d      	bne.n	8005dda <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <HAL_ADC_ConfigChannel+0x7e4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d12a      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4819      	ldr	r0, [pc, #100]	; (8005e38 <HAL_ADC_ConfigChannel+0x7dc>)
 8005dd4:	f7fe feed 	bl	8004bb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005dd8:	e021      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <HAL_ADC_ConfigChannel+0x7f4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d11c      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d116      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a12      	ldr	r2, [pc, #72]	; (8005e40 <HAL_ADC_ConfigChannel+0x7e4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d111      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e02:	4619      	mov	r1, r3
 8005e04:	480c      	ldr	r0, [pc, #48]	; (8005e38 <HAL_ADC_ConfigChannel+0x7dc>)
 8005e06:	f7fe fed4 	bl	8004bb2 <LL_ADC_SetCommonPathInternalCh>
 8005e0a:	e008      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005e26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	37d8      	adds	r7, #216	; 0xd8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	80080000 	.word	0x80080000
 8005e38:	50040300 	.word	0x50040300
 8005e3c:	c7520000 	.word	0xc7520000
 8005e40:	50040000 	.word	0x50040000
 8005e44:	20000000 	.word	0x20000000
 8005e48:	053e2d63 	.word	0x053e2d63
 8005e4c:	cb840000 	.word	0xcb840000
 8005e50:	80000001 	.word	0x80000001

08005e54 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff f898 	bl	8004fa0 <LL_ADC_REG_IsConversionOngoing>
 8005e70:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff f8b9 	bl	8004fee <LL_ADC_INJ_IsConversionOngoing>
 8005e7c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 8098 	beq.w	8005fbc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d02a      	beq.n	8005ef0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	7e5b      	ldrb	r3, [r3, #25]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d126      	bne.n	8005ef0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	7e1b      	ldrb	r3, [r3, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d122      	bne.n	8005ef0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005eae:	e014      	b.n	8005eda <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4a45      	ldr	r2, [pc, #276]	; (8005fc8 <ADC_ConversionStop+0x174>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d90d      	bls.n	8005ed4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebc:	f043 0210 	orr.w	r2, r3, #16
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec8:	f043 0201 	orr.w	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e074      	b.n	8005fbe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d1e3      	bne.n	8005eb0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2240      	movs	r2, #64	; 0x40
 8005eee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d014      	beq.n	8005f20 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff f850 	bl	8004fa0 <LL_ADC_REG_IsConversionOngoing>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00c      	beq.n	8005f20 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff f80d 	bl	8004f2a <LL_ADC_IsDisableOngoing>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d104      	bne.n	8005f20 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff f82c 	bl	8004f78 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d014      	beq.n	8005f50 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff f85f 	bl	8004fee <LL_ADC_INJ_IsConversionOngoing>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fff5 	bl	8004f2a <LL_ADC_IsDisableOngoing>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff f83b 	bl	8004fc6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d005      	beq.n	8005f62 <ADC_ConversionStop+0x10e>
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d105      	bne.n	8005f68 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005f5c:	230c      	movs	r3, #12
 8005f5e:	617b      	str	r3, [r7, #20]
        break;
 8005f60:	e005      	b.n	8005f6e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005f62:	2308      	movs	r3, #8
 8005f64:	617b      	str	r3, [r7, #20]
        break;
 8005f66:	e002      	b.n	8005f6e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005f68:	2304      	movs	r3, #4
 8005f6a:	617b      	str	r3, [r7, #20]
        break;
 8005f6c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005f6e:	f7fe fdcd 	bl	8004b0c <HAL_GetTick>
 8005f72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005f74:	e01b      	b.n	8005fae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005f76:	f7fe fdc9 	bl	8004b0c <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b05      	cmp	r3, #5
 8005f82:	d914      	bls.n	8005fae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00d      	beq.n	8005fae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	f043 0210 	orr.w	r2, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa2:	f043 0201 	orr.w	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e007      	b.n	8005fbe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1dc      	bne.n	8005f76 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	a33fffff 	.word	0xa33fffff

08005fcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe ff91 	bl	8004f04 <LL_ADC_IsEnabled>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d169      	bne.n	80060bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	4b36      	ldr	r3, [pc, #216]	; (80060c8 <ADC_Enable+0xfc>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffa:	f043 0210 	orr.w	r2, r3, #16
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	f043 0201 	orr.w	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e055      	b.n	80060be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe ff4c 	bl	8004eb4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800601c:	482b      	ldr	r0, [pc, #172]	; (80060cc <ADC_Enable+0x100>)
 800601e:	f7fe fddb 	bl	8004bd8 <LL_ADC_GetCommonPathInternalCh>
 8006022:	4603      	mov	r3, r0
 8006024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d013      	beq.n	8006054 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800602c:	4b28      	ldr	r3, [pc, #160]	; (80060d0 <ADC_Enable+0x104>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	099b      	lsrs	r3, r3, #6
 8006032:	4a28      	ldr	r2, [pc, #160]	; (80060d4 <ADC_Enable+0x108>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	099b      	lsrs	r3, r3, #6
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	4613      	mov	r3, r2
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006046:	e002      	b.n	800604e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	3b01      	subs	r3, #1
 800604c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f9      	bne.n	8006048 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006054:	f7fe fd5a 	bl	8004b0c <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800605a:	e028      	b.n	80060ae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7fe ff4f 	bl	8004f04 <LL_ADC_IsEnabled>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f7fe ff1f 	bl	8004eb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006076:	f7fe fd49 	bl	8004b0c <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d914      	bls.n	80060ae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b01      	cmp	r3, #1
 8006090:	d00d      	beq.n	80060ae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	f043 0210 	orr.w	r2, r3, #16
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a2:	f043 0201 	orr.w	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e007      	b.n	80060be <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d1cf      	bne.n	800605c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	8000003f 	.word	0x8000003f
 80060cc:	50040300 	.word	0x50040300
 80060d0:	20000000 	.word	0x20000000
 80060d4:	053e2d63 	.word	0x053e2d63

080060d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe ff20 	bl	8004f2a <LL_ADC_IsDisableOngoing>
 80060ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe ff07 	bl	8004f04 <LL_ADC_IsEnabled>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d047      	beq.n	800618c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d144      	bne.n	800618c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 030d 	and.w	r3, r3, #13
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10c      	bne.n	800612a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fee1 	bl	8004edc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2203      	movs	r2, #3
 8006120:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006122:	f7fe fcf3 	bl	8004b0c <HAL_GetTick>
 8006126:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006128:	e029      	b.n	800617e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	f043 0210 	orr.w	r2, r3, #16
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	f043 0201 	orr.w	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e023      	b.n	800618e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006146:	f7fe fce1 	bl	8004b0c <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d914      	bls.n	800617e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00d      	beq.n	800617e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	f043 0210 	orr.w	r2, r3, #16
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	f043 0201 	orr.w	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e007      	b.n	800618e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1dc      	bne.n	8006146 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <LL_ADC_IsEnabled>:
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <LL_ADC_IsEnabled+0x18>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <LL_ADC_IsEnabled+0x1a>
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <LL_ADC_REG_IsConversionOngoing>:
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d101      	bne.n	80061d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80061d0:	2301      	movs	r3, #1
 80061d2:	e000      	b.n	80061d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
	...

080061e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b09f      	sub	sp, #124	; 0x7c
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80061fe:	2302      	movs	r3, #2
 8006200:	e089      	b.n	8006316 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800620a:	2300      	movs	r3, #0
 800620c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800620e:	2300      	movs	r3, #0
 8006210:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a42      	ldr	r2, [pc, #264]	; (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d102      	bne.n	8006222 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800621c:	4b41      	ldr	r3, [pc, #260]	; (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800621e:	60bb      	str	r3, [r7, #8]
 8006220:	e001      	b.n	8006226 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006222:	2300      	movs	r3, #0
 8006224:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006230:	f043 0220 	orr.w	r2, r3, #32
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e068      	b.n	8006316 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff ffb8 	bl	80061bc <LL_ADC_REG_IsConversionOngoing>
 800624c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff ffb2 	bl	80061bc <LL_ADC_REG_IsConversionOngoing>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d14a      	bne.n	80062f4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800625e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006260:	2b00      	cmp	r3, #0
 8006262:	d147      	bne.n	80062f4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006264:	4b30      	ldr	r3, [pc, #192]	; (8006328 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006266:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d027      	beq.n	80062c0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	6859      	ldr	r1, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006282:	035b      	lsls	r3, r3, #13
 8006284:	430b      	orrs	r3, r1
 8006286:	431a      	orrs	r2, r3
 8006288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800628c:	4824      	ldr	r0, [pc, #144]	; (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800628e:	f7ff ff82 	bl	8006196 <LL_ADC_IsEnabled>
 8006292:	4604      	mov	r4, r0
 8006294:	4823      	ldr	r0, [pc, #140]	; (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006296:	f7ff ff7e 	bl	8006196 <LL_ADC_IsEnabled>
 800629a:	4603      	mov	r3, r0
 800629c:	4323      	orrs	r3, r4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d132      	bne.n	8006308 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80062a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80062aa:	f023 030f 	bic.w	r3, r3, #15
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	6811      	ldr	r1, [r2, #0]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	6892      	ldr	r2, [r2, #8]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	431a      	orrs	r2, r3
 80062ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062bc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062be:	e023      	b.n	8006308 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80062c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062cc:	4814      	ldr	r0, [pc, #80]	; (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80062ce:	f7ff ff62 	bl	8006196 <LL_ADC_IsEnabled>
 80062d2:	4604      	mov	r4, r0
 80062d4:	4813      	ldr	r0, [pc, #76]	; (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80062d6:	f7ff ff5e 	bl	8006196 <LL_ADC_IsEnabled>
 80062da:	4603      	mov	r3, r0
 80062dc:	4323      	orrs	r3, r4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d112      	bne.n	8006308 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80062ea:	f023 030f 	bic.w	r3, r3, #15
 80062ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062f2:	e009      	b.n	8006308 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	f043 0220 	orr.w	r2, r3, #32
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006306:	e000      	b.n	800630a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006308:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006312:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006316:	4618      	mov	r0, r3
 8006318:	377c      	adds	r7, #124	; 0x7c
 800631a:	46bd      	mov	sp, r7
 800631c:	bd90      	pop	{r4, r7, pc}
 800631e:	bf00      	nop
 8006320:	50040000 	.word	0x50040000
 8006324:	50040100 	.word	0x50040100
 8006328:	50040300 	.word	0x50040300

0800632c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <__NVIC_SetPriorityGrouping+0x44>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006348:	4013      	ands	r3, r2
 800634a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800635c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800635e:	4a04      	ldr	r2, [pc, #16]	; (8006370 <__NVIC_SetPriorityGrouping+0x44>)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	60d3      	str	r3, [r2, #12]
}
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	e000ed00 	.word	0xe000ed00

08006374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <__NVIC_GetPriorityGrouping+0x18>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	f003 0307 	and.w	r3, r3, #7
}
 8006382:	4618      	mov	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	e000ed00 	.word	0xe000ed00

08006390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800639a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	db0b      	blt.n	80063ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	f003 021f 	and.w	r2, r3, #31
 80063a8:	4907      	ldr	r1, [pc, #28]	; (80063c8 <__NVIC_EnableIRQ+0x38>)
 80063aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	2001      	movs	r0, #1
 80063b2:	fa00 f202 	lsl.w	r2, r0, r2
 80063b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	e000e100 	.word	0xe000e100

080063cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	6039      	str	r1, [r7, #0]
 80063d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	db0a      	blt.n	80063f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	490c      	ldr	r1, [pc, #48]	; (8006418 <__NVIC_SetPriority+0x4c>)
 80063e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ea:	0112      	lsls	r2, r2, #4
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	440b      	add	r3, r1
 80063f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063f4:	e00a      	b.n	800640c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	4908      	ldr	r1, [pc, #32]	; (800641c <__NVIC_SetPriority+0x50>)
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	3b04      	subs	r3, #4
 8006404:	0112      	lsls	r2, r2, #4
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	440b      	add	r3, r1
 800640a:	761a      	strb	r2, [r3, #24]
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	e000e100 	.word	0xe000e100
 800641c:	e000ed00 	.word	0xe000ed00

08006420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006420:	b480      	push	{r7}
 8006422:	b089      	sub	sp, #36	; 0x24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f1c3 0307 	rsb	r3, r3, #7
 800643a:	2b04      	cmp	r3, #4
 800643c:	bf28      	it	cs
 800643e:	2304      	movcs	r3, #4
 8006440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3304      	adds	r3, #4
 8006446:	2b06      	cmp	r3, #6
 8006448:	d902      	bls.n	8006450 <NVIC_EncodePriority+0x30>
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	3b03      	subs	r3, #3
 800644e:	e000      	b.n	8006452 <NVIC_EncodePriority+0x32>
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006454:	f04f 32ff 	mov.w	r2, #4294967295
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	43da      	mvns	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	401a      	ands	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006468:	f04f 31ff 	mov.w	r1, #4294967295
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	fa01 f303 	lsl.w	r3, r1, r3
 8006472:	43d9      	mvns	r1, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006478:	4313      	orrs	r3, r2
         );
}
 800647a:	4618      	mov	r0, r3
 800647c:	3724      	adds	r7, #36	; 0x24
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3b01      	subs	r3, #1
 8006494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006498:	d301      	bcc.n	800649e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800649a:	2301      	movs	r3, #1
 800649c:	e00f      	b.n	80064be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800649e:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <SysTick_Config+0x40>)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064a6:	210f      	movs	r1, #15
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	f7ff ff8e 	bl	80063cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <SysTick_Config+0x40>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064b6:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <SysTick_Config+0x40>)
 80064b8:	2207      	movs	r2, #7
 80064ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	e000e010 	.word	0xe000e010

080064cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ff29 	bl	800632c <__NVIC_SetPriorityGrouping>
}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b086      	sub	sp, #24
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	4603      	mov	r3, r0
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064f4:	f7ff ff3e 	bl	8006374 <__NVIC_GetPriorityGrouping>
 80064f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	6978      	ldr	r0, [r7, #20]
 8006500:	f7ff ff8e 	bl	8006420 <NVIC_EncodePriority>
 8006504:	4602      	mov	r2, r0
 8006506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff5d 	bl	80063cc <__NVIC_SetPriority>
}
 8006512:	bf00      	nop
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	4603      	mov	r3, r0
 8006522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff ff31 	bl	8006390 <__NVIC_EnableIRQ>
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ffa2 	bl	8006488 <SysTick_Config>
 8006544:	4603      	mov	r3, r0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d008      	beq.n	8006578 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2204      	movs	r2, #4
 800656a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e022      	b.n	80065be <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 020e 	bic.w	r2, r2, #14
 8006586:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0201 	bic.w	r2, r2, #1
 8006596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659c:	f003 021c 	and.w	r2, r3, #28
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a4:	2101      	movs	r1, #1
 80065a6:	fa01 f202 	lsl.w	r2, r1, r2
 80065aa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d005      	beq.n	80065ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2204      	movs	r2, #4
 80065e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	73fb      	strb	r3, [r7, #15]
 80065ec:	e029      	b.n	8006642 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 020e 	bic.w	r2, r2, #14
 80065fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0201 	bic.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	f003 021c 	and.w	r2, r3, #28
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	2101      	movs	r1, #1
 800661c:	fa01 f202 	lsl.w	r2, r1, r2
 8006620:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
    }
  }
  return status;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800665e:	4b2f      	ldr	r3, [pc, #188]	; (800671c <HAL_FLASH_Program+0xd0>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_FLASH_Program+0x1e>
 8006666:	2302      	movs	r3, #2
 8006668:	e053      	b.n	8006712 <HAL_FLASH_Program+0xc6>
 800666a:	4b2c      	ldr	r3, [pc, #176]	; (800671c <HAL_FLASH_Program+0xd0>)
 800666c:	2201      	movs	r2, #1
 800666e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006670:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006674:	f000 f894 	bl	80067a0 <FLASH_WaitForLastOperation>
 8006678:	4603      	mov	r3, r0
 800667a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d143      	bne.n	800670a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006682:	4b26      	ldr	r3, [pc, #152]	; (800671c <HAL_FLASH_Program+0xd0>)
 8006684:	2200      	movs	r2, #0
 8006686:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <HAL_FLASH_Program+0xd4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006694:	4b22      	ldr	r3, [pc, #136]	; (8006720 <HAL_FLASH_Program+0xd4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a21      	ldr	r2, [pc, #132]	; (8006720 <HAL_FLASH_Program+0xd4>)
 800669a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800669e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80066a0:	4b1e      	ldr	r3, [pc, #120]	; (800671c <HAL_FLASH_Program+0xd0>)
 80066a2:	2202      	movs	r2, #2
 80066a4:	771a      	strb	r2, [r3, #28]
 80066a6:	e002      	b.n	80066ae <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80066a8:	4b1c      	ldr	r3, [pc, #112]	; (800671c <HAL_FLASH_Program+0xd0>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d107      	bne.n	80066c4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80066b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b8:	68b8      	ldr	r0, [r7, #8]
 80066ba:	f000 f8c9 	bl	8006850 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80066be:	2301      	movs	r3, #1
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	e010      	b.n	80066e6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d002      	beq.n	80066d0 <HAL_FLASH_Program+0x84>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d10a      	bne.n	80066e6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	4619      	mov	r1, r3
 80066d4:	68b8      	ldr	r0, [r7, #8]
 80066d6:	f000 f8e1 	bl	800689c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d102      	bne.n	80066e6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80066e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066e4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80066e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80066ea:	f000 f859 	bl	80067a0 <FLASH_WaitForLastOperation>
 80066ee:	4603      	mov	r3, r0
 80066f0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d006      	beq.n	8006706 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80066f8:	4b09      	ldr	r3, [pc, #36]	; (8006720 <HAL_FLASH_Program+0xd4>)
 80066fa:	695a      	ldr	r2, [r3, #20]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	43db      	mvns	r3, r3
 8006700:	4907      	ldr	r1, [pc, #28]	; (8006720 <HAL_FLASH_Program+0xd4>)
 8006702:	4013      	ands	r3, r2
 8006704:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006706:	f000 f9d9 	bl	8006abc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800670a:	4b04      	ldr	r3, [pc, #16]	; (800671c <HAL_FLASH_Program+0xd0>)
 800670c:	2200      	movs	r2, #0
 800670e:	701a      	strb	r2, [r3, #0]

  return status;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	2000000c 	.word	0x2000000c
 8006720:	40022000 	.word	0x40022000

08006724 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800672e:	4b0b      	ldr	r3, [pc, #44]	; (800675c <HAL_FLASH_Unlock+0x38>)
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	da0b      	bge.n	800674e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <HAL_FLASH_Unlock+0x38>)
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <HAL_FLASH_Unlock+0x3c>)
 800673a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800673c:	4b07      	ldr	r3, [pc, #28]	; (800675c <HAL_FLASH_Unlock+0x38>)
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <HAL_FLASH_Unlock+0x40>)
 8006740:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <HAL_FLASH_Unlock+0x38>)
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	da01      	bge.n	800674e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800674e:	79fb      	ldrb	r3, [r7, #7]
}
 8006750:	4618      	mov	r0, r3
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40022000 	.word	0x40022000
 8006760:	45670123 	.word	0x45670123
 8006764:	cdef89ab 	.word	0xcdef89ab

08006768 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800676c:	4b05      	ldr	r3, [pc, #20]	; (8006784 <HAL_FLASH_Lock+0x1c>)
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	4a04      	ldr	r2, [pc, #16]	; (8006784 <HAL_FLASH_Lock+0x1c>)
 8006772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006776:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	40022000 	.word	0x40022000

08006788 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800678c:	4b03      	ldr	r3, [pc, #12]	; (800679c <HAL_FLASH_GetError+0x14>)
 800678e:	685b      	ldr	r3, [r3, #4]
}
 8006790:	4618      	mov	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	2000000c 	.word	0x2000000c

080067a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80067a8:	f7fe f9b0 	bl	8004b0c <HAL_GetTick>
 80067ac:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80067ae:	e00d      	b.n	80067cc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d009      	beq.n	80067cc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80067b8:	f7fe f9a8 	bl	8004b0c <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d801      	bhi.n	80067cc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e036      	b.n	800683a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80067cc:	4b1d      	ldr	r3, [pc, #116]	; (8006844 <FLASH_WaitForLastOperation+0xa4>)
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1eb      	bne.n	80067b0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80067d8:	4b1a      	ldr	r3, [pc, #104]	; (8006844 <FLASH_WaitForLastOperation+0xa4>)
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	4b1a      	ldr	r3, [pc, #104]	; (8006848 <FLASH_WaitForLastOperation+0xa8>)
 80067de:	4013      	ands	r3, r2
 80067e0:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01e      	beq.n	8006826 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80067e8:	4b18      	ldr	r3, [pc, #96]	; (800684c <FLASH_WaitForLastOperation+0xac>)
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	4a16      	ldr	r2, [pc, #88]	; (800684c <FLASH_WaitForLastOperation+0xac>)
 80067f2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <FLASH_WaitForLastOperation+0x6e>
 80067fe:	4b11      	ldr	r3, [pc, #68]	; (8006844 <FLASH_WaitForLastOperation+0xa4>)
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006808:	490e      	ldr	r1, [pc, #56]	; (8006844 <FLASH_WaitForLastOperation+0xa4>)
 800680a:	4313      	orrs	r3, r2
 800680c:	618b      	str	r3, [r1, #24]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <FLASH_WaitForLastOperation+0x82>
 8006818:	4a0a      	ldr	r2, [pc, #40]	; (8006844 <FLASH_WaitForLastOperation+0xa4>)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006820:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e009      	b.n	800683a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006826:	4b07      	ldr	r3, [pc, #28]	; (8006844 <FLASH_WaitForLastOperation+0xa4>)
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006832:	4b04      	ldr	r3, [pc, #16]	; (8006844 <FLASH_WaitForLastOperation+0xa4>)
 8006834:	2201      	movs	r2, #1
 8006836:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40022000 	.word	0x40022000
 8006848:	0002c3fa 	.word	0x0002c3fa
 800684c:	2000000c 	.word	0x2000000c

08006850 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <FLASH_Program_DoubleWord+0x48>)
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	4a0d      	ldr	r2, [pc, #52]	; (8006898 <FLASH_Program_DoubleWord+0x48>)
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800686e:	f3bf 8f6f 	isb	sy
}
 8006872:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006874:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	f04f 0300 	mov.w	r3, #0
 8006880:	000a      	movs	r2, r1
 8006882:	2300      	movs	r3, #0
 8006884:	68f9      	ldr	r1, [r7, #12]
 8006886:	3104      	adds	r1, #4
 8006888:	4613      	mov	r3, r2
 800688a:	600b      	str	r3, [r1, #0]
}
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40022000 	.word	0x40022000

0800689c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800689c:	b480      	push	{r7}
 800689e:	b089      	sub	sp, #36	; 0x24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <FLASH_Program_Fast+0x68>)
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	4a13      	ldr	r2, [pc, #76]	; (8006904 <FLASH_Program_Fast+0x68>)
 80068b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068be:	f3ef 8310 	mrs	r3, PRIMASK
 80068c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80068c4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80068c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80068c8:	b672      	cpsid	i
}
 80068ca:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	3304      	adds	r3, #4
 80068d8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	3304      	adds	r3, #4
 80068de:	617b      	str	r3, [r7, #20]
    row_index--;
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80068e6:	7ffb      	ldrb	r3, [r7, #31]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ef      	bne.n	80068cc <FLASH_Program_Fast+0x30>
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f383 8810 	msr	PRIMASK, r3
}
 80068f6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80068f8:	bf00      	nop
 80068fa:	3724      	adds	r7, #36	; 0x24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	40022000 	.word	0x40022000

08006908 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006912:	4b47      	ldr	r3, [pc, #284]	; (8006a30 <HAL_FLASHEx_Erase+0x128>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_FLASHEx_Erase+0x16>
 800691a:	2302      	movs	r3, #2
 800691c:	e083      	b.n	8006a26 <HAL_FLASHEx_Erase+0x11e>
 800691e:	4b44      	ldr	r3, [pc, #272]	; (8006a30 <HAL_FLASHEx_Erase+0x128>)
 8006920:	2201      	movs	r2, #1
 8006922:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006924:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006928:	f7ff ff3a 	bl	80067a0 <FLASH_WaitForLastOperation>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d173      	bne.n	8006a1e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006936:	4b3e      	ldr	r3, [pc, #248]	; (8006a30 <HAL_FLASHEx_Erase+0x128>)
 8006938:	2200      	movs	r2, #0
 800693a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800693c:	4b3d      	ldr	r3, [pc, #244]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006944:	2b00      	cmp	r3, #0
 8006946:	d013      	beq.n	8006970 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006948:	4b3a      	ldr	r3, [pc, #232]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006950:	2b00      	cmp	r3, #0
 8006952:	d009      	beq.n	8006968 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006954:	4b37      	ldr	r3, [pc, #220]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a36      	ldr	r2, [pc, #216]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 800695a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800695e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006960:	4b33      	ldr	r3, [pc, #204]	; (8006a30 <HAL_FLASHEx_Erase+0x128>)
 8006962:	2203      	movs	r2, #3
 8006964:	771a      	strb	r2, [r3, #28]
 8006966:	e016      	b.n	8006996 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006968:	4b31      	ldr	r3, [pc, #196]	; (8006a30 <HAL_FLASHEx_Erase+0x128>)
 800696a:	2201      	movs	r2, #1
 800696c:	771a      	strb	r2, [r3, #28]
 800696e:	e012      	b.n	8006996 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006970:	4b30      	ldr	r3, [pc, #192]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006978:	2b00      	cmp	r3, #0
 800697a:	d009      	beq.n	8006990 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800697c:	4b2d      	ldr	r3, [pc, #180]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a2c      	ldr	r2, [pc, #176]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 8006982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006986:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006988:	4b29      	ldr	r3, [pc, #164]	; (8006a30 <HAL_FLASHEx_Erase+0x128>)
 800698a:	2202      	movs	r2, #2
 800698c:	771a      	strb	r2, [r3, #28]
 800698e:	e002      	b.n	8006996 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006990:	4b27      	ldr	r3, [pc, #156]	; (8006a30 <HAL_FLASHEx_Erase+0x128>)
 8006992:	2200      	movs	r2, #0
 8006994:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d111      	bne.n	80069c2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 f848 	bl	8006a38 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80069a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80069ac:	f7ff fef8 	bl	80067a0 <FLASH_WaitForLastOperation>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80069b4:	4b1f      	ldr	r3, [pc, #124]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 80069ba:	f023 0304 	bic.w	r3, r3, #4
 80069be:	6153      	str	r3, [r2, #20]
 80069c0:	e02b      	b.n	8006a1a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295
 80069c8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	60bb      	str	r3, [r7, #8]
 80069d0:	e01b      	b.n	8006a0a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	4619      	mov	r1, r3
 80069d8:	68b8      	ldr	r0, [r7, #8]
 80069da:	f000 f84b 	bl	8006a74 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80069de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80069e2:	f7ff fedd 	bl	80067a0 <FLASH_WaitForLastOperation>
 80069e6:	4603      	mov	r3, r0
 80069e8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	4a11      	ldr	r2, [pc, #68]	; (8006a34 <HAL_FLASHEx_Erase+0x12c>)
 80069f0:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80069f4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	601a      	str	r2, [r3, #0]
          break;
 8006a02:	e00a      	b.n	8006a1a <HAL_FLASHEx_Erase+0x112>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	3301      	adds	r3, #1
 8006a08:	60bb      	str	r3, [r7, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d3db      	bcc.n	80069d2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006a1a:	f000 f84f 	bl	8006abc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <HAL_FLASHEx_Erase+0x128>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	701a      	strb	r2, [r3, #0]

  return status;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	2000000c 	.word	0x2000000c
 8006a34:	40022000 	.word	0x40022000

08006a38 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006a4a:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <FLASH_MassErase+0x38>)
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <FLASH_MassErase+0x38>)
 8006a50:	f043 0304 	orr.w	r3, r3, #4
 8006a54:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006a56:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <FLASH_MassErase+0x38>)
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	4a05      	ldr	r2, [pc, #20]	; (8006a70 <FLASH_MassErase+0x38>)
 8006a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a60:	6153      	str	r3, [r2, #20]
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40022000 	.word	0x40022000

08006a74 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006a7e:	4b0e      	ldr	r3, [pc, #56]	; (8006ab8 <FLASH_PageErase+0x44>)
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006a8e:	490a      	ldr	r1, [pc, #40]	; (8006ab8 <FLASH_PageErase+0x44>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006a94:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <FLASH_PageErase+0x44>)
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	4a07      	ldr	r2, [pc, #28]	; (8006ab8 <FLASH_PageErase+0x44>)
 8006a9a:	f043 0302 	orr.w	r3, r3, #2
 8006a9e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <FLASH_PageErase+0x44>)
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	4a04      	ldr	r2, [pc, #16]	; (8006ab8 <FLASH_PageErase+0x44>)
 8006aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aaa:	6153      	str	r3, [r2, #20]
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40022000 	.word	0x40022000

08006abc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006ac2:	4b21      	ldr	r3, [pc, #132]	; (8006b48 <FLASH_FlushCaches+0x8c>)
 8006ac4:	7f1b      	ldrb	r3, [r3, #28]
 8006ac6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d002      	beq.n	8006ad4 <FLASH_FlushCaches+0x18>
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d117      	bne.n	8006b04 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006ad4:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a1c      	ldr	r2, [pc, #112]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006ada:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ade:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006ae0:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006ae6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	4b17      	ldr	r3, [pc, #92]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a16      	ldr	r2, [pc, #88]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006af6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006af8:	4b14      	ldr	r3, [pc, #80]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b02:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d002      	beq.n	8006b10 <FLASH_FlushCaches+0x54>
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d111      	bne.n	8006b34 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006b10:	4b0e      	ldr	r3, [pc, #56]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a0d      	ldr	r2, [pc, #52]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006b16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b26:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b28:	4b08      	ldr	r3, [pc, #32]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a07      	ldr	r2, [pc, #28]	; (8006b4c <FLASH_FlushCaches+0x90>)
 8006b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b32:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006b34:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <FLASH_FlushCaches+0x8c>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	771a      	strb	r2, [r3, #28]
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	2000000c 	.word	0x2000000c
 8006b4c:	40022000 	.word	0x40022000

08006b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b5e:	e14e      	b.n	8006dfe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	2101      	movs	r1, #1
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8140 	beq.w	8006df8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f003 0303 	and.w	r3, r3, #3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d005      	beq.n	8006b90 <HAL_GPIO_Init+0x40>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d130      	bne.n	8006bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	43db      	mvns	r3, r3
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	091b      	lsrs	r3, r3, #4
 8006bdc:	f003 0201 	and.w	r2, r3, #1
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d017      	beq.n	8006c2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	2203      	movs	r2, #3
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	43db      	mvns	r3, r3
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4013      	ands	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d123      	bne.n	8006c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	08da      	lsrs	r2, r3, #3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3208      	adds	r2, #8
 8006c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	220f      	movs	r2, #15
 8006c52:	fa02 f303 	lsl.w	r3, r2, r3
 8006c56:	43db      	mvns	r3, r3
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	08da      	lsrs	r2, r3, #3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3208      	adds	r2, #8
 8006c7c:	6939      	ldr	r1, [r7, #16]
 8006c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	2203      	movs	r2, #3
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	43db      	mvns	r3, r3
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4013      	ands	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f003 0203 	and.w	r2, r3, #3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 809a 	beq.w	8006df8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cc4:	4b55      	ldr	r3, [pc, #340]	; (8006e1c <HAL_GPIO_Init+0x2cc>)
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc8:	4a54      	ldr	r2, [pc, #336]	; (8006e1c <HAL_GPIO_Init+0x2cc>)
 8006cca:	f043 0301 	orr.w	r3, r3, #1
 8006cce:	6613      	str	r3, [r2, #96]	; 0x60
 8006cd0:	4b52      	ldr	r3, [pc, #328]	; (8006e1c <HAL_GPIO_Init+0x2cc>)
 8006cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	60bb      	str	r3, [r7, #8]
 8006cda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006cdc:	4a50      	ldr	r2, [pc, #320]	; (8006e20 <HAL_GPIO_Init+0x2d0>)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	089b      	lsrs	r3, r3, #2
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f003 0303 	and.w	r3, r3, #3
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	220f      	movs	r2, #15
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006d06:	d013      	beq.n	8006d30 <HAL_GPIO_Init+0x1e0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a46      	ldr	r2, [pc, #280]	; (8006e24 <HAL_GPIO_Init+0x2d4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00d      	beq.n	8006d2c <HAL_GPIO_Init+0x1dc>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a45      	ldr	r2, [pc, #276]	; (8006e28 <HAL_GPIO_Init+0x2d8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d007      	beq.n	8006d28 <HAL_GPIO_Init+0x1d8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a44      	ldr	r2, [pc, #272]	; (8006e2c <HAL_GPIO_Init+0x2dc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d101      	bne.n	8006d24 <HAL_GPIO_Init+0x1d4>
 8006d20:	2303      	movs	r3, #3
 8006d22:	e006      	b.n	8006d32 <HAL_GPIO_Init+0x1e2>
 8006d24:	2307      	movs	r3, #7
 8006d26:	e004      	b.n	8006d32 <HAL_GPIO_Init+0x1e2>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e002      	b.n	8006d32 <HAL_GPIO_Init+0x1e2>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e000      	b.n	8006d32 <HAL_GPIO_Init+0x1e2>
 8006d30:	2300      	movs	r3, #0
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	f002 0203 	and.w	r2, r2, #3
 8006d38:	0092      	lsls	r2, r2, #2
 8006d3a:	4093      	lsls	r3, r2
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d42:	4937      	ldr	r1, [pc, #220]	; (8006e20 <HAL_GPIO_Init+0x2d0>)
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	089b      	lsrs	r3, r3, #2
 8006d48:	3302      	adds	r3, #2
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d50:	4b37      	ldr	r3, [pc, #220]	; (8006e30 <HAL_GPIO_Init+0x2e0>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d74:	4a2e      	ldr	r2, [pc, #184]	; (8006e30 <HAL_GPIO_Init+0x2e0>)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d7a:	4b2d      	ldr	r3, [pc, #180]	; (8006e30 <HAL_GPIO_Init+0x2e0>)
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	43db      	mvns	r3, r3
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4013      	ands	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d9e:	4a24      	ldr	r2, [pc, #144]	; (8006e30 <HAL_GPIO_Init+0x2e0>)
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006da4:	4b22      	ldr	r3, [pc, #136]	; (8006e30 <HAL_GPIO_Init+0x2e0>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	43db      	mvns	r3, r3
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4013      	ands	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006dc8:	4a19      	ldr	r2, [pc, #100]	; (8006e30 <HAL_GPIO_Init+0x2e0>)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006dce:	4b18      	ldr	r3, [pc, #96]	; (8006e30 <HAL_GPIO_Init+0x2e0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	43db      	mvns	r3, r3
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006df2:	4a0f      	ldr	r2, [pc, #60]	; (8006e30 <HAL_GPIO_Init+0x2e0>)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f47f aea9 	bne.w	8006b60 <HAL_GPIO_Init+0x10>
  }
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40021000 	.word	0x40021000
 8006e20:	40010000 	.word	0x40010000
 8006e24:	48000400 	.word	0x48000400
 8006e28:	48000800 	.word	0x48000800
 8006e2c:	48000c00 	.word	0x48000c00
 8006e30:	40010400 	.word	0x40010400

08006e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	887b      	ldrh	r3, [r7, #2]
 8006e46:	4013      	ands	r3, r2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	73fb      	strb	r3, [r7, #15]
 8006e50:	e001      	b.n	8006e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	807b      	strh	r3, [r7, #2]
 8006e70:	4613      	mov	r3, r2
 8006e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e74:	787b      	ldrb	r3, [r7, #1]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e7a:	887a      	ldrh	r2, [r7, #2]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e80:	e002      	b.n	8006e88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e82:	887a      	ldrh	r2, [r7, #2]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e081      	b.n	8006faa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fb fec6 	bl	8002c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2224      	movs	r2, #36	; 0x24
 8006ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0201 	bic.w	r2, r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ee4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ef4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d107      	bne.n	8006f0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f0a:	609a      	str	r2, [r3, #8]
 8006f0c:	e006      	b.n	8006f1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d104      	bne.n	8006f2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	69d9      	ldr	r1, [r3, #28]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1a      	ldr	r2, [r3, #32]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0201 	orr.w	r2, r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af02      	add	r7, sp, #8
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	607a      	str	r2, [r7, #4]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	817b      	strh	r3, [r7, #10]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	f040 80da 	bne.w	800718a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_I2C_Master_Transmit+0x30>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e0d3      	b.n	800718c <HAL_I2C_Master_Transmit+0x1d8>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fec:	f7fd fd8e 	bl	8004b0c <HAL_GetTick>
 8006ff0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	2319      	movs	r3, #25
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 f9e6 	bl	80073d0 <I2C_WaitOnFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e0be      	b.n	800718c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2221      	movs	r2, #33	; 0x21
 8007012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2210      	movs	r2, #16
 800701a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	893a      	ldrh	r2, [r7, #8]
 800702e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703a:	b29b      	uxth	r3, r3
 800703c:	2bff      	cmp	r3, #255	; 0xff
 800703e:	d90e      	bls.n	800705e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	22ff      	movs	r2, #255	; 0xff
 8007044:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800704a:	b2da      	uxtb	r2, r3
 800704c:	8979      	ldrh	r1, [r7, #10]
 800704e:	4b51      	ldr	r3, [pc, #324]	; (8007194 <HAL_I2C_Master_Transmit+0x1e0>)
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 fbdc 	bl	8007814 <I2C_TransferConfig>
 800705c:	e06c      	b.n	8007138 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706c:	b2da      	uxtb	r2, r3
 800706e:	8979      	ldrh	r1, [r7, #10]
 8007070:	4b48      	ldr	r3, [pc, #288]	; (8007194 <HAL_I2C_Master_Transmit+0x1e0>)
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fbcb 	bl	8007814 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800707e:	e05b      	b.n	8007138 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	6a39      	ldr	r1, [r7, #32]
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 f9e3 	bl	8007450 <I2C_WaitOnTXISFlagUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e07b      	b.n	800718c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	781a      	ldrb	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d034      	beq.n	8007138 <HAL_I2C_Master_Transmit+0x184>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d130      	bne.n	8007138 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	2200      	movs	r2, #0
 80070de:	2180      	movs	r1, #128	; 0x80
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f975 	bl	80073d0 <I2C_WaitOnFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e04d      	b.n	800718c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2bff      	cmp	r3, #255	; 0xff
 80070f8:	d90e      	bls.n	8007118 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	22ff      	movs	r2, #255	; 0xff
 80070fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007104:	b2da      	uxtb	r2, r3
 8007106:	8979      	ldrh	r1, [r7, #10]
 8007108:	2300      	movs	r3, #0
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fb7f 	bl	8007814 <I2C_TransferConfig>
 8007116:	e00f      	b.n	8007138 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007126:	b2da      	uxtb	r2, r3
 8007128:	8979      	ldrh	r1, [r7, #10]
 800712a:	2300      	movs	r3, #0
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 fb6e 	bl	8007814 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d19e      	bne.n	8007080 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	6a39      	ldr	r1, [r7, #32]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 f9c2 	bl	80074d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e01a      	b.n	800718c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2220      	movs	r2, #32
 800715c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6859      	ldr	r1, [r3, #4]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_I2C_Master_Transmit+0x1e4>)
 800716a:	400b      	ands	r3, r1
 800716c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2220      	movs	r2, #32
 8007172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	e000      	b.n	800718c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800718a:	2302      	movs	r3, #2
  }
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	80002000 	.word	0x80002000
 8007198:	fe00e800 	.word	0xfe00e800

0800719c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	461a      	mov	r2, r3
 80071a8:	460b      	mov	r3, r1
 80071aa:	817b      	strh	r3, [r7, #10]
 80071ac:	4613      	mov	r3, r2
 80071ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	f040 80db 	bne.w	8007374 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d101      	bne.n	80071cc <HAL_I2C_Master_Receive+0x30>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e0d4      	b.n	8007376 <HAL_I2C_Master_Receive+0x1da>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071d4:	f7fd fc9a 	bl	8004b0c <HAL_GetTick>
 80071d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	2319      	movs	r3, #25
 80071e0:	2201      	movs	r2, #1
 80071e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f8f2 	bl	80073d0 <I2C_WaitOnFlagUntilTimeout>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e0bf      	b.n	8007376 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2222      	movs	r2, #34	; 0x22
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2210      	movs	r2, #16
 8007202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	893a      	ldrh	r2, [r7, #8]
 8007216:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007222:	b29b      	uxth	r3, r3
 8007224:	2bff      	cmp	r3, #255	; 0xff
 8007226:	d90e      	bls.n	8007246 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	22ff      	movs	r2, #255	; 0xff
 800722c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007232:	b2da      	uxtb	r2, r3
 8007234:	8979      	ldrh	r1, [r7, #10]
 8007236:	4b52      	ldr	r3, [pc, #328]	; (8007380 <HAL_I2C_Master_Receive+0x1e4>)
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fae8 	bl	8007814 <I2C_TransferConfig>
 8007244:	e06d      	b.n	8007322 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724a:	b29a      	uxth	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007254:	b2da      	uxtb	r2, r3
 8007256:	8979      	ldrh	r1, [r7, #10]
 8007258:	4b49      	ldr	r3, [pc, #292]	; (8007380 <HAL_I2C_Master_Receive+0x1e4>)
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fad7 	bl	8007814 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007266:	e05c      	b.n	8007322 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	6a39      	ldr	r1, [r7, #32]
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 f96b 	bl	8007548 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e07c      	b.n	8007376 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d034      	beq.n	8007322 <HAL_I2C_Master_Receive+0x186>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d130      	bne.n	8007322 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	2200      	movs	r2, #0
 80072c8:	2180      	movs	r1, #128	; 0x80
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f880 	bl	80073d0 <I2C_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e04d      	b.n	8007376 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2bff      	cmp	r3, #255	; 0xff
 80072e2:	d90e      	bls.n	8007302 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	22ff      	movs	r2, #255	; 0xff
 80072e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	8979      	ldrh	r1, [r7, #10]
 80072f2:	2300      	movs	r3, #0
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 fa8a 	bl	8007814 <I2C_TransferConfig>
 8007300:	e00f      	b.n	8007322 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007310:	b2da      	uxtb	r2, r3
 8007312:	8979      	ldrh	r1, [r7, #10]
 8007314:	2300      	movs	r3, #0
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fa79 	bl	8007814 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d19d      	bne.n	8007268 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	6a39      	ldr	r1, [r7, #32]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 f8cd 	bl	80074d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e01a      	b.n	8007376 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2220      	movs	r2, #32
 8007346:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6859      	ldr	r1, [r3, #4]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <HAL_I2C_Master_Receive+0x1e8>)
 8007354:	400b      	ands	r3, r1
 8007356:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2220      	movs	r2, #32
 800735c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	e000      	b.n	8007376 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007374:	2302      	movs	r3, #2
  }
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	80002400 	.word	0x80002400
 8007384:	fe00e800 	.word	0xfe00e800

08007388 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b02      	cmp	r3, #2
 800739c:	d103      	bne.n	80073a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2200      	movs	r2, #0
 80073a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d007      	beq.n	80073c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	619a      	str	r2, [r3, #24]
  }
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	4613      	mov	r3, r2
 80073de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073e0:	e022      	b.n	8007428 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d01e      	beq.n	8007428 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ea:	f7fd fb8f 	bl	8004b0c <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d302      	bcc.n	8007400 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d113      	bne.n	8007428 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007404:	f043 0220 	orr.w	r2, r3, #32
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e00f      	b.n	8007448 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4013      	ands	r3, r2
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	429a      	cmp	r2, r3
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	461a      	mov	r2, r3
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	429a      	cmp	r2, r3
 8007444:	d0cd      	beq.n	80073e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800745c:	e02c      	b.n	80074b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 f8ea 	bl	800763c <I2C_IsErrorOccurred>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e02a      	b.n	80074c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d01e      	beq.n	80074b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747a:	f7fd fb47 	bl	8004b0c <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	429a      	cmp	r2, r3
 8007488:	d302      	bcc.n	8007490 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d113      	bne.n	80074b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007494:	f043 0220 	orr.w	r2, r3, #32
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e007      	b.n	80074c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d1cb      	bne.n	800745e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074dc:	e028      	b.n	8007530 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	68b9      	ldr	r1, [r7, #8]
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f8aa 	bl	800763c <I2C_IsErrorOccurred>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e026      	b.n	8007540 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f2:	f7fd fb0b 	bl	8004b0c <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d302      	bcc.n	8007508 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d113      	bne.n	8007530 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750c:	f043 0220 	orr.w	r2, r3, #32
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e007      	b.n	8007540 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b20      	cmp	r3, #32
 800753c:	d1cf      	bne.n	80074de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007554:	e064      	b.n	8007620 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 f86e 	bl	800763c <I2C_IsErrorOccurred>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e062      	b.n	8007630 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b20      	cmp	r3, #32
 8007576:	d138      	bne.n	80075ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	f003 0304 	and.w	r3, r3, #4
 8007582:	2b04      	cmp	r3, #4
 8007584:	d105      	bne.n	8007592 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	e04e      	b.n	8007630 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	2b10      	cmp	r3, #16
 800759e:	d107      	bne.n	80075b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2210      	movs	r2, #16
 80075a6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2204      	movs	r2, #4
 80075ac:	645a      	str	r2, [r3, #68]	; 0x44
 80075ae:	e002      	b.n	80075b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2220      	movs	r2, #32
 80075bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6859      	ldr	r1, [r3, #4]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	4b1b      	ldr	r3, [pc, #108]	; (8007638 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80075ca:	400b      	ands	r3, r1
 80075cc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e022      	b.n	8007630 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ea:	f7fd fa8f 	bl	8004b0c <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10f      	bne.n	8007620 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007604:	f043 0220 	orr.w	r2, r3, #32
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2220      	movs	r2, #32
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e007      	b.n	8007630 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	2b04      	cmp	r3, #4
 800762c:	d193      	bne.n	8007556 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	fe00e800 	.word	0xfe00e800

0800763c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08a      	sub	sp, #40	; 0x28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	d075      	beq.n	8007754 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2210      	movs	r2, #16
 800766e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007670:	e056      	b.n	8007720 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007678:	d052      	beq.n	8007720 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800767a:	f7fd fa47 	bl	8004b0c <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	429a      	cmp	r2, r3
 8007688:	d302      	bcc.n	8007690 <I2C_IsErrorOccurred+0x54>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d147      	bne.n	8007720 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800769a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b2:	d12e      	bne.n	8007712 <I2C_IsErrorOccurred+0xd6>
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ba:	d02a      	beq.n	8007712 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80076bc:	7cfb      	ldrb	r3, [r7, #19]
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d027      	beq.n	8007712 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80076d2:	f7fd fa1b 	bl	8004b0c <HAL_GetTick>
 80076d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076d8:	e01b      	b.n	8007712 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80076da:	f7fd fa17 	bl	8004b0c <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b19      	cmp	r3, #25
 80076e6:	d914      	bls.n	8007712 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ec:	f043 0220 	orr.w	r2, r3, #32
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b20      	cmp	r3, #32
 800771e:	d1dc      	bne.n	80076da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b20      	cmp	r3, #32
 800772c:	d003      	beq.n	8007736 <I2C_IsErrorOccurred+0xfa>
 800772e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007732:	2b00      	cmp	r3, #0
 8007734:	d09d      	beq.n	8007672 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800773a:	2b00      	cmp	r3, #0
 800773c:	d103      	bne.n	8007746 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2220      	movs	r2, #32
 8007744:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	f043 0304 	orr.w	r3, r3, #4
 800774c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	f043 0301 	orr.w	r3, r3, #1
 800776c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007776:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00b      	beq.n	80077a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	f043 0308 	orr.w	r3, r3, #8
 800778e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007798:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	f043 0302 	orr.w	r3, r3, #2
 80077b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80077c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d01c      	beq.n	8007804 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff fddc 	bl	8007388 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6859      	ldr	r1, [r3, #4]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <I2C_IsErrorOccurred+0x1d4>)
 80077dc:	400b      	ands	r3, r1
 80077de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	431a      	orrs	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007808:	4618      	mov	r0, r3
 800780a:	3728      	adds	r7, #40	; 0x28
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	fe00e800 	.word	0xfe00e800

08007814 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	607b      	str	r3, [r7, #4]
 800781e:	460b      	mov	r3, r1
 8007820:	817b      	strh	r3, [r7, #10]
 8007822:	4613      	mov	r3, r2
 8007824:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007826:	897b      	ldrh	r3, [r7, #10]
 8007828:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800782c:	7a7b      	ldrb	r3, [r7, #9]
 800782e:	041b      	lsls	r3, r3, #16
 8007830:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007834:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	4313      	orrs	r3, r2
 800783e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007842:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	0d5b      	lsrs	r3, r3, #21
 800784e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007852:	4b08      	ldr	r3, [pc, #32]	; (8007874 <I2C_TransferConfig+0x60>)
 8007854:	430b      	orrs	r3, r1
 8007856:	43db      	mvns	r3, r3
 8007858:	ea02 0103 	and.w	r1, r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	03ff63ff 	.word	0x03ff63ff

08007878 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b20      	cmp	r3, #32
 800788c:	d138      	bne.n	8007900 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007894:	2b01      	cmp	r3, #1
 8007896:	d101      	bne.n	800789c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007898:	2302      	movs	r3, #2
 800789a:	e032      	b.n	8007902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2224      	movs	r2, #36	; 0x24
 80078a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 0201 	bic.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6819      	ldr	r1, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0201 	orr.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	e000      	b.n	8007902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007900:	2302      	movs	r3, #2
  }
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800790e:	b480      	push	{r7}
 8007910:	b085      	sub	sp, #20
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b20      	cmp	r3, #32
 8007922:	d139      	bne.n	8007998 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800792a:	2b01      	cmp	r3, #1
 800792c:	d101      	bne.n	8007932 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800792e:	2302      	movs	r3, #2
 8007930:	e033      	b.n	800799a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2224      	movs	r2, #36	; 0x24
 800793e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0201 	bic.w	r2, r2, #1
 8007950:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007960:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	021b      	lsls	r3, r3, #8
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	e000      	b.n	800799a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007998:	2302      	movs	r3, #2
  }
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
	...

080079a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079ac:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a04      	ldr	r2, [pc, #16]	; (80079c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b6:	6013      	str	r3, [r2, #0]
}
 80079b8:	bf00      	nop
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40007000 	.word	0x40007000

080079c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80079cc:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40007000 	.word	0x40007000

080079e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f2:	d130      	bne.n	8007a56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80079f4:	4b23      	ldr	r3, [pc, #140]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a00:	d038      	beq.n	8007a74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a02:	4b20      	ldr	r3, [pc, #128]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007a0a:	4a1e      	ldr	r2, [pc, #120]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a12:	4b1d      	ldr	r3, [pc, #116]	; (8007a88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2232      	movs	r2, #50	; 0x32
 8007a18:	fb02 f303 	mul.w	r3, r2, r3
 8007a1c:	4a1b      	ldr	r2, [pc, #108]	; (8007a8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	0c9b      	lsrs	r3, r3, #18
 8007a24:	3301      	adds	r3, #1
 8007a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a28:	e002      	b.n	8007a30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a30:	4b14      	ldr	r3, [pc, #80]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a3c:	d102      	bne.n	8007a44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1f2      	bne.n	8007a2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a44:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a50:	d110      	bne.n	8007a74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e00f      	b.n	8007a76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a56:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a62:	d007      	beq.n	8007a74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007a64:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007a6c:	4a05      	ldr	r2, [pc, #20]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	40007000 	.word	0x40007000
 8007a88:	20000000 	.word	0x20000000
 8007a8c:	431bde83 	.word	0x431bde83

08007a90 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8007a94:	4b09      	ldr	r3, [pc, #36]	; (8007abc <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f023 0307 	bic.w	r3, r3, #7
 8007a9c:	4a07      	ldr	r2, [pc, #28]	; (8007abc <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8007a9e:	f043 0304 	orr.w	r3, r3, #4
 8007aa2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007aa4:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	4a05      	ldr	r2, [pc, #20]	; (8007ac0 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8007aaa:	f043 0304 	orr.w	r3, r3, #4
 8007aae:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007ab0:	bf30      	wfi
}
 8007ab2:	bf00      	nop
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	40007000 	.word	0x40007000
 8007ac0:	e000ed00 	.word	0xe000ed00

08007ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08a      	sub	sp, #40	; 0x28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d102      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f000 bc4f 	b.w	8008376 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ad8:	4b97      	ldr	r3, [pc, #604]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 030c 	and.w	r3, r3, #12
 8007ae0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ae2:	4b95      	ldr	r3, [pc, #596]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0310 	and.w	r3, r3, #16
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 80e6 	beq.w	8007cc6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d007      	beq.n	8007b10 <HAL_RCC_OscConfig+0x4c>
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	2b0c      	cmp	r3, #12
 8007b04:	f040 808d 	bne.w	8007c22 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	f040 8089 	bne.w	8007c22 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b10:	4b89      	ldr	r3, [pc, #548]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d006      	beq.n	8007b2a <HAL_RCC_OscConfig+0x66>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	f000 bc26 	b.w	8008376 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b2e:	4b82      	ldr	r3, [pc, #520]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <HAL_RCC_OscConfig+0x80>
 8007b3a:	4b7f      	ldr	r3, [pc, #508]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b42:	e005      	b.n	8007b50 <HAL_RCC_OscConfig+0x8c>
 8007b44:	4b7c      	ldr	r3, [pc, #496]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b4a:	091b      	lsrs	r3, r3, #4
 8007b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d224      	bcs.n	8007b9e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fdd9 	bl	8008710 <RCC_SetFlashLatencyFromMSIRange>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f000 bc06 	b.w	8008376 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b6a:	4b73      	ldr	r3, [pc, #460]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a72      	ldr	r2, [pc, #456]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007b70:	f043 0308 	orr.w	r3, r3, #8
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	4b70      	ldr	r3, [pc, #448]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	496d      	ldr	r1, [pc, #436]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b88:	4b6b      	ldr	r3, [pc, #428]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	4968      	ldr	r1, [pc, #416]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	604b      	str	r3, [r1, #4]
 8007b9c:	e025      	b.n	8007bea <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b9e:	4b66      	ldr	r3, [pc, #408]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a65      	ldr	r2, [pc, #404]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007ba4:	f043 0308 	orr.w	r3, r3, #8
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	4b63      	ldr	r3, [pc, #396]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	4960      	ldr	r1, [pc, #384]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bbc:	4b5e      	ldr	r3, [pc, #376]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	495b      	ldr	r1, [pc, #364]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d109      	bne.n	8007bea <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fd98 	bl	8008710 <RCC_SetFlashLatencyFromMSIRange>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e3c5      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bea:	f000 fccd 	bl	8008588 <HAL_RCC_GetSysClockFreq>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	4b51      	ldr	r3, [pc, #324]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	091b      	lsrs	r3, r3, #4
 8007bf6:	f003 030f 	and.w	r3, r3, #15
 8007bfa:	4950      	ldr	r1, [pc, #320]	; (8007d3c <HAL_RCC_OscConfig+0x278>)
 8007bfc:	5ccb      	ldrb	r3, [r1, r3]
 8007bfe:	f003 031f 	and.w	r3, r3, #31
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	4a4e      	ldr	r2, [pc, #312]	; (8007d40 <HAL_RCC_OscConfig+0x27c>)
 8007c08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007c0a:	4b4e      	ldr	r3, [pc, #312]	; (8007d44 <HAL_RCC_OscConfig+0x280>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fc ff2c 	bl	8004a6c <HAL_InitTick>
 8007c14:	4603      	mov	r3, r0
 8007c16:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d052      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	e3a9      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d032      	beq.n	8007c90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007c2a:	4b43      	ldr	r3, [pc, #268]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a42      	ldr	r2, [pc, #264]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c30:	f043 0301 	orr.w	r3, r3, #1
 8007c34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c36:	f7fc ff69 	bl	8004b0c <HAL_GetTick>
 8007c3a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c3c:	e008      	b.n	8007c50 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c3e:	f7fc ff65 	bl	8004b0c <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d901      	bls.n	8007c50 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e392      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c50:	4b39      	ldr	r3, [pc, #228]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0f0      	beq.n	8007c3e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c5c:	4b36      	ldr	r3, [pc, #216]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a35      	ldr	r2, [pc, #212]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c62:	f043 0308 	orr.w	r3, r3, #8
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	4b33      	ldr	r3, [pc, #204]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	4930      	ldr	r1, [pc, #192]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c7a:	4b2f      	ldr	r3, [pc, #188]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	492b      	ldr	r1, [pc, #172]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	604b      	str	r3, [r1, #4]
 8007c8e:	e01a      	b.n	8007cc6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007c90:	4b29      	ldr	r3, [pc, #164]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a28      	ldr	r2, [pc, #160]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007c96:	f023 0301 	bic.w	r3, r3, #1
 8007c9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c9c:	f7fc ff36 	bl	8004b0c <HAL_GetTick>
 8007ca0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007ca2:	e008      	b.n	8007cb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ca4:	f7fc ff32 	bl	8004b0c <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e35f      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007cb6:	4b20      	ldr	r3, [pc, #128]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1f0      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x1e0>
 8007cc2:	e000      	b.n	8007cc6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007cc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d073      	beq.n	8007dba <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d005      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x220>
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	2b0c      	cmp	r3, #12
 8007cdc:	d10e      	bne.n	8007cfc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d10b      	bne.n	8007cfc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce4:	4b14      	ldr	r3, [pc, #80]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d063      	beq.n	8007db8 <HAL_RCC_OscConfig+0x2f4>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d15f      	bne.n	8007db8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e33c      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d04:	d106      	bne.n	8007d14 <HAL_RCC_OscConfig+0x250>
 8007d06:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a0b      	ldr	r2, [pc, #44]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	e025      	b.n	8007d60 <HAL_RCC_OscConfig+0x29c>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d1c:	d114      	bne.n	8007d48 <HAL_RCC_OscConfig+0x284>
 8007d1e:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a05      	ldr	r2, [pc, #20]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	4b03      	ldr	r3, [pc, #12]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a02      	ldr	r2, [pc, #8]	; (8007d38 <HAL_RCC_OscConfig+0x274>)
 8007d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	e013      	b.n	8007d60 <HAL_RCC_OscConfig+0x29c>
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	08011bec 	.word	0x08011bec
 8007d40:	20000000 	.word	0x20000000
 8007d44:	20000004 	.word	0x20000004
 8007d48:	4b8f      	ldr	r3, [pc, #572]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a8e      	ldr	r2, [pc, #568]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	4b8c      	ldr	r3, [pc, #560]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a8b      	ldr	r2, [pc, #556]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d013      	beq.n	8007d90 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d68:	f7fc fed0 	bl	8004b0c <HAL_GetTick>
 8007d6c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d6e:	e008      	b.n	8007d82 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d70:	f7fc fecc 	bl	8004b0c <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b64      	cmp	r3, #100	; 0x64
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e2f9      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d82:	4b81      	ldr	r3, [pc, #516]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0f0      	beq.n	8007d70 <HAL_RCC_OscConfig+0x2ac>
 8007d8e:	e014      	b.n	8007dba <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d90:	f7fc febc 	bl	8004b0c <HAL_GetTick>
 8007d94:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d96:	e008      	b.n	8007daa <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d98:	f7fc feb8 	bl	8004b0c <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b64      	cmp	r3, #100	; 0x64
 8007da4:	d901      	bls.n	8007daa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e2e5      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007daa:	4b77      	ldr	r3, [pc, #476]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f0      	bne.n	8007d98 <HAL_RCC_OscConfig+0x2d4>
 8007db6:	e000      	b.n	8007dba <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d060      	beq.n	8007e88 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	d005      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x314>
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	2b0c      	cmp	r3, #12
 8007dd0:	d119      	bne.n	8007e06 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d116      	bne.n	8007e06 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dd8:	4b6b      	ldr	r3, [pc, #428]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <HAL_RCC_OscConfig+0x32c>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e2c2      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df0:	4b65      	ldr	r3, [pc, #404]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	061b      	lsls	r3, r3, #24
 8007dfe:	4962      	ldr	r1, [pc, #392]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e04:	e040      	b.n	8007e88 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d023      	beq.n	8007e56 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e0e:	4b5e      	ldr	r3, [pc, #376]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a5d      	ldr	r2, [pc, #372]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1a:	f7fc fe77 	bl	8004b0c <HAL_GetTick>
 8007e1e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e20:	e008      	b.n	8007e34 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e22:	f7fc fe73 	bl	8004b0c <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d901      	bls.n	8007e34 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e2a0      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e34:	4b54      	ldr	r3, [pc, #336]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0f0      	beq.n	8007e22 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e40:	4b51      	ldr	r3, [pc, #324]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	061b      	lsls	r3, r3, #24
 8007e4e:	494e      	ldr	r1, [pc, #312]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	604b      	str	r3, [r1, #4]
 8007e54:	e018      	b.n	8007e88 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e56:	4b4c      	ldr	r3, [pc, #304]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a4b      	ldr	r2, [pc, #300]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e62:	f7fc fe53 	bl	8004b0c <HAL_GetTick>
 8007e66:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e68:	e008      	b.n	8007e7c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e6a:	f7fc fe4f 	bl	8004b0c <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d901      	bls.n	8007e7c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e27c      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e7c:	4b42      	ldr	r3, [pc, #264]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f0      	bne.n	8007e6a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0308 	and.w	r3, r3, #8
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 8082 	beq.w	8007f9a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d05f      	beq.n	8007f5e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8007e9e:	4b3a      	ldr	r3, [pc, #232]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ea4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699a      	ldr	r2, [r3, #24]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d037      	beq.n	8007f24 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d006      	beq.n	8007ecc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e254      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d01b      	beq.n	8007f0e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8007ed6:	4b2c      	ldr	r3, [pc, #176]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007edc:	4a2a      	ldr	r2, [pc, #168]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007ede:	f023 0301 	bic.w	r3, r3, #1
 8007ee2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ee6:	f7fc fe11 	bl	8004b0c <HAL_GetTick>
 8007eea:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007eec:	e008      	b.n	8007f00 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eee:	f7fc fe0d 	bl	8004b0c <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	2b11      	cmp	r3, #17
 8007efa:	d901      	bls.n	8007f00 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e23a      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f00:	4b21      	ldr	r3, [pc, #132]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1ef      	bne.n	8007eee <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8007f0e:	4b1e      	ldr	r3, [pc, #120]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f14:	f023 0210 	bic.w	r2, r3, #16
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	491a      	ldr	r1, [pc, #104]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f24:	4b18      	ldr	r3, [pc, #96]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f2a:	4a17      	ldr	r2, [pc, #92]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007f2c:	f043 0301 	orr.w	r3, r3, #1
 8007f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f34:	f7fc fdea 	bl	8004b0c <HAL_GetTick>
 8007f38:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f3a:	e008      	b.n	8007f4e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f3c:	f7fc fde6 	bl	8004b0c <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b11      	cmp	r3, #17
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e213      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f4e:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0ef      	beq.n	8007f3c <HAL_RCC_OscConfig+0x478>
 8007f5c:	e01d      	b.n	8007f9a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f5e:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f64:	4a08      	ldr	r2, [pc, #32]	; (8007f88 <HAL_RCC_OscConfig+0x4c4>)
 8007f66:	f023 0301 	bic.w	r3, r3, #1
 8007f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f6e:	f7fc fdcd 	bl	8004b0c <HAL_GetTick>
 8007f72:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f74:	e00a      	b.n	8007f8c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f76:	f7fc fdc9 	bl	8004b0c <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b11      	cmp	r3, #17
 8007f82:	d903      	bls.n	8007f8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e1f6      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
 8007f88:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f8c:	4ba9      	ldr	r3, [pc, #676]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8007f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1ed      	bne.n	8007f76 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 80bd 	beq.w	8008122 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007fae:	4ba1      	ldr	r3, [pc, #644]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8007fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10e      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fba:	4b9e      	ldr	r3, [pc, #632]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8007fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fbe:	4a9d      	ldr	r2, [pc, #628]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8007fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8007fc6:	4b9b      	ldr	r3, [pc, #620]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8007fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fd8:	4b97      	ldr	r3, [pc, #604]	; (8008238 <HAL_RCC_OscConfig+0x774>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d118      	bne.n	8008016 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fe4:	4b94      	ldr	r3, [pc, #592]	; (8008238 <HAL_RCC_OscConfig+0x774>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a93      	ldr	r2, [pc, #588]	; (8008238 <HAL_RCC_OscConfig+0x774>)
 8007fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ff0:	f7fc fd8c 	bl	8004b0c <HAL_GetTick>
 8007ff4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ff6:	e008      	b.n	800800a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ff8:	f7fc fd88 	bl	8004b0c <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b02      	cmp	r3, #2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e1b5      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800800a:	4b8b      	ldr	r3, [pc, #556]	; (8008238 <HAL_RCC_OscConfig+0x774>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0f0      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d02c      	beq.n	800807c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8008022:	4b84      	ldr	r3, [pc, #528]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008028:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008034:	497f      	ldr	r1, [pc, #508]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008036:	4313      	orrs	r3, r2
 8008038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d010      	beq.n	800806a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008048:	4b7a      	ldr	r3, [pc, #488]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 800804a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804e:	4a79      	ldr	r2, [pc, #484]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008050:	f043 0304 	orr.w	r3, r3, #4
 8008054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008058:	4b76      	ldr	r3, [pc, #472]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 800805a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800805e:	4a75      	ldr	r2, [pc, #468]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008060:	f043 0301 	orr.w	r3, r3, #1
 8008064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008068:	e018      	b.n	800809c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800806a:	4b72      	ldr	r3, [pc, #456]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 800806c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008070:	4a70      	ldr	r2, [pc, #448]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008072:	f043 0301 	orr.w	r3, r3, #1
 8008076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800807a:	e00f      	b.n	800809c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800807c:	4b6d      	ldr	r3, [pc, #436]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 800807e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008082:	4a6c      	ldr	r2, [pc, #432]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800808c:	4b69      	ldr	r3, [pc, #420]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 800808e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008092:	4a68      	ldr	r2, [pc, #416]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008094:	f023 0304 	bic.w	r3, r3, #4
 8008098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d016      	beq.n	80080d2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a4:	f7fc fd32 	bl	8004b0c <HAL_GetTick>
 80080a8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080aa:	e00a      	b.n	80080c2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ac:	f7fc fd2e 	bl	8004b0c <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e159      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080c2:	4b5c      	ldr	r3, [pc, #368]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 80080c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0ed      	beq.n	80080ac <HAL_RCC_OscConfig+0x5e8>
 80080d0:	e01d      	b.n	800810e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d2:	f7fc fd1b 	bl	8004b0c <HAL_GetTick>
 80080d6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080d8:	e00a      	b.n	80080f0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080da:	f7fc fd17 	bl	8004b0c <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d901      	bls.n	80080f0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e142      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080f0:	4b50      	ldr	r3, [pc, #320]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1ed      	bne.n	80080da <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80080fe:	4b4d      	ldr	r3, [pc, #308]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008104:	4a4b      	ldr	r2, [pc, #300]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800810a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800810e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008112:	2b01      	cmp	r3, #1
 8008114:	d105      	bne.n	8008122 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008116:	4b47      	ldr	r3, [pc, #284]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811a:	4a46      	ldr	r2, [pc, #280]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 800811c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008120:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d03c      	beq.n	80081a8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	2b00      	cmp	r3, #0
 8008134:	d01c      	beq.n	8008170 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008136:	4b3f      	ldr	r3, [pc, #252]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800813c:	4a3d      	ldr	r2, [pc, #244]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 800813e:	f043 0301 	orr.w	r3, r3, #1
 8008142:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008146:	f7fc fce1 	bl	8004b0c <HAL_GetTick>
 800814a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800814c:	e008      	b.n	8008160 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800814e:	f7fc fcdd 	bl	8004b0c <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	2b02      	cmp	r3, #2
 800815a:	d901      	bls.n	8008160 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e10a      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008160:	4b34      	ldr	r3, [pc, #208]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0ef      	beq.n	800814e <HAL_RCC_OscConfig+0x68a>
 800816e:	e01b      	b.n	80081a8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008170:	4b30      	ldr	r3, [pc, #192]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008176:	4a2f      	ldr	r2, [pc, #188]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008178:	f023 0301 	bic.w	r3, r3, #1
 800817c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008180:	f7fc fcc4 	bl	8004b0c <HAL_GetTick>
 8008184:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008188:	f7fc fcc0 	bl	8004b0c <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e0ed      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800819a:	4b26      	ldr	r3, [pc, #152]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 800819c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1ef      	bne.n	8008188 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 80e1 	beq.w	8008374 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	f040 80b5 	bne.w	8008326 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80081bc:	4b1d      	ldr	r3, [pc, #116]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	f003 0203 	and.w	r2, r3, #3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d124      	bne.n	800821a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	3b01      	subs	r3, #1
 80081dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80081de:	429a      	cmp	r2, r3
 80081e0:	d11b      	bne.n	800821a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d113      	bne.n	800821a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fc:	085b      	lsrs	r3, r3, #1
 80081fe:	3b01      	subs	r3, #1
 8008200:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008202:	429a      	cmp	r2, r3
 8008204:	d109      	bne.n	800821a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008210:	085b      	lsrs	r3, r3, #1
 8008212:	3b01      	subs	r3, #1
 8008214:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008216:	429a      	cmp	r2, r3
 8008218:	d05f      	beq.n	80082da <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	2b0c      	cmp	r3, #12
 800821e:	d05a      	beq.n	80082d6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008220:	4b04      	ldr	r3, [pc, #16]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a03      	ldr	r2, [pc, #12]	; (8008234 <HAL_RCC_OscConfig+0x770>)
 8008226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800822a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800822c:	f7fc fc6e 	bl	8004b0c <HAL_GetTick>
 8008230:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008232:	e00c      	b.n	800824e <HAL_RCC_OscConfig+0x78a>
 8008234:	40021000 	.word	0x40021000
 8008238:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800823c:	f7fc fc66 	bl	8004b0c <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e093      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800824e:	4b4c      	ldr	r3, [pc, #304]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1f0      	bne.n	800823c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800825a:	4b49      	ldr	r3, [pc, #292]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	4b49      	ldr	r3, [pc, #292]	; (8008384 <HAL_RCC_OscConfig+0x8c0>)
 8008260:	4013      	ands	r3, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800826a:	3a01      	subs	r2, #1
 800826c:	0112      	lsls	r2, r2, #4
 800826e:	4311      	orrs	r1, r2
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008274:	0212      	lsls	r2, r2, #8
 8008276:	4311      	orrs	r1, r2
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800827c:	0852      	lsrs	r2, r2, #1
 800827e:	3a01      	subs	r2, #1
 8008280:	0552      	lsls	r2, r2, #21
 8008282:	4311      	orrs	r1, r2
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008288:	0852      	lsrs	r2, r2, #1
 800828a:	3a01      	subs	r2, #1
 800828c:	0652      	lsls	r2, r2, #25
 800828e:	430a      	orrs	r2, r1
 8008290:	493b      	ldr	r1, [pc, #236]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 8008292:	4313      	orrs	r3, r2
 8008294:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008296:	4b3a      	ldr	r3, [pc, #232]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a39      	ldr	r2, [pc, #228]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 800829c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082a0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80082a2:	4b37      	ldr	r3, [pc, #220]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	4a36      	ldr	r2, [pc, #216]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 80082a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082ac:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80082ae:	f7fc fc2d 	bl	8004b0c <HAL_GetTick>
 80082b2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082b4:	e008      	b.n	80082c8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082b6:	f7fc fc29 	bl	8004b0c <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d901      	bls.n	80082c8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e056      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082c8:	4b2d      	ldr	r3, [pc, #180]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0f0      	beq.n	80082b6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80082d4:	e04e      	b.n	8008374 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e04d      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082da:	4b29      	ldr	r3, [pc, #164]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d146      	bne.n	8008374 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80082e6:	4b26      	ldr	r3, [pc, #152]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a25      	ldr	r2, [pc, #148]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 80082ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082f0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80082f2:	4b23      	ldr	r3, [pc, #140]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	4a22      	ldr	r2, [pc, #136]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 80082f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082fc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80082fe:	f7fc fc05 	bl	8004b0c <HAL_GetTick>
 8008302:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008304:	e008      	b.n	8008318 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008306:	f7fc fc01 	bl	8004b0c <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e02e      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008318:	4b19      	ldr	r3, [pc, #100]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0f0      	beq.n	8008306 <HAL_RCC_OscConfig+0x842>
 8008324:	e026      	b.n	8008374 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	2b0c      	cmp	r3, #12
 800832a:	d021      	beq.n	8008370 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800832c:	4b14      	ldr	r3, [pc, #80]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a13      	ldr	r2, [pc, #76]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 8008332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008338:	f7fc fbe8 	bl	8004b0c <HAL_GetTick>
 800833c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800833e:	e008      	b.n	8008352 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008340:	f7fc fbe4 	bl	8004b0c <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e011      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1f0      	bne.n	8008340 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800835e:	4b08      	ldr	r3, [pc, #32]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	4a07      	ldr	r2, [pc, #28]	; (8008380 <HAL_RCC_OscConfig+0x8bc>)
 8008364:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008368:	f023 0303 	bic.w	r3, r3, #3
 800836c:	60d3      	str	r3, [r2, #12]
 800836e:	e001      	b.n	8008374 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e000      	b.n	8008376 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3728      	adds	r7, #40	; 0x28
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	40021000 	.word	0x40021000
 8008384:	f99f808c 	.word	0xf99f808c

08008388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e0e7      	b.n	800856c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800839c:	4b75      	ldr	r3, [pc, #468]	; (8008574 <HAL_RCC_ClockConfig+0x1ec>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0307 	and.w	r3, r3, #7
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d910      	bls.n	80083cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083aa:	4b72      	ldr	r3, [pc, #456]	; (8008574 <HAL_RCC_ClockConfig+0x1ec>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f023 0207 	bic.w	r2, r3, #7
 80083b2:	4970      	ldr	r1, [pc, #448]	; (8008574 <HAL_RCC_ClockConfig+0x1ec>)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ba:	4b6e      	ldr	r3, [pc, #440]	; (8008574 <HAL_RCC_ClockConfig+0x1ec>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d001      	beq.n	80083cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e0cf      	b.n	800856c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d010      	beq.n	80083fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	4b66      	ldr	r3, [pc, #408]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d908      	bls.n	80083fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083e8:	4b63      	ldr	r3, [pc, #396]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	4960      	ldr	r1, [pc, #384]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d04c      	beq.n	80084a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2b03      	cmp	r3, #3
 800840c:	d107      	bne.n	800841e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800840e:	4b5a      	ldr	r3, [pc, #360]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d121      	bne.n	800845e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e0a6      	b.n	800856c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d107      	bne.n	8008436 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008426:	4b54      	ldr	r3, [pc, #336]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d115      	bne.n	800845e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e09a      	b.n	800856c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d107      	bne.n	800844e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800843e:	4b4e      	ldr	r3, [pc, #312]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d109      	bne.n	800845e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e08e      	b.n	800856c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800844e:	4b4a      	ldr	r3, [pc, #296]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e086      	b.n	800856c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800845e:	4b46      	ldr	r3, [pc, #280]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f023 0203 	bic.w	r2, r3, #3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	4943      	ldr	r1, [pc, #268]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 800846c:	4313      	orrs	r3, r2
 800846e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008470:	f7fc fb4c 	bl	8004b0c <HAL_GetTick>
 8008474:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008476:	e00a      	b.n	800848e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008478:	f7fc fb48 	bl	8004b0c <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	f241 3288 	movw	r2, #5000	; 0x1388
 8008486:	4293      	cmp	r3, r2
 8008488:	d901      	bls.n	800848e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e06e      	b.n	800856c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800848e:	4b3a      	ldr	r3, [pc, #232]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 020c 	and.w	r2, r3, #12
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	429a      	cmp	r2, r3
 800849e:	d1eb      	bne.n	8008478 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d010      	beq.n	80084ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	4b31      	ldr	r3, [pc, #196]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d208      	bcs.n	80084ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084bc:	4b2e      	ldr	r3, [pc, #184]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	492b      	ldr	r1, [pc, #172]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084ce:	4b29      	ldr	r3, [pc, #164]	; (8008574 <HAL_RCC_ClockConfig+0x1ec>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d210      	bcs.n	80084fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084dc:	4b25      	ldr	r3, [pc, #148]	; (8008574 <HAL_RCC_ClockConfig+0x1ec>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f023 0207 	bic.w	r2, r3, #7
 80084e4:	4923      	ldr	r1, [pc, #140]	; (8008574 <HAL_RCC_ClockConfig+0x1ec>)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ec:	4b21      	ldr	r3, [pc, #132]	; (8008574 <HAL_RCC_ClockConfig+0x1ec>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0307 	and.w	r3, r3, #7
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d001      	beq.n	80084fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e036      	b.n	800856c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	d008      	beq.n	800851c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800850a:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	4918      	ldr	r1, [pc, #96]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 8008518:	4313      	orrs	r3, r2
 800851a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0308 	and.w	r3, r3, #8
 8008524:	2b00      	cmp	r3, #0
 8008526:	d009      	beq.n	800853c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008528:	4b13      	ldr	r3, [pc, #76]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	4910      	ldr	r1, [pc, #64]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 8008538:	4313      	orrs	r3, r2
 800853a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800853c:	f000 f824 	bl	8008588 <HAL_RCC_GetSysClockFreq>
 8008540:	4602      	mov	r2, r0
 8008542:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <HAL_RCC_ClockConfig+0x1f0>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	091b      	lsrs	r3, r3, #4
 8008548:	f003 030f 	and.w	r3, r3, #15
 800854c:	490b      	ldr	r1, [pc, #44]	; (800857c <HAL_RCC_ClockConfig+0x1f4>)
 800854e:	5ccb      	ldrb	r3, [r1, r3]
 8008550:	f003 031f 	and.w	r3, r3, #31
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
 8008558:	4a09      	ldr	r2, [pc, #36]	; (8008580 <HAL_RCC_ClockConfig+0x1f8>)
 800855a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <HAL_RCC_ClockConfig+0x1fc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4618      	mov	r0, r3
 8008562:	f7fc fa83 	bl	8004a6c <HAL_InitTick>
 8008566:	4603      	mov	r3, r0
 8008568:	72fb      	strb	r3, [r7, #11]

  return status;
 800856a:	7afb      	ldrb	r3, [r7, #11]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40022000 	.word	0x40022000
 8008578:	40021000 	.word	0x40021000
 800857c:	08011bec 	.word	0x08011bec
 8008580:	20000000 	.word	0x20000000
 8008584:	20000004 	.word	0x20000004

08008588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008588:	b480      	push	{r7}
 800858a:	b089      	sub	sp, #36	; 0x24
 800858c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	2300      	movs	r3, #0
 8008594:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008596:	4b3e      	ldr	r3, [pc, #248]	; (8008690 <HAL_RCC_GetSysClockFreq+0x108>)
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f003 030c 	and.w	r3, r3, #12
 800859e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085a0:	4b3b      	ldr	r3, [pc, #236]	; (8008690 <HAL_RCC_GetSysClockFreq+0x108>)
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0303 	and.w	r3, r3, #3
 80085a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d005      	beq.n	80085bc <HAL_RCC_GetSysClockFreq+0x34>
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	2b0c      	cmp	r3, #12
 80085b4:	d121      	bne.n	80085fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d11e      	bne.n	80085fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80085bc:	4b34      	ldr	r3, [pc, #208]	; (8008690 <HAL_RCC_GetSysClockFreq+0x108>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d107      	bne.n	80085d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80085c8:	4b31      	ldr	r3, [pc, #196]	; (8008690 <HAL_RCC_GetSysClockFreq+0x108>)
 80085ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085ce:	0a1b      	lsrs	r3, r3, #8
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	e005      	b.n	80085e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80085d8:	4b2d      	ldr	r3, [pc, #180]	; (8008690 <HAL_RCC_GetSysClockFreq+0x108>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	091b      	lsrs	r3, r3, #4
 80085de:	f003 030f 	and.w	r3, r3, #15
 80085e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80085e4:	4a2b      	ldr	r2, [pc, #172]	; (8008694 <HAL_RCC_GetSysClockFreq+0x10c>)
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10d      	bne.n	8008610 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80085f8:	e00a      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d102      	bne.n	8008606 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008600:	4b25      	ldr	r3, [pc, #148]	; (8008698 <HAL_RCC_GetSysClockFreq+0x110>)
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	e004      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	2b08      	cmp	r3, #8
 800860a:	d101      	bne.n	8008610 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800860c:	4b23      	ldr	r3, [pc, #140]	; (800869c <HAL_RCC_GetSysClockFreq+0x114>)
 800860e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	2b0c      	cmp	r3, #12
 8008614:	d134      	bne.n	8008680 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008616:	4b1e      	ldr	r3, [pc, #120]	; (8008690 <HAL_RCC_GetSysClockFreq+0x108>)
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d003      	beq.n	800862e <HAL_RCC_GetSysClockFreq+0xa6>
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b03      	cmp	r3, #3
 800862a:	d003      	beq.n	8008634 <HAL_RCC_GetSysClockFreq+0xac>
 800862c:	e005      	b.n	800863a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800862e:	4b1a      	ldr	r3, [pc, #104]	; (8008698 <HAL_RCC_GetSysClockFreq+0x110>)
 8008630:	617b      	str	r3, [r7, #20]
      break;
 8008632:	e005      	b.n	8008640 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008634:	4b19      	ldr	r3, [pc, #100]	; (800869c <HAL_RCC_GetSysClockFreq+0x114>)
 8008636:	617b      	str	r3, [r7, #20]
      break;
 8008638:	e002      	b.n	8008640 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	617b      	str	r3, [r7, #20]
      break;
 800863e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008640:	4b13      	ldr	r3, [pc, #76]	; (8008690 <HAL_RCC_GetSysClockFreq+0x108>)
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	091b      	lsrs	r3, r3, #4
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	3301      	adds	r3, #1
 800864c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800864e:	4b10      	ldr	r3, [pc, #64]	; (8008690 <HAL_RCC_GetSysClockFreq+0x108>)
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	0a1b      	lsrs	r3, r3, #8
 8008654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	fb03 f202 	mul.w	r2, r3, r2
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	fbb2 f3f3 	udiv	r3, r2, r3
 8008664:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008666:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <HAL_RCC_GetSysClockFreq+0x108>)
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	0e5b      	lsrs	r3, r3, #25
 800866c:	f003 0303 	and.w	r3, r3, #3
 8008670:	3301      	adds	r3, #1
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	fbb2 f3f3 	udiv	r3, r2, r3
 800867e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008680:	69bb      	ldr	r3, [r7, #24]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3724      	adds	r7, #36	; 0x24
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40021000 	.word	0x40021000
 8008694:	08011c04 	.word	0x08011c04
 8008698:	00f42400 	.word	0x00f42400
 800869c:	007a1200 	.word	0x007a1200

080086a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086a0:	b480      	push	{r7}
 80086a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086a4:	4b03      	ldr	r3, [pc, #12]	; (80086b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80086a6:	681b      	ldr	r3, [r3, #0]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	20000000 	.word	0x20000000

080086b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80086bc:	f7ff fff0 	bl	80086a0 <HAL_RCC_GetHCLKFreq>
 80086c0:	4602      	mov	r2, r0
 80086c2:	4b06      	ldr	r3, [pc, #24]	; (80086dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	0a1b      	lsrs	r3, r3, #8
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	4904      	ldr	r1, [pc, #16]	; (80086e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80086ce:	5ccb      	ldrb	r3, [r1, r3]
 80086d0:	f003 031f 	and.w	r3, r3, #31
 80086d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086d8:	4618      	mov	r0, r3
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	40021000 	.word	0x40021000
 80086e0:	08011bfc 	.word	0x08011bfc

080086e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80086e8:	f7ff ffda 	bl	80086a0 <HAL_RCC_GetHCLKFreq>
 80086ec:	4602      	mov	r2, r0
 80086ee:	4b06      	ldr	r3, [pc, #24]	; (8008708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	0adb      	lsrs	r3, r3, #11
 80086f4:	f003 0307 	and.w	r3, r3, #7
 80086f8:	4904      	ldr	r1, [pc, #16]	; (800870c <HAL_RCC_GetPCLK2Freq+0x28>)
 80086fa:	5ccb      	ldrb	r3, [r1, r3]
 80086fc:	f003 031f 	and.w	r3, r3, #31
 8008700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008704:	4618      	mov	r0, r3
 8008706:	bd80      	pop	{r7, pc}
 8008708:	40021000 	.word	0x40021000
 800870c:	08011bfc 	.word	0x08011bfc

08008710 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008718:	2300      	movs	r3, #0
 800871a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800871c:	4b2a      	ldr	r3, [pc, #168]	; (80087c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800871e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008728:	f7ff f94e 	bl	80079c8 <HAL_PWREx_GetVoltageRange>
 800872c:	6178      	str	r0, [r7, #20]
 800872e:	e014      	b.n	800875a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008730:	4b25      	ldr	r3, [pc, #148]	; (80087c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008734:	4a24      	ldr	r2, [pc, #144]	; (80087c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800873a:	6593      	str	r3, [r2, #88]	; 0x58
 800873c:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800873e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008748:	f7ff f93e 	bl	80079c8 <HAL_PWREx_GetVoltageRange>
 800874c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800874e:	4b1e      	ldr	r3, [pc, #120]	; (80087c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008752:	4a1d      	ldr	r2, [pc, #116]	; (80087c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008758:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008760:	d10b      	bne.n	800877a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b80      	cmp	r3, #128	; 0x80
 8008766:	d919      	bls.n	800879c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2ba0      	cmp	r3, #160	; 0xa0
 800876c:	d902      	bls.n	8008774 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800876e:	2302      	movs	r3, #2
 8008770:	613b      	str	r3, [r7, #16]
 8008772:	e013      	b.n	800879c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008774:	2301      	movs	r3, #1
 8008776:	613b      	str	r3, [r7, #16]
 8008778:	e010      	b.n	800879c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b80      	cmp	r3, #128	; 0x80
 800877e:	d902      	bls.n	8008786 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008780:	2303      	movs	r3, #3
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	e00a      	b.n	800879c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b80      	cmp	r3, #128	; 0x80
 800878a:	d102      	bne.n	8008792 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800878c:	2302      	movs	r3, #2
 800878e:	613b      	str	r3, [r7, #16]
 8008790:	e004      	b.n	800879c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b70      	cmp	r3, #112	; 0x70
 8008796:	d101      	bne.n	800879c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008798:	2301      	movs	r3, #1
 800879a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800879c:	4b0b      	ldr	r3, [pc, #44]	; (80087cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f023 0207 	bic.w	r2, r3, #7
 80087a4:	4909      	ldr	r1, [pc, #36]	; (80087cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80087ac:	4b07      	ldr	r3, [pc, #28]	; (80087cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d001      	beq.n	80087be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40021000 	.word	0x40021000
 80087cc:	40022000 	.word	0x40022000

080087d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80087d8:	2300      	movs	r3, #0
 80087da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80087dc:	2300      	movs	r3, #0
 80087de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 809e 	beq.w	800892a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087ee:	2300      	movs	r3, #0
 80087f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80087f2:	4b46      	ldr	r3, [pc, #280]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80087f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80087fe:	2301      	movs	r3, #1
 8008800:	e000      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008802:	2300      	movs	r3, #0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00d      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008808:	4b40      	ldr	r3, [pc, #256]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800880a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800880c:	4a3f      	ldr	r2, [pc, #252]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800880e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008812:	6593      	str	r3, [r2, #88]	; 0x58
 8008814:	4b3d      	ldr	r3, [pc, #244]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800881c:	60bb      	str	r3, [r7, #8]
 800881e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008820:	2301      	movs	r3, #1
 8008822:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008824:	4b3a      	ldr	r3, [pc, #232]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a39      	ldr	r2, [pc, #228]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800882a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800882e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008830:	f7fc f96c 	bl	8004b0c <HAL_GetTick>
 8008834:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008836:	e009      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008838:	f7fc f968 	bl	8004b0c <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b02      	cmp	r3, #2
 8008844:	d902      	bls.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	74fb      	strb	r3, [r7, #19]
        break;
 800884a:	e005      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800884c:	4b30      	ldr	r3, [pc, #192]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0ef      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8008858:	7cfb      	ldrb	r3, [r7, #19]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d15a      	bne.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800885e:	4b2b      	ldr	r3, [pc, #172]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008868:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01e      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	429a      	cmp	r2, r3
 8008878:	d019      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800887a:	4b24      	ldr	r3, [pc, #144]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800887c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008884:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008886:	4b21      	ldr	r3, [pc, #132]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800888c:	4a1f      	ldr	r2, [pc, #124]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800888e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008896:	4b1d      	ldr	r3, [pc, #116]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800889c:	4a1b      	ldr	r2, [pc, #108]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800889e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088a6:	4a19      	ldr	r2, [pc, #100]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d016      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b8:	f7fc f928 	bl	8004b0c <HAL_GetTick>
 80088bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088be:	e00b      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088c0:	f7fc f924 	bl	8004b0c <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d902      	bls.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	74fb      	strb	r3, [r7, #19]
            break;
 80088d6:	e006      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088d8:	4b0c      	ldr	r3, [pc, #48]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80088da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0ec      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80088e6:	7cfb      	ldrb	r3, [r7, #19]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10b      	bne.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088ec:	4b07      	ldr	r3, [pc, #28]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80088ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	4904      	ldr	r1, [pc, #16]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008902:	e009      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008904:	7cfb      	ldrb	r3, [r7, #19]
 8008906:	74bb      	strb	r3, [r7, #18]
 8008908:	e006      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800890a:	bf00      	nop
 800890c:	40021000 	.word	0x40021000
 8008910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008914:	7cfb      	ldrb	r3, [r7, #19]
 8008916:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008918:	7c7b      	ldrb	r3, [r7, #17]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d105      	bne.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800891e:	4b6e      	ldr	r3, [pc, #440]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008922:	4a6d      	ldr	r2, [pc, #436]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008928:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008936:	4b68      	ldr	r3, [pc, #416]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800893c:	f023 0203 	bic.w	r2, r3, #3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	4964      	ldr	r1, [pc, #400]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008946:	4313      	orrs	r3, r2
 8008948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008958:	4b5f      	ldr	r3, [pc, #380]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800895a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895e:	f023 020c 	bic.w	r2, r3, #12
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	495c      	ldr	r1, [pc, #368]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008968:	4313      	orrs	r3, r2
 800896a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0304 	and.w	r3, r3, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800897a:	4b57      	ldr	r3, [pc, #348]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800897c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008980:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	4953      	ldr	r1, [pc, #332]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800898a:	4313      	orrs	r3, r2
 800898c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800899c:	4b4e      	ldr	r3, [pc, #312]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800899e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	494b      	ldr	r1, [pc, #300]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089be:	4b46      	ldr	r3, [pc, #280]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80089c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	4942      	ldr	r1, [pc, #264]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00a      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089e0:	4b3d      	ldr	r3, [pc, #244]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80089e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	493a      	ldr	r1, [pc, #232]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00a      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a02:	4b35      	ldr	r3, [pc, #212]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	4931      	ldr	r1, [pc, #196]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00a      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a24:	4b2c      	ldr	r3, [pc, #176]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	4929      	ldr	r1, [pc, #164]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00a      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a46:	4b24      	ldr	r3, [pc, #144]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	4920      	ldr	r1, [pc, #128]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d015      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a68:	4b1b      	ldr	r3, [pc, #108]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	4918      	ldr	r1, [pc, #96]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a86:	d105      	bne.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a88:	4b13      	ldr	r3, [pc, #76]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	4a12      	ldr	r2, [pc, #72]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a92:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d015      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008aa0:	4b0d      	ldr	r3, [pc, #52]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aae:	490a      	ldr	r1, [pc, #40]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008abe:	d105      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	4a04      	ldr	r2, [pc, #16]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008aca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008acc:	7cbb      	ldrb	r3, [r7, #18]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	40021000 	.word	0x40021000

08008adc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008ae0:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a04      	ldr	r2, [pc, #16]	; (8008af8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008ae6:	f043 0304 	orr.w	r3, r3, #4
 8008aea:	6013      	str	r3, [r2, #0]
}
 8008aec:	bf00      	nop
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	40021000 	.word	0x40021000

08008afc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e049      	b.n	8008ba2 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	795b      	ldrb	r3, [r3, #5]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d105      	bne.n	8008b24 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7fa f9aa 	bl	8002e78 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f042 0204 	orr.w	r2, r2, #4
 8008b38:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b44:	2b40      	cmp	r3, #64	; 0x40
 8008b46:	d104      	bne.n	8008b52 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2204      	movs	r2, #4
 8008b4c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e027      	b.n	8008ba2 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008b52:	f7fb ffdb 	bl	8004b0c <HAL_GetTick>
 8008b56:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008b58:	e015      	b.n	8008b86 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008b5a:	f7fb ffd7 	bl	8004b0c <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d90e      	bls.n	8008b86 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d107      	bne.n	8008b86 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2204      	movs	r2, #4
 8008b7a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e00d      	b.n	8008ba2 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d0e2      	beq.n	8008b5a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	791b      	ldrb	r3, [r3, #4]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_RNG_GenerateRandomNumber+0x1a>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e03d      	b.n	8008c40 <HAL_RNG_GenerateRandomNumber+0x96>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	795b      	ldrb	r3, [r3, #5]
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d12c      	bne.n	8008c2e <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bda:	f7fb ff97 	bl	8004b0c <HAL_GetTick>
 8008bde:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008be0:	e011      	b.n	8008c06 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008be2:	f7fb ff93 	bl	8004b0c <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d90a      	bls.n	8008c06 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e01c      	b.n	8008c40 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d1e6      	bne.n	8008be2 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689a      	ldr	r2, [r3, #8]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68da      	ldr	r2, [r3, #12]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	715a      	strb	r2, [r3, #5]
 8008c2c:	e004      	b.n	8008c38 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2204      	movs	r2, #4
 8008c32:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	711a      	strb	r2, [r3, #4]

  return status;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d073      	beq.n	8008d42 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d106      	bne.n	8008c74 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7fa f936 	bl	8002ee0 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8008c7a:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	22ca      	movs	r2, #202	; 0xca
 8008c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2253      	movs	r2, #83	; 0x53
 8008c92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fb75 	bl	8009384 <RTC_EnterInitMode>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d14e      	bne.n	8008d42 <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	6812      	ldr	r2, [r2, #0]
 8008cae:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cb6:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6999      	ldr	r1, [r3, #24]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	689a      	ldr	r2, [r3, #8]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6912      	ldr	r2, [r2, #16]
 8008cde:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6919      	ldr	r1, [r3, #16]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	041a      	lsls	r2, r3, #16
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fb7b 	bl	80093f0 <RTC_ExitInitMode>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d11e      	bne.n	8008d42 <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699a      	ldr	r2, [r3, #24]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8008d12:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6999      	ldr	r1, [r3, #24]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	22ff      	movs	r2, #255	; 0xff
 8008d38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d4c:	b590      	push	{r4, r7, lr}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d101      	bne.n	8008d66 <HAL_RTC_SetTime+0x1a>
 8008d62:	2302      	movs	r3, #2
 8008d64:	e08b      	b.n	8008e7e <HAL_RTC_SetTime+0x132>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2202      	movs	r2, #2
 8008d72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	22ca      	movs	r2, #202	; 0xca
 8008d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2253      	movs	r2, #83	; 0x53
 8008d84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fafc 	bl	8009384 <RTC_EnterInitMode>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008d90:	7cfb      	ldrb	r3, [r7, #19]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d163      	bne.n	8008e5e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d126      	bne.n	8008dea <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d102      	bne.n	8008db0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2200      	movs	r2, #0
 8008dae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 fb59 	bl	800946c <RTC_ByteToBcd2>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fb52 	bl	800946c <RTC_ByteToBcd2>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008dcc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	789b      	ldrb	r3, [r3, #2]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fb4a 	bl	800946c <RTC_ByteToBcd2>
 8008dd8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008dda:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	78db      	ldrb	r3, [r3, #3]
 8008de2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008de4:	4313      	orrs	r3, r2
 8008de6:	617b      	str	r3, [r7, #20]
 8008de8:	e018      	b.n	8008e1c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e0a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e10:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	78db      	ldrb	r3, [r3, #3]
 8008e16:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008e26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008e2a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	699a      	ldr	r2, [r3, #24]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e3a:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6999      	ldr	r1, [r3, #24]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 facb 	bl	80093f0 <RTC_ExitInitMode>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	22ff      	movs	r2, #255	; 0xff
 8008e64:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008e66:	7cfb      	ldrb	r3, [r7, #19]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d103      	bne.n	8008e74 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8008e7c:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd90      	pop	{r4, r7, pc}

08008e86 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b086      	sub	sp, #24
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689a      	ldr	r2, [r3, #8]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008eb4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008eb8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	0c1b      	lsrs	r3, r3, #16
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	0a1b      	lsrs	r3, r3, #8
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	0d9b      	lsrs	r3, r3, #22
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d11a      	bne.n	8008f34 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fad2 	bl	80094ac <RTC_Bcd2ToByte>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	785b      	ldrb	r3, [r3, #1]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fac9 	bl	80094ac <RTC_Bcd2ToByte>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	789b      	ldrb	r3, [r3, #2]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fac0 	bl	80094ac <RTC_Bcd2ToByte>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	461a      	mov	r2, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f3e:	b590      	push	{r4, r7, lr}
 8008f40:	b087      	sub	sp, #28
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	60f8      	str	r0, [r7, #12]
 8008f46:	60b9      	str	r1, [r7, #8]
 8008f48:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <HAL_RTC_SetDate+0x1a>
 8008f54:	2302      	movs	r3, #2
 8008f56:	e075      	b.n	8009044 <HAL_RTC_SetDate+0x106>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10e      	bne.n	8008f8c <HAL_RTC_SetDate+0x4e>
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	785b      	ldrb	r3, [r3, #1]
 8008f72:	f003 0310 	and.w	r3, r3, #16
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d008      	beq.n	8008f8c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	f023 0310 	bic.w	r3, r3, #16
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	330a      	adds	r3, #10
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d11c      	bne.n	8008fcc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	78db      	ldrb	r3, [r3, #3]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fa68 	bl	800946c <RTC_ByteToBcd2>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	785b      	ldrb	r3, [r3, #1]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fa61 	bl	800946c <RTC_ByteToBcd2>
 8008faa:	4603      	mov	r3, r0
 8008fac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008fae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	789b      	ldrb	r3, [r3, #2]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 fa59 	bl	800946c <RTC_ByteToBcd2>
 8008fba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fbc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	617b      	str	r3, [r7, #20]
 8008fca:	e00e      	b.n	8008fea <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	78db      	ldrb	r3, [r3, #3]
 8008fd0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008fd8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008fde:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	22ca      	movs	r2, #202	; 0xca
 8008ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2253      	movs	r2, #83	; 0x53
 8008ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 f9c2 	bl	8009384 <RTC_EnterInitMode>
 8009000:	4603      	mov	r3, r0
 8009002:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009004:	7cfb      	ldrb	r3, [r7, #19]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10c      	bne.n	8009024 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009014:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009018:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 f9e8 	bl	80093f0 <RTC_ExitInitMode>
 8009020:	4603      	mov	r3, r0
 8009022:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	22ff      	movs	r2, #255	; 0xff
 800902a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800902c:	7cfb      	ldrb	r3, [r7, #19]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d103      	bne.n	800903a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8009042:	7cfb      	ldrb	r3, [r7, #19]
}
 8009044:	4618      	mov	r0, r3
 8009046:	371c      	adds	r7, #28
 8009048:	46bd      	mov	sp, r7
 800904a:	bd90      	pop	{r4, r7, pc}

0800904c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009062:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009066:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	0c1b      	lsrs	r3, r3, #16
 800906c:	b2da      	uxtb	r2, r3
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	0a1b      	lsrs	r3, r3, #8
 8009076:	b2db      	uxtb	r3, r3
 8009078:	f003 031f 	and.w	r3, r3, #31
 800907c:	b2da      	uxtb	r2, r3
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800908a:	b2da      	uxtb	r2, r3
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	0b5b      	lsrs	r3, r3, #13
 8009094:	b2db      	uxtb	r3, r3
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	b2da      	uxtb	r2, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d11a      	bne.n	80090dc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	78db      	ldrb	r3, [r3, #3]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 f9fe 	bl	80094ac <RTC_Bcd2ToByte>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	785b      	ldrb	r3, [r3, #1]
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 f9f5 	bl	80094ac <RTC_Bcd2ToByte>
 80090c2:	4603      	mov	r3, r0
 80090c4:	461a      	mov	r2, r3
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	789b      	ldrb	r3, [r3, #2]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f9ec 	bl	80094ac <RTC_Bcd2ToByte>
 80090d4:	4603      	mov	r3, r0
 80090d6:	461a      	mov	r2, r3
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80090e8:	b590      	push	{r4, r7, lr}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d101      	bne.n	8009102 <HAL_RTC_SetAlarm_IT+0x1a>
 80090fe:	2302      	movs	r3, #2
 8009100:	e0db      	b.n	80092ba <HAL_RTC_SetAlarm_IT+0x1d2>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2202      	movs	r2, #2
 800910e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if (Format == RTC_FORMAT_BIN)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d137      	bne.n	8009188 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009122:	2b00      	cmp	r3, #0
 8009124:	d102      	bne.n	800912c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2200      	movs	r2, #0
 800912a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	4618      	mov	r0, r3
 8009132:	f000 f99b 	bl	800946c <RTC_ByteToBcd2>
 8009136:	4603      	mov	r3, r0
 8009138:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	785b      	ldrb	r3, [r3, #1]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 f994 	bl	800946c <RTC_ByteToBcd2>
 8009144:	4603      	mov	r3, r0
 8009146:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009148:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	789b      	ldrb	r3, [r3, #2]
 800914e:	4618      	mov	r0, r3
 8009150:	f000 f98c 	bl	800946c <RTC_ByteToBcd2>
 8009154:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009156:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	78db      	ldrb	r3, [r3, #3]
 800915e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009160:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800916a:	4618      	mov	r0, r3
 800916c:	f000 f97e 	bl	800946c <RTC_ByteToBcd2>
 8009170:	4603      	mov	r3, r0
 8009172:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009174:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800917c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009182:	4313      	orrs	r3, r2
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	e023      	b.n	80091d0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009192:	2b00      	cmp	r3, #0
 8009194:	d102      	bne.n	800919c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2200      	movs	r2, #0
 800919a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80091a8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80091ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	78db      	ldrb	r3, [r3, #3]
 80091b4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80091b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80091be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80091c0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80091c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80091cc:	4313      	orrs	r3, r2
 80091ce:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	4313      	orrs	r3, r2
 80091da:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	22ca      	movs	r2, #202	; 0xca
 80091e2:	625a      	str	r2, [r3, #36]	; 0x24
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2253      	movs	r2, #83	; 0x53
 80091ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091f4:	d124      	bne.n	8009240 <HAL_RTC_SetAlarm_IT+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	699a      	ldr	r2, [r3, #24]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009204:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2201      	movs	r2, #1
 800920c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	699a      	ldr	r2, [r3, #24]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800922c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	699a      	ldr	r2, [r3, #24]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800923c:	619a      	str	r2, [r3, #24]
 800923e:	e023      	b.n	8009288 <HAL_RTC_SetAlarm_IT+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	699a      	ldr	r2, [r3, #24]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800924e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2202      	movs	r2, #2
 8009256:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009276:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	699a      	ldr	r2, [r3, #24]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009286:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009288:	4b0e      	ldr	r3, [pc, #56]	; (80092c4 <HAL_RTC_SetAlarm_IT+0x1dc>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a0d      	ldr	r2, [pc, #52]	; (80092c4 <HAL_RTC_SetAlarm_IT+0x1dc>)
 800928e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009292:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009294:	4b0b      	ldr	r3, [pc, #44]	; (80092c4 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	4a0a      	ldr	r2, [pc, #40]	; (80092c4 <HAL_RTC_SetAlarm_IT+0x1dc>)
 800929a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800929e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	22ff      	movs	r2, #255	; 0xff
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	371c      	adds	r7, #28
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd90      	pop	{r4, r7, pc}
 80092c2:	bf00      	nop
 80092c4:	40010400 	.word	0x40010400

080092c8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80092d0:	4b13      	ldr	r3, [pc, #76]	; (8009320 <HAL_RTC_AlarmIRQHandler+0x58>)
 80092d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80092d6:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092de:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d006      	beq.n	80092f8 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2201      	movs	r2, #1
 80092f0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f816 	bl	8009324 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d006      	beq.n	8009310 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2202      	movs	r2, #2
 8009308:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f8e8 	bl	80094e0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8009318:	bf00      	nop
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	40010400 	.word	0x40010400

08009324 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800934e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8009350:	f7fb fbdc 	bl	8004b0c <HAL_GetTick>
 8009354:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009356:	e009      	b.n	800936c <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009358:	f7fb fbd8 	bl	8004b0c <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009366:	d901      	bls.n	800936c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e007      	b.n	800937c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f003 0320 	and.w	r3, r3, #32
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0ee      	beq.n	8009358 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939a:	2b00      	cmp	r3, #0
 800939c:	d123      	bne.n	80093e6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68da      	ldr	r2, [r3, #12]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80093ac:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80093ae:	f7fb fbad 	bl	8004b0c <HAL_GetTick>
 80093b2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80093b4:	e00d      	b.n	80093d2 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80093b6:	f7fb fba9 	bl	8004b0c <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093c4:	d905      	bls.n	80093d2 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2203      	movs	r2, #3
 80093ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <RTC_EnterInitMode+0x62>
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d1e7      	bne.n	80093b6 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80093fc:	4b1a      	ldr	r3, [pc, #104]	; (8009468 <RTC_ExitInitMode+0x78>)
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	4a19      	ldr	r2, [pc, #100]	; (8009468 <RTC_ExitInitMode+0x78>)
 8009402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009406:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009408:	4b17      	ldr	r3, [pc, #92]	; (8009468 <RTC_ExitInitMode+0x78>)
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	f003 0320 	and.w	r3, r3, #32
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10c      	bne.n	800942e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7ff ff8f 	bl	8009338 <HAL_RTC_WaitForSynchro>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01e      	beq.n	800945e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2203      	movs	r2, #3
 8009424:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	73fb      	strb	r3, [r7, #15]
 800942c:	e017      	b.n	800945e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800942e:	4b0e      	ldr	r3, [pc, #56]	; (8009468 <RTC_ExitInitMode+0x78>)
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	4a0d      	ldr	r2, [pc, #52]	; (8009468 <RTC_ExitInitMode+0x78>)
 8009434:	f023 0320 	bic.w	r3, r3, #32
 8009438:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7ff ff7c 	bl	8009338 <HAL_RTC_WaitForSynchro>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d005      	beq.n	8009452 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2203      	movs	r2, #3
 800944a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <RTC_ExitInitMode+0x78>)
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	4a04      	ldr	r2, [pc, #16]	; (8009468 <RTC_ExitInitMode+0x78>)
 8009458:	f043 0320 	orr.w	r3, r3, #32
 800945c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800945e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	40002800 	.word	0x40002800

0800946c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800947e:	e005      	b.n	800948c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3301      	adds	r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009486:	7afb      	ldrb	r3, [r7, #11]
 8009488:	3b0a      	subs	r3, #10
 800948a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	2b09      	cmp	r3, #9
 8009490:	d8f6      	bhi.n	8009480 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	b2db      	uxtb	r3, r3
 8009496:	011b      	lsls	r3, r3, #4
 8009498:	b2da      	uxtb	r2, r3
 800949a:	7afb      	ldrb	r3, [r7, #11]
 800949c:	4313      	orrs	r3, r2
 800949e:	b2db      	uxtb	r3, r3
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	091b      	lsrs	r3, r3, #4
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	461a      	mov	r2, r3
 80094be:	0092      	lsls	r2, r2, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	f003 030f 	and.w	r3, r3, #15
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	4413      	add	r3, r2
 80094d2:	b2db      	uxtb	r3, r3
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
  uint32_t __IO tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	461a      	mov	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	4413      	add	r3, r2
 800950c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009514:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	009a      	lsls	r2, r3, #2
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	4413      	add	r3, r2
 800951e:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	461a      	mov	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6013      	str	r3, [r2, #0]
}
 8009528:	bf00      	nop
 800952a:	371c      	adds	r7, #28
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	4413      	add	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009552:	60bb      	str	r3, [r7, #8]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	4413      	add	r3, r2
 800955c:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	681b      	ldr	r3, [r3, #0]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e095      	b.n	80096ac <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	d108      	bne.n	800959a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009590:	d009      	beq.n	80095a6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	61da      	str	r2, [r3, #28]
 8009598:	e005      	b.n	80095a6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7f9 fcc5 	bl	8002f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095dc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095e6:	d902      	bls.n	80095ee <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	e002      	b.n	80095f4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80095ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80095fc:	d007      	beq.n	800960e <HAL_SPI_Init+0xa0>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009606:	d002      	beq.n	800960e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800961e:	431a      	orrs	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	431a      	orrs	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800963c:	431a      	orrs	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009646:	431a      	orrs	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009650:	ea42 0103 	orr.w	r1, r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	0c1b      	lsrs	r3, r3, #16
 800966a:	f003 0204 	and.w	r2, r3, #4
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	f003 0310 	and.w	r3, r3, #16
 8009676:	431a      	orrs	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967c:	f003 0308 	and.w	r3, r3, #8
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800968a:	ea42 0103 	orr.w	r1, r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	4613      	mov	r3, r2
 80096c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <HAL_SPI_Transmit+0x22>
 80096d2:	2302      	movs	r3, #2
 80096d4:	e158      	b.n	8009988 <HAL_SPI_Transmit+0x2d4>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096de:	f7fb fa15 	bl	8004b0c <HAL_GetTick>
 80096e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80096e4:	88fb      	ldrh	r3, [r7, #6]
 80096e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d002      	beq.n	80096fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80096f4:	2302      	movs	r3, #2
 80096f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80096f8:	e13d      	b.n	8009976 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <HAL_SPI_Transmit+0x52>
 8009700:	88fb      	ldrh	r3, [r7, #6]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	77fb      	strb	r3, [r7, #31]
    goto error;
 800970a:	e134      	b.n	8009976 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2203      	movs	r2, #3
 8009710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	88fa      	ldrh	r2, [r7, #6]
 8009724:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	88fa      	ldrh	r2, [r7, #6]
 800972a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009756:	d10f      	bne.n	8009778 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009766:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009776:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009782:	2b40      	cmp	r3, #64	; 0x40
 8009784:	d007      	beq.n	8009796 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009794:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800979e:	d94b      	bls.n	8009838 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <HAL_SPI_Transmit+0xfa>
 80097a8:	8afb      	ldrh	r3, [r7, #22]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d13e      	bne.n	800982c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	881a      	ldrh	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097be:	1c9a      	adds	r2, r3, #2
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80097d2:	e02b      	b.n	800982c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d112      	bne.n	8009808 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e6:	881a      	ldrh	r2, [r3, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	1c9a      	adds	r2, r3, #2
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009806:	e011      	b.n	800982c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009808:	f7fb f980 	bl	8004b0c <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d803      	bhi.n	8009820 <HAL_SPI_Transmit+0x16c>
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981e:	d102      	bne.n	8009826 <HAL_SPI_Transmit+0x172>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	77fb      	strb	r3, [r7, #31]
          goto error;
 800982a:	e0a4      	b.n	8009976 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009830:	b29b      	uxth	r3, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1ce      	bne.n	80097d4 <HAL_SPI_Transmit+0x120>
 8009836:	e07c      	b.n	8009932 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <HAL_SPI_Transmit+0x192>
 8009840:	8afb      	ldrh	r3, [r7, #22]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d170      	bne.n	8009928 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b01      	cmp	r3, #1
 800984e:	d912      	bls.n	8009876 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009854:	881a      	ldrh	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	1c9a      	adds	r2, r3, #2
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800986a:	b29b      	uxth	r3, r3
 800986c:	3b02      	subs	r3, #2
 800986e:	b29a      	uxth	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009874:	e058      	b.n	8009928 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	330c      	adds	r3, #12
 8009880:	7812      	ldrb	r2, [r2, #0]
 8009882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009892:	b29b      	uxth	r3, r3
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800989c:	e044      	b.n	8009928 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d12b      	bne.n	8009904 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d912      	bls.n	80098dc <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ba:	881a      	ldrh	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	1c9a      	adds	r2, r3, #2
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b02      	subs	r3, #2
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098da:	e025      	b.n	8009928 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	330c      	adds	r3, #12
 80098e6:	7812      	ldrb	r2, [r2, #0]
 80098e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	3b01      	subs	r3, #1
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009902:	e011      	b.n	8009928 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009904:	f7fb f902 	bl	8004b0c <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d803      	bhi.n	800991c <HAL_SPI_Transmit+0x268>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991a:	d102      	bne.n	8009922 <HAL_SPI_Transmit+0x26e>
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d102      	bne.n	8009928 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009926:	e026      	b.n	8009976 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800992c:	b29b      	uxth	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1b5      	bne.n	800989e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 fce4 	bl	800a304 <SPI_EndRxTxTransaction>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2220      	movs	r2, #32
 8009946:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009950:	2300      	movs	r3, #0
 8009952:	613b      	str	r3, [r7, #16]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	77fb      	strb	r3, [r7, #31]
 8009972:	e000      	b.n	8009976 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009974:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009986:	7ffb      	ldrb	r3, [r7, #31]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3720      	adds	r7, #32
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af02      	add	r7, sp, #8
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	4613      	mov	r3, r2
 800999e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ac:	d112      	bne.n	80099d4 <HAL_SPI_Receive+0x44>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10e      	bne.n	80099d4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2204      	movs	r2, #4
 80099ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80099be:	88fa      	ldrh	r2, [r7, #6]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	4613      	mov	r3, r2
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	68b9      	ldr	r1, [r7, #8]
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 f910 	bl	8009bf0 <HAL_SPI_TransmitReceive>
 80099d0:	4603      	mov	r3, r0
 80099d2:	e109      	b.n	8009be8 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d101      	bne.n	80099e2 <HAL_SPI_Receive+0x52>
 80099de:	2302      	movs	r3, #2
 80099e0:	e102      	b.n	8009be8 <HAL_SPI_Receive+0x258>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099ea:	f7fb f88f 	bl	8004b0c <HAL_GetTick>
 80099ee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d002      	beq.n	8009a02 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80099fc:	2302      	movs	r3, #2
 80099fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a00:	e0e9      	b.n	8009bd6 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <HAL_SPI_Receive+0x7e>
 8009a08:	88fb      	ldrh	r3, [r7, #6]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a12:	e0e0      	b.n	8009bd6 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2204      	movs	r2, #4
 8009a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	88fa      	ldrh	r2, [r7, #6]
 8009a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	88fa      	ldrh	r2, [r7, #6]
 8009a34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a5e:	d908      	bls.n	8009a72 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a6e:	605a      	str	r2, [r3, #4]
 8009a70:	e007      	b.n	8009a82 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a80:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a8a:	d10f      	bne.n	8009aac <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009aaa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab6:	2b40      	cmp	r3, #64	; 0x40
 8009ab8:	d007      	beq.n	8009aca <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ac8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ad2:	d867      	bhi.n	8009ba4 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009ad4:	e030      	b.n	8009b38 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d117      	bne.n	8009b14 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f103 020c 	add.w	r2, r3, #12
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af0:	7812      	ldrb	r2, [r2, #0]
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009b12:	e011      	b.n	8009b38 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b14:	f7fa fffa 	bl	8004b0c <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d803      	bhi.n	8009b2c <HAL_SPI_Receive+0x19c>
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2a:	d102      	bne.n	8009b32 <HAL_SPI_Receive+0x1a2>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d102      	bne.n	8009b38 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009b36:	e04e      	b.n	8009bd6 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1c8      	bne.n	8009ad6 <HAL_SPI_Receive+0x146>
 8009b44:	e034      	b.n	8009bb0 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d115      	bne.n	8009b80 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5e:	b292      	uxth	r2, r2
 8009b60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b66:	1c9a      	adds	r2, r3, #2
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	3b01      	subs	r3, #1
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009b7e:	e011      	b.n	8009ba4 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b80:	f7fa ffc4 	bl	8004b0c <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d803      	bhi.n	8009b98 <HAL_SPI_Receive+0x208>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b96:	d102      	bne.n	8009b9e <HAL_SPI_Receive+0x20e>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d102      	bne.n	8009ba4 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009ba2:	e018      	b.n	8009bd6 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1ca      	bne.n	8009b46 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fb4d 	bl	800a254 <SPI_EndRxTransaction>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	75fb      	strb	r3, [r7, #23]
 8009bd2:	e000      	b.n	8009bd6 <HAL_SPI_Receive+0x246>
  }

error :
 8009bd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08a      	sub	sp, #40	; 0x28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <HAL_SPI_TransmitReceive+0x26>
 8009c12:	2302      	movs	r3, #2
 8009c14:	e1fb      	b.n	800a00e <HAL_SPI_TransmitReceive+0x41e>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c1e:	f7fa ff75 	bl	8004b0c <HAL_GetTick>
 8009c22:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c2a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009c32:	887b      	ldrh	r3, [r7, #2]
 8009c34:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009c36:	887b      	ldrh	r3, [r7, #2]
 8009c38:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c3a:	7efb      	ldrb	r3, [r7, #27]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d00e      	beq.n	8009c5e <HAL_SPI_TransmitReceive+0x6e>
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c46:	d106      	bne.n	8009c56 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <HAL_SPI_TransmitReceive+0x66>
 8009c50:	7efb      	ldrb	r3, [r7, #27]
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	d003      	beq.n	8009c5e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009c56:	2302      	movs	r3, #2
 8009c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009c5c:	e1cd      	b.n	8009ffa <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d005      	beq.n	8009c70 <HAL_SPI_TransmitReceive+0x80>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <HAL_SPI_TransmitReceive+0x80>
 8009c6a:	887b      	ldrh	r3, [r7, #2]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d103      	bne.n	8009c78 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009c76:	e1c0      	b.n	8009ffa <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	d003      	beq.n	8009c8c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2205      	movs	r2, #5
 8009c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	887a      	ldrh	r2, [r7, #2]
 8009c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	887a      	ldrh	r2, [r7, #2]
 8009ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	887a      	ldrh	r2, [r7, #2]
 8009cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	887a      	ldrh	r2, [r7, #2]
 8009cb8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cce:	d802      	bhi.n	8009cd6 <HAL_SPI_TransmitReceive+0xe6>
 8009cd0:	8a3b      	ldrh	r3, [r7, #16]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d908      	bls.n	8009ce8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ce4:	605a      	str	r2, [r3, #4]
 8009ce6:	e007      	b.n	8009cf8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009cf6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d02:	2b40      	cmp	r3, #64	; 0x40
 8009d04:	d007      	beq.n	8009d16 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d1e:	d97c      	bls.n	8009e1a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <HAL_SPI_TransmitReceive+0x13e>
 8009d28:	8a7b      	ldrh	r3, [r7, #18]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d169      	bne.n	8009e02 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d32:	881a      	ldrh	r2, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3e:	1c9a      	adds	r2, r3, #2
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d52:	e056      	b.n	8009e02 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	f003 0302 	and.w	r3, r3, #2
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d11b      	bne.n	8009d9a <HAL_SPI_TransmitReceive+0x1aa>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d016      	beq.n	8009d9a <HAL_SPI_TransmitReceive+0x1aa>
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d113      	bne.n	8009d9a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d76:	881a      	ldrh	r2, [r3, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	1c9a      	adds	r2, r3, #2
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d11c      	bne.n	8009de2 <HAL_SPI_TransmitReceive+0x1f2>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d016      	beq.n	8009de2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68da      	ldr	r2, [r3, #12]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	b292      	uxth	r2, r2
 8009dc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc6:	1c9a      	adds	r2, r3, #2
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009dde:	2301      	movs	r3, #1
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009de2:	f7fa fe93 	bl	8004b0c <HAL_GetTick>
 8009de6:	4602      	mov	r2, r0
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d807      	bhi.n	8009e02 <HAL_SPI_TransmitReceive+0x212>
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df8:	d003      	beq.n	8009e02 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009e00:	e0fb      	b.n	8009ffa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1a3      	bne.n	8009d54 <HAL_SPI_TransmitReceive+0x164>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d19d      	bne.n	8009d54 <HAL_SPI_TransmitReceive+0x164>
 8009e18:	e0df      	b.n	8009fda <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <HAL_SPI_TransmitReceive+0x23a>
 8009e22:	8a7b      	ldrh	r3, [r7, #18]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	f040 80cb 	bne.w	8009fc0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d912      	bls.n	8009e5a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	881a      	ldrh	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e44:	1c9a      	adds	r2, r3, #2
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	3b02      	subs	r3, #2
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e58:	e0b2      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	330c      	adds	r3, #12
 8009e64:	7812      	ldrb	r2, [r2, #0]
 8009e66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e80:	e09e      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	f003 0302 	and.w	r3, r3, #2
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d134      	bne.n	8009efa <HAL_SPI_TransmitReceive+0x30a>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d02f      	beq.n	8009efa <HAL_SPI_TransmitReceive+0x30a>
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d12c      	bne.n	8009efa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d912      	bls.n	8009ed0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eae:	881a      	ldrh	r2, [r3, #0]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eba:	1c9a      	adds	r2, r3, #2
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3b02      	subs	r3, #2
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ece:	e012      	b.n	8009ef6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	330c      	adds	r3, #12
 8009eda:	7812      	ldrb	r2, [r2, #0]
 8009edc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d148      	bne.n	8009f9a <HAL_SPI_TransmitReceive+0x3aa>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d042      	beq.n	8009f9a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d923      	bls.n	8009f68 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68da      	ldr	r2, [r3, #12]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2a:	b292      	uxth	r2, r2
 8009f2c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	1c9a      	adds	r2, r3, #2
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	3b02      	subs	r3, #2
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d81f      	bhi.n	8009f96 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f64:	605a      	str	r2, [r3, #4]
 8009f66:	e016      	b.n	8009f96 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f103 020c 	add.w	r2, r3, #12
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	b2d2      	uxtb	r2, r2
 8009f78:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f96:	2301      	movs	r3, #1
 8009f98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f9a:	f7fa fdb7 	bl	8004b0c <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d803      	bhi.n	8009fb2 <HAL_SPI_TransmitReceive+0x3c2>
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb0:	d102      	bne.n	8009fb8 <HAL_SPI_TransmitReceive+0x3c8>
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d103      	bne.n	8009fc0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009fbe:	e01c      	b.n	8009ffa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f47f af5b 	bne.w	8009e82 <HAL_SPI_TransmitReceive+0x292>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f47f af54 	bne.w	8009e82 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f000 f990 	bl	800a304 <SPI_EndRxTxTransaction>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d006      	beq.n	8009ff8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	661a      	str	r2, [r3, #96]	; 0x60
 8009ff6:	e000      	b.n	8009ffa <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009ff8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a00a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3728      	adds	r7, #40	; 0x28
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	4613      	mov	r3, r2
 800a026:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a028:	f7fa fd70 	bl	8004b0c <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	1a9b      	subs	r3, r3, r2
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	4413      	add	r3, r2
 800a036:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a038:	f7fa fd68 	bl	8004b0c <HAL_GetTick>
 800a03c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a03e:	4b39      	ldr	r3, [pc, #228]	; (800a124 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	015b      	lsls	r3, r3, #5
 800a044:	0d1b      	lsrs	r3, r3, #20
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	fb02 f303 	mul.w	r3, r2, r3
 800a04c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a04e:	e054      	b.n	800a0fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a056:	d050      	beq.n	800a0fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a058:	f7fa fd58 	bl	8004b0c <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	69fa      	ldr	r2, [r7, #28]
 800a064:	429a      	cmp	r2, r3
 800a066:	d902      	bls.n	800a06e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d13d      	bne.n	800a0ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a07c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a086:	d111      	bne.n	800a0ac <SPI_WaitFlagStateUntilTimeout+0x94>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a090:	d004      	beq.n	800a09c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a09a:	d107      	bne.n	800a0ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0b4:	d10f      	bne.n	800a0d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0c4:	601a      	str	r2, [r3, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e017      	b.n	800a11a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	689a      	ldr	r2, [r3, #8]
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	4013      	ands	r3, r2
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	429a      	cmp	r2, r3
 800a108:	bf0c      	ite	eq
 800a10a:	2301      	moveq	r3, #1
 800a10c:	2300      	movne	r3, #0
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	461a      	mov	r2, r3
 800a112:	79fb      	ldrb	r3, [r7, #7]
 800a114:	429a      	cmp	r2, r3
 800a116:	d19b      	bne.n	800a050 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3720      	adds	r7, #32
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20000000 	.word	0x20000000

0800a128 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08a      	sub	sp, #40	; 0x28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
 800a134:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a13a:	f7fa fce7 	bl	8004b0c <HAL_GetTick>
 800a13e:	4602      	mov	r2, r0
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	1a9b      	subs	r3, r3, r2
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	4413      	add	r3, r2
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a14a:	f7fa fcdf 	bl	8004b0c <HAL_GetTick>
 800a14e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	330c      	adds	r3, #12
 800a156:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a158:	4b3d      	ldr	r3, [pc, #244]	; (800a250 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	4613      	mov	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	00da      	lsls	r2, r3, #3
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	0d1b      	lsrs	r3, r3, #20
 800a168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a16a:	fb02 f303 	mul.w	r3, r2, r3
 800a16e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a170:	e060      	b.n	800a234 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a178:	d107      	bne.n	800a18a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d104      	bne.n	800a18a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	b2db      	uxtb	r3, r3
 800a186:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a188:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a190:	d050      	beq.n	800a234 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a192:	f7fa fcbb 	bl	8004b0c <HAL_GetTick>
 800a196:	4602      	mov	r2, r0
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d902      	bls.n	800a1a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d13d      	bne.n	800a224 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1c0:	d111      	bne.n	800a1e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ca:	d004      	beq.n	800a1d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d4:	d107      	bne.n	800a1e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1ee:	d10f      	bne.n	800a210 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a20e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e010      	b.n	800a246 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	3b01      	subs	r3, #1
 800a232:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	689a      	ldr	r2, [r3, #8]
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	4013      	ands	r3, r2
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	429a      	cmp	r2, r3
 800a242:	d196      	bne.n	800a172 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3728      	adds	r7, #40	; 0x28
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000000 	.word	0x20000000

0800a254 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af02      	add	r7, sp, #8
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a268:	d111      	bne.n	800a28e <SPI_EndRxTransaction+0x3a>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a272:	d004      	beq.n	800a27e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a27c:	d107      	bne.n	800a28e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a28c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2200      	movs	r2, #0
 800a296:	2180      	movs	r1, #128	; 0x80
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f7ff febd 	bl	800a018 <SPI_WaitFlagStateUntilTimeout>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d007      	beq.n	800a2b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2a8:	f043 0220 	orr.w	r2, r3, #32
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	e023      	b.n	800a2fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2bc:	d11d      	bne.n	800a2fa <SPI_EndRxTransaction+0xa6>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2c6:	d004      	beq.n	800a2d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d0:	d113      	bne.n	800a2fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f7ff ff22 	bl	800a128 <SPI_WaitFifoStateUntilTimeout>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d007      	beq.n	800a2fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ee:	f043 0220 	orr.w	r2, r3, #32
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e000      	b.n	800a2fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af02      	add	r7, sp, #8
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2200      	movs	r2, #0
 800a318:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f7ff ff03 	bl	800a128 <SPI_WaitFifoStateUntilTimeout>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d007      	beq.n	800a338 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a32c:	f043 0220 	orr.w	r2, r3, #32
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	e027      	b.n	800a388 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2200      	movs	r2, #0
 800a340:	2180      	movs	r1, #128	; 0x80
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff fe68 	bl	800a018 <SPI_WaitFlagStateUntilTimeout>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d007      	beq.n	800a35e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a352:	f043 0220 	orr.w	r2, r3, #32
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e014      	b.n	800a388 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	2200      	movs	r2, #0
 800a366:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f7ff fedc 	bl	800a128 <SPI_WaitFifoStateUntilTimeout>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d007      	beq.n	800a386 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a37a:	f043 0220 	orr.w	r2, r3, #32
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e000      	b.n	800a388 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e040      	b.n	800a424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d106      	bne.n	800a3b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7f8 fca2 	bl	8002cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2224      	movs	r2, #36	; 0x24
 800a3bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f022 0201 	bic.w	r2, r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fe8a 	bl	800b0e8 <UART_SetConfig>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d101      	bne.n	800a3de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e022      	b.n	800a424 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f001 f8d8 	bl	800b59c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685a      	ldr	r2, [r3, #4]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689a      	ldr	r2, [r3, #8]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a40a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f042 0201 	orr.w	r2, r2, #1
 800a41a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 f95f 	bl	800b6e0 <UART_CheckIdleState>
 800a422:	4603      	mov	r3, r0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b08a      	sub	sp, #40	; 0x28
 800a430:	af02      	add	r7, sp, #8
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	603b      	str	r3, [r7, #0]
 800a438:	4613      	mov	r3, r2
 800a43a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a440:	2b20      	cmp	r3, #32
 800a442:	f040 8082 	bne.w	800a54a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d002      	beq.n	800a452 <HAL_UART_Transmit+0x26>
 800a44c:	88fb      	ldrh	r3, [r7, #6]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e07a      	b.n	800a54c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d101      	bne.n	800a464 <HAL_UART_Transmit+0x38>
 800a460:	2302      	movs	r3, #2
 800a462:	e073      	b.n	800a54c <HAL_UART_Transmit+0x120>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2221      	movs	r2, #33	; 0x21
 800a478:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a47a:	f7fa fb47 	bl	8004b0c <HAL_GetTick>
 800a47e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	88fa      	ldrh	r2, [r7, #6]
 800a484:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	88fa      	ldrh	r2, [r7, #6]
 800a48c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a498:	d108      	bne.n	800a4ac <HAL_UART_Transmit+0x80>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d104      	bne.n	800a4ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	61bb      	str	r3, [r7, #24]
 800a4aa:	e003      	b.n	800a4b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a4bc:	e02d      	b.n	800a51a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2180      	movs	r1, #128	; 0x80
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f001 f952 	bl	800b772 <UART_WaitOnFlagUntilTimeout>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e039      	b.n	800a54c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10b      	bne.n	800a4f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	881a      	ldrh	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4ea:	b292      	uxth	r2, r2
 800a4ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	3302      	adds	r3, #2
 800a4f2:	61bb      	str	r3, [r7, #24]
 800a4f4:	e008      	b.n	800a508 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	781a      	ldrb	r2, [r3, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	b292      	uxth	r2, r2
 800a500:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	3301      	adds	r3, #1
 800a506:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a50e:	b29b      	uxth	r3, r3
 800a510:	3b01      	subs	r3, #1
 800a512:	b29a      	uxth	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a520:	b29b      	uxth	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1cb      	bne.n	800a4be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2200      	movs	r2, #0
 800a52e:	2140      	movs	r1, #64	; 0x40
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f001 f91e 	bl	800b772 <UART_WaitOnFlagUntilTimeout>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e005      	b.n	800a54c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2220      	movs	r2, #32
 800a544:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	e000      	b.n	800a54c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a54a:	2302      	movs	r3, #2
  }
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3720      	adds	r7, #32
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08a      	sub	sp, #40	; 0x28
 800a558:	af02      	add	r7, sp, #8
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	4613      	mov	r3, r2
 800a562:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a568:	2b20      	cmp	r3, #32
 800a56a:	f040 80bf 	bne.w	800a6ec <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d002      	beq.n	800a57a <HAL_UART_Receive+0x26>
 800a574:	88fb      	ldrh	r3, [r7, #6]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e0b7      	b.n	800a6ee <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a584:	2b01      	cmp	r3, #1
 800a586:	d101      	bne.n	800a58c <HAL_UART_Receive+0x38>
 800a588:	2302      	movs	r3, #2
 800a58a:	e0b0      	b.n	800a6ee <HAL_UART_Receive+0x19a>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2222      	movs	r2, #34	; 0x22
 800a5a0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5a8:	f7fa fab0 	bl	8004b0c <HAL_GetTick>
 800a5ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	88fa      	ldrh	r2, [r7, #6]
 800a5b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	88fa      	ldrh	r2, [r7, #6]
 800a5ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c6:	d10e      	bne.n	800a5e6 <HAL_UART_Receive+0x92>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d105      	bne.n	800a5dc <HAL_UART_Receive+0x88>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a5d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5da:	e02d      	b.n	800a638 <HAL_UART_Receive+0xe4>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	22ff      	movs	r2, #255	; 0xff
 800a5e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5e4:	e028      	b.n	800a638 <HAL_UART_Receive+0xe4>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10d      	bne.n	800a60a <HAL_UART_Receive+0xb6>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d104      	bne.n	800a600 <HAL_UART_Receive+0xac>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	22ff      	movs	r2, #255	; 0xff
 800a5fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5fe:	e01b      	b.n	800a638 <HAL_UART_Receive+0xe4>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	227f      	movs	r2, #127	; 0x7f
 800a604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a608:	e016      	b.n	800a638 <HAL_UART_Receive+0xe4>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a612:	d10d      	bne.n	800a630 <HAL_UART_Receive+0xdc>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d104      	bne.n	800a626 <HAL_UART_Receive+0xd2>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	227f      	movs	r2, #127	; 0x7f
 800a620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a624:	e008      	b.n	800a638 <HAL_UART_Receive+0xe4>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	223f      	movs	r2, #63	; 0x3f
 800a62a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a62e:	e003      	b.n	800a638 <HAL_UART_Receive+0xe4>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a63e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a648:	d108      	bne.n	800a65c <HAL_UART_Receive+0x108>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d104      	bne.n	800a65c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800a652:	2300      	movs	r3, #0
 800a654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	61bb      	str	r3, [r7, #24]
 800a65a:	e003      	b.n	800a664 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a660:	2300      	movs	r3, #0
 800a662:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a66c:	e033      	b.n	800a6d6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2200      	movs	r2, #0
 800a676:	2120      	movs	r1, #32
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f001 f87a 	bl	800b772 <UART_WaitOnFlagUntilTimeout>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e032      	b.n	800a6ee <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10c      	bne.n	800a6a8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a694:	b29a      	uxth	r2, r3
 800a696:	8a7b      	ldrh	r3, [r7, #18]
 800a698:	4013      	ands	r3, r2
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	3302      	adds	r3, #2
 800a6a4:	61bb      	str	r3, [r7, #24]
 800a6a6:	e00d      	b.n	800a6c4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	8a7b      	ldrh	r3, [r7, #18]
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1c5      	bne.n	800a66e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e000      	b.n	800a6ee <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800a6ec:	2302      	movs	r3, #2
  }
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3720      	adds	r7, #32
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b08b      	sub	sp, #44	; 0x2c
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	4613      	mov	r3, r2
 800a704:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a70a:	2b20      	cmp	r3, #32
 800a70c:	d156      	bne.n	800a7bc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d002      	beq.n	800a71a <HAL_UART_Transmit_IT+0x22>
 800a714:	88fb      	ldrh	r3, [r7, #6]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d101      	bne.n	800a71e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e04f      	b.n	800a7be <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a724:	2b01      	cmp	r3, #1
 800a726:	d101      	bne.n	800a72c <HAL_UART_Transmit_IT+0x34>
 800a728:	2302      	movs	r3, #2
 800a72a:	e048      	b.n	800a7be <HAL_UART_Transmit_IT+0xc6>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68ba      	ldr	r2, [r7, #8]
 800a738:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	88fa      	ldrh	r2, [r7, #6]
 800a73e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	88fa      	ldrh	r2, [r7, #6]
 800a746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2221      	movs	r2, #33	; 0x21
 800a75c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a766:	d107      	bne.n	800a778 <HAL_UART_Transmit_IT+0x80>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4a16      	ldr	r2, [pc, #88]	; (800a7cc <HAL_UART_Transmit_IT+0xd4>)
 800a774:	669a      	str	r2, [r3, #104]	; 0x68
 800a776:	e002      	b.n	800a77e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	4a15      	ldr	r2, [pc, #84]	; (800a7d0 <HAL_UART_Transmit_IT+0xd8>)
 800a77c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	e853 3f00 	ldrex	r3, [r3]
 800a792:	613b      	str	r3, [r7, #16]
   return(result);
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	623b      	str	r3, [r7, #32]
 800a7a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a8:	69f9      	ldr	r1, [r7, #28]
 800a7aa:	6a3a      	ldr	r2, [r7, #32]
 800a7ac:	e841 2300 	strex	r3, r2, [r1]
 800a7b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1e6      	bne.n	800a786 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e000      	b.n	800a7be <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800a7bc:	2302      	movs	r3, #2
  }
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	372c      	adds	r7, #44	; 0x2c
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	0800bd23 	.word	0x0800bd23
 800a7d0:	0800bc6b 	.word	0x0800bc6b

0800a7d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	; 0x28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7e6:	2b20      	cmp	r3, #32
 800a7e8:	d142      	bne.n	800a870 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <HAL_UART_Receive_IT+0x22>
 800a7f0:	88fb      	ldrh	r3, [r7, #6]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e03b      	b.n	800a872 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a800:	2b01      	cmp	r3, #1
 800a802:	d101      	bne.n	800a808 <HAL_UART_Receive_IT+0x34>
 800a804:	2302      	movs	r3, #2
 800a806:	e034      	b.n	800a872 <HAL_UART_Receive_IT+0x9e>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a18      	ldr	r2, [pc, #96]	; (800a87c <HAL_UART_Receive_IT+0xa8>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d01f      	beq.n	800a860 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d018      	beq.n	800a860 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	e853 3f00 	ldrex	r3, [r3]
 800a83a:	613b      	str	r3, [r7, #16]
   return(result);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a842:	627b      	str	r3, [r7, #36]	; 0x24
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84c:	623b      	str	r3, [r7, #32]
 800a84e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a850:	69f9      	ldr	r1, [r7, #28]
 800a852:	6a3a      	ldr	r2, [r7, #32]
 800a854:	e841 2300 	strex	r3, r2, [r1]
 800a858:	61bb      	str	r3, [r7, #24]
   return(result);
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e6      	bne.n	800a82e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a860:	88fb      	ldrh	r3, [r7, #6]
 800a862:	461a      	mov	r2, r3
 800a864:	68b9      	ldr	r1, [r7, #8]
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f001 f848 	bl	800b8fc <UART_Start_Receive_IT>
 800a86c:	4603      	mov	r3, r0
 800a86e:	e000      	b.n	800a872 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a870:	2302      	movs	r3, #2
  }
}
 800a872:	4618      	mov	r0, r3
 800a874:	3728      	adds	r7, #40	; 0x28
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	40008000 	.word	0x40008000

0800a880 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b0a2      	sub	sp, #136	; 0x88
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800a888:	2301      	movs	r3, #1
 800a88a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a896:	e853 3f00 	ldrex	r3, [r3]
 800a89a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a89c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a89e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800a8a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8b2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a8b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a8b8:	e841 2300 	strex	r3, r2, [r1]
 800a8bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a8be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1e4      	bne.n	800a88e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8d6:	f023 0301 	bic.w	r3, r3, #1
 800a8da:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a8e4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a8e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e5      	bne.n	800a8c4 <HAL_UART_Abort_IT+0x44>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d118      	bne.n	800a932 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	e853 3f00 	ldrex	r3, [r3]
 800a90c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a910:	f023 0310 	bic.w	r3, r3, #16
 800a914:	67bb      	str	r3, [r7, #120]	; 0x78
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a91e:	647b      	str	r3, [r7, #68]	; 0x44
 800a920:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1e6      	bne.n	800a900 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00f      	beq.n	800a95a <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a944:	2b80      	cmp	r3, #128	; 0x80
 800a946:	d104      	bne.n	800a952 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a94c:	4a5e      	ldr	r2, [pc, #376]	; (800aac8 <HAL_UART_Abort_IT+0x248>)
 800a94e:	639a      	str	r2, [r3, #56]	; 0x38
 800a950:	e003      	b.n	800a95a <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a956:	2200      	movs	r2, #0
 800a958:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00f      	beq.n	800a982 <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96c:	2b40      	cmp	r3, #64	; 0x40
 800a96e:	d104      	bne.n	800a97a <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a974:	4a55      	ldr	r2, [pc, #340]	; (800aacc <HAL_UART_Abort_IT+0x24c>)
 800a976:	639a      	str	r2, [r3, #56]	; 0x38
 800a978:	e003      	b.n	800a982 <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a97e:	2200      	movs	r2, #0
 800a980:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98c:	2b80      	cmp	r3, #128	; 0x80
 800a98e:	d12d      	bne.n	800a9ec <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3308      	adds	r3, #8
 800a996:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	e853 3f00 	ldrex	r3, [r3]
 800a99e:	623b      	str	r3, [r7, #32]
   return(result);
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9a6:	677b      	str	r3, [r7, #116]	; 0x74
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a9b0:	633a      	str	r2, [r7, #48]	; 0x30
 800a9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9b8:	e841 2300 	strex	r3, r2, [r1]
 800a9bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1e5      	bne.n	800a990 <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00f      	beq.n	800a9ec <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fb fdfa 	bl	80065ca <HAL_DMA_Abort_IT>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d004      	beq.n	800a9e6 <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	639a      	str	r2, [r3, #56]	; 0x38
 800a9e4:	e002      	b.n	800a9ec <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f6:	2b40      	cmp	r3, #64	; 0x40
 800a9f8:	d130      	bne.n	800aa5c <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3308      	adds	r3, #8
 800aa00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	e853 3f00 	ldrex	r3, [r3]
 800aa08:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa10:	673b      	str	r3, [r7, #112]	; 0x70
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3308      	adds	r3, #8
 800aa18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aa1a:	61fa      	str	r2, [r7, #28]
 800aa1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1e:	69b9      	ldr	r1, [r7, #24]
 800aa20:	69fa      	ldr	r2, [r7, #28]
 800aa22:	e841 2300 	strex	r3, r2, [r1]
 800aa26:	617b      	str	r3, [r7, #20]
   return(result);
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1e5      	bne.n	800a9fa <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d012      	beq.n	800aa5c <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fb fdc5 	bl	80065ca <HAL_DMA_Abort_IT>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d007      	beq.n	800aa56 <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa54:	e002      	b.n	800aa5c <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 800aa56:	2300      	movs	r3, #0
 800aa58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800aa5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d12b      	bne.n	800aabc <HAL_UART_Abort_IT+0x23c>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	665a      	str	r2, [r3, #100]	; 0x64
    huart->TxISR = NULL;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	669a      	str	r2, [r3, #104]	; 0x68

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	220f      	movs	r2, #15
 800aa8e:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	8b1b      	ldrh	r3, [r3, #24]
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f042 0208 	orr.w	r2, r2, #8
 800aaa0:	b292      	uxth	r2, r2
 800aaa2:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	679a      	str	r2, [r3, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2220      	movs	r2, #32
 800aaae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fb00 	bl	800b0bc <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3788      	adds	r7, #136	; 0x88
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	0800bb83 	.word	0x0800bb83
 800aacc:	0800bbed 	.word	0x0800bbed

0800aad0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b0ba      	sub	sp, #232	; 0xe8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aaf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aafa:	f640 030f 	movw	r3, #2063	; 0x80f
 800aafe:	4013      	ands	r3, r2
 800ab00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ab04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d115      	bne.n	800ab38 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab10:	f003 0320 	and.w	r3, r3, #32
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00f      	beq.n	800ab38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab1c:	f003 0320 	and.w	r3, r3, #32
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d009      	beq.n	800ab38 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 82a6 	beq.w	800b07a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	4798      	blx	r3
      }
      return;
 800ab36:	e2a0      	b.n	800b07a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ab38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 8117 	beq.w	800ad70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ab42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ab4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ab52:	4b85      	ldr	r3, [pc, #532]	; (800ad68 <HAL_UART_IRQHandler+0x298>)
 800ab54:	4013      	ands	r3, r2
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 810a 	beq.w	800ad70 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d011      	beq.n	800ab8c <HAL_UART_IRQHandler+0xbc>
 800ab68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab82:	f043 0201 	orr.w	r2, r3, #1
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab90:	f003 0302 	and.w	r3, r3, #2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d011      	beq.n	800abbc <HAL_UART_IRQHandler+0xec>
 800ab98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00b      	beq.n	800abbc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2202      	movs	r2, #2
 800abaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abb2:	f043 0204 	orr.w	r2, r3, #4
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d011      	beq.n	800abec <HAL_UART_IRQHandler+0x11c>
 800abc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abcc:	f003 0301 	and.w	r3, r3, #1
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00b      	beq.n	800abec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2204      	movs	r2, #4
 800abda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abe2:	f043 0202 	orr.w	r2, r3, #2
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800abec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abf0:	f003 0308 	and.w	r3, r3, #8
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d017      	beq.n	800ac28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800abf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abfc:	f003 0320 	and.w	r3, r3, #32
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d105      	bne.n	800ac10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ac04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00b      	beq.n	800ac28 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2208      	movs	r2, #8
 800ac16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac1e:	f043 0208 	orr.w	r2, r3, #8
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d012      	beq.n	800ac5a <HAL_UART_IRQHandler+0x18a>
 800ac34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00c      	beq.n	800ac5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac50:	f043 0220 	orr.w	r2, r3, #32
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 820c 	beq.w	800b07e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ac66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac6a:	f003 0320 	and.w	r3, r3, #32
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00d      	beq.n	800ac8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ac72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac76:	f003 0320 	and.w	r3, r3, #32
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d007      	beq.n	800ac8e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca2:	2b40      	cmp	r3, #64	; 0x40
 800aca4:	d005      	beq.n	800acb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d04f      	beq.n	800ad52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 feec 	bl	800ba90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc2:	2b40      	cmp	r3, #64	; 0x40
 800acc4:	d141      	bne.n	800ad4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3308      	adds	r3, #8
 800accc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acd4:	e853 3f00 	ldrex	r3, [r3]
 800acd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800acdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ace0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3308      	adds	r3, #8
 800acee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800acf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800acf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800acfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad02:	e841 2300 	strex	r3, r2, [r1]
 800ad06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1d9      	bne.n	800acc6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d013      	beq.n	800ad42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1e:	4a13      	ldr	r2, [pc, #76]	; (800ad6c <HAL_UART_IRQHandler+0x29c>)
 800ad20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fb fc4f 	bl	80065ca <HAL_DMA_Abort_IT>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d017      	beq.n	800ad62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad40:	e00f      	b.n	800ad62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f9b0 	bl	800b0a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad48:	e00b      	b.n	800ad62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f9ac 	bl	800b0a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad50:	e007      	b.n	800ad62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f9a8 	bl	800b0a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ad60:	e18d      	b.n	800b07e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad62:	bf00      	nop
    return;
 800ad64:	e18b      	b.n	800b07e <HAL_UART_IRQHandler+0x5ae>
 800ad66:	bf00      	nop
 800ad68:	04000120 	.word	0x04000120
 800ad6c:	0800bb57 	.word	0x0800bb57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	f040 8146 	bne.w	800b006 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad7e:	f003 0310 	and.w	r3, r3, #16
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 813f 	beq.w	800b006 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad8c:	f003 0310 	and.w	r3, r3, #16
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 8138 	beq.w	800b006 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2210      	movs	r2, #16
 800ad9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada8:	2b40      	cmp	r3, #64	; 0x40
 800adaa:	f040 80b4 	bne.w	800af16 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800adba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 815f 	beq.w	800b082 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800adca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adce:	429a      	cmp	r2, r3
 800add0:	f080 8157 	bcs.w	800b082 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0320 	and.w	r3, r3, #32
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 8085 	bne.w	800aefa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	461a      	mov	r2, r3
 800ae16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ae1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae2a:	e841 2300 	strex	r3, r2, [r1]
 800ae2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1da      	bne.n	800adf0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3308      	adds	r3, #8
 800ae40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae44:	e853 3f00 	ldrex	r3, [r3]
 800ae48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae4c:	f023 0301 	bic.w	r3, r3, #1
 800ae50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3308      	adds	r3, #8
 800ae5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ae6a:	e841 2300 	strex	r3, r2, [r1]
 800ae6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1e1      	bne.n	800ae3a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3308      	adds	r3, #8
 800ae7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ae86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3308      	adds	r3, #8
 800ae96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ae9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ae9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aea0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aea2:	e841 2300 	strex	r3, r2, [r1]
 800aea6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e3      	bne.n	800ae76 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2220      	movs	r2, #32
 800aeb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aec2:	e853 3f00 	ldrex	r3, [r3]
 800aec6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeca:	f023 0310 	bic.w	r3, r3, #16
 800aece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aedc:	65bb      	str	r3, [r7, #88]	; 0x58
 800aede:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aee4:	e841 2300 	strex	r3, r2, [r1]
 800aee8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aeea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1e4      	bne.n	800aeba <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fb fb2a 	bl	800654e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af06:	b29b      	uxth	r3, r3
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f8de 	bl	800b0d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af14:	e0b5      	b.n	800b082 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af22:	b29b      	uxth	r3, r3
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af30:	b29b      	uxth	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 80a7 	beq.w	800b086 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800af38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 80a2 	beq.w	800b086 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4a:	e853 3f00 	ldrex	r3, [r3]
 800af4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	461a      	mov	r2, r3
 800af60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af64:	647b      	str	r3, [r7, #68]	; 0x44
 800af66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af6c:	e841 2300 	strex	r3, r2, [r1]
 800af70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e4      	bne.n	800af42 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3308      	adds	r3, #8
 800af7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	e853 3f00 	ldrex	r3, [r3]
 800af86:	623b      	str	r3, [r7, #32]
   return(result);
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	f023 0301 	bic.w	r3, r3, #1
 800af8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3308      	adds	r3, #8
 800af98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800af9c:	633a      	str	r2, [r7, #48]	; 0x30
 800af9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afa4:	e841 2300 	strex	r3, r2, [r1]
 800afa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e3      	bne.n	800af78 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2220      	movs	r2, #32
 800afb4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	e853 3f00 	ldrex	r3, [r3]
 800afce:	60fb      	str	r3, [r7, #12]
   return(result);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f023 0310 	bic.w	r3, r3, #16
 800afd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800afe4:	61fb      	str	r3, [r7, #28]
 800afe6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe8:	69b9      	ldr	r1, [r7, #24]
 800afea:	69fa      	ldr	r2, [r7, #28]
 800afec:	e841 2300 	strex	r3, r2, [r1]
 800aff0:	617b      	str	r3, [r7, #20]
   return(result);
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1e4      	bne.n	800afc2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800affc:	4619      	mov	r1, r3
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f866 	bl	800b0d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b004:	e03f      	b.n	800b086 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b00a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00e      	beq.n	800b030 <HAL_UART_IRQHandler+0x560>
 800b012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d008      	beq.n	800b030 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b026:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f001 f864 	bl	800c0f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b02e:	e02d      	b.n	800b08c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00e      	beq.n	800b05a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b044:	2b00      	cmp	r3, #0
 800b046:	d008      	beq.n	800b05a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d01c      	beq.n	800b08a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	4798      	blx	r3
    }
    return;
 800b058:	e017      	b.n	800b08a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b062:	2b00      	cmp	r3, #0
 800b064:	d012      	beq.n	800b08c <HAL_UART_IRQHandler+0x5bc>
 800b066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00c      	beq.n	800b08c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 feb5 	bl	800bde2 <UART_EndTransmit_IT>
    return;
 800b078:	e008      	b.n	800b08c <HAL_UART_IRQHandler+0x5bc>
      return;
 800b07a:	bf00      	nop
 800b07c:	e006      	b.n	800b08c <HAL_UART_IRQHandler+0x5bc>
    return;
 800b07e:	bf00      	nop
 800b080:	e004      	b.n	800b08c <HAL_UART_IRQHandler+0x5bc>
      return;
 800b082:	bf00      	nop
 800b084:	e002      	b.n	800b08c <HAL_UART_IRQHandler+0x5bc>
      return;
 800b086:	bf00      	nop
 800b088:	e000      	b.n	800b08c <HAL_UART_IRQHandler+0x5bc>
    return;
 800b08a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b08c:	37e8      	adds	r7, #232	; 0xe8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop

0800b094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0ec:	b08a      	sub	sp, #40	; 0x28
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	689a      	ldr	r2, [r3, #8]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	431a      	orrs	r2, r3
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	431a      	orrs	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	69db      	ldr	r3, [r3, #28]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	4b9e      	ldr	r3, [pc, #632]	; (800b390 <UART_SetConfig+0x2a8>)
 800b118:	4013      	ands	r3, r2
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	6812      	ldr	r2, [r2, #0]
 800b11e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b120:	430b      	orrs	r3, r1
 800b122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68da      	ldr	r2, [r3, #12]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	430a      	orrs	r2, r1
 800b138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	699b      	ldr	r3, [r3, #24]
 800b13e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a93      	ldr	r2, [pc, #588]	; (800b394 <UART_SetConfig+0x2ac>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d004      	beq.n	800b154 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b150:	4313      	orrs	r3, r2
 800b152:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b164:	430a      	orrs	r2, r1
 800b166:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a8a      	ldr	r2, [pc, #552]	; (800b398 <UART_SetConfig+0x2b0>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d126      	bne.n	800b1c0 <UART_SetConfig+0xd8>
 800b172:	4b8a      	ldr	r3, [pc, #552]	; (800b39c <UART_SetConfig+0x2b4>)
 800b174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b178:	f003 0303 	and.w	r3, r3, #3
 800b17c:	2b03      	cmp	r3, #3
 800b17e:	d81b      	bhi.n	800b1b8 <UART_SetConfig+0xd0>
 800b180:	a201      	add	r2, pc, #4	; (adr r2, 800b188 <UART_SetConfig+0xa0>)
 800b182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b186:	bf00      	nop
 800b188:	0800b199 	.word	0x0800b199
 800b18c:	0800b1a9 	.word	0x0800b1a9
 800b190:	0800b1a1 	.word	0x0800b1a1
 800b194:	0800b1b1 	.word	0x0800b1b1
 800b198:	2301      	movs	r3, #1
 800b19a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b19e:	e0ab      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1a6:	e0a7      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b1a8:	2304      	movs	r3, #4
 800b1aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1ae:	e0a3      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b1b0:	2308      	movs	r3, #8
 800b1b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1b6:	e09f      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b1b8:	2310      	movs	r3, #16
 800b1ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1be:	e09b      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a76      	ldr	r2, [pc, #472]	; (800b3a0 <UART_SetConfig+0x2b8>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d138      	bne.n	800b23c <UART_SetConfig+0x154>
 800b1ca:	4b74      	ldr	r3, [pc, #464]	; (800b39c <UART_SetConfig+0x2b4>)
 800b1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d0:	f003 030c 	and.w	r3, r3, #12
 800b1d4:	2b0c      	cmp	r3, #12
 800b1d6:	d82d      	bhi.n	800b234 <UART_SetConfig+0x14c>
 800b1d8:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <UART_SetConfig+0xf8>)
 800b1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1de:	bf00      	nop
 800b1e0:	0800b215 	.word	0x0800b215
 800b1e4:	0800b235 	.word	0x0800b235
 800b1e8:	0800b235 	.word	0x0800b235
 800b1ec:	0800b235 	.word	0x0800b235
 800b1f0:	0800b225 	.word	0x0800b225
 800b1f4:	0800b235 	.word	0x0800b235
 800b1f8:	0800b235 	.word	0x0800b235
 800b1fc:	0800b235 	.word	0x0800b235
 800b200:	0800b21d 	.word	0x0800b21d
 800b204:	0800b235 	.word	0x0800b235
 800b208:	0800b235 	.word	0x0800b235
 800b20c:	0800b235 	.word	0x0800b235
 800b210:	0800b22d 	.word	0x0800b22d
 800b214:	2300      	movs	r3, #0
 800b216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b21a:	e06d      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b21c:	2302      	movs	r3, #2
 800b21e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b222:	e069      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b224:	2304      	movs	r3, #4
 800b226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b22a:	e065      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b22c:	2308      	movs	r3, #8
 800b22e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b232:	e061      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b234:	2310      	movs	r3, #16
 800b236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b23a:	e05d      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a58      	ldr	r2, [pc, #352]	; (800b3a4 <UART_SetConfig+0x2bc>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d125      	bne.n	800b292 <UART_SetConfig+0x1aa>
 800b246:	4b55      	ldr	r3, [pc, #340]	; (800b39c <UART_SetConfig+0x2b4>)
 800b248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b250:	2b30      	cmp	r3, #48	; 0x30
 800b252:	d016      	beq.n	800b282 <UART_SetConfig+0x19a>
 800b254:	2b30      	cmp	r3, #48	; 0x30
 800b256:	d818      	bhi.n	800b28a <UART_SetConfig+0x1a2>
 800b258:	2b20      	cmp	r3, #32
 800b25a:	d00a      	beq.n	800b272 <UART_SetConfig+0x18a>
 800b25c:	2b20      	cmp	r3, #32
 800b25e:	d814      	bhi.n	800b28a <UART_SetConfig+0x1a2>
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <UART_SetConfig+0x182>
 800b264:	2b10      	cmp	r3, #16
 800b266:	d008      	beq.n	800b27a <UART_SetConfig+0x192>
 800b268:	e00f      	b.n	800b28a <UART_SetConfig+0x1a2>
 800b26a:	2300      	movs	r3, #0
 800b26c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b270:	e042      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b272:	2302      	movs	r3, #2
 800b274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b278:	e03e      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b27a:	2304      	movs	r3, #4
 800b27c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b280:	e03a      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b282:	2308      	movs	r3, #8
 800b284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b288:	e036      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b28a:	2310      	movs	r3, #16
 800b28c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b290:	e032      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a3f      	ldr	r2, [pc, #252]	; (800b394 <UART_SetConfig+0x2ac>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d12a      	bne.n	800b2f2 <UART_SetConfig+0x20a>
 800b29c:	4b3f      	ldr	r3, [pc, #252]	; (800b39c <UART_SetConfig+0x2b4>)
 800b29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b2a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2aa:	d01a      	beq.n	800b2e2 <UART_SetConfig+0x1fa>
 800b2ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2b0:	d81b      	bhi.n	800b2ea <UART_SetConfig+0x202>
 800b2b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2b6:	d00c      	beq.n	800b2d2 <UART_SetConfig+0x1ea>
 800b2b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2bc:	d815      	bhi.n	800b2ea <UART_SetConfig+0x202>
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <UART_SetConfig+0x1e2>
 800b2c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2c6:	d008      	beq.n	800b2da <UART_SetConfig+0x1f2>
 800b2c8:	e00f      	b.n	800b2ea <UART_SetConfig+0x202>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2d0:	e012      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2d8:	e00e      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b2da:	2304      	movs	r3, #4
 800b2dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2e0:	e00a      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b2e2:	2308      	movs	r3, #8
 800b2e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2e8:	e006      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b2ea:	2310      	movs	r3, #16
 800b2ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2f0:	e002      	b.n	800b2f8 <UART_SetConfig+0x210>
 800b2f2:	2310      	movs	r3, #16
 800b2f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a25      	ldr	r2, [pc, #148]	; (800b394 <UART_SetConfig+0x2ac>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	f040 808a 	bne.w	800b418 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b308:	2b08      	cmp	r3, #8
 800b30a:	d824      	bhi.n	800b356 <UART_SetConfig+0x26e>
 800b30c:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <UART_SetConfig+0x22c>)
 800b30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b312:	bf00      	nop
 800b314:	0800b339 	.word	0x0800b339
 800b318:	0800b357 	.word	0x0800b357
 800b31c:	0800b341 	.word	0x0800b341
 800b320:	0800b357 	.word	0x0800b357
 800b324:	0800b347 	.word	0x0800b347
 800b328:	0800b357 	.word	0x0800b357
 800b32c:	0800b357 	.word	0x0800b357
 800b330:	0800b357 	.word	0x0800b357
 800b334:	0800b34f 	.word	0x0800b34f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b338:	f7fd f9be 	bl	80086b8 <HAL_RCC_GetPCLK1Freq>
 800b33c:	61f8      	str	r0, [r7, #28]
        break;
 800b33e:	e010      	b.n	800b362 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b340:	4b19      	ldr	r3, [pc, #100]	; (800b3a8 <UART_SetConfig+0x2c0>)
 800b342:	61fb      	str	r3, [r7, #28]
        break;
 800b344:	e00d      	b.n	800b362 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b346:	f7fd f91f 	bl	8008588 <HAL_RCC_GetSysClockFreq>
 800b34a:	61f8      	str	r0, [r7, #28]
        break;
 800b34c:	e009      	b.n	800b362 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b34e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b352:	61fb      	str	r3, [r7, #28]
        break;
 800b354:	e005      	b.n	800b362 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800b356:	2300      	movs	r3, #0
 800b358:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b360:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 8109 	beq.w	800b57c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	685a      	ldr	r2, [r3, #4]
 800b36e:	4613      	mov	r3, r2
 800b370:	005b      	lsls	r3, r3, #1
 800b372:	4413      	add	r3, r2
 800b374:	69fa      	ldr	r2, [r7, #28]
 800b376:	429a      	cmp	r2, r3
 800b378:	d305      	bcc.n	800b386 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b380:	69fa      	ldr	r2, [r7, #28]
 800b382:	429a      	cmp	r2, r3
 800b384:	d912      	bls.n	800b3ac <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b38c:	e0f6      	b.n	800b57c <UART_SetConfig+0x494>
 800b38e:	bf00      	nop
 800b390:	efff69f3 	.word	0xefff69f3
 800b394:	40008000 	.word	0x40008000
 800b398:	40013800 	.word	0x40013800
 800b39c:	40021000 	.word	0x40021000
 800b3a0:	40004400 	.word	0x40004400
 800b3a4:	40004800 	.word	0x40004800
 800b3a8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	461c      	mov	r4, r3
 800b3b2:	4615      	mov	r5, r2
 800b3b4:	f04f 0200 	mov.w	r2, #0
 800b3b8:	f04f 0300 	mov.w	r3, #0
 800b3bc:	022b      	lsls	r3, r5, #8
 800b3be:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b3c2:	0222      	lsls	r2, r4, #8
 800b3c4:	68f9      	ldr	r1, [r7, #12]
 800b3c6:	6849      	ldr	r1, [r1, #4]
 800b3c8:	0849      	lsrs	r1, r1, #1
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	4688      	mov	r8, r1
 800b3ce:	4681      	mov	r9, r0
 800b3d0:	eb12 0a08 	adds.w	sl, r2, r8
 800b3d4:	eb43 0b09 	adc.w	fp, r3, r9
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	603b      	str	r3, [r7, #0]
 800b3e0:	607a      	str	r2, [r7, #4]
 800b3e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	4659      	mov	r1, fp
 800b3ea:	f7f5 fc4d 	bl	8000c88 <__aeabi_uldivmod>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3fc:	d308      	bcc.n	800b410 <UART_SetConfig+0x328>
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b404:	d204      	bcs.n	800b410 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	69ba      	ldr	r2, [r7, #24]
 800b40c:	60da      	str	r2, [r3, #12]
 800b40e:	e0b5      	b.n	800b57c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b416:	e0b1      	b.n	800b57c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	69db      	ldr	r3, [r3, #28]
 800b41c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b420:	d15d      	bne.n	800b4de <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800b422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b426:	2b08      	cmp	r3, #8
 800b428:	d827      	bhi.n	800b47a <UART_SetConfig+0x392>
 800b42a:	a201      	add	r2, pc, #4	; (adr r2, 800b430 <UART_SetConfig+0x348>)
 800b42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b430:	0800b455 	.word	0x0800b455
 800b434:	0800b45d 	.word	0x0800b45d
 800b438:	0800b465 	.word	0x0800b465
 800b43c:	0800b47b 	.word	0x0800b47b
 800b440:	0800b46b 	.word	0x0800b46b
 800b444:	0800b47b 	.word	0x0800b47b
 800b448:	0800b47b 	.word	0x0800b47b
 800b44c:	0800b47b 	.word	0x0800b47b
 800b450:	0800b473 	.word	0x0800b473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b454:	f7fd f930 	bl	80086b8 <HAL_RCC_GetPCLK1Freq>
 800b458:	61f8      	str	r0, [r7, #28]
        break;
 800b45a:	e014      	b.n	800b486 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b45c:	f7fd f942 	bl	80086e4 <HAL_RCC_GetPCLK2Freq>
 800b460:	61f8      	str	r0, [r7, #28]
        break;
 800b462:	e010      	b.n	800b486 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b464:	4b4c      	ldr	r3, [pc, #304]	; (800b598 <UART_SetConfig+0x4b0>)
 800b466:	61fb      	str	r3, [r7, #28]
        break;
 800b468:	e00d      	b.n	800b486 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b46a:	f7fd f88d 	bl	8008588 <HAL_RCC_GetSysClockFreq>
 800b46e:	61f8      	str	r0, [r7, #28]
        break;
 800b470:	e009      	b.n	800b486 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b476:	61fb      	str	r3, [r7, #28]
        break;
 800b478:	e005      	b.n	800b486 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800b47a:	2300      	movs	r3, #0
 800b47c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d077      	beq.n	800b57c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	005a      	lsls	r2, r3, #1
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	085b      	lsrs	r3, r3, #1
 800b496:	441a      	add	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	2b0f      	cmp	r3, #15
 800b4a6:	d916      	bls.n	800b4d6 <UART_SetConfig+0x3ee>
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ae:	d212      	bcs.n	800b4d6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	f023 030f 	bic.w	r3, r3, #15
 800b4b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	085b      	lsrs	r3, r3, #1
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	f003 0307 	and.w	r3, r3, #7
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	8afb      	ldrh	r3, [r7, #22]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	8afa      	ldrh	r2, [r7, #22]
 800b4d2:	60da      	str	r2, [r3, #12]
 800b4d4:	e052      	b.n	800b57c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b4dc:	e04e      	b.n	800b57c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4e2:	2b08      	cmp	r3, #8
 800b4e4:	d827      	bhi.n	800b536 <UART_SetConfig+0x44e>
 800b4e6:	a201      	add	r2, pc, #4	; (adr r2, 800b4ec <UART_SetConfig+0x404>)
 800b4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ec:	0800b511 	.word	0x0800b511
 800b4f0:	0800b519 	.word	0x0800b519
 800b4f4:	0800b521 	.word	0x0800b521
 800b4f8:	0800b537 	.word	0x0800b537
 800b4fc:	0800b527 	.word	0x0800b527
 800b500:	0800b537 	.word	0x0800b537
 800b504:	0800b537 	.word	0x0800b537
 800b508:	0800b537 	.word	0x0800b537
 800b50c:	0800b52f 	.word	0x0800b52f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b510:	f7fd f8d2 	bl	80086b8 <HAL_RCC_GetPCLK1Freq>
 800b514:	61f8      	str	r0, [r7, #28]
        break;
 800b516:	e014      	b.n	800b542 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b518:	f7fd f8e4 	bl	80086e4 <HAL_RCC_GetPCLK2Freq>
 800b51c:	61f8      	str	r0, [r7, #28]
        break;
 800b51e:	e010      	b.n	800b542 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b520:	4b1d      	ldr	r3, [pc, #116]	; (800b598 <UART_SetConfig+0x4b0>)
 800b522:	61fb      	str	r3, [r7, #28]
        break;
 800b524:	e00d      	b.n	800b542 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b526:	f7fd f82f 	bl	8008588 <HAL_RCC_GetSysClockFreq>
 800b52a:	61f8      	str	r0, [r7, #28]
        break;
 800b52c:	e009      	b.n	800b542 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b52e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b532:	61fb      	str	r3, [r7, #28]
        break;
 800b534:	e005      	b.n	800b542 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800b536:	2300      	movs	r3, #0
 800b538:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b540:	bf00      	nop
    }

    if (pclk != 0U)
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d019      	beq.n	800b57c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	085a      	lsrs	r2, r3, #1
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	441a      	add	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	fbb2 f3f3 	udiv	r3, r2, r3
 800b55a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	2b0f      	cmp	r3, #15
 800b560:	d909      	bls.n	800b576 <UART_SetConfig+0x48e>
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b568:	d205      	bcs.n	800b576 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	60da      	str	r2, [r3, #12]
 800b574:	e002      	b.n	800b57c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b588:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3728      	adds	r7, #40	; 0x28
 800b590:	46bd      	mov	sp, r7
 800b592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b596:	bf00      	nop
 800b598:	00f42400 	.word	0x00f42400

0800b59c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00a      	beq.n	800b5c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	430a      	orrs	r2, r1
 800b5c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ca:	f003 0302 	and.w	r3, r3, #2
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00a      	beq.n	800b5e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	430a      	orrs	r2, r1
 800b5e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ec:	f003 0304 	and.w	r3, r3, #4
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00a      	beq.n	800b60a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	430a      	orrs	r2, r1
 800b608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	f003 0308 	and.w	r3, r3, #8
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00a      	beq.n	800b62c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	430a      	orrs	r2, r1
 800b62a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	f003 0310 	and.w	r3, r3, #16
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00a      	beq.n	800b64e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	430a      	orrs	r2, r1
 800b64c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b652:	f003 0320 	and.w	r3, r3, #32
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00a      	beq.n	800b670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	430a      	orrs	r2, r1
 800b66e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01a      	beq.n	800b6b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	430a      	orrs	r2, r1
 800b690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b69a:	d10a      	bne.n	800b6b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	430a      	orrs	r2, r1
 800b6b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00a      	beq.n	800b6d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	430a      	orrs	r2, r1
 800b6d2:	605a      	str	r2, [r3, #4]
  }
}
 800b6d4:	bf00      	nop
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af02      	add	r7, sp, #8
 800b6e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6f0:	f7f9 fa0c 	bl	8004b0c <HAL_GetTick>
 800b6f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 0308 	and.w	r3, r3, #8
 800b700:	2b08      	cmp	r3, #8
 800b702:	d10e      	bne.n	800b722 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f82d 	bl	800b772 <UART_WaitOnFlagUntilTimeout>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e023      	b.n	800b76a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 0304 	and.w	r3, r3, #4
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d10e      	bne.n	800b74e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f817 	bl	800b772 <UART_WaitOnFlagUntilTimeout>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e00d      	b.n	800b76a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2220      	movs	r2, #32
 800b752:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2220      	movs	r2, #32
 800b758:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b09c      	sub	sp, #112	; 0x70
 800b776:	af00      	add	r7, sp, #0
 800b778:	60f8      	str	r0, [r7, #12]
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	603b      	str	r3, [r7, #0]
 800b77e:	4613      	mov	r3, r2
 800b780:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b782:	e0a5      	b.n	800b8d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78a:	f000 80a1 	beq.w	800b8d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b78e:	f7f9 f9bd 	bl	8004b0c <HAL_GetTick>
 800b792:	4602      	mov	r2, r0
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d302      	bcc.n	800b7a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b79e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d13e      	bne.n	800b822 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ac:	e853 3f00 	ldrex	r3, [r3]
 800b7b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b7b8:	667b      	str	r3, [r7, #100]	; 0x64
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7ca:	e841 2300 	strex	r3, r2, [r1]
 800b7ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b7d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1e6      	bne.n	800b7a4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3308      	adds	r3, #8
 800b7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e0:	e853 3f00 	ldrex	r3, [r3]
 800b7e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e8:	f023 0301 	bic.w	r3, r3, #1
 800b7ec:	663b      	str	r3, [r7, #96]	; 0x60
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7f6:	64ba      	str	r2, [r7, #72]	; 0x48
 800b7f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7fe:	e841 2300 	strex	r3, r2, [r1]
 800b802:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b806:	2b00      	cmp	r3, #0
 800b808:	d1e5      	bne.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2220      	movs	r2, #32
 800b80e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2220      	movs	r2, #32
 800b814:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b81e:	2303      	movs	r3, #3
 800b820:	e067      	b.n	800b8f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 0304 	and.w	r3, r3, #4
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d04f      	beq.n	800b8d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	69db      	ldr	r3, [r3, #28]
 800b836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b83a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b83e:	d147      	bne.n	800b8d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b848:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	e853 3f00 	ldrex	r3, [r3]
 800b856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b85e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	461a      	mov	r2, r3
 800b866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b868:	637b      	str	r3, [r7, #52]	; 0x34
 800b86a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b86e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b870:	e841 2300 	strex	r3, r2, [r1]
 800b874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1e6      	bne.n	800b84a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	3308      	adds	r3, #8
 800b882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	e853 3f00 	ldrex	r3, [r3]
 800b88a:	613b      	str	r3, [r7, #16]
   return(result);
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	f023 0301 	bic.w	r3, r3, #1
 800b892:	66bb      	str	r3, [r7, #104]	; 0x68
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3308      	adds	r3, #8
 800b89a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b89c:	623a      	str	r2, [r7, #32]
 800b89e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a0:	69f9      	ldr	r1, [r7, #28]
 800b8a2:	6a3a      	ldr	r2, [r7, #32]
 800b8a4:	e841 2300 	strex	r3, r2, [r1]
 800b8a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1e5      	bne.n	800b87c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2220      	movs	r2, #32
 800b8b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2220      	movs	r2, #32
 800b8ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2220      	movs	r2, #32
 800b8c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	e010      	b.n	800b8f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	69da      	ldr	r2, [r3, #28]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	4013      	ands	r3, r2
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	bf0c      	ite	eq
 800b8e0:	2301      	moveq	r3, #1
 800b8e2:	2300      	movne	r3, #0
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	79fb      	ldrb	r3, [r7, #7]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	f43f af4a 	beq.w	800b784 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3770      	adds	r7, #112	; 0x70
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b097      	sub	sp, #92	; 0x5c
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	4613      	mov	r3, r2
 800b908:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	88fa      	ldrh	r2, [r7, #6]
 800b914:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	88fa      	ldrh	r2, [r7, #6]
 800b91c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b92e:	d10e      	bne.n	800b94e <UART_Start_Receive_IT+0x52>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d105      	bne.n	800b944 <UART_Start_Receive_IT+0x48>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b93e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b942:	e02d      	b.n	800b9a0 <UART_Start_Receive_IT+0xa4>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	22ff      	movs	r2, #255	; 0xff
 800b948:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b94c:	e028      	b.n	800b9a0 <UART_Start_Receive_IT+0xa4>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10d      	bne.n	800b972 <UART_Start_Receive_IT+0x76>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d104      	bne.n	800b968 <UART_Start_Receive_IT+0x6c>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	22ff      	movs	r2, #255	; 0xff
 800b962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b966:	e01b      	b.n	800b9a0 <UART_Start_Receive_IT+0xa4>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	227f      	movs	r2, #127	; 0x7f
 800b96c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b970:	e016      	b.n	800b9a0 <UART_Start_Receive_IT+0xa4>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b97a:	d10d      	bne.n	800b998 <UART_Start_Receive_IT+0x9c>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d104      	bne.n	800b98e <UART_Start_Receive_IT+0x92>
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	227f      	movs	r2, #127	; 0x7f
 800b988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b98c:	e008      	b.n	800b9a0 <UART_Start_Receive_IT+0xa4>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	223f      	movs	r2, #63	; 0x3f
 800b992:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b996:	e003      	b.n	800b9a0 <UART_Start_Receive_IT+0xa4>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2222      	movs	r2, #34	; 0x22
 800b9ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9b8:	e853 3f00 	ldrex	r3, [r3]
 800b9bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c0:	f043 0301 	orr.w	r3, r3, #1
 800b9c4:	657b      	str	r3, [r7, #84]	; 0x54
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9ce:	64ba      	str	r2, [r7, #72]	; 0x48
 800b9d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9d6:	e841 2300 	strex	r3, r2, [r1]
 800b9da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1e5      	bne.n	800b9ae <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ea:	d107      	bne.n	800b9fc <UART_Start_Receive_IT+0x100>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4a24      	ldr	r2, [pc, #144]	; (800ba88 <UART_Start_Receive_IT+0x18c>)
 800b9f8:	665a      	str	r2, [r3, #100]	; 0x64
 800b9fa:	e002      	b.n	800ba02 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4a23      	ldr	r2, [pc, #140]	; (800ba8c <UART_Start_Receive_IT+0x190>)
 800ba00:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d019      	beq.n	800ba46 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1a:	e853 3f00 	ldrex	r3, [r3]
 800ba1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ba26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba30:	637b      	str	r3, [r7, #52]	; 0x34
 800ba32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba38:	e841 2300 	strex	r3, r2, [r1]
 800ba3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e6      	bne.n	800ba12 <UART_Start_Receive_IT+0x116>
 800ba44:	e018      	b.n	800ba78 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	e853 3f00 	ldrex	r3, [r3]
 800ba52:	613b      	str	r3, [r7, #16]
   return(result);
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	f043 0320 	orr.w	r3, r3, #32
 800ba5a:	653b      	str	r3, [r7, #80]	; 0x50
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	461a      	mov	r2, r3
 800ba62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba64:	623b      	str	r3, [r7, #32]
 800ba66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba68:	69f9      	ldr	r1, [r7, #28]
 800ba6a:	6a3a      	ldr	r2, [r7, #32]
 800ba6c:	e841 2300 	strex	r3, r2, [r1]
 800ba70:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1e6      	bne.n	800ba46 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	375c      	adds	r7, #92	; 0x5c
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	0800bf97 	.word	0x0800bf97
 800ba8c:	0800be37 	.word	0x0800be37

0800ba90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b095      	sub	sp, #84	; 0x54
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa0:	e853 3f00 	ldrex	r3, [r3]
 800baa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800baac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	461a      	mov	r2, r3
 800bab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab6:	643b      	str	r3, [r7, #64]	; 0x40
 800bab8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800babc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800babe:	e841 2300 	strex	r3, r2, [r1]
 800bac2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1e6      	bne.n	800ba98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3308      	adds	r3, #8
 800bad0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	f023 0301 	bic.w	r3, r3, #1
 800bae0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3308      	adds	r3, #8
 800bae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800baec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800baf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baf2:	e841 2300 	strex	r3, r2, [r1]
 800baf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1e5      	bne.n	800baca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d118      	bne.n	800bb38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	e853 3f00 	ldrex	r3, [r3]
 800bb12:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	f023 0310 	bic.w	r3, r3, #16
 800bb1a:	647b      	str	r3, [r7, #68]	; 0x44
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	461a      	mov	r2, r3
 800bb22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb24:	61bb      	str	r3, [r7, #24]
 800bb26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb28:	6979      	ldr	r1, [r7, #20]
 800bb2a:	69ba      	ldr	r2, [r7, #24]
 800bb2c:	e841 2300 	strex	r3, r2, [r1]
 800bb30:	613b      	str	r3, [r7, #16]
   return(result);
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1e6      	bne.n	800bb06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2220      	movs	r2, #32
 800bb3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bb4a:	bf00      	nop
 800bb4c:	3754      	adds	r7, #84	; 0x54
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b084      	sub	sp, #16
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f7ff fa97 	bl	800b0a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb7a:	bf00      	nop
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b084      	sub	sp, #16
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb94:	2200      	movs	r2, #0
 800bb96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d004      	beq.n	800bbaa <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d11c      	bne.n	800bbe4 <UART_DMATxAbortCallback+0x62>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	220f      	movs	r2, #15
 800bbc8:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2220      	movs	r2, #32
 800bbce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2220      	movs	r2, #32
 800bbd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f7ff fa6d 	bl	800b0bc <HAL_UART_AbortCpltCallback>
 800bbe2:	e000      	b.n	800bbe6 <UART_DMATxAbortCallback+0x64>
      return;
 800bbe4:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf8:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbfe:	2200      	movs	r2, #0
 800bc00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d004      	beq.n	800bc14 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d126      	bne.n	800bc62 <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	220f      	movs	r2, #15
 800bc32:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	8b1b      	ldrh	r3, [r3, #24]
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f042 0208 	orr.w	r2, r2, #8
 800bc44:	b292      	uxth	r2, r2
 800bc46:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2220      	movs	r2, #32
 800bc4c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2220      	movs	r2, #32
 800bc52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f7ff fa2e 	bl	800b0bc <HAL_UART_AbortCpltCallback>
 800bc60:	e000      	b.n	800bc64 <UART_DMARxAbortCallback+0x78>
      return;
 800bc62:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b08f      	sub	sp, #60	; 0x3c
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc76:	2b21      	cmp	r3, #33	; 0x21
 800bc78:	d14d      	bne.n	800bd16 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d132      	bne.n	800bcec <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8c:	6a3b      	ldr	r3, [r7, #32]
 800bc8e:	e853 3f00 	ldrex	r3, [r3]
 800bc92:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc9a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	461a      	mov	r2, r3
 800bca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bca6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcac:	e841 2300 	strex	r3, r2, [r1]
 800bcb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1e6      	bne.n	800bc86 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	e853 3f00 	ldrex	r3, [r3]
 800bcc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bccc:	633b      	str	r3, [r7, #48]	; 0x30
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd6:	61bb      	str	r3, [r7, #24]
 800bcd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcda:	6979      	ldr	r1, [r7, #20]
 800bcdc:	69ba      	ldr	r2, [r7, #24]
 800bcde:	e841 2300 	strex	r3, r2, [r1]
 800bce2:	613b      	str	r3, [r7, #16]
   return(result);
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e6      	bne.n	800bcb8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bcea:	e014      	b.n	800bd16 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcf0:	781a      	ldrb	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	b292      	uxth	r2, r2
 800bcf8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcfe:	1c5a      	adds	r2, r3, #1
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800bd16:	bf00      	nop
 800bd18:	373c      	adds	r7, #60	; 0x3c
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd22:	b480      	push	{r7}
 800bd24:	b091      	sub	sp, #68	; 0x44
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd2e:	2b21      	cmp	r3, #33	; 0x21
 800bd30:	d151      	bne.n	800bdd6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d132      	bne.n	800bda4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd46:	e853 3f00 	ldrex	r3, [r3]
 800bd4a:	623b      	str	r3, [r7, #32]
   return(result);
 800bd4c:	6a3b      	ldr	r3, [r7, #32]
 800bd4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd52:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5c:	633b      	str	r3, [r7, #48]	; 0x30
 800bd5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd64:	e841 2300 	strex	r3, r2, [r1]
 800bd68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1e6      	bne.n	800bd3e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd84:	637b      	str	r3, [r7, #52]	; 0x34
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8e:	61fb      	str	r3, [r7, #28]
 800bd90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	69b9      	ldr	r1, [r7, #24]
 800bd94:	69fa      	ldr	r2, [r7, #28]
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	617b      	str	r3, [r7, #20]
   return(result);
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e6      	bne.n	800bd70 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bda2:	e018      	b.n	800bdd6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bda8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bdaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdac:	881a      	ldrh	r2, [r3, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdb6:	b292      	uxth	r2, r2
 800bdb8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdbe:	1c9a      	adds	r2, r3, #2
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800bdd6:	bf00      	nop
 800bdd8:	3744      	adds	r7, #68	; 0x44
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b088      	sub	sp, #32
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	e853 3f00 	ldrex	r3, [r3]
 800bdf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdfe:	61fb      	str	r3, [r7, #28]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	461a      	mov	r2, r3
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	61bb      	str	r3, [r7, #24]
 800be0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0c:	6979      	ldr	r1, [r7, #20]
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	e841 2300 	strex	r3, r2, [r1]
 800be14:	613b      	str	r3, [r7, #16]
   return(result);
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1e6      	bne.n	800bdea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2220      	movs	r2, #32
 800be20:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff f933 	bl	800b094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be2e:	bf00      	nop
 800be30:	3720      	adds	r7, #32
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b096      	sub	sp, #88	; 0x58
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be4c:	2b22      	cmp	r3, #34	; 0x22
 800be4e:	f040 8094 	bne.w	800bf7a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be58:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be5c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800be60:	b2d9      	uxtb	r1, r3
 800be62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800be66:	b2da      	uxtb	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6c:	400a      	ands	r2, r1
 800be6e:	b2d2      	uxtb	r2, r2
 800be70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be76:	1c5a      	adds	r2, r3, #1
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800be82:	b29b      	uxth	r3, r3
 800be84:	3b01      	subs	r3, #1
 800be86:	b29a      	uxth	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800be94:	b29b      	uxth	r3, r3
 800be96:	2b00      	cmp	r3, #0
 800be98:	d179      	bne.n	800bf8e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea2:	e853 3f00 	ldrex	r3, [r3]
 800bea6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beae:	653b      	str	r3, [r7, #80]	; 0x50
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	461a      	mov	r2, r3
 800beb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb8:	647b      	str	r3, [r7, #68]	; 0x44
 800beba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bec0:	e841 2300 	strex	r3, r2, [r1]
 800bec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1e6      	bne.n	800be9a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3308      	adds	r3, #8
 800bed2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	e853 3f00 	ldrex	r3, [r3]
 800beda:	623b      	str	r3, [r7, #32]
   return(result);
 800bedc:	6a3b      	ldr	r3, [r7, #32]
 800bede:	f023 0301 	bic.w	r3, r3, #1
 800bee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	3308      	adds	r3, #8
 800beea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800beec:	633a      	str	r2, [r7, #48]	; 0x30
 800beee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bef4:	e841 2300 	strex	r3, r2, [r1]
 800bef8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1e5      	bne.n	800becc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2220      	movs	r2, #32
 800bf04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d12e      	bne.n	800bf72 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	e853 3f00 	ldrex	r3, [r3]
 800bf26:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f023 0310 	bic.w	r3, r3, #16
 800bf2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	461a      	mov	r2, r3
 800bf36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf38:	61fb      	str	r3, [r7, #28]
 800bf3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3c:	69b9      	ldr	r1, [r7, #24]
 800bf3e:	69fa      	ldr	r2, [r7, #28]
 800bf40:	e841 2300 	strex	r3, r2, [r1]
 800bf44:	617b      	str	r3, [r7, #20]
   return(result);
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1e6      	bne.n	800bf1a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	69db      	ldr	r3, [r3, #28]
 800bf52:	f003 0310 	and.w	r3, r3, #16
 800bf56:	2b10      	cmp	r3, #16
 800bf58:	d103      	bne.n	800bf62 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2210      	movs	r2, #16
 800bf60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff f8b0 	bl	800b0d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf70:	e00d      	b.n	800bf8e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7f6 fcc4 	bl	8002900 <HAL_UART_RxCpltCallback>
}
 800bf78:	e009      	b.n	800bf8e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	8b1b      	ldrh	r3, [r3, #24]
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f042 0208 	orr.w	r2, r2, #8
 800bf8a:	b292      	uxth	r2, r2
 800bf8c:	831a      	strh	r2, [r3, #24]
}
 800bf8e:	bf00      	nop
 800bf90:	3758      	adds	r7, #88	; 0x58
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b096      	sub	sp, #88	; 0x58
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfa4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfac:	2b22      	cmp	r3, #34	; 0x22
 800bfae:	f040 8094 	bne.w	800c0da <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bfb8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800bfc2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800bfc6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bfca:	4013      	ands	r3, r2
 800bfcc:	b29a      	uxth	r2, r3
 800bfce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfd6:	1c9a      	adds	r2, r3, #2
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d179      	bne.n	800c0ee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c00e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c018:	643b      	str	r3, [r7, #64]	; 0x40
 800c01a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c01e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e6      	bne.n	800bffa <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3308      	adds	r3, #8
 800c032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	e853 3f00 	ldrex	r3, [r3]
 800c03a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	f023 0301 	bic.w	r3, r3, #1
 800c042:	64bb      	str	r3, [r7, #72]	; 0x48
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3308      	adds	r3, #8
 800c04a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c04c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c04e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c054:	e841 2300 	strex	r3, r2, [r1]
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e5      	bne.n	800c02c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2220      	movs	r2, #32
 800c064:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c070:	2b01      	cmp	r3, #1
 800c072:	d12e      	bne.n	800c0d2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	e853 3f00 	ldrex	r3, [r3]
 800c086:	60bb      	str	r3, [r7, #8]
   return(result);
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	f023 0310 	bic.w	r3, r3, #16
 800c08e:	647b      	str	r3, [r7, #68]	; 0x44
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	461a      	mov	r2, r3
 800c096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c098:	61bb      	str	r3, [r7, #24]
 800c09a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09c:	6979      	ldr	r1, [r7, #20]
 800c09e:	69ba      	ldr	r2, [r7, #24]
 800c0a0:	e841 2300 	strex	r3, r2, [r1]
 800c0a4:	613b      	str	r3, [r7, #16]
   return(result);
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1e6      	bne.n	800c07a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	f003 0310 	and.w	r3, r3, #16
 800c0b6:	2b10      	cmp	r3, #16
 800c0b8:	d103      	bne.n	800c0c2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2210      	movs	r2, #16
 800c0c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff f800 	bl	800b0d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c0d0:	e00d      	b.n	800c0ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7f6 fc14 	bl	8002900 <HAL_UART_RxCpltCallback>
}
 800c0d8:	e009      	b.n	800c0ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	8b1b      	ldrh	r3, [r3, #24]
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f042 0208 	orr.w	r2, r2, #8
 800c0ea:	b292      	uxth	r2, r2
 800c0ec:	831a      	strh	r2, [r3, #24]
}
 800c0ee:	bf00      	nop
 800c0f0:	3758      	adds	r7, #88	; 0x58
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b083      	sub	sp, #12
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c0fe:	bf00      	nop
 800c100:	370c      	adds	r7, #12
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
	...

0800c10c <__errno>:
 800c10c:	4b01      	ldr	r3, [pc, #4]	; (800c114 <__errno+0x8>)
 800c10e:	6818      	ldr	r0, [r3, #0]
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	2000002c 	.word	0x2000002c

0800c118 <__libc_init_array>:
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	4d0d      	ldr	r5, [pc, #52]	; (800c150 <__libc_init_array+0x38>)
 800c11c:	4c0d      	ldr	r4, [pc, #52]	; (800c154 <__libc_init_array+0x3c>)
 800c11e:	1b64      	subs	r4, r4, r5
 800c120:	10a4      	asrs	r4, r4, #2
 800c122:	2600      	movs	r6, #0
 800c124:	42a6      	cmp	r6, r4
 800c126:	d109      	bne.n	800c13c <__libc_init_array+0x24>
 800c128:	4d0b      	ldr	r5, [pc, #44]	; (800c158 <__libc_init_array+0x40>)
 800c12a:	4c0c      	ldr	r4, [pc, #48]	; (800c15c <__libc_init_array+0x44>)
 800c12c:	f005 fb6c 	bl	8011808 <_init>
 800c130:	1b64      	subs	r4, r4, r5
 800c132:	10a4      	asrs	r4, r4, #2
 800c134:	2600      	movs	r6, #0
 800c136:	42a6      	cmp	r6, r4
 800c138:	d105      	bne.n	800c146 <__libc_init_array+0x2e>
 800c13a:	bd70      	pop	{r4, r5, r6, pc}
 800c13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c140:	4798      	blx	r3
 800c142:	3601      	adds	r6, #1
 800c144:	e7ee      	b.n	800c124 <__libc_init_array+0xc>
 800c146:	f855 3b04 	ldr.w	r3, [r5], #4
 800c14a:	4798      	blx	r3
 800c14c:	3601      	adds	r6, #1
 800c14e:	e7f2      	b.n	800c136 <__libc_init_array+0x1e>
 800c150:	080120fc 	.word	0x080120fc
 800c154:	080120fc 	.word	0x080120fc
 800c158:	080120fc 	.word	0x080120fc
 800c15c:	08012100 	.word	0x08012100

0800c160 <malloc>:
 800c160:	4b02      	ldr	r3, [pc, #8]	; (800c16c <malloc+0xc>)
 800c162:	4601      	mov	r1, r0
 800c164:	6818      	ldr	r0, [r3, #0]
 800c166:	f000 b877 	b.w	800c258 <_malloc_r>
 800c16a:	bf00      	nop
 800c16c:	2000002c 	.word	0x2000002c

0800c170 <memset>:
 800c170:	4402      	add	r2, r0
 800c172:	4603      	mov	r3, r0
 800c174:	4293      	cmp	r3, r2
 800c176:	d100      	bne.n	800c17a <memset+0xa>
 800c178:	4770      	bx	lr
 800c17a:	f803 1b01 	strb.w	r1, [r3], #1
 800c17e:	e7f9      	b.n	800c174 <memset+0x4>

0800c180 <_free_r>:
 800c180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c182:	2900      	cmp	r1, #0
 800c184:	d044      	beq.n	800c210 <_free_r+0x90>
 800c186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c18a:	9001      	str	r0, [sp, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f1a1 0404 	sub.w	r4, r1, #4
 800c192:	bfb8      	it	lt
 800c194:	18e4      	addlt	r4, r4, r3
 800c196:	f003 fcb7 	bl	800fb08 <__malloc_lock>
 800c19a:	4a1e      	ldr	r2, [pc, #120]	; (800c214 <_free_r+0x94>)
 800c19c:	9801      	ldr	r0, [sp, #4]
 800c19e:	6813      	ldr	r3, [r2, #0]
 800c1a0:	b933      	cbnz	r3, 800c1b0 <_free_r+0x30>
 800c1a2:	6063      	str	r3, [r4, #4]
 800c1a4:	6014      	str	r4, [r2, #0]
 800c1a6:	b003      	add	sp, #12
 800c1a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1ac:	f003 bcb2 	b.w	800fb14 <__malloc_unlock>
 800c1b0:	42a3      	cmp	r3, r4
 800c1b2:	d908      	bls.n	800c1c6 <_free_r+0x46>
 800c1b4:	6825      	ldr	r5, [r4, #0]
 800c1b6:	1961      	adds	r1, r4, r5
 800c1b8:	428b      	cmp	r3, r1
 800c1ba:	bf01      	itttt	eq
 800c1bc:	6819      	ldreq	r1, [r3, #0]
 800c1be:	685b      	ldreq	r3, [r3, #4]
 800c1c0:	1949      	addeq	r1, r1, r5
 800c1c2:	6021      	streq	r1, [r4, #0]
 800c1c4:	e7ed      	b.n	800c1a2 <_free_r+0x22>
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	b10b      	cbz	r3, 800c1d0 <_free_r+0x50>
 800c1cc:	42a3      	cmp	r3, r4
 800c1ce:	d9fa      	bls.n	800c1c6 <_free_r+0x46>
 800c1d0:	6811      	ldr	r1, [r2, #0]
 800c1d2:	1855      	adds	r5, r2, r1
 800c1d4:	42a5      	cmp	r5, r4
 800c1d6:	d10b      	bne.n	800c1f0 <_free_r+0x70>
 800c1d8:	6824      	ldr	r4, [r4, #0]
 800c1da:	4421      	add	r1, r4
 800c1dc:	1854      	adds	r4, r2, r1
 800c1de:	42a3      	cmp	r3, r4
 800c1e0:	6011      	str	r1, [r2, #0]
 800c1e2:	d1e0      	bne.n	800c1a6 <_free_r+0x26>
 800c1e4:	681c      	ldr	r4, [r3, #0]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	6053      	str	r3, [r2, #4]
 800c1ea:	4421      	add	r1, r4
 800c1ec:	6011      	str	r1, [r2, #0]
 800c1ee:	e7da      	b.n	800c1a6 <_free_r+0x26>
 800c1f0:	d902      	bls.n	800c1f8 <_free_r+0x78>
 800c1f2:	230c      	movs	r3, #12
 800c1f4:	6003      	str	r3, [r0, #0]
 800c1f6:	e7d6      	b.n	800c1a6 <_free_r+0x26>
 800c1f8:	6825      	ldr	r5, [r4, #0]
 800c1fa:	1961      	adds	r1, r4, r5
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	bf04      	itt	eq
 800c200:	6819      	ldreq	r1, [r3, #0]
 800c202:	685b      	ldreq	r3, [r3, #4]
 800c204:	6063      	str	r3, [r4, #4]
 800c206:	bf04      	itt	eq
 800c208:	1949      	addeq	r1, r1, r5
 800c20a:	6021      	streq	r1, [r4, #0]
 800c20c:	6054      	str	r4, [r2, #4]
 800c20e:	e7ca      	b.n	800c1a6 <_free_r+0x26>
 800c210:	b003      	add	sp, #12
 800c212:	bd30      	pop	{r4, r5, pc}
 800c214:	2000077c 	.word	0x2000077c

0800c218 <sbrk_aligned>:
 800c218:	b570      	push	{r4, r5, r6, lr}
 800c21a:	4e0e      	ldr	r6, [pc, #56]	; (800c254 <sbrk_aligned+0x3c>)
 800c21c:	460c      	mov	r4, r1
 800c21e:	6831      	ldr	r1, [r6, #0]
 800c220:	4605      	mov	r5, r0
 800c222:	b911      	cbnz	r1, 800c22a <sbrk_aligned+0x12>
 800c224:	f000 ff94 	bl	800d150 <_sbrk_r>
 800c228:	6030      	str	r0, [r6, #0]
 800c22a:	4621      	mov	r1, r4
 800c22c:	4628      	mov	r0, r5
 800c22e:	f000 ff8f 	bl	800d150 <_sbrk_r>
 800c232:	1c43      	adds	r3, r0, #1
 800c234:	d00a      	beq.n	800c24c <sbrk_aligned+0x34>
 800c236:	1cc4      	adds	r4, r0, #3
 800c238:	f024 0403 	bic.w	r4, r4, #3
 800c23c:	42a0      	cmp	r0, r4
 800c23e:	d007      	beq.n	800c250 <sbrk_aligned+0x38>
 800c240:	1a21      	subs	r1, r4, r0
 800c242:	4628      	mov	r0, r5
 800c244:	f000 ff84 	bl	800d150 <_sbrk_r>
 800c248:	3001      	adds	r0, #1
 800c24a:	d101      	bne.n	800c250 <sbrk_aligned+0x38>
 800c24c:	f04f 34ff 	mov.w	r4, #4294967295
 800c250:	4620      	mov	r0, r4
 800c252:	bd70      	pop	{r4, r5, r6, pc}
 800c254:	20000780 	.word	0x20000780

0800c258 <_malloc_r>:
 800c258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c25c:	1ccd      	adds	r5, r1, #3
 800c25e:	f025 0503 	bic.w	r5, r5, #3
 800c262:	3508      	adds	r5, #8
 800c264:	2d0c      	cmp	r5, #12
 800c266:	bf38      	it	cc
 800c268:	250c      	movcc	r5, #12
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	4607      	mov	r7, r0
 800c26e:	db01      	blt.n	800c274 <_malloc_r+0x1c>
 800c270:	42a9      	cmp	r1, r5
 800c272:	d905      	bls.n	800c280 <_malloc_r+0x28>
 800c274:	230c      	movs	r3, #12
 800c276:	603b      	str	r3, [r7, #0]
 800c278:	2600      	movs	r6, #0
 800c27a:	4630      	mov	r0, r6
 800c27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c280:	4e2e      	ldr	r6, [pc, #184]	; (800c33c <_malloc_r+0xe4>)
 800c282:	f003 fc41 	bl	800fb08 <__malloc_lock>
 800c286:	6833      	ldr	r3, [r6, #0]
 800c288:	461c      	mov	r4, r3
 800c28a:	bb34      	cbnz	r4, 800c2da <_malloc_r+0x82>
 800c28c:	4629      	mov	r1, r5
 800c28e:	4638      	mov	r0, r7
 800c290:	f7ff ffc2 	bl	800c218 <sbrk_aligned>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	4604      	mov	r4, r0
 800c298:	d14d      	bne.n	800c336 <_malloc_r+0xde>
 800c29a:	6834      	ldr	r4, [r6, #0]
 800c29c:	4626      	mov	r6, r4
 800c29e:	2e00      	cmp	r6, #0
 800c2a0:	d140      	bne.n	800c324 <_malloc_r+0xcc>
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	4631      	mov	r1, r6
 800c2a6:	4638      	mov	r0, r7
 800c2a8:	eb04 0803 	add.w	r8, r4, r3
 800c2ac:	f000 ff50 	bl	800d150 <_sbrk_r>
 800c2b0:	4580      	cmp	r8, r0
 800c2b2:	d13a      	bne.n	800c32a <_malloc_r+0xd2>
 800c2b4:	6821      	ldr	r1, [r4, #0]
 800c2b6:	3503      	adds	r5, #3
 800c2b8:	1a6d      	subs	r5, r5, r1
 800c2ba:	f025 0503 	bic.w	r5, r5, #3
 800c2be:	3508      	adds	r5, #8
 800c2c0:	2d0c      	cmp	r5, #12
 800c2c2:	bf38      	it	cc
 800c2c4:	250c      	movcc	r5, #12
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	4638      	mov	r0, r7
 800c2ca:	f7ff ffa5 	bl	800c218 <sbrk_aligned>
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	d02b      	beq.n	800c32a <_malloc_r+0xd2>
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	442b      	add	r3, r5
 800c2d6:	6023      	str	r3, [r4, #0]
 800c2d8:	e00e      	b.n	800c2f8 <_malloc_r+0xa0>
 800c2da:	6822      	ldr	r2, [r4, #0]
 800c2dc:	1b52      	subs	r2, r2, r5
 800c2de:	d41e      	bmi.n	800c31e <_malloc_r+0xc6>
 800c2e0:	2a0b      	cmp	r2, #11
 800c2e2:	d916      	bls.n	800c312 <_malloc_r+0xba>
 800c2e4:	1961      	adds	r1, r4, r5
 800c2e6:	42a3      	cmp	r3, r4
 800c2e8:	6025      	str	r5, [r4, #0]
 800c2ea:	bf18      	it	ne
 800c2ec:	6059      	strne	r1, [r3, #4]
 800c2ee:	6863      	ldr	r3, [r4, #4]
 800c2f0:	bf08      	it	eq
 800c2f2:	6031      	streq	r1, [r6, #0]
 800c2f4:	5162      	str	r2, [r4, r5]
 800c2f6:	604b      	str	r3, [r1, #4]
 800c2f8:	4638      	mov	r0, r7
 800c2fa:	f104 060b 	add.w	r6, r4, #11
 800c2fe:	f003 fc09 	bl	800fb14 <__malloc_unlock>
 800c302:	f026 0607 	bic.w	r6, r6, #7
 800c306:	1d23      	adds	r3, r4, #4
 800c308:	1af2      	subs	r2, r6, r3
 800c30a:	d0b6      	beq.n	800c27a <_malloc_r+0x22>
 800c30c:	1b9b      	subs	r3, r3, r6
 800c30e:	50a3      	str	r3, [r4, r2]
 800c310:	e7b3      	b.n	800c27a <_malloc_r+0x22>
 800c312:	6862      	ldr	r2, [r4, #4]
 800c314:	42a3      	cmp	r3, r4
 800c316:	bf0c      	ite	eq
 800c318:	6032      	streq	r2, [r6, #0]
 800c31a:	605a      	strne	r2, [r3, #4]
 800c31c:	e7ec      	b.n	800c2f8 <_malloc_r+0xa0>
 800c31e:	4623      	mov	r3, r4
 800c320:	6864      	ldr	r4, [r4, #4]
 800c322:	e7b2      	b.n	800c28a <_malloc_r+0x32>
 800c324:	4634      	mov	r4, r6
 800c326:	6876      	ldr	r6, [r6, #4]
 800c328:	e7b9      	b.n	800c29e <_malloc_r+0x46>
 800c32a:	230c      	movs	r3, #12
 800c32c:	603b      	str	r3, [r7, #0]
 800c32e:	4638      	mov	r0, r7
 800c330:	f003 fbf0 	bl	800fb14 <__malloc_unlock>
 800c334:	e7a1      	b.n	800c27a <_malloc_r+0x22>
 800c336:	6025      	str	r5, [r4, #0]
 800c338:	e7de      	b.n	800c2f8 <_malloc_r+0xa0>
 800c33a:	bf00      	nop
 800c33c:	2000077c 	.word	0x2000077c

0800c340 <__cvt>:
 800c340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c344:	ec55 4b10 	vmov	r4, r5, d0
 800c348:	2d00      	cmp	r5, #0
 800c34a:	460e      	mov	r6, r1
 800c34c:	4619      	mov	r1, r3
 800c34e:	462b      	mov	r3, r5
 800c350:	bfbb      	ittet	lt
 800c352:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c356:	461d      	movlt	r5, r3
 800c358:	2300      	movge	r3, #0
 800c35a:	232d      	movlt	r3, #45	; 0x2d
 800c35c:	700b      	strb	r3, [r1, #0]
 800c35e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c360:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c364:	4691      	mov	r9, r2
 800c366:	f023 0820 	bic.w	r8, r3, #32
 800c36a:	bfbc      	itt	lt
 800c36c:	4622      	movlt	r2, r4
 800c36e:	4614      	movlt	r4, r2
 800c370:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c374:	d005      	beq.n	800c382 <__cvt+0x42>
 800c376:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c37a:	d100      	bne.n	800c37e <__cvt+0x3e>
 800c37c:	3601      	adds	r6, #1
 800c37e:	2102      	movs	r1, #2
 800c380:	e000      	b.n	800c384 <__cvt+0x44>
 800c382:	2103      	movs	r1, #3
 800c384:	ab03      	add	r3, sp, #12
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	ab02      	add	r3, sp, #8
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	ec45 4b10 	vmov	d0, r4, r5
 800c390:	4653      	mov	r3, sl
 800c392:	4632      	mov	r2, r6
 800c394:	f001 ffe8 	bl	800e368 <_dtoa_r>
 800c398:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c39c:	4607      	mov	r7, r0
 800c39e:	d102      	bne.n	800c3a6 <__cvt+0x66>
 800c3a0:	f019 0f01 	tst.w	r9, #1
 800c3a4:	d022      	beq.n	800c3ec <__cvt+0xac>
 800c3a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c3aa:	eb07 0906 	add.w	r9, r7, r6
 800c3ae:	d110      	bne.n	800c3d2 <__cvt+0x92>
 800c3b0:	783b      	ldrb	r3, [r7, #0]
 800c3b2:	2b30      	cmp	r3, #48	; 0x30
 800c3b4:	d10a      	bne.n	800c3cc <__cvt+0x8c>
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	4629      	mov	r1, r5
 800c3be:	f7f4 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3c2:	b918      	cbnz	r0, 800c3cc <__cvt+0x8c>
 800c3c4:	f1c6 0601 	rsb	r6, r6, #1
 800c3c8:	f8ca 6000 	str.w	r6, [sl]
 800c3cc:	f8da 3000 	ldr.w	r3, [sl]
 800c3d0:	4499      	add	r9, r3
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	4629      	mov	r1, r5
 800c3da:	f7f4 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3de:	b108      	cbz	r0, 800c3e4 <__cvt+0xa4>
 800c3e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c3e4:	2230      	movs	r2, #48	; 0x30
 800c3e6:	9b03      	ldr	r3, [sp, #12]
 800c3e8:	454b      	cmp	r3, r9
 800c3ea:	d307      	bcc.n	800c3fc <__cvt+0xbc>
 800c3ec:	9b03      	ldr	r3, [sp, #12]
 800c3ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3f0:	1bdb      	subs	r3, r3, r7
 800c3f2:	4638      	mov	r0, r7
 800c3f4:	6013      	str	r3, [r2, #0]
 800c3f6:	b004      	add	sp, #16
 800c3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fc:	1c59      	adds	r1, r3, #1
 800c3fe:	9103      	str	r1, [sp, #12]
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	e7f0      	b.n	800c3e6 <__cvt+0xa6>

0800c404 <__exponent>:
 800c404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c406:	4603      	mov	r3, r0
 800c408:	2900      	cmp	r1, #0
 800c40a:	bfb8      	it	lt
 800c40c:	4249      	neglt	r1, r1
 800c40e:	f803 2b02 	strb.w	r2, [r3], #2
 800c412:	bfb4      	ite	lt
 800c414:	222d      	movlt	r2, #45	; 0x2d
 800c416:	222b      	movge	r2, #43	; 0x2b
 800c418:	2909      	cmp	r1, #9
 800c41a:	7042      	strb	r2, [r0, #1]
 800c41c:	dd2a      	ble.n	800c474 <__exponent+0x70>
 800c41e:	f10d 0407 	add.w	r4, sp, #7
 800c422:	46a4      	mov	ip, r4
 800c424:	270a      	movs	r7, #10
 800c426:	46a6      	mov	lr, r4
 800c428:	460a      	mov	r2, r1
 800c42a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c42e:	fb07 1516 	mls	r5, r7, r6, r1
 800c432:	3530      	adds	r5, #48	; 0x30
 800c434:	2a63      	cmp	r2, #99	; 0x63
 800c436:	f104 34ff 	add.w	r4, r4, #4294967295
 800c43a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c43e:	4631      	mov	r1, r6
 800c440:	dcf1      	bgt.n	800c426 <__exponent+0x22>
 800c442:	3130      	adds	r1, #48	; 0x30
 800c444:	f1ae 0502 	sub.w	r5, lr, #2
 800c448:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c44c:	1c44      	adds	r4, r0, #1
 800c44e:	4629      	mov	r1, r5
 800c450:	4561      	cmp	r1, ip
 800c452:	d30a      	bcc.n	800c46a <__exponent+0x66>
 800c454:	f10d 0209 	add.w	r2, sp, #9
 800c458:	eba2 020e 	sub.w	r2, r2, lr
 800c45c:	4565      	cmp	r5, ip
 800c45e:	bf88      	it	hi
 800c460:	2200      	movhi	r2, #0
 800c462:	4413      	add	r3, r2
 800c464:	1a18      	subs	r0, r3, r0
 800c466:	b003      	add	sp, #12
 800c468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c46a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c46e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c472:	e7ed      	b.n	800c450 <__exponent+0x4c>
 800c474:	2330      	movs	r3, #48	; 0x30
 800c476:	3130      	adds	r1, #48	; 0x30
 800c478:	7083      	strb	r3, [r0, #2]
 800c47a:	70c1      	strb	r1, [r0, #3]
 800c47c:	1d03      	adds	r3, r0, #4
 800c47e:	e7f1      	b.n	800c464 <__exponent+0x60>

0800c480 <_printf_float>:
 800c480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c484:	ed2d 8b02 	vpush	{d8}
 800c488:	b08d      	sub	sp, #52	; 0x34
 800c48a:	460c      	mov	r4, r1
 800c48c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c490:	4616      	mov	r6, r2
 800c492:	461f      	mov	r7, r3
 800c494:	4605      	mov	r5, r0
 800c496:	f003 faab 	bl	800f9f0 <_localeconv_r>
 800c49a:	f8d0 a000 	ldr.w	sl, [r0]
 800c49e:	4650      	mov	r0, sl
 800c4a0:	f7f3 fe96 	bl	80001d0 <strlen>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	9305      	str	r3, [sp, #20]
 800c4ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c4b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c4b4:	3307      	adds	r3, #7
 800c4b6:	f023 0307 	bic.w	r3, r3, #7
 800c4ba:	f103 0208 	add.w	r2, r3, #8
 800c4be:	f8c8 2000 	str.w	r2, [r8]
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c4ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c4ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4d2:	9307      	str	r3, [sp, #28]
 800c4d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800c4d8:	ee08 0a10 	vmov	s16, r0
 800c4dc:	4b9f      	ldr	r3, [pc, #636]	; (800c75c <_printf_float+0x2dc>)
 800c4de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e6:	f7f4 fb21 	bl	8000b2c <__aeabi_dcmpun>
 800c4ea:	bb88      	cbnz	r0, 800c550 <_printf_float+0xd0>
 800c4ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4f0:	4b9a      	ldr	r3, [pc, #616]	; (800c75c <_printf_float+0x2dc>)
 800c4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f6:	f7f4 fafb 	bl	8000af0 <__aeabi_dcmple>
 800c4fa:	bb48      	cbnz	r0, 800c550 <_printf_float+0xd0>
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	2300      	movs	r3, #0
 800c500:	4640      	mov	r0, r8
 800c502:	4649      	mov	r1, r9
 800c504:	f7f4 faea 	bl	8000adc <__aeabi_dcmplt>
 800c508:	b110      	cbz	r0, 800c510 <_printf_float+0x90>
 800c50a:	232d      	movs	r3, #45	; 0x2d
 800c50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c510:	4b93      	ldr	r3, [pc, #588]	; (800c760 <_printf_float+0x2e0>)
 800c512:	4894      	ldr	r0, [pc, #592]	; (800c764 <_printf_float+0x2e4>)
 800c514:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c518:	bf94      	ite	ls
 800c51a:	4698      	movls	r8, r3
 800c51c:	4680      	movhi	r8, r0
 800c51e:	2303      	movs	r3, #3
 800c520:	6123      	str	r3, [r4, #16]
 800c522:	9b05      	ldr	r3, [sp, #20]
 800c524:	f023 0204 	bic.w	r2, r3, #4
 800c528:	6022      	str	r2, [r4, #0]
 800c52a:	f04f 0900 	mov.w	r9, #0
 800c52e:	9700      	str	r7, [sp, #0]
 800c530:	4633      	mov	r3, r6
 800c532:	aa0b      	add	r2, sp, #44	; 0x2c
 800c534:	4621      	mov	r1, r4
 800c536:	4628      	mov	r0, r5
 800c538:	f000 f9d8 	bl	800c8ec <_printf_common>
 800c53c:	3001      	adds	r0, #1
 800c53e:	f040 8090 	bne.w	800c662 <_printf_float+0x1e2>
 800c542:	f04f 30ff 	mov.w	r0, #4294967295
 800c546:	b00d      	add	sp, #52	; 0x34
 800c548:	ecbd 8b02 	vpop	{d8}
 800c54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c550:	4642      	mov	r2, r8
 800c552:	464b      	mov	r3, r9
 800c554:	4640      	mov	r0, r8
 800c556:	4649      	mov	r1, r9
 800c558:	f7f4 fae8 	bl	8000b2c <__aeabi_dcmpun>
 800c55c:	b140      	cbz	r0, 800c570 <_printf_float+0xf0>
 800c55e:	464b      	mov	r3, r9
 800c560:	2b00      	cmp	r3, #0
 800c562:	bfbc      	itt	lt
 800c564:	232d      	movlt	r3, #45	; 0x2d
 800c566:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c56a:	487f      	ldr	r0, [pc, #508]	; (800c768 <_printf_float+0x2e8>)
 800c56c:	4b7f      	ldr	r3, [pc, #508]	; (800c76c <_printf_float+0x2ec>)
 800c56e:	e7d1      	b.n	800c514 <_printf_float+0x94>
 800c570:	6863      	ldr	r3, [r4, #4]
 800c572:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c576:	9206      	str	r2, [sp, #24]
 800c578:	1c5a      	adds	r2, r3, #1
 800c57a:	d13f      	bne.n	800c5fc <_printf_float+0x17c>
 800c57c:	2306      	movs	r3, #6
 800c57e:	6063      	str	r3, [r4, #4]
 800c580:	9b05      	ldr	r3, [sp, #20]
 800c582:	6861      	ldr	r1, [r4, #4]
 800c584:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c588:	2300      	movs	r3, #0
 800c58a:	9303      	str	r3, [sp, #12]
 800c58c:	ab0a      	add	r3, sp, #40	; 0x28
 800c58e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c592:	ab09      	add	r3, sp, #36	; 0x24
 800c594:	ec49 8b10 	vmov	d0, r8, r9
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	6022      	str	r2, [r4, #0]
 800c59c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	f7ff fecd 	bl	800c340 <__cvt>
 800c5a6:	9b06      	ldr	r3, [sp, #24]
 800c5a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5aa:	2b47      	cmp	r3, #71	; 0x47
 800c5ac:	4680      	mov	r8, r0
 800c5ae:	d108      	bne.n	800c5c2 <_printf_float+0x142>
 800c5b0:	1cc8      	adds	r0, r1, #3
 800c5b2:	db02      	blt.n	800c5ba <_printf_float+0x13a>
 800c5b4:	6863      	ldr	r3, [r4, #4]
 800c5b6:	4299      	cmp	r1, r3
 800c5b8:	dd41      	ble.n	800c63e <_printf_float+0x1be>
 800c5ba:	f1ab 0b02 	sub.w	fp, fp, #2
 800c5be:	fa5f fb8b 	uxtb.w	fp, fp
 800c5c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c5c6:	d820      	bhi.n	800c60a <_printf_float+0x18a>
 800c5c8:	3901      	subs	r1, #1
 800c5ca:	465a      	mov	r2, fp
 800c5cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c5d0:	9109      	str	r1, [sp, #36]	; 0x24
 800c5d2:	f7ff ff17 	bl	800c404 <__exponent>
 800c5d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5d8:	1813      	adds	r3, r2, r0
 800c5da:	2a01      	cmp	r2, #1
 800c5dc:	4681      	mov	r9, r0
 800c5de:	6123      	str	r3, [r4, #16]
 800c5e0:	dc02      	bgt.n	800c5e8 <_printf_float+0x168>
 800c5e2:	6822      	ldr	r2, [r4, #0]
 800c5e4:	07d2      	lsls	r2, r2, #31
 800c5e6:	d501      	bpl.n	800c5ec <_printf_float+0x16c>
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	6123      	str	r3, [r4, #16]
 800c5ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d09c      	beq.n	800c52e <_printf_float+0xae>
 800c5f4:	232d      	movs	r3, #45	; 0x2d
 800c5f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5fa:	e798      	b.n	800c52e <_printf_float+0xae>
 800c5fc:	9a06      	ldr	r2, [sp, #24]
 800c5fe:	2a47      	cmp	r2, #71	; 0x47
 800c600:	d1be      	bne.n	800c580 <_printf_float+0x100>
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1bc      	bne.n	800c580 <_printf_float+0x100>
 800c606:	2301      	movs	r3, #1
 800c608:	e7b9      	b.n	800c57e <_printf_float+0xfe>
 800c60a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c60e:	d118      	bne.n	800c642 <_printf_float+0x1c2>
 800c610:	2900      	cmp	r1, #0
 800c612:	6863      	ldr	r3, [r4, #4]
 800c614:	dd0b      	ble.n	800c62e <_printf_float+0x1ae>
 800c616:	6121      	str	r1, [r4, #16]
 800c618:	b913      	cbnz	r3, 800c620 <_printf_float+0x1a0>
 800c61a:	6822      	ldr	r2, [r4, #0]
 800c61c:	07d0      	lsls	r0, r2, #31
 800c61e:	d502      	bpl.n	800c626 <_printf_float+0x1a6>
 800c620:	3301      	adds	r3, #1
 800c622:	440b      	add	r3, r1
 800c624:	6123      	str	r3, [r4, #16]
 800c626:	65a1      	str	r1, [r4, #88]	; 0x58
 800c628:	f04f 0900 	mov.w	r9, #0
 800c62c:	e7de      	b.n	800c5ec <_printf_float+0x16c>
 800c62e:	b913      	cbnz	r3, 800c636 <_printf_float+0x1b6>
 800c630:	6822      	ldr	r2, [r4, #0]
 800c632:	07d2      	lsls	r2, r2, #31
 800c634:	d501      	bpl.n	800c63a <_printf_float+0x1ba>
 800c636:	3302      	adds	r3, #2
 800c638:	e7f4      	b.n	800c624 <_printf_float+0x1a4>
 800c63a:	2301      	movs	r3, #1
 800c63c:	e7f2      	b.n	800c624 <_printf_float+0x1a4>
 800c63e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c644:	4299      	cmp	r1, r3
 800c646:	db05      	blt.n	800c654 <_printf_float+0x1d4>
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	6121      	str	r1, [r4, #16]
 800c64c:	07d8      	lsls	r0, r3, #31
 800c64e:	d5ea      	bpl.n	800c626 <_printf_float+0x1a6>
 800c650:	1c4b      	adds	r3, r1, #1
 800c652:	e7e7      	b.n	800c624 <_printf_float+0x1a4>
 800c654:	2900      	cmp	r1, #0
 800c656:	bfd4      	ite	le
 800c658:	f1c1 0202 	rsble	r2, r1, #2
 800c65c:	2201      	movgt	r2, #1
 800c65e:	4413      	add	r3, r2
 800c660:	e7e0      	b.n	800c624 <_printf_float+0x1a4>
 800c662:	6823      	ldr	r3, [r4, #0]
 800c664:	055a      	lsls	r2, r3, #21
 800c666:	d407      	bmi.n	800c678 <_printf_float+0x1f8>
 800c668:	6923      	ldr	r3, [r4, #16]
 800c66a:	4642      	mov	r2, r8
 800c66c:	4631      	mov	r1, r6
 800c66e:	4628      	mov	r0, r5
 800c670:	47b8      	blx	r7
 800c672:	3001      	adds	r0, #1
 800c674:	d12c      	bne.n	800c6d0 <_printf_float+0x250>
 800c676:	e764      	b.n	800c542 <_printf_float+0xc2>
 800c678:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c67c:	f240 80e0 	bls.w	800c840 <_printf_float+0x3c0>
 800c680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c684:	2200      	movs	r2, #0
 800c686:	2300      	movs	r3, #0
 800c688:	f7f4 fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d034      	beq.n	800c6fa <_printf_float+0x27a>
 800c690:	4a37      	ldr	r2, [pc, #220]	; (800c770 <_printf_float+0x2f0>)
 800c692:	2301      	movs	r3, #1
 800c694:	4631      	mov	r1, r6
 800c696:	4628      	mov	r0, r5
 800c698:	47b8      	blx	r7
 800c69a:	3001      	adds	r0, #1
 800c69c:	f43f af51 	beq.w	800c542 <_printf_float+0xc2>
 800c6a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	db02      	blt.n	800c6ae <_printf_float+0x22e>
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	07d8      	lsls	r0, r3, #31
 800c6ac:	d510      	bpl.n	800c6d0 <_printf_float+0x250>
 800c6ae:	ee18 3a10 	vmov	r3, s16
 800c6b2:	4652      	mov	r2, sl
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	47b8      	blx	r7
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	f43f af41 	beq.w	800c542 <_printf_float+0xc2>
 800c6c0:	f04f 0800 	mov.w	r8, #0
 800c6c4:	f104 091a 	add.w	r9, r4, #26
 800c6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	4543      	cmp	r3, r8
 800c6ce:	dc09      	bgt.n	800c6e4 <_printf_float+0x264>
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	079b      	lsls	r3, r3, #30
 800c6d4:	f100 8105 	bmi.w	800c8e2 <_printf_float+0x462>
 800c6d8:	68e0      	ldr	r0, [r4, #12]
 800c6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6dc:	4298      	cmp	r0, r3
 800c6de:	bfb8      	it	lt
 800c6e0:	4618      	movlt	r0, r3
 800c6e2:	e730      	b.n	800c546 <_printf_float+0xc6>
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	464a      	mov	r2, r9
 800c6e8:	4631      	mov	r1, r6
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	47b8      	blx	r7
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	f43f af27 	beq.w	800c542 <_printf_float+0xc2>
 800c6f4:	f108 0801 	add.w	r8, r8, #1
 800c6f8:	e7e6      	b.n	800c6c8 <_printf_float+0x248>
 800c6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	dc39      	bgt.n	800c774 <_printf_float+0x2f4>
 800c700:	4a1b      	ldr	r2, [pc, #108]	; (800c770 <_printf_float+0x2f0>)
 800c702:	2301      	movs	r3, #1
 800c704:	4631      	mov	r1, r6
 800c706:	4628      	mov	r0, r5
 800c708:	47b8      	blx	r7
 800c70a:	3001      	adds	r0, #1
 800c70c:	f43f af19 	beq.w	800c542 <_printf_float+0xc2>
 800c710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c714:	4313      	orrs	r3, r2
 800c716:	d102      	bne.n	800c71e <_printf_float+0x29e>
 800c718:	6823      	ldr	r3, [r4, #0]
 800c71a:	07d9      	lsls	r1, r3, #31
 800c71c:	d5d8      	bpl.n	800c6d0 <_printf_float+0x250>
 800c71e:	ee18 3a10 	vmov	r3, s16
 800c722:	4652      	mov	r2, sl
 800c724:	4631      	mov	r1, r6
 800c726:	4628      	mov	r0, r5
 800c728:	47b8      	blx	r7
 800c72a:	3001      	adds	r0, #1
 800c72c:	f43f af09 	beq.w	800c542 <_printf_float+0xc2>
 800c730:	f04f 0900 	mov.w	r9, #0
 800c734:	f104 0a1a 	add.w	sl, r4, #26
 800c738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c73a:	425b      	negs	r3, r3
 800c73c:	454b      	cmp	r3, r9
 800c73e:	dc01      	bgt.n	800c744 <_printf_float+0x2c4>
 800c740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c742:	e792      	b.n	800c66a <_printf_float+0x1ea>
 800c744:	2301      	movs	r3, #1
 800c746:	4652      	mov	r2, sl
 800c748:	4631      	mov	r1, r6
 800c74a:	4628      	mov	r0, r5
 800c74c:	47b8      	blx	r7
 800c74e:	3001      	adds	r0, #1
 800c750:	f43f aef7 	beq.w	800c542 <_printf_float+0xc2>
 800c754:	f109 0901 	add.w	r9, r9, #1
 800c758:	e7ee      	b.n	800c738 <_printf_float+0x2b8>
 800c75a:	bf00      	nop
 800c75c:	7fefffff 	.word	0x7fefffff
 800c760:	08011c38 	.word	0x08011c38
 800c764:	08011c3c 	.word	0x08011c3c
 800c768:	08011c44 	.word	0x08011c44
 800c76c:	08011c40 	.word	0x08011c40
 800c770:	080120a1 	.word	0x080120a1
 800c774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c778:	429a      	cmp	r2, r3
 800c77a:	bfa8      	it	ge
 800c77c:	461a      	movge	r2, r3
 800c77e:	2a00      	cmp	r2, #0
 800c780:	4691      	mov	r9, r2
 800c782:	dc37      	bgt.n	800c7f4 <_printf_float+0x374>
 800c784:	f04f 0b00 	mov.w	fp, #0
 800c788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c78c:	f104 021a 	add.w	r2, r4, #26
 800c790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c792:	9305      	str	r3, [sp, #20]
 800c794:	eba3 0309 	sub.w	r3, r3, r9
 800c798:	455b      	cmp	r3, fp
 800c79a:	dc33      	bgt.n	800c804 <_printf_float+0x384>
 800c79c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	db3b      	blt.n	800c81c <_printf_float+0x39c>
 800c7a4:	6823      	ldr	r3, [r4, #0]
 800c7a6:	07da      	lsls	r2, r3, #31
 800c7a8:	d438      	bmi.n	800c81c <_printf_float+0x39c>
 800c7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ac:	9a05      	ldr	r2, [sp, #20]
 800c7ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7b0:	1a9a      	subs	r2, r3, r2
 800c7b2:	eba3 0901 	sub.w	r9, r3, r1
 800c7b6:	4591      	cmp	r9, r2
 800c7b8:	bfa8      	it	ge
 800c7ba:	4691      	movge	r9, r2
 800c7bc:	f1b9 0f00 	cmp.w	r9, #0
 800c7c0:	dc35      	bgt.n	800c82e <_printf_float+0x3ae>
 800c7c2:	f04f 0800 	mov.w	r8, #0
 800c7c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7ca:	f104 0a1a 	add.w	sl, r4, #26
 800c7ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7d2:	1a9b      	subs	r3, r3, r2
 800c7d4:	eba3 0309 	sub.w	r3, r3, r9
 800c7d8:	4543      	cmp	r3, r8
 800c7da:	f77f af79 	ble.w	800c6d0 <_printf_float+0x250>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	4652      	mov	r2, sl
 800c7e2:	4631      	mov	r1, r6
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	47b8      	blx	r7
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	f43f aeaa 	beq.w	800c542 <_printf_float+0xc2>
 800c7ee:	f108 0801 	add.w	r8, r8, #1
 800c7f2:	e7ec      	b.n	800c7ce <_printf_float+0x34e>
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	4631      	mov	r1, r6
 800c7f8:	4642      	mov	r2, r8
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	47b8      	blx	r7
 800c7fe:	3001      	adds	r0, #1
 800c800:	d1c0      	bne.n	800c784 <_printf_float+0x304>
 800c802:	e69e      	b.n	800c542 <_printf_float+0xc2>
 800c804:	2301      	movs	r3, #1
 800c806:	4631      	mov	r1, r6
 800c808:	4628      	mov	r0, r5
 800c80a:	9205      	str	r2, [sp, #20]
 800c80c:	47b8      	blx	r7
 800c80e:	3001      	adds	r0, #1
 800c810:	f43f ae97 	beq.w	800c542 <_printf_float+0xc2>
 800c814:	9a05      	ldr	r2, [sp, #20]
 800c816:	f10b 0b01 	add.w	fp, fp, #1
 800c81a:	e7b9      	b.n	800c790 <_printf_float+0x310>
 800c81c:	ee18 3a10 	vmov	r3, s16
 800c820:	4652      	mov	r2, sl
 800c822:	4631      	mov	r1, r6
 800c824:	4628      	mov	r0, r5
 800c826:	47b8      	blx	r7
 800c828:	3001      	adds	r0, #1
 800c82a:	d1be      	bne.n	800c7aa <_printf_float+0x32a>
 800c82c:	e689      	b.n	800c542 <_printf_float+0xc2>
 800c82e:	9a05      	ldr	r2, [sp, #20]
 800c830:	464b      	mov	r3, r9
 800c832:	4442      	add	r2, r8
 800c834:	4631      	mov	r1, r6
 800c836:	4628      	mov	r0, r5
 800c838:	47b8      	blx	r7
 800c83a:	3001      	adds	r0, #1
 800c83c:	d1c1      	bne.n	800c7c2 <_printf_float+0x342>
 800c83e:	e680      	b.n	800c542 <_printf_float+0xc2>
 800c840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c842:	2a01      	cmp	r2, #1
 800c844:	dc01      	bgt.n	800c84a <_printf_float+0x3ca>
 800c846:	07db      	lsls	r3, r3, #31
 800c848:	d538      	bpl.n	800c8bc <_printf_float+0x43c>
 800c84a:	2301      	movs	r3, #1
 800c84c:	4642      	mov	r2, r8
 800c84e:	4631      	mov	r1, r6
 800c850:	4628      	mov	r0, r5
 800c852:	47b8      	blx	r7
 800c854:	3001      	adds	r0, #1
 800c856:	f43f ae74 	beq.w	800c542 <_printf_float+0xc2>
 800c85a:	ee18 3a10 	vmov	r3, s16
 800c85e:	4652      	mov	r2, sl
 800c860:	4631      	mov	r1, r6
 800c862:	4628      	mov	r0, r5
 800c864:	47b8      	blx	r7
 800c866:	3001      	adds	r0, #1
 800c868:	f43f ae6b 	beq.w	800c542 <_printf_float+0xc2>
 800c86c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c870:	2200      	movs	r2, #0
 800c872:	2300      	movs	r3, #0
 800c874:	f7f4 f928 	bl	8000ac8 <__aeabi_dcmpeq>
 800c878:	b9d8      	cbnz	r0, 800c8b2 <_printf_float+0x432>
 800c87a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c87c:	f108 0201 	add.w	r2, r8, #1
 800c880:	3b01      	subs	r3, #1
 800c882:	4631      	mov	r1, r6
 800c884:	4628      	mov	r0, r5
 800c886:	47b8      	blx	r7
 800c888:	3001      	adds	r0, #1
 800c88a:	d10e      	bne.n	800c8aa <_printf_float+0x42a>
 800c88c:	e659      	b.n	800c542 <_printf_float+0xc2>
 800c88e:	2301      	movs	r3, #1
 800c890:	4652      	mov	r2, sl
 800c892:	4631      	mov	r1, r6
 800c894:	4628      	mov	r0, r5
 800c896:	47b8      	blx	r7
 800c898:	3001      	adds	r0, #1
 800c89a:	f43f ae52 	beq.w	800c542 <_printf_float+0xc2>
 800c89e:	f108 0801 	add.w	r8, r8, #1
 800c8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	4543      	cmp	r3, r8
 800c8a8:	dcf1      	bgt.n	800c88e <_printf_float+0x40e>
 800c8aa:	464b      	mov	r3, r9
 800c8ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c8b0:	e6dc      	b.n	800c66c <_printf_float+0x1ec>
 800c8b2:	f04f 0800 	mov.w	r8, #0
 800c8b6:	f104 0a1a 	add.w	sl, r4, #26
 800c8ba:	e7f2      	b.n	800c8a2 <_printf_float+0x422>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	4642      	mov	r2, r8
 800c8c0:	e7df      	b.n	800c882 <_printf_float+0x402>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	464a      	mov	r2, r9
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	47b8      	blx	r7
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	f43f ae38 	beq.w	800c542 <_printf_float+0xc2>
 800c8d2:	f108 0801 	add.w	r8, r8, #1
 800c8d6:	68e3      	ldr	r3, [r4, #12]
 800c8d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8da:	1a5b      	subs	r3, r3, r1
 800c8dc:	4543      	cmp	r3, r8
 800c8de:	dcf0      	bgt.n	800c8c2 <_printf_float+0x442>
 800c8e0:	e6fa      	b.n	800c6d8 <_printf_float+0x258>
 800c8e2:	f04f 0800 	mov.w	r8, #0
 800c8e6:	f104 0919 	add.w	r9, r4, #25
 800c8ea:	e7f4      	b.n	800c8d6 <_printf_float+0x456>

0800c8ec <_printf_common>:
 800c8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f0:	4616      	mov	r6, r2
 800c8f2:	4699      	mov	r9, r3
 800c8f4:	688a      	ldr	r2, [r1, #8]
 800c8f6:	690b      	ldr	r3, [r1, #16]
 800c8f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	bfb8      	it	lt
 800c900:	4613      	movlt	r3, r2
 800c902:	6033      	str	r3, [r6, #0]
 800c904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c908:	4607      	mov	r7, r0
 800c90a:	460c      	mov	r4, r1
 800c90c:	b10a      	cbz	r2, 800c912 <_printf_common+0x26>
 800c90e:	3301      	adds	r3, #1
 800c910:	6033      	str	r3, [r6, #0]
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	0699      	lsls	r1, r3, #26
 800c916:	bf42      	ittt	mi
 800c918:	6833      	ldrmi	r3, [r6, #0]
 800c91a:	3302      	addmi	r3, #2
 800c91c:	6033      	strmi	r3, [r6, #0]
 800c91e:	6825      	ldr	r5, [r4, #0]
 800c920:	f015 0506 	ands.w	r5, r5, #6
 800c924:	d106      	bne.n	800c934 <_printf_common+0x48>
 800c926:	f104 0a19 	add.w	sl, r4, #25
 800c92a:	68e3      	ldr	r3, [r4, #12]
 800c92c:	6832      	ldr	r2, [r6, #0]
 800c92e:	1a9b      	subs	r3, r3, r2
 800c930:	42ab      	cmp	r3, r5
 800c932:	dc26      	bgt.n	800c982 <_printf_common+0x96>
 800c934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c938:	1e13      	subs	r3, r2, #0
 800c93a:	6822      	ldr	r2, [r4, #0]
 800c93c:	bf18      	it	ne
 800c93e:	2301      	movne	r3, #1
 800c940:	0692      	lsls	r2, r2, #26
 800c942:	d42b      	bmi.n	800c99c <_printf_common+0xb0>
 800c944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c948:	4649      	mov	r1, r9
 800c94a:	4638      	mov	r0, r7
 800c94c:	47c0      	blx	r8
 800c94e:	3001      	adds	r0, #1
 800c950:	d01e      	beq.n	800c990 <_printf_common+0xa4>
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	68e5      	ldr	r5, [r4, #12]
 800c956:	6832      	ldr	r2, [r6, #0]
 800c958:	f003 0306 	and.w	r3, r3, #6
 800c95c:	2b04      	cmp	r3, #4
 800c95e:	bf08      	it	eq
 800c960:	1aad      	subeq	r5, r5, r2
 800c962:	68a3      	ldr	r3, [r4, #8]
 800c964:	6922      	ldr	r2, [r4, #16]
 800c966:	bf0c      	ite	eq
 800c968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c96c:	2500      	movne	r5, #0
 800c96e:	4293      	cmp	r3, r2
 800c970:	bfc4      	itt	gt
 800c972:	1a9b      	subgt	r3, r3, r2
 800c974:	18ed      	addgt	r5, r5, r3
 800c976:	2600      	movs	r6, #0
 800c978:	341a      	adds	r4, #26
 800c97a:	42b5      	cmp	r5, r6
 800c97c:	d11a      	bne.n	800c9b4 <_printf_common+0xc8>
 800c97e:	2000      	movs	r0, #0
 800c980:	e008      	b.n	800c994 <_printf_common+0xa8>
 800c982:	2301      	movs	r3, #1
 800c984:	4652      	mov	r2, sl
 800c986:	4649      	mov	r1, r9
 800c988:	4638      	mov	r0, r7
 800c98a:	47c0      	blx	r8
 800c98c:	3001      	adds	r0, #1
 800c98e:	d103      	bne.n	800c998 <_printf_common+0xac>
 800c990:	f04f 30ff 	mov.w	r0, #4294967295
 800c994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c998:	3501      	adds	r5, #1
 800c99a:	e7c6      	b.n	800c92a <_printf_common+0x3e>
 800c99c:	18e1      	adds	r1, r4, r3
 800c99e:	1c5a      	adds	r2, r3, #1
 800c9a0:	2030      	movs	r0, #48	; 0x30
 800c9a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9a6:	4422      	add	r2, r4
 800c9a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9b0:	3302      	adds	r3, #2
 800c9b2:	e7c7      	b.n	800c944 <_printf_common+0x58>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	4649      	mov	r1, r9
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	47c0      	blx	r8
 800c9be:	3001      	adds	r0, #1
 800c9c0:	d0e6      	beq.n	800c990 <_printf_common+0xa4>
 800c9c2:	3601      	adds	r6, #1
 800c9c4:	e7d9      	b.n	800c97a <_printf_common+0x8e>
	...

0800c9c8 <_printf_i>:
 800c9c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9cc:	7e0f      	ldrb	r7, [r1, #24]
 800c9ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9d0:	2f78      	cmp	r7, #120	; 0x78
 800c9d2:	4691      	mov	r9, r2
 800c9d4:	4680      	mov	r8, r0
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	469a      	mov	sl, r3
 800c9da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9de:	d807      	bhi.n	800c9f0 <_printf_i+0x28>
 800c9e0:	2f62      	cmp	r7, #98	; 0x62
 800c9e2:	d80a      	bhi.n	800c9fa <_printf_i+0x32>
 800c9e4:	2f00      	cmp	r7, #0
 800c9e6:	f000 80d8 	beq.w	800cb9a <_printf_i+0x1d2>
 800c9ea:	2f58      	cmp	r7, #88	; 0x58
 800c9ec:	f000 80a3 	beq.w	800cb36 <_printf_i+0x16e>
 800c9f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9f8:	e03a      	b.n	800ca70 <_printf_i+0xa8>
 800c9fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9fe:	2b15      	cmp	r3, #21
 800ca00:	d8f6      	bhi.n	800c9f0 <_printf_i+0x28>
 800ca02:	a101      	add	r1, pc, #4	; (adr r1, 800ca08 <_printf_i+0x40>)
 800ca04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca08:	0800ca61 	.word	0x0800ca61
 800ca0c:	0800ca75 	.word	0x0800ca75
 800ca10:	0800c9f1 	.word	0x0800c9f1
 800ca14:	0800c9f1 	.word	0x0800c9f1
 800ca18:	0800c9f1 	.word	0x0800c9f1
 800ca1c:	0800c9f1 	.word	0x0800c9f1
 800ca20:	0800ca75 	.word	0x0800ca75
 800ca24:	0800c9f1 	.word	0x0800c9f1
 800ca28:	0800c9f1 	.word	0x0800c9f1
 800ca2c:	0800c9f1 	.word	0x0800c9f1
 800ca30:	0800c9f1 	.word	0x0800c9f1
 800ca34:	0800cb81 	.word	0x0800cb81
 800ca38:	0800caa5 	.word	0x0800caa5
 800ca3c:	0800cb63 	.word	0x0800cb63
 800ca40:	0800c9f1 	.word	0x0800c9f1
 800ca44:	0800c9f1 	.word	0x0800c9f1
 800ca48:	0800cba3 	.word	0x0800cba3
 800ca4c:	0800c9f1 	.word	0x0800c9f1
 800ca50:	0800caa5 	.word	0x0800caa5
 800ca54:	0800c9f1 	.word	0x0800c9f1
 800ca58:	0800c9f1 	.word	0x0800c9f1
 800ca5c:	0800cb6b 	.word	0x0800cb6b
 800ca60:	682b      	ldr	r3, [r5, #0]
 800ca62:	1d1a      	adds	r2, r3, #4
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	602a      	str	r2, [r5, #0]
 800ca68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca70:	2301      	movs	r3, #1
 800ca72:	e0a3      	b.n	800cbbc <_printf_i+0x1f4>
 800ca74:	6820      	ldr	r0, [r4, #0]
 800ca76:	6829      	ldr	r1, [r5, #0]
 800ca78:	0606      	lsls	r6, r0, #24
 800ca7a:	f101 0304 	add.w	r3, r1, #4
 800ca7e:	d50a      	bpl.n	800ca96 <_printf_i+0xce>
 800ca80:	680e      	ldr	r6, [r1, #0]
 800ca82:	602b      	str	r3, [r5, #0]
 800ca84:	2e00      	cmp	r6, #0
 800ca86:	da03      	bge.n	800ca90 <_printf_i+0xc8>
 800ca88:	232d      	movs	r3, #45	; 0x2d
 800ca8a:	4276      	negs	r6, r6
 800ca8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca90:	485e      	ldr	r0, [pc, #376]	; (800cc0c <_printf_i+0x244>)
 800ca92:	230a      	movs	r3, #10
 800ca94:	e019      	b.n	800caca <_printf_i+0x102>
 800ca96:	680e      	ldr	r6, [r1, #0]
 800ca98:	602b      	str	r3, [r5, #0]
 800ca9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca9e:	bf18      	it	ne
 800caa0:	b236      	sxthne	r6, r6
 800caa2:	e7ef      	b.n	800ca84 <_printf_i+0xbc>
 800caa4:	682b      	ldr	r3, [r5, #0]
 800caa6:	6820      	ldr	r0, [r4, #0]
 800caa8:	1d19      	adds	r1, r3, #4
 800caaa:	6029      	str	r1, [r5, #0]
 800caac:	0601      	lsls	r1, r0, #24
 800caae:	d501      	bpl.n	800cab4 <_printf_i+0xec>
 800cab0:	681e      	ldr	r6, [r3, #0]
 800cab2:	e002      	b.n	800caba <_printf_i+0xf2>
 800cab4:	0646      	lsls	r6, r0, #25
 800cab6:	d5fb      	bpl.n	800cab0 <_printf_i+0xe8>
 800cab8:	881e      	ldrh	r6, [r3, #0]
 800caba:	4854      	ldr	r0, [pc, #336]	; (800cc0c <_printf_i+0x244>)
 800cabc:	2f6f      	cmp	r7, #111	; 0x6f
 800cabe:	bf0c      	ite	eq
 800cac0:	2308      	moveq	r3, #8
 800cac2:	230a      	movne	r3, #10
 800cac4:	2100      	movs	r1, #0
 800cac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800caca:	6865      	ldr	r5, [r4, #4]
 800cacc:	60a5      	str	r5, [r4, #8]
 800cace:	2d00      	cmp	r5, #0
 800cad0:	bfa2      	ittt	ge
 800cad2:	6821      	ldrge	r1, [r4, #0]
 800cad4:	f021 0104 	bicge.w	r1, r1, #4
 800cad8:	6021      	strge	r1, [r4, #0]
 800cada:	b90e      	cbnz	r6, 800cae0 <_printf_i+0x118>
 800cadc:	2d00      	cmp	r5, #0
 800cade:	d04d      	beq.n	800cb7c <_printf_i+0x1b4>
 800cae0:	4615      	mov	r5, r2
 800cae2:	fbb6 f1f3 	udiv	r1, r6, r3
 800cae6:	fb03 6711 	mls	r7, r3, r1, r6
 800caea:	5dc7      	ldrb	r7, [r0, r7]
 800caec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800caf0:	4637      	mov	r7, r6
 800caf2:	42bb      	cmp	r3, r7
 800caf4:	460e      	mov	r6, r1
 800caf6:	d9f4      	bls.n	800cae2 <_printf_i+0x11a>
 800caf8:	2b08      	cmp	r3, #8
 800cafa:	d10b      	bne.n	800cb14 <_printf_i+0x14c>
 800cafc:	6823      	ldr	r3, [r4, #0]
 800cafe:	07de      	lsls	r6, r3, #31
 800cb00:	d508      	bpl.n	800cb14 <_printf_i+0x14c>
 800cb02:	6923      	ldr	r3, [r4, #16]
 800cb04:	6861      	ldr	r1, [r4, #4]
 800cb06:	4299      	cmp	r1, r3
 800cb08:	bfde      	ittt	le
 800cb0a:	2330      	movle	r3, #48	; 0x30
 800cb0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb14:	1b52      	subs	r2, r2, r5
 800cb16:	6122      	str	r2, [r4, #16]
 800cb18:	f8cd a000 	str.w	sl, [sp]
 800cb1c:	464b      	mov	r3, r9
 800cb1e:	aa03      	add	r2, sp, #12
 800cb20:	4621      	mov	r1, r4
 800cb22:	4640      	mov	r0, r8
 800cb24:	f7ff fee2 	bl	800c8ec <_printf_common>
 800cb28:	3001      	adds	r0, #1
 800cb2a:	d14c      	bne.n	800cbc6 <_printf_i+0x1fe>
 800cb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb30:	b004      	add	sp, #16
 800cb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb36:	4835      	ldr	r0, [pc, #212]	; (800cc0c <_printf_i+0x244>)
 800cb38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb3c:	6829      	ldr	r1, [r5, #0]
 800cb3e:	6823      	ldr	r3, [r4, #0]
 800cb40:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb44:	6029      	str	r1, [r5, #0]
 800cb46:	061d      	lsls	r5, r3, #24
 800cb48:	d514      	bpl.n	800cb74 <_printf_i+0x1ac>
 800cb4a:	07df      	lsls	r7, r3, #31
 800cb4c:	bf44      	itt	mi
 800cb4e:	f043 0320 	orrmi.w	r3, r3, #32
 800cb52:	6023      	strmi	r3, [r4, #0]
 800cb54:	b91e      	cbnz	r6, 800cb5e <_printf_i+0x196>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	f023 0320 	bic.w	r3, r3, #32
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	2310      	movs	r3, #16
 800cb60:	e7b0      	b.n	800cac4 <_printf_i+0xfc>
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	f043 0320 	orr.w	r3, r3, #32
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	2378      	movs	r3, #120	; 0x78
 800cb6c:	4828      	ldr	r0, [pc, #160]	; (800cc10 <_printf_i+0x248>)
 800cb6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb72:	e7e3      	b.n	800cb3c <_printf_i+0x174>
 800cb74:	0659      	lsls	r1, r3, #25
 800cb76:	bf48      	it	mi
 800cb78:	b2b6      	uxthmi	r6, r6
 800cb7a:	e7e6      	b.n	800cb4a <_printf_i+0x182>
 800cb7c:	4615      	mov	r5, r2
 800cb7e:	e7bb      	b.n	800caf8 <_printf_i+0x130>
 800cb80:	682b      	ldr	r3, [r5, #0]
 800cb82:	6826      	ldr	r6, [r4, #0]
 800cb84:	6961      	ldr	r1, [r4, #20]
 800cb86:	1d18      	adds	r0, r3, #4
 800cb88:	6028      	str	r0, [r5, #0]
 800cb8a:	0635      	lsls	r5, r6, #24
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	d501      	bpl.n	800cb94 <_printf_i+0x1cc>
 800cb90:	6019      	str	r1, [r3, #0]
 800cb92:	e002      	b.n	800cb9a <_printf_i+0x1d2>
 800cb94:	0670      	lsls	r0, r6, #25
 800cb96:	d5fb      	bpl.n	800cb90 <_printf_i+0x1c8>
 800cb98:	8019      	strh	r1, [r3, #0]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	6123      	str	r3, [r4, #16]
 800cb9e:	4615      	mov	r5, r2
 800cba0:	e7ba      	b.n	800cb18 <_printf_i+0x150>
 800cba2:	682b      	ldr	r3, [r5, #0]
 800cba4:	1d1a      	adds	r2, r3, #4
 800cba6:	602a      	str	r2, [r5, #0]
 800cba8:	681d      	ldr	r5, [r3, #0]
 800cbaa:	6862      	ldr	r2, [r4, #4]
 800cbac:	2100      	movs	r1, #0
 800cbae:	4628      	mov	r0, r5
 800cbb0:	f7f3 fb16 	bl	80001e0 <memchr>
 800cbb4:	b108      	cbz	r0, 800cbba <_printf_i+0x1f2>
 800cbb6:	1b40      	subs	r0, r0, r5
 800cbb8:	6060      	str	r0, [r4, #4]
 800cbba:	6863      	ldr	r3, [r4, #4]
 800cbbc:	6123      	str	r3, [r4, #16]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbc4:	e7a8      	b.n	800cb18 <_printf_i+0x150>
 800cbc6:	6923      	ldr	r3, [r4, #16]
 800cbc8:	462a      	mov	r2, r5
 800cbca:	4649      	mov	r1, r9
 800cbcc:	4640      	mov	r0, r8
 800cbce:	47d0      	blx	sl
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	d0ab      	beq.n	800cb2c <_printf_i+0x164>
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	079b      	lsls	r3, r3, #30
 800cbd8:	d413      	bmi.n	800cc02 <_printf_i+0x23a>
 800cbda:	68e0      	ldr	r0, [r4, #12]
 800cbdc:	9b03      	ldr	r3, [sp, #12]
 800cbde:	4298      	cmp	r0, r3
 800cbe0:	bfb8      	it	lt
 800cbe2:	4618      	movlt	r0, r3
 800cbe4:	e7a4      	b.n	800cb30 <_printf_i+0x168>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	4632      	mov	r2, r6
 800cbea:	4649      	mov	r1, r9
 800cbec:	4640      	mov	r0, r8
 800cbee:	47d0      	blx	sl
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	d09b      	beq.n	800cb2c <_printf_i+0x164>
 800cbf4:	3501      	adds	r5, #1
 800cbf6:	68e3      	ldr	r3, [r4, #12]
 800cbf8:	9903      	ldr	r1, [sp, #12]
 800cbfa:	1a5b      	subs	r3, r3, r1
 800cbfc:	42ab      	cmp	r3, r5
 800cbfe:	dcf2      	bgt.n	800cbe6 <_printf_i+0x21e>
 800cc00:	e7eb      	b.n	800cbda <_printf_i+0x212>
 800cc02:	2500      	movs	r5, #0
 800cc04:	f104 0619 	add.w	r6, r4, #25
 800cc08:	e7f5      	b.n	800cbf6 <_printf_i+0x22e>
 800cc0a:	bf00      	nop
 800cc0c:	08011c48 	.word	0x08011c48
 800cc10:	08011c59 	.word	0x08011c59

0800cc14 <_scanf_float>:
 800cc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc18:	b087      	sub	sp, #28
 800cc1a:	4617      	mov	r7, r2
 800cc1c:	9303      	str	r3, [sp, #12]
 800cc1e:	688b      	ldr	r3, [r1, #8]
 800cc20:	1e5a      	subs	r2, r3, #1
 800cc22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cc26:	bf83      	ittte	hi
 800cc28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cc2c:	195b      	addhi	r3, r3, r5
 800cc2e:	9302      	strhi	r3, [sp, #8]
 800cc30:	2300      	movls	r3, #0
 800cc32:	bf86      	itte	hi
 800cc34:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cc38:	608b      	strhi	r3, [r1, #8]
 800cc3a:	9302      	strls	r3, [sp, #8]
 800cc3c:	680b      	ldr	r3, [r1, #0]
 800cc3e:	468b      	mov	fp, r1
 800cc40:	2500      	movs	r5, #0
 800cc42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cc46:	f84b 3b1c 	str.w	r3, [fp], #28
 800cc4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cc4e:	4680      	mov	r8, r0
 800cc50:	460c      	mov	r4, r1
 800cc52:	465e      	mov	r6, fp
 800cc54:	46aa      	mov	sl, r5
 800cc56:	46a9      	mov	r9, r5
 800cc58:	9501      	str	r5, [sp, #4]
 800cc5a:	68a2      	ldr	r2, [r4, #8]
 800cc5c:	b152      	cbz	r2, 800cc74 <_scanf_float+0x60>
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	2b4e      	cmp	r3, #78	; 0x4e
 800cc64:	d864      	bhi.n	800cd30 <_scanf_float+0x11c>
 800cc66:	2b40      	cmp	r3, #64	; 0x40
 800cc68:	d83c      	bhi.n	800cce4 <_scanf_float+0xd0>
 800cc6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cc6e:	b2c8      	uxtb	r0, r1
 800cc70:	280e      	cmp	r0, #14
 800cc72:	d93a      	bls.n	800ccea <_scanf_float+0xd6>
 800cc74:	f1b9 0f00 	cmp.w	r9, #0
 800cc78:	d003      	beq.n	800cc82 <_scanf_float+0x6e>
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc86:	f1ba 0f01 	cmp.w	sl, #1
 800cc8a:	f200 8113 	bhi.w	800ceb4 <_scanf_float+0x2a0>
 800cc8e:	455e      	cmp	r6, fp
 800cc90:	f200 8105 	bhi.w	800ce9e <_scanf_float+0x28a>
 800cc94:	2501      	movs	r5, #1
 800cc96:	4628      	mov	r0, r5
 800cc98:	b007      	add	sp, #28
 800cc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cca2:	2a0d      	cmp	r2, #13
 800cca4:	d8e6      	bhi.n	800cc74 <_scanf_float+0x60>
 800cca6:	a101      	add	r1, pc, #4	; (adr r1, 800ccac <_scanf_float+0x98>)
 800cca8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ccac:	0800cdeb 	.word	0x0800cdeb
 800ccb0:	0800cc75 	.word	0x0800cc75
 800ccb4:	0800cc75 	.word	0x0800cc75
 800ccb8:	0800cc75 	.word	0x0800cc75
 800ccbc:	0800ce4b 	.word	0x0800ce4b
 800ccc0:	0800ce23 	.word	0x0800ce23
 800ccc4:	0800cc75 	.word	0x0800cc75
 800ccc8:	0800cc75 	.word	0x0800cc75
 800cccc:	0800cdf9 	.word	0x0800cdf9
 800ccd0:	0800cc75 	.word	0x0800cc75
 800ccd4:	0800cc75 	.word	0x0800cc75
 800ccd8:	0800cc75 	.word	0x0800cc75
 800ccdc:	0800cc75 	.word	0x0800cc75
 800cce0:	0800cdb1 	.word	0x0800cdb1
 800cce4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cce8:	e7db      	b.n	800cca2 <_scanf_float+0x8e>
 800ccea:	290e      	cmp	r1, #14
 800ccec:	d8c2      	bhi.n	800cc74 <_scanf_float+0x60>
 800ccee:	a001      	add	r0, pc, #4	; (adr r0, 800ccf4 <_scanf_float+0xe0>)
 800ccf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ccf4:	0800cda3 	.word	0x0800cda3
 800ccf8:	0800cc75 	.word	0x0800cc75
 800ccfc:	0800cda3 	.word	0x0800cda3
 800cd00:	0800ce37 	.word	0x0800ce37
 800cd04:	0800cc75 	.word	0x0800cc75
 800cd08:	0800cd51 	.word	0x0800cd51
 800cd0c:	0800cd8d 	.word	0x0800cd8d
 800cd10:	0800cd8d 	.word	0x0800cd8d
 800cd14:	0800cd8d 	.word	0x0800cd8d
 800cd18:	0800cd8d 	.word	0x0800cd8d
 800cd1c:	0800cd8d 	.word	0x0800cd8d
 800cd20:	0800cd8d 	.word	0x0800cd8d
 800cd24:	0800cd8d 	.word	0x0800cd8d
 800cd28:	0800cd8d 	.word	0x0800cd8d
 800cd2c:	0800cd8d 	.word	0x0800cd8d
 800cd30:	2b6e      	cmp	r3, #110	; 0x6e
 800cd32:	d809      	bhi.n	800cd48 <_scanf_float+0x134>
 800cd34:	2b60      	cmp	r3, #96	; 0x60
 800cd36:	d8b2      	bhi.n	800cc9e <_scanf_float+0x8a>
 800cd38:	2b54      	cmp	r3, #84	; 0x54
 800cd3a:	d077      	beq.n	800ce2c <_scanf_float+0x218>
 800cd3c:	2b59      	cmp	r3, #89	; 0x59
 800cd3e:	d199      	bne.n	800cc74 <_scanf_float+0x60>
 800cd40:	2d07      	cmp	r5, #7
 800cd42:	d197      	bne.n	800cc74 <_scanf_float+0x60>
 800cd44:	2508      	movs	r5, #8
 800cd46:	e029      	b.n	800cd9c <_scanf_float+0x188>
 800cd48:	2b74      	cmp	r3, #116	; 0x74
 800cd4a:	d06f      	beq.n	800ce2c <_scanf_float+0x218>
 800cd4c:	2b79      	cmp	r3, #121	; 0x79
 800cd4e:	e7f6      	b.n	800cd3e <_scanf_float+0x12a>
 800cd50:	6821      	ldr	r1, [r4, #0]
 800cd52:	05c8      	lsls	r0, r1, #23
 800cd54:	d51a      	bpl.n	800cd8c <_scanf_float+0x178>
 800cd56:	9b02      	ldr	r3, [sp, #8]
 800cd58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cd5c:	6021      	str	r1, [r4, #0]
 800cd5e:	f109 0901 	add.w	r9, r9, #1
 800cd62:	b11b      	cbz	r3, 800cd6c <_scanf_float+0x158>
 800cd64:	3b01      	subs	r3, #1
 800cd66:	3201      	adds	r2, #1
 800cd68:	9302      	str	r3, [sp, #8]
 800cd6a:	60a2      	str	r2, [r4, #8]
 800cd6c:	68a3      	ldr	r3, [r4, #8]
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	60a3      	str	r3, [r4, #8]
 800cd72:	6923      	ldr	r3, [r4, #16]
 800cd74:	3301      	adds	r3, #1
 800cd76:	6123      	str	r3, [r4, #16]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	607b      	str	r3, [r7, #4]
 800cd80:	f340 8084 	ble.w	800ce8c <_scanf_float+0x278>
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	3301      	adds	r3, #1
 800cd88:	603b      	str	r3, [r7, #0]
 800cd8a:	e766      	b.n	800cc5a <_scanf_float+0x46>
 800cd8c:	eb1a 0f05 	cmn.w	sl, r5
 800cd90:	f47f af70 	bne.w	800cc74 <_scanf_float+0x60>
 800cd94:	6822      	ldr	r2, [r4, #0]
 800cd96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cd9a:	6022      	str	r2, [r4, #0]
 800cd9c:	f806 3b01 	strb.w	r3, [r6], #1
 800cda0:	e7e4      	b.n	800cd6c <_scanf_float+0x158>
 800cda2:	6822      	ldr	r2, [r4, #0]
 800cda4:	0610      	lsls	r0, r2, #24
 800cda6:	f57f af65 	bpl.w	800cc74 <_scanf_float+0x60>
 800cdaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdae:	e7f4      	b.n	800cd9a <_scanf_float+0x186>
 800cdb0:	f1ba 0f00 	cmp.w	sl, #0
 800cdb4:	d10e      	bne.n	800cdd4 <_scanf_float+0x1c0>
 800cdb6:	f1b9 0f00 	cmp.w	r9, #0
 800cdba:	d10e      	bne.n	800cdda <_scanf_float+0x1c6>
 800cdbc:	6822      	ldr	r2, [r4, #0]
 800cdbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cdc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cdc6:	d108      	bne.n	800cdda <_scanf_float+0x1c6>
 800cdc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cdcc:	6022      	str	r2, [r4, #0]
 800cdce:	f04f 0a01 	mov.w	sl, #1
 800cdd2:	e7e3      	b.n	800cd9c <_scanf_float+0x188>
 800cdd4:	f1ba 0f02 	cmp.w	sl, #2
 800cdd8:	d055      	beq.n	800ce86 <_scanf_float+0x272>
 800cdda:	2d01      	cmp	r5, #1
 800cddc:	d002      	beq.n	800cde4 <_scanf_float+0x1d0>
 800cdde:	2d04      	cmp	r5, #4
 800cde0:	f47f af48 	bne.w	800cc74 <_scanf_float+0x60>
 800cde4:	3501      	adds	r5, #1
 800cde6:	b2ed      	uxtb	r5, r5
 800cde8:	e7d8      	b.n	800cd9c <_scanf_float+0x188>
 800cdea:	f1ba 0f01 	cmp.w	sl, #1
 800cdee:	f47f af41 	bne.w	800cc74 <_scanf_float+0x60>
 800cdf2:	f04f 0a02 	mov.w	sl, #2
 800cdf6:	e7d1      	b.n	800cd9c <_scanf_float+0x188>
 800cdf8:	b97d      	cbnz	r5, 800ce1a <_scanf_float+0x206>
 800cdfa:	f1b9 0f00 	cmp.w	r9, #0
 800cdfe:	f47f af3c 	bne.w	800cc7a <_scanf_float+0x66>
 800ce02:	6822      	ldr	r2, [r4, #0]
 800ce04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ce08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ce0c:	f47f af39 	bne.w	800cc82 <_scanf_float+0x6e>
 800ce10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ce14:	6022      	str	r2, [r4, #0]
 800ce16:	2501      	movs	r5, #1
 800ce18:	e7c0      	b.n	800cd9c <_scanf_float+0x188>
 800ce1a:	2d03      	cmp	r5, #3
 800ce1c:	d0e2      	beq.n	800cde4 <_scanf_float+0x1d0>
 800ce1e:	2d05      	cmp	r5, #5
 800ce20:	e7de      	b.n	800cde0 <_scanf_float+0x1cc>
 800ce22:	2d02      	cmp	r5, #2
 800ce24:	f47f af26 	bne.w	800cc74 <_scanf_float+0x60>
 800ce28:	2503      	movs	r5, #3
 800ce2a:	e7b7      	b.n	800cd9c <_scanf_float+0x188>
 800ce2c:	2d06      	cmp	r5, #6
 800ce2e:	f47f af21 	bne.w	800cc74 <_scanf_float+0x60>
 800ce32:	2507      	movs	r5, #7
 800ce34:	e7b2      	b.n	800cd9c <_scanf_float+0x188>
 800ce36:	6822      	ldr	r2, [r4, #0]
 800ce38:	0591      	lsls	r1, r2, #22
 800ce3a:	f57f af1b 	bpl.w	800cc74 <_scanf_float+0x60>
 800ce3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ce42:	6022      	str	r2, [r4, #0]
 800ce44:	f8cd 9004 	str.w	r9, [sp, #4]
 800ce48:	e7a8      	b.n	800cd9c <_scanf_float+0x188>
 800ce4a:	6822      	ldr	r2, [r4, #0]
 800ce4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ce50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ce54:	d006      	beq.n	800ce64 <_scanf_float+0x250>
 800ce56:	0550      	lsls	r0, r2, #21
 800ce58:	f57f af0c 	bpl.w	800cc74 <_scanf_float+0x60>
 800ce5c:	f1b9 0f00 	cmp.w	r9, #0
 800ce60:	f43f af0f 	beq.w	800cc82 <_scanf_float+0x6e>
 800ce64:	0591      	lsls	r1, r2, #22
 800ce66:	bf58      	it	pl
 800ce68:	9901      	ldrpl	r1, [sp, #4]
 800ce6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ce6e:	bf58      	it	pl
 800ce70:	eba9 0101 	subpl.w	r1, r9, r1
 800ce74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ce78:	bf58      	it	pl
 800ce7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ce7e:	6022      	str	r2, [r4, #0]
 800ce80:	f04f 0900 	mov.w	r9, #0
 800ce84:	e78a      	b.n	800cd9c <_scanf_float+0x188>
 800ce86:	f04f 0a03 	mov.w	sl, #3
 800ce8a:	e787      	b.n	800cd9c <_scanf_float+0x188>
 800ce8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce90:	4639      	mov	r1, r7
 800ce92:	4640      	mov	r0, r8
 800ce94:	4798      	blx	r3
 800ce96:	2800      	cmp	r0, #0
 800ce98:	f43f aedf 	beq.w	800cc5a <_scanf_float+0x46>
 800ce9c:	e6ea      	b.n	800cc74 <_scanf_float+0x60>
 800ce9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cea6:	463a      	mov	r2, r7
 800cea8:	4640      	mov	r0, r8
 800ceaa:	4798      	blx	r3
 800ceac:	6923      	ldr	r3, [r4, #16]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	6123      	str	r3, [r4, #16]
 800ceb2:	e6ec      	b.n	800cc8e <_scanf_float+0x7a>
 800ceb4:	1e6b      	subs	r3, r5, #1
 800ceb6:	2b06      	cmp	r3, #6
 800ceb8:	d825      	bhi.n	800cf06 <_scanf_float+0x2f2>
 800ceba:	2d02      	cmp	r5, #2
 800cebc:	d836      	bhi.n	800cf2c <_scanf_float+0x318>
 800cebe:	455e      	cmp	r6, fp
 800cec0:	f67f aee8 	bls.w	800cc94 <_scanf_float+0x80>
 800cec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cec8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cecc:	463a      	mov	r2, r7
 800cece:	4640      	mov	r0, r8
 800ced0:	4798      	blx	r3
 800ced2:	6923      	ldr	r3, [r4, #16]
 800ced4:	3b01      	subs	r3, #1
 800ced6:	6123      	str	r3, [r4, #16]
 800ced8:	e7f1      	b.n	800cebe <_scanf_float+0x2aa>
 800ceda:	9802      	ldr	r0, [sp, #8]
 800cedc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cee0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cee4:	9002      	str	r0, [sp, #8]
 800cee6:	463a      	mov	r2, r7
 800cee8:	4640      	mov	r0, r8
 800ceea:	4798      	blx	r3
 800ceec:	6923      	ldr	r3, [r4, #16]
 800ceee:	3b01      	subs	r3, #1
 800cef0:	6123      	str	r3, [r4, #16]
 800cef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cef6:	fa5f fa8a 	uxtb.w	sl, sl
 800cefa:	f1ba 0f02 	cmp.w	sl, #2
 800cefe:	d1ec      	bne.n	800ceda <_scanf_float+0x2c6>
 800cf00:	3d03      	subs	r5, #3
 800cf02:	b2ed      	uxtb	r5, r5
 800cf04:	1b76      	subs	r6, r6, r5
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	05da      	lsls	r2, r3, #23
 800cf0a:	d52f      	bpl.n	800cf6c <_scanf_float+0x358>
 800cf0c:	055b      	lsls	r3, r3, #21
 800cf0e:	d510      	bpl.n	800cf32 <_scanf_float+0x31e>
 800cf10:	455e      	cmp	r6, fp
 800cf12:	f67f aebf 	bls.w	800cc94 <_scanf_float+0x80>
 800cf16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf1e:	463a      	mov	r2, r7
 800cf20:	4640      	mov	r0, r8
 800cf22:	4798      	blx	r3
 800cf24:	6923      	ldr	r3, [r4, #16]
 800cf26:	3b01      	subs	r3, #1
 800cf28:	6123      	str	r3, [r4, #16]
 800cf2a:	e7f1      	b.n	800cf10 <_scanf_float+0x2fc>
 800cf2c:	46aa      	mov	sl, r5
 800cf2e:	9602      	str	r6, [sp, #8]
 800cf30:	e7df      	b.n	800cef2 <_scanf_float+0x2de>
 800cf32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cf36:	6923      	ldr	r3, [r4, #16]
 800cf38:	2965      	cmp	r1, #101	; 0x65
 800cf3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf3e:	f106 35ff 	add.w	r5, r6, #4294967295
 800cf42:	6123      	str	r3, [r4, #16]
 800cf44:	d00c      	beq.n	800cf60 <_scanf_float+0x34c>
 800cf46:	2945      	cmp	r1, #69	; 0x45
 800cf48:	d00a      	beq.n	800cf60 <_scanf_float+0x34c>
 800cf4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf4e:	463a      	mov	r2, r7
 800cf50:	4640      	mov	r0, r8
 800cf52:	4798      	blx	r3
 800cf54:	6923      	ldr	r3, [r4, #16]
 800cf56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	1eb5      	subs	r5, r6, #2
 800cf5e:	6123      	str	r3, [r4, #16]
 800cf60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf64:	463a      	mov	r2, r7
 800cf66:	4640      	mov	r0, r8
 800cf68:	4798      	blx	r3
 800cf6a:	462e      	mov	r6, r5
 800cf6c:	6825      	ldr	r5, [r4, #0]
 800cf6e:	f015 0510 	ands.w	r5, r5, #16
 800cf72:	d159      	bne.n	800d028 <_scanf_float+0x414>
 800cf74:	7035      	strb	r5, [r6, #0]
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cf7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf80:	d11b      	bne.n	800cfba <_scanf_float+0x3a6>
 800cf82:	9b01      	ldr	r3, [sp, #4]
 800cf84:	454b      	cmp	r3, r9
 800cf86:	eba3 0209 	sub.w	r2, r3, r9
 800cf8a:	d123      	bne.n	800cfd4 <_scanf_float+0x3c0>
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	4659      	mov	r1, fp
 800cf90:	4640      	mov	r0, r8
 800cf92:	f001 f813 	bl	800dfbc <_strtod_r>
 800cf96:	6822      	ldr	r2, [r4, #0]
 800cf98:	9b03      	ldr	r3, [sp, #12]
 800cf9a:	f012 0f02 	tst.w	r2, #2
 800cf9e:	ec57 6b10 	vmov	r6, r7, d0
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	d021      	beq.n	800cfea <_scanf_float+0x3d6>
 800cfa6:	9903      	ldr	r1, [sp, #12]
 800cfa8:	1d1a      	adds	r2, r3, #4
 800cfaa:	600a      	str	r2, [r1, #0]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	e9c3 6700 	strd	r6, r7, [r3]
 800cfb2:	68e3      	ldr	r3, [r4, #12]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	60e3      	str	r3, [r4, #12]
 800cfb8:	e66d      	b.n	800cc96 <_scanf_float+0x82>
 800cfba:	9b04      	ldr	r3, [sp, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0e5      	beq.n	800cf8c <_scanf_float+0x378>
 800cfc0:	9905      	ldr	r1, [sp, #20]
 800cfc2:	230a      	movs	r3, #10
 800cfc4:	462a      	mov	r2, r5
 800cfc6:	3101      	adds	r1, #1
 800cfc8:	4640      	mov	r0, r8
 800cfca:	f001 f87f 	bl	800e0cc <_strtol_r>
 800cfce:	9b04      	ldr	r3, [sp, #16]
 800cfd0:	9e05      	ldr	r6, [sp, #20]
 800cfd2:	1ac2      	subs	r2, r0, r3
 800cfd4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cfd8:	429e      	cmp	r6, r3
 800cfda:	bf28      	it	cs
 800cfdc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cfe0:	4912      	ldr	r1, [pc, #72]	; (800d02c <_scanf_float+0x418>)
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f000 f9a8 	bl	800d338 <siprintf>
 800cfe8:	e7d0      	b.n	800cf8c <_scanf_float+0x378>
 800cfea:	9903      	ldr	r1, [sp, #12]
 800cfec:	f012 0f04 	tst.w	r2, #4
 800cff0:	f103 0204 	add.w	r2, r3, #4
 800cff4:	600a      	str	r2, [r1, #0]
 800cff6:	d1d9      	bne.n	800cfac <_scanf_float+0x398>
 800cff8:	f8d3 8000 	ldr.w	r8, [r3]
 800cffc:	ee10 2a10 	vmov	r2, s0
 800d000:	ee10 0a10 	vmov	r0, s0
 800d004:	463b      	mov	r3, r7
 800d006:	4639      	mov	r1, r7
 800d008:	f7f3 fd90 	bl	8000b2c <__aeabi_dcmpun>
 800d00c:	b128      	cbz	r0, 800d01a <_scanf_float+0x406>
 800d00e:	4808      	ldr	r0, [pc, #32]	; (800d030 <_scanf_float+0x41c>)
 800d010:	f000 f98c 	bl	800d32c <nanf>
 800d014:	ed88 0a00 	vstr	s0, [r8]
 800d018:	e7cb      	b.n	800cfb2 <_scanf_float+0x39e>
 800d01a:	4630      	mov	r0, r6
 800d01c:	4639      	mov	r1, r7
 800d01e:	f7f3 fde3 	bl	8000be8 <__aeabi_d2f>
 800d022:	f8c8 0000 	str.w	r0, [r8]
 800d026:	e7c4      	b.n	800cfb2 <_scanf_float+0x39e>
 800d028:	2500      	movs	r5, #0
 800d02a:	e634      	b.n	800cc96 <_scanf_float+0x82>
 800d02c:	08011c6a 	.word	0x08011c6a
 800d030:	080120f3 	.word	0x080120f3

0800d034 <iprintf>:
 800d034:	b40f      	push	{r0, r1, r2, r3}
 800d036:	4b0a      	ldr	r3, [pc, #40]	; (800d060 <iprintf+0x2c>)
 800d038:	b513      	push	{r0, r1, r4, lr}
 800d03a:	681c      	ldr	r4, [r3, #0]
 800d03c:	b124      	cbz	r4, 800d048 <iprintf+0x14>
 800d03e:	69a3      	ldr	r3, [r4, #24]
 800d040:	b913      	cbnz	r3, 800d048 <iprintf+0x14>
 800d042:	4620      	mov	r0, r4
 800d044:	f002 f8aa 	bl	800f19c <__sinit>
 800d048:	ab05      	add	r3, sp, #20
 800d04a:	9a04      	ldr	r2, [sp, #16]
 800d04c:	68a1      	ldr	r1, [r4, #8]
 800d04e:	9301      	str	r3, [sp, #4]
 800d050:	4620      	mov	r0, r4
 800d052:	f003 fbc1 	bl	80107d8 <_vfiprintf_r>
 800d056:	b002      	add	sp, #8
 800d058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d05c:	b004      	add	sp, #16
 800d05e:	4770      	bx	lr
 800d060:	2000002c 	.word	0x2000002c

0800d064 <_puts_r>:
 800d064:	b570      	push	{r4, r5, r6, lr}
 800d066:	460e      	mov	r6, r1
 800d068:	4605      	mov	r5, r0
 800d06a:	b118      	cbz	r0, 800d074 <_puts_r+0x10>
 800d06c:	6983      	ldr	r3, [r0, #24]
 800d06e:	b90b      	cbnz	r3, 800d074 <_puts_r+0x10>
 800d070:	f002 f894 	bl	800f19c <__sinit>
 800d074:	69ab      	ldr	r3, [r5, #24]
 800d076:	68ac      	ldr	r4, [r5, #8]
 800d078:	b913      	cbnz	r3, 800d080 <_puts_r+0x1c>
 800d07a:	4628      	mov	r0, r5
 800d07c:	f002 f88e 	bl	800f19c <__sinit>
 800d080:	4b2c      	ldr	r3, [pc, #176]	; (800d134 <_puts_r+0xd0>)
 800d082:	429c      	cmp	r4, r3
 800d084:	d120      	bne.n	800d0c8 <_puts_r+0x64>
 800d086:	686c      	ldr	r4, [r5, #4]
 800d088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d08a:	07db      	lsls	r3, r3, #31
 800d08c:	d405      	bmi.n	800d09a <_puts_r+0x36>
 800d08e:	89a3      	ldrh	r3, [r4, #12]
 800d090:	0598      	lsls	r0, r3, #22
 800d092:	d402      	bmi.n	800d09a <_puts_r+0x36>
 800d094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d096:	f002 fcb0 	bl	800f9fa <__retarget_lock_acquire_recursive>
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	0719      	lsls	r1, r3, #28
 800d09e:	d51d      	bpl.n	800d0dc <_puts_r+0x78>
 800d0a0:	6923      	ldr	r3, [r4, #16]
 800d0a2:	b1db      	cbz	r3, 800d0dc <_puts_r+0x78>
 800d0a4:	3e01      	subs	r6, #1
 800d0a6:	68a3      	ldr	r3, [r4, #8]
 800d0a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	60a3      	str	r3, [r4, #8]
 800d0b0:	bb39      	cbnz	r1, 800d102 <_puts_r+0x9e>
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	da38      	bge.n	800d128 <_puts_r+0xc4>
 800d0b6:	4622      	mov	r2, r4
 800d0b8:	210a      	movs	r1, #10
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f001 f808 	bl	800e0d0 <__swbuf_r>
 800d0c0:	3001      	adds	r0, #1
 800d0c2:	d011      	beq.n	800d0e8 <_puts_r+0x84>
 800d0c4:	250a      	movs	r5, #10
 800d0c6:	e011      	b.n	800d0ec <_puts_r+0x88>
 800d0c8:	4b1b      	ldr	r3, [pc, #108]	; (800d138 <_puts_r+0xd4>)
 800d0ca:	429c      	cmp	r4, r3
 800d0cc:	d101      	bne.n	800d0d2 <_puts_r+0x6e>
 800d0ce:	68ac      	ldr	r4, [r5, #8]
 800d0d0:	e7da      	b.n	800d088 <_puts_r+0x24>
 800d0d2:	4b1a      	ldr	r3, [pc, #104]	; (800d13c <_puts_r+0xd8>)
 800d0d4:	429c      	cmp	r4, r3
 800d0d6:	bf08      	it	eq
 800d0d8:	68ec      	ldreq	r4, [r5, #12]
 800d0da:	e7d5      	b.n	800d088 <_puts_r+0x24>
 800d0dc:	4621      	mov	r1, r4
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f001 f848 	bl	800e174 <__swsetup_r>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d0dd      	beq.n	800d0a4 <_puts_r+0x40>
 800d0e8:	f04f 35ff 	mov.w	r5, #4294967295
 800d0ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0ee:	07da      	lsls	r2, r3, #31
 800d0f0:	d405      	bmi.n	800d0fe <_puts_r+0x9a>
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	059b      	lsls	r3, r3, #22
 800d0f6:	d402      	bmi.n	800d0fe <_puts_r+0x9a>
 800d0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0fa:	f002 fc7f 	bl	800f9fc <__retarget_lock_release_recursive>
 800d0fe:	4628      	mov	r0, r5
 800d100:	bd70      	pop	{r4, r5, r6, pc}
 800d102:	2b00      	cmp	r3, #0
 800d104:	da04      	bge.n	800d110 <_puts_r+0xac>
 800d106:	69a2      	ldr	r2, [r4, #24]
 800d108:	429a      	cmp	r2, r3
 800d10a:	dc06      	bgt.n	800d11a <_puts_r+0xb6>
 800d10c:	290a      	cmp	r1, #10
 800d10e:	d004      	beq.n	800d11a <_puts_r+0xb6>
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	6022      	str	r2, [r4, #0]
 800d116:	7019      	strb	r1, [r3, #0]
 800d118:	e7c5      	b.n	800d0a6 <_puts_r+0x42>
 800d11a:	4622      	mov	r2, r4
 800d11c:	4628      	mov	r0, r5
 800d11e:	f000 ffd7 	bl	800e0d0 <__swbuf_r>
 800d122:	3001      	adds	r0, #1
 800d124:	d1bf      	bne.n	800d0a6 <_puts_r+0x42>
 800d126:	e7df      	b.n	800d0e8 <_puts_r+0x84>
 800d128:	6823      	ldr	r3, [r4, #0]
 800d12a:	250a      	movs	r5, #10
 800d12c:	1c5a      	adds	r2, r3, #1
 800d12e:	6022      	str	r2, [r4, #0]
 800d130:	701d      	strb	r5, [r3, #0]
 800d132:	e7db      	b.n	800d0ec <_puts_r+0x88>
 800d134:	08011e74 	.word	0x08011e74
 800d138:	08011e94 	.word	0x08011e94
 800d13c:	08011e54 	.word	0x08011e54

0800d140 <puts>:
 800d140:	4b02      	ldr	r3, [pc, #8]	; (800d14c <puts+0xc>)
 800d142:	4601      	mov	r1, r0
 800d144:	6818      	ldr	r0, [r3, #0]
 800d146:	f7ff bf8d 	b.w	800d064 <_puts_r>
 800d14a:	bf00      	nop
 800d14c:	2000002c 	.word	0x2000002c

0800d150 <_sbrk_r>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	4d06      	ldr	r5, [pc, #24]	; (800d16c <_sbrk_r+0x1c>)
 800d154:	2300      	movs	r3, #0
 800d156:	4604      	mov	r4, r0
 800d158:	4608      	mov	r0, r1
 800d15a:	602b      	str	r3, [r5, #0]
 800d15c:	f7f5 ffb2 	bl	80030c4 <_sbrk>
 800d160:	1c43      	adds	r3, r0, #1
 800d162:	d102      	bne.n	800d16a <_sbrk_r+0x1a>
 800d164:	682b      	ldr	r3, [r5, #0]
 800d166:	b103      	cbz	r3, 800d16a <_sbrk_r+0x1a>
 800d168:	6023      	str	r3, [r4, #0]
 800d16a:	bd38      	pop	{r3, r4, r5, pc}
 800d16c:	20000788 	.word	0x20000788

0800d170 <iscanf>:
 800d170:	b40f      	push	{r0, r1, r2, r3}
 800d172:	4b0a      	ldr	r3, [pc, #40]	; (800d19c <iscanf+0x2c>)
 800d174:	b513      	push	{r0, r1, r4, lr}
 800d176:	681c      	ldr	r4, [r3, #0]
 800d178:	b124      	cbz	r4, 800d184 <iscanf+0x14>
 800d17a:	69a3      	ldr	r3, [r4, #24]
 800d17c:	b913      	cbnz	r3, 800d184 <iscanf+0x14>
 800d17e:	4620      	mov	r0, r4
 800d180:	f002 f80c 	bl	800f19c <__sinit>
 800d184:	ab05      	add	r3, sp, #20
 800d186:	9a04      	ldr	r2, [sp, #16]
 800d188:	6861      	ldr	r1, [r4, #4]
 800d18a:	9301      	str	r3, [sp, #4]
 800d18c:	4620      	mov	r0, r4
 800d18e:	f003 fdf9 	bl	8010d84 <_vfiscanf_r>
 800d192:	b002      	add	sp, #8
 800d194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d198:	b004      	add	sp, #16
 800d19a:	4770      	bx	lr
 800d19c:	2000002c 	.word	0x2000002c

0800d1a0 <setvbuf>:
 800d1a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1a4:	461d      	mov	r5, r3
 800d1a6:	4b5d      	ldr	r3, [pc, #372]	; (800d31c <setvbuf+0x17c>)
 800d1a8:	681f      	ldr	r7, [r3, #0]
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	460e      	mov	r6, r1
 800d1ae:	4690      	mov	r8, r2
 800d1b0:	b127      	cbz	r7, 800d1bc <setvbuf+0x1c>
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	b913      	cbnz	r3, 800d1bc <setvbuf+0x1c>
 800d1b6:	4638      	mov	r0, r7
 800d1b8:	f001 fff0 	bl	800f19c <__sinit>
 800d1bc:	4b58      	ldr	r3, [pc, #352]	; (800d320 <setvbuf+0x180>)
 800d1be:	429c      	cmp	r4, r3
 800d1c0:	d167      	bne.n	800d292 <setvbuf+0xf2>
 800d1c2:	687c      	ldr	r4, [r7, #4]
 800d1c4:	f1b8 0f02 	cmp.w	r8, #2
 800d1c8:	d006      	beq.n	800d1d8 <setvbuf+0x38>
 800d1ca:	f1b8 0f01 	cmp.w	r8, #1
 800d1ce:	f200 809f 	bhi.w	800d310 <setvbuf+0x170>
 800d1d2:	2d00      	cmp	r5, #0
 800d1d4:	f2c0 809c 	blt.w	800d310 <setvbuf+0x170>
 800d1d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1da:	07db      	lsls	r3, r3, #31
 800d1dc:	d405      	bmi.n	800d1ea <setvbuf+0x4a>
 800d1de:	89a3      	ldrh	r3, [r4, #12]
 800d1e0:	0598      	lsls	r0, r3, #22
 800d1e2:	d402      	bmi.n	800d1ea <setvbuf+0x4a>
 800d1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1e6:	f002 fc08 	bl	800f9fa <__retarget_lock_acquire_recursive>
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	f001 ff2f 	bl	800f050 <_fflush_r>
 800d1f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1f4:	b141      	cbz	r1, 800d208 <setvbuf+0x68>
 800d1f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1fa:	4299      	cmp	r1, r3
 800d1fc:	d002      	beq.n	800d204 <setvbuf+0x64>
 800d1fe:	4638      	mov	r0, r7
 800d200:	f7fe ffbe 	bl	800c180 <_free_r>
 800d204:	2300      	movs	r3, #0
 800d206:	6363      	str	r3, [r4, #52]	; 0x34
 800d208:	2300      	movs	r3, #0
 800d20a:	61a3      	str	r3, [r4, #24]
 800d20c:	6063      	str	r3, [r4, #4]
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	0619      	lsls	r1, r3, #24
 800d212:	d503      	bpl.n	800d21c <setvbuf+0x7c>
 800d214:	6921      	ldr	r1, [r4, #16]
 800d216:	4638      	mov	r0, r7
 800d218:	f7fe ffb2 	bl	800c180 <_free_r>
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d222:	f023 0303 	bic.w	r3, r3, #3
 800d226:	f1b8 0f02 	cmp.w	r8, #2
 800d22a:	81a3      	strh	r3, [r4, #12]
 800d22c:	d06c      	beq.n	800d308 <setvbuf+0x168>
 800d22e:	ab01      	add	r3, sp, #4
 800d230:	466a      	mov	r2, sp
 800d232:	4621      	mov	r1, r4
 800d234:	4638      	mov	r0, r7
 800d236:	f002 fbe2 	bl	800f9fe <__swhatbuf_r>
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	4318      	orrs	r0, r3
 800d23e:	81a0      	strh	r0, [r4, #12]
 800d240:	2d00      	cmp	r5, #0
 800d242:	d130      	bne.n	800d2a6 <setvbuf+0x106>
 800d244:	9d00      	ldr	r5, [sp, #0]
 800d246:	4628      	mov	r0, r5
 800d248:	f7fe ff8a 	bl	800c160 <malloc>
 800d24c:	4606      	mov	r6, r0
 800d24e:	2800      	cmp	r0, #0
 800d250:	d155      	bne.n	800d2fe <setvbuf+0x15e>
 800d252:	f8dd 9000 	ldr.w	r9, [sp]
 800d256:	45a9      	cmp	r9, r5
 800d258:	d14a      	bne.n	800d2f0 <setvbuf+0x150>
 800d25a:	f04f 35ff 	mov.w	r5, #4294967295
 800d25e:	2200      	movs	r2, #0
 800d260:	60a2      	str	r2, [r4, #8]
 800d262:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d266:	6022      	str	r2, [r4, #0]
 800d268:	6122      	str	r2, [r4, #16]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d270:	6162      	str	r2, [r4, #20]
 800d272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d274:	f043 0302 	orr.w	r3, r3, #2
 800d278:	07d2      	lsls	r2, r2, #31
 800d27a:	81a3      	strh	r3, [r4, #12]
 800d27c:	d405      	bmi.n	800d28a <setvbuf+0xea>
 800d27e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d282:	d102      	bne.n	800d28a <setvbuf+0xea>
 800d284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d286:	f002 fbb9 	bl	800f9fc <__retarget_lock_release_recursive>
 800d28a:	4628      	mov	r0, r5
 800d28c:	b003      	add	sp, #12
 800d28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d292:	4b24      	ldr	r3, [pc, #144]	; (800d324 <setvbuf+0x184>)
 800d294:	429c      	cmp	r4, r3
 800d296:	d101      	bne.n	800d29c <setvbuf+0xfc>
 800d298:	68bc      	ldr	r4, [r7, #8]
 800d29a:	e793      	b.n	800d1c4 <setvbuf+0x24>
 800d29c:	4b22      	ldr	r3, [pc, #136]	; (800d328 <setvbuf+0x188>)
 800d29e:	429c      	cmp	r4, r3
 800d2a0:	bf08      	it	eq
 800d2a2:	68fc      	ldreq	r4, [r7, #12]
 800d2a4:	e78e      	b.n	800d1c4 <setvbuf+0x24>
 800d2a6:	2e00      	cmp	r6, #0
 800d2a8:	d0cd      	beq.n	800d246 <setvbuf+0xa6>
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	b913      	cbnz	r3, 800d2b4 <setvbuf+0x114>
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	f001 ff74 	bl	800f19c <__sinit>
 800d2b4:	f1b8 0f01 	cmp.w	r8, #1
 800d2b8:	bf08      	it	eq
 800d2ba:	89a3      	ldrheq	r3, [r4, #12]
 800d2bc:	6026      	str	r6, [r4, #0]
 800d2be:	bf04      	itt	eq
 800d2c0:	f043 0301 	orreq.w	r3, r3, #1
 800d2c4:	81a3      	strheq	r3, [r4, #12]
 800d2c6:	89a2      	ldrh	r2, [r4, #12]
 800d2c8:	f012 0308 	ands.w	r3, r2, #8
 800d2cc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d2d0:	d01c      	beq.n	800d30c <setvbuf+0x16c>
 800d2d2:	07d3      	lsls	r3, r2, #31
 800d2d4:	bf41      	itttt	mi
 800d2d6:	2300      	movmi	r3, #0
 800d2d8:	426d      	negmi	r5, r5
 800d2da:	60a3      	strmi	r3, [r4, #8]
 800d2dc:	61a5      	strmi	r5, [r4, #24]
 800d2de:	bf58      	it	pl
 800d2e0:	60a5      	strpl	r5, [r4, #8]
 800d2e2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d2e4:	f015 0501 	ands.w	r5, r5, #1
 800d2e8:	d115      	bne.n	800d316 <setvbuf+0x176>
 800d2ea:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d2ee:	e7c8      	b.n	800d282 <setvbuf+0xe2>
 800d2f0:	4648      	mov	r0, r9
 800d2f2:	f7fe ff35 	bl	800c160 <malloc>
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d0ae      	beq.n	800d25a <setvbuf+0xba>
 800d2fc:	464d      	mov	r5, r9
 800d2fe:	89a3      	ldrh	r3, [r4, #12]
 800d300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d304:	81a3      	strh	r3, [r4, #12]
 800d306:	e7d0      	b.n	800d2aa <setvbuf+0x10a>
 800d308:	2500      	movs	r5, #0
 800d30a:	e7a8      	b.n	800d25e <setvbuf+0xbe>
 800d30c:	60a3      	str	r3, [r4, #8]
 800d30e:	e7e8      	b.n	800d2e2 <setvbuf+0x142>
 800d310:	f04f 35ff 	mov.w	r5, #4294967295
 800d314:	e7b9      	b.n	800d28a <setvbuf+0xea>
 800d316:	2500      	movs	r5, #0
 800d318:	e7b7      	b.n	800d28a <setvbuf+0xea>
 800d31a:	bf00      	nop
 800d31c:	2000002c 	.word	0x2000002c
 800d320:	08011e74 	.word	0x08011e74
 800d324:	08011e94 	.word	0x08011e94
 800d328:	08011e54 	.word	0x08011e54

0800d32c <nanf>:
 800d32c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d334 <nanf+0x8>
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	7fc00000 	.word	0x7fc00000

0800d338 <siprintf>:
 800d338:	b40e      	push	{r1, r2, r3}
 800d33a:	b500      	push	{lr}
 800d33c:	b09c      	sub	sp, #112	; 0x70
 800d33e:	ab1d      	add	r3, sp, #116	; 0x74
 800d340:	9002      	str	r0, [sp, #8]
 800d342:	9006      	str	r0, [sp, #24]
 800d344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d348:	4809      	ldr	r0, [pc, #36]	; (800d370 <siprintf+0x38>)
 800d34a:	9107      	str	r1, [sp, #28]
 800d34c:	9104      	str	r1, [sp, #16]
 800d34e:	4909      	ldr	r1, [pc, #36]	; (800d374 <siprintf+0x3c>)
 800d350:	f853 2b04 	ldr.w	r2, [r3], #4
 800d354:	9105      	str	r1, [sp, #20]
 800d356:	6800      	ldr	r0, [r0, #0]
 800d358:	9301      	str	r3, [sp, #4]
 800d35a:	a902      	add	r1, sp, #8
 800d35c:	f003 f912 	bl	8010584 <_svfiprintf_r>
 800d360:	9b02      	ldr	r3, [sp, #8]
 800d362:	2200      	movs	r2, #0
 800d364:	701a      	strb	r2, [r3, #0]
 800d366:	b01c      	add	sp, #112	; 0x70
 800d368:	f85d eb04 	ldr.w	lr, [sp], #4
 800d36c:	b003      	add	sp, #12
 800d36e:	4770      	bx	lr
 800d370:	2000002c 	.word	0x2000002c
 800d374:	ffff0208 	.word	0xffff0208

0800d378 <sulp>:
 800d378:	b570      	push	{r4, r5, r6, lr}
 800d37a:	4604      	mov	r4, r0
 800d37c:	460d      	mov	r5, r1
 800d37e:	ec45 4b10 	vmov	d0, r4, r5
 800d382:	4616      	mov	r6, r2
 800d384:	f002 ff3e 	bl	8010204 <__ulp>
 800d388:	ec51 0b10 	vmov	r0, r1, d0
 800d38c:	b17e      	cbz	r6, 800d3ae <sulp+0x36>
 800d38e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d392:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d396:	2b00      	cmp	r3, #0
 800d398:	dd09      	ble.n	800d3ae <sulp+0x36>
 800d39a:	051b      	lsls	r3, r3, #20
 800d39c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d3a0:	2400      	movs	r4, #0
 800d3a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d3a6:	4622      	mov	r2, r4
 800d3a8:	462b      	mov	r3, r5
 800d3aa:	f7f3 f925 	bl	80005f8 <__aeabi_dmul>
 800d3ae:	bd70      	pop	{r4, r5, r6, pc}

0800d3b0 <_strtod_l>:
 800d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b4:	ed2d 8b02 	vpush	{d8}
 800d3b8:	b09d      	sub	sp, #116	; 0x74
 800d3ba:	461f      	mov	r7, r3
 800d3bc:	2300      	movs	r3, #0
 800d3be:	9318      	str	r3, [sp, #96]	; 0x60
 800d3c0:	4ba2      	ldr	r3, [pc, #648]	; (800d64c <_strtod_l+0x29c>)
 800d3c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	9305      	str	r3, [sp, #20]
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	4688      	mov	r8, r1
 800d3ce:	f7f2 feff 	bl	80001d0 <strlen>
 800d3d2:	f04f 0a00 	mov.w	sl, #0
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	f04f 0b00 	mov.w	fp, #0
 800d3dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d3e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3e2:	781a      	ldrb	r2, [r3, #0]
 800d3e4:	2a2b      	cmp	r2, #43	; 0x2b
 800d3e6:	d04e      	beq.n	800d486 <_strtod_l+0xd6>
 800d3e8:	d83b      	bhi.n	800d462 <_strtod_l+0xb2>
 800d3ea:	2a0d      	cmp	r2, #13
 800d3ec:	d834      	bhi.n	800d458 <_strtod_l+0xa8>
 800d3ee:	2a08      	cmp	r2, #8
 800d3f0:	d834      	bhi.n	800d45c <_strtod_l+0xac>
 800d3f2:	2a00      	cmp	r2, #0
 800d3f4:	d03e      	beq.n	800d474 <_strtod_l+0xc4>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	930a      	str	r3, [sp, #40]	; 0x28
 800d3fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d3fc:	7833      	ldrb	r3, [r6, #0]
 800d3fe:	2b30      	cmp	r3, #48	; 0x30
 800d400:	f040 80b0 	bne.w	800d564 <_strtod_l+0x1b4>
 800d404:	7873      	ldrb	r3, [r6, #1]
 800d406:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d40a:	2b58      	cmp	r3, #88	; 0x58
 800d40c:	d168      	bne.n	800d4e0 <_strtod_l+0x130>
 800d40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d410:	9301      	str	r3, [sp, #4]
 800d412:	ab18      	add	r3, sp, #96	; 0x60
 800d414:	9702      	str	r7, [sp, #8]
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	4a8d      	ldr	r2, [pc, #564]	; (800d650 <_strtod_l+0x2a0>)
 800d41a:	ab19      	add	r3, sp, #100	; 0x64
 800d41c:	a917      	add	r1, sp, #92	; 0x5c
 800d41e:	4620      	mov	r0, r4
 800d420:	f001 ffde 	bl	800f3e0 <__gethex>
 800d424:	f010 0707 	ands.w	r7, r0, #7
 800d428:	4605      	mov	r5, r0
 800d42a:	d005      	beq.n	800d438 <_strtod_l+0x88>
 800d42c:	2f06      	cmp	r7, #6
 800d42e:	d12c      	bne.n	800d48a <_strtod_l+0xda>
 800d430:	3601      	adds	r6, #1
 800d432:	2300      	movs	r3, #0
 800d434:	9617      	str	r6, [sp, #92]	; 0x5c
 800d436:	930a      	str	r3, [sp, #40]	; 0x28
 800d438:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f040 8590 	bne.w	800df60 <_strtod_l+0xbb0>
 800d440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d442:	b1eb      	cbz	r3, 800d480 <_strtod_l+0xd0>
 800d444:	4652      	mov	r2, sl
 800d446:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d44a:	ec43 2b10 	vmov	d0, r2, r3
 800d44e:	b01d      	add	sp, #116	; 0x74
 800d450:	ecbd 8b02 	vpop	{d8}
 800d454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d458:	2a20      	cmp	r2, #32
 800d45a:	d1cc      	bne.n	800d3f6 <_strtod_l+0x46>
 800d45c:	3301      	adds	r3, #1
 800d45e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d460:	e7be      	b.n	800d3e0 <_strtod_l+0x30>
 800d462:	2a2d      	cmp	r2, #45	; 0x2d
 800d464:	d1c7      	bne.n	800d3f6 <_strtod_l+0x46>
 800d466:	2201      	movs	r2, #1
 800d468:	920a      	str	r2, [sp, #40]	; 0x28
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d46e:	785b      	ldrb	r3, [r3, #1]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1c2      	bne.n	800d3fa <_strtod_l+0x4a>
 800d474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d476:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f040 856e 	bne.w	800df5c <_strtod_l+0xbac>
 800d480:	4652      	mov	r2, sl
 800d482:	465b      	mov	r3, fp
 800d484:	e7e1      	b.n	800d44a <_strtod_l+0x9a>
 800d486:	2200      	movs	r2, #0
 800d488:	e7ee      	b.n	800d468 <_strtod_l+0xb8>
 800d48a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d48c:	b13a      	cbz	r2, 800d49e <_strtod_l+0xee>
 800d48e:	2135      	movs	r1, #53	; 0x35
 800d490:	a81a      	add	r0, sp, #104	; 0x68
 800d492:	f002 ffc2 	bl	801041a <__copybits>
 800d496:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d498:	4620      	mov	r0, r4
 800d49a:	f002 fb81 	bl	800fba0 <_Bfree>
 800d49e:	3f01      	subs	r7, #1
 800d4a0:	2f04      	cmp	r7, #4
 800d4a2:	d806      	bhi.n	800d4b2 <_strtod_l+0x102>
 800d4a4:	e8df f007 	tbb	[pc, r7]
 800d4a8:	1714030a 	.word	0x1714030a
 800d4ac:	0a          	.byte	0x0a
 800d4ad:	00          	.byte	0x00
 800d4ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d4b2:	0728      	lsls	r0, r5, #28
 800d4b4:	d5c0      	bpl.n	800d438 <_strtod_l+0x88>
 800d4b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d4ba:	e7bd      	b.n	800d438 <_strtod_l+0x88>
 800d4bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d4c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d4c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d4c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d4ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d4ce:	e7f0      	b.n	800d4b2 <_strtod_l+0x102>
 800d4d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d654 <_strtod_l+0x2a4>
 800d4d4:	e7ed      	b.n	800d4b2 <_strtod_l+0x102>
 800d4d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d4da:	f04f 3aff 	mov.w	sl, #4294967295
 800d4de:	e7e8      	b.n	800d4b2 <_strtod_l+0x102>
 800d4e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4e2:	1c5a      	adds	r2, r3, #1
 800d4e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4e6:	785b      	ldrb	r3, [r3, #1]
 800d4e8:	2b30      	cmp	r3, #48	; 0x30
 800d4ea:	d0f9      	beq.n	800d4e0 <_strtod_l+0x130>
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d0a3      	beq.n	800d438 <_strtod_l+0x88>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	f04f 0900 	mov.w	r9, #0
 800d4f6:	9304      	str	r3, [sp, #16]
 800d4f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4fa:	9308      	str	r3, [sp, #32]
 800d4fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800d500:	464f      	mov	r7, r9
 800d502:	220a      	movs	r2, #10
 800d504:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d506:	7806      	ldrb	r6, [r0, #0]
 800d508:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d50c:	b2d9      	uxtb	r1, r3
 800d50e:	2909      	cmp	r1, #9
 800d510:	d92a      	bls.n	800d568 <_strtod_l+0x1b8>
 800d512:	9905      	ldr	r1, [sp, #20]
 800d514:	462a      	mov	r2, r5
 800d516:	f003 fec6 	bl	80112a6 <strncmp>
 800d51a:	b398      	cbz	r0, 800d584 <_strtod_l+0x1d4>
 800d51c:	2000      	movs	r0, #0
 800d51e:	4632      	mov	r2, r6
 800d520:	463d      	mov	r5, r7
 800d522:	9005      	str	r0, [sp, #20]
 800d524:	4603      	mov	r3, r0
 800d526:	2a65      	cmp	r2, #101	; 0x65
 800d528:	d001      	beq.n	800d52e <_strtod_l+0x17e>
 800d52a:	2a45      	cmp	r2, #69	; 0x45
 800d52c:	d118      	bne.n	800d560 <_strtod_l+0x1b0>
 800d52e:	b91d      	cbnz	r5, 800d538 <_strtod_l+0x188>
 800d530:	9a04      	ldr	r2, [sp, #16]
 800d532:	4302      	orrs	r2, r0
 800d534:	d09e      	beq.n	800d474 <_strtod_l+0xc4>
 800d536:	2500      	movs	r5, #0
 800d538:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d53c:	f108 0201 	add.w	r2, r8, #1
 800d540:	9217      	str	r2, [sp, #92]	; 0x5c
 800d542:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d546:	2a2b      	cmp	r2, #43	; 0x2b
 800d548:	d075      	beq.n	800d636 <_strtod_l+0x286>
 800d54a:	2a2d      	cmp	r2, #45	; 0x2d
 800d54c:	d07b      	beq.n	800d646 <_strtod_l+0x296>
 800d54e:	f04f 0c00 	mov.w	ip, #0
 800d552:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d556:	2909      	cmp	r1, #9
 800d558:	f240 8082 	bls.w	800d660 <_strtod_l+0x2b0>
 800d55c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d560:	2600      	movs	r6, #0
 800d562:	e09d      	b.n	800d6a0 <_strtod_l+0x2f0>
 800d564:	2300      	movs	r3, #0
 800d566:	e7c4      	b.n	800d4f2 <_strtod_l+0x142>
 800d568:	2f08      	cmp	r7, #8
 800d56a:	bfd8      	it	le
 800d56c:	9907      	ldrle	r1, [sp, #28]
 800d56e:	f100 0001 	add.w	r0, r0, #1
 800d572:	bfda      	itte	le
 800d574:	fb02 3301 	mlale	r3, r2, r1, r3
 800d578:	9307      	strle	r3, [sp, #28]
 800d57a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d57e:	3701      	adds	r7, #1
 800d580:	9017      	str	r0, [sp, #92]	; 0x5c
 800d582:	e7bf      	b.n	800d504 <_strtod_l+0x154>
 800d584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d586:	195a      	adds	r2, r3, r5
 800d588:	9217      	str	r2, [sp, #92]	; 0x5c
 800d58a:	5d5a      	ldrb	r2, [r3, r5]
 800d58c:	2f00      	cmp	r7, #0
 800d58e:	d037      	beq.n	800d600 <_strtod_l+0x250>
 800d590:	9005      	str	r0, [sp, #20]
 800d592:	463d      	mov	r5, r7
 800d594:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d598:	2b09      	cmp	r3, #9
 800d59a:	d912      	bls.n	800d5c2 <_strtod_l+0x212>
 800d59c:	2301      	movs	r3, #1
 800d59e:	e7c2      	b.n	800d526 <_strtod_l+0x176>
 800d5a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5a2:	1c5a      	adds	r2, r3, #1
 800d5a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5a6:	785a      	ldrb	r2, [r3, #1]
 800d5a8:	3001      	adds	r0, #1
 800d5aa:	2a30      	cmp	r2, #48	; 0x30
 800d5ac:	d0f8      	beq.n	800d5a0 <_strtod_l+0x1f0>
 800d5ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d5b2:	2b08      	cmp	r3, #8
 800d5b4:	f200 84d9 	bhi.w	800df6a <_strtod_l+0xbba>
 800d5b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5ba:	9005      	str	r0, [sp, #20]
 800d5bc:	2000      	movs	r0, #0
 800d5be:	9308      	str	r3, [sp, #32]
 800d5c0:	4605      	mov	r5, r0
 800d5c2:	3a30      	subs	r2, #48	; 0x30
 800d5c4:	f100 0301 	add.w	r3, r0, #1
 800d5c8:	d014      	beq.n	800d5f4 <_strtod_l+0x244>
 800d5ca:	9905      	ldr	r1, [sp, #20]
 800d5cc:	4419      	add	r1, r3
 800d5ce:	9105      	str	r1, [sp, #20]
 800d5d0:	462b      	mov	r3, r5
 800d5d2:	eb00 0e05 	add.w	lr, r0, r5
 800d5d6:	210a      	movs	r1, #10
 800d5d8:	4573      	cmp	r3, lr
 800d5da:	d113      	bne.n	800d604 <_strtod_l+0x254>
 800d5dc:	182b      	adds	r3, r5, r0
 800d5de:	2b08      	cmp	r3, #8
 800d5e0:	f105 0501 	add.w	r5, r5, #1
 800d5e4:	4405      	add	r5, r0
 800d5e6:	dc1c      	bgt.n	800d622 <_strtod_l+0x272>
 800d5e8:	9907      	ldr	r1, [sp, #28]
 800d5ea:	230a      	movs	r3, #10
 800d5ec:	fb03 2301 	mla	r3, r3, r1, r2
 800d5f0:	9307      	str	r3, [sp, #28]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5f6:	1c51      	adds	r1, r2, #1
 800d5f8:	9117      	str	r1, [sp, #92]	; 0x5c
 800d5fa:	7852      	ldrb	r2, [r2, #1]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	e7c9      	b.n	800d594 <_strtod_l+0x1e4>
 800d600:	4638      	mov	r0, r7
 800d602:	e7d2      	b.n	800d5aa <_strtod_l+0x1fa>
 800d604:	2b08      	cmp	r3, #8
 800d606:	dc04      	bgt.n	800d612 <_strtod_l+0x262>
 800d608:	9e07      	ldr	r6, [sp, #28]
 800d60a:	434e      	muls	r6, r1
 800d60c:	9607      	str	r6, [sp, #28]
 800d60e:	3301      	adds	r3, #1
 800d610:	e7e2      	b.n	800d5d8 <_strtod_l+0x228>
 800d612:	f103 0c01 	add.w	ip, r3, #1
 800d616:	f1bc 0f10 	cmp.w	ip, #16
 800d61a:	bfd8      	it	le
 800d61c:	fb01 f909 	mulle.w	r9, r1, r9
 800d620:	e7f5      	b.n	800d60e <_strtod_l+0x25e>
 800d622:	2d10      	cmp	r5, #16
 800d624:	bfdc      	itt	le
 800d626:	230a      	movle	r3, #10
 800d628:	fb03 2909 	mlale	r9, r3, r9, r2
 800d62c:	e7e1      	b.n	800d5f2 <_strtod_l+0x242>
 800d62e:	2300      	movs	r3, #0
 800d630:	9305      	str	r3, [sp, #20]
 800d632:	2301      	movs	r3, #1
 800d634:	e77c      	b.n	800d530 <_strtod_l+0x180>
 800d636:	f04f 0c00 	mov.w	ip, #0
 800d63a:	f108 0202 	add.w	r2, r8, #2
 800d63e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d640:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d644:	e785      	b.n	800d552 <_strtod_l+0x1a2>
 800d646:	f04f 0c01 	mov.w	ip, #1
 800d64a:	e7f6      	b.n	800d63a <_strtod_l+0x28a>
 800d64c:	08011f1c 	.word	0x08011f1c
 800d650:	08011c70 	.word	0x08011c70
 800d654:	7ff00000 	.word	0x7ff00000
 800d658:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d65a:	1c51      	adds	r1, r2, #1
 800d65c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d65e:	7852      	ldrb	r2, [r2, #1]
 800d660:	2a30      	cmp	r2, #48	; 0x30
 800d662:	d0f9      	beq.n	800d658 <_strtod_l+0x2a8>
 800d664:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d668:	2908      	cmp	r1, #8
 800d66a:	f63f af79 	bhi.w	800d560 <_strtod_l+0x1b0>
 800d66e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d672:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d674:	9206      	str	r2, [sp, #24]
 800d676:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d678:	1c51      	adds	r1, r2, #1
 800d67a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d67c:	7852      	ldrb	r2, [r2, #1]
 800d67e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d682:	2e09      	cmp	r6, #9
 800d684:	d937      	bls.n	800d6f6 <_strtod_l+0x346>
 800d686:	9e06      	ldr	r6, [sp, #24]
 800d688:	1b89      	subs	r1, r1, r6
 800d68a:	2908      	cmp	r1, #8
 800d68c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d690:	dc02      	bgt.n	800d698 <_strtod_l+0x2e8>
 800d692:	4576      	cmp	r6, lr
 800d694:	bfa8      	it	ge
 800d696:	4676      	movge	r6, lr
 800d698:	f1bc 0f00 	cmp.w	ip, #0
 800d69c:	d000      	beq.n	800d6a0 <_strtod_l+0x2f0>
 800d69e:	4276      	negs	r6, r6
 800d6a0:	2d00      	cmp	r5, #0
 800d6a2:	d14d      	bne.n	800d740 <_strtod_l+0x390>
 800d6a4:	9904      	ldr	r1, [sp, #16]
 800d6a6:	4301      	orrs	r1, r0
 800d6a8:	f47f aec6 	bne.w	800d438 <_strtod_l+0x88>
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f47f aee1 	bne.w	800d474 <_strtod_l+0xc4>
 800d6b2:	2a69      	cmp	r2, #105	; 0x69
 800d6b4:	d027      	beq.n	800d706 <_strtod_l+0x356>
 800d6b6:	dc24      	bgt.n	800d702 <_strtod_l+0x352>
 800d6b8:	2a49      	cmp	r2, #73	; 0x49
 800d6ba:	d024      	beq.n	800d706 <_strtod_l+0x356>
 800d6bc:	2a4e      	cmp	r2, #78	; 0x4e
 800d6be:	f47f aed9 	bne.w	800d474 <_strtod_l+0xc4>
 800d6c2:	499f      	ldr	r1, [pc, #636]	; (800d940 <_strtod_l+0x590>)
 800d6c4:	a817      	add	r0, sp, #92	; 0x5c
 800d6c6:	f002 f8e3 	bl	800f890 <__match>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	f43f aed2 	beq.w	800d474 <_strtod_l+0xc4>
 800d6d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b28      	cmp	r3, #40	; 0x28
 800d6d6:	d12d      	bne.n	800d734 <_strtod_l+0x384>
 800d6d8:	499a      	ldr	r1, [pc, #616]	; (800d944 <_strtod_l+0x594>)
 800d6da:	aa1a      	add	r2, sp, #104	; 0x68
 800d6dc:	a817      	add	r0, sp, #92	; 0x5c
 800d6de:	f002 f8eb 	bl	800f8b8 <__hexnan>
 800d6e2:	2805      	cmp	r0, #5
 800d6e4:	d126      	bne.n	800d734 <_strtod_l+0x384>
 800d6e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d6e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d6ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d6f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d6f4:	e6a0      	b.n	800d438 <_strtod_l+0x88>
 800d6f6:	210a      	movs	r1, #10
 800d6f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d6fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d700:	e7b9      	b.n	800d676 <_strtod_l+0x2c6>
 800d702:	2a6e      	cmp	r2, #110	; 0x6e
 800d704:	e7db      	b.n	800d6be <_strtod_l+0x30e>
 800d706:	4990      	ldr	r1, [pc, #576]	; (800d948 <_strtod_l+0x598>)
 800d708:	a817      	add	r0, sp, #92	; 0x5c
 800d70a:	f002 f8c1 	bl	800f890 <__match>
 800d70e:	2800      	cmp	r0, #0
 800d710:	f43f aeb0 	beq.w	800d474 <_strtod_l+0xc4>
 800d714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d716:	498d      	ldr	r1, [pc, #564]	; (800d94c <_strtod_l+0x59c>)
 800d718:	3b01      	subs	r3, #1
 800d71a:	a817      	add	r0, sp, #92	; 0x5c
 800d71c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d71e:	f002 f8b7 	bl	800f890 <__match>
 800d722:	b910      	cbnz	r0, 800d72a <_strtod_l+0x37a>
 800d724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d726:	3301      	adds	r3, #1
 800d728:	9317      	str	r3, [sp, #92]	; 0x5c
 800d72a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d95c <_strtod_l+0x5ac>
 800d72e:	f04f 0a00 	mov.w	sl, #0
 800d732:	e681      	b.n	800d438 <_strtod_l+0x88>
 800d734:	4886      	ldr	r0, [pc, #536]	; (800d950 <_strtod_l+0x5a0>)
 800d736:	f003 fd33 	bl	80111a0 <nan>
 800d73a:	ec5b ab10 	vmov	sl, fp, d0
 800d73e:	e67b      	b.n	800d438 <_strtod_l+0x88>
 800d740:	9b05      	ldr	r3, [sp, #20]
 800d742:	9807      	ldr	r0, [sp, #28]
 800d744:	1af3      	subs	r3, r6, r3
 800d746:	2f00      	cmp	r7, #0
 800d748:	bf08      	it	eq
 800d74a:	462f      	moveq	r7, r5
 800d74c:	2d10      	cmp	r5, #16
 800d74e:	9306      	str	r3, [sp, #24]
 800d750:	46a8      	mov	r8, r5
 800d752:	bfa8      	it	ge
 800d754:	f04f 0810 	movge.w	r8, #16
 800d758:	f7f2 fed4 	bl	8000504 <__aeabi_ui2d>
 800d75c:	2d09      	cmp	r5, #9
 800d75e:	4682      	mov	sl, r0
 800d760:	468b      	mov	fp, r1
 800d762:	dd13      	ble.n	800d78c <_strtod_l+0x3dc>
 800d764:	4b7b      	ldr	r3, [pc, #492]	; (800d954 <_strtod_l+0x5a4>)
 800d766:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d76a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d76e:	f7f2 ff43 	bl	80005f8 <__aeabi_dmul>
 800d772:	4682      	mov	sl, r0
 800d774:	4648      	mov	r0, r9
 800d776:	468b      	mov	fp, r1
 800d778:	f7f2 fec4 	bl	8000504 <__aeabi_ui2d>
 800d77c:	4602      	mov	r2, r0
 800d77e:	460b      	mov	r3, r1
 800d780:	4650      	mov	r0, sl
 800d782:	4659      	mov	r1, fp
 800d784:	f7f2 fd82 	bl	800028c <__adddf3>
 800d788:	4682      	mov	sl, r0
 800d78a:	468b      	mov	fp, r1
 800d78c:	2d0f      	cmp	r5, #15
 800d78e:	dc38      	bgt.n	800d802 <_strtod_l+0x452>
 800d790:	9b06      	ldr	r3, [sp, #24]
 800d792:	2b00      	cmp	r3, #0
 800d794:	f43f ae50 	beq.w	800d438 <_strtod_l+0x88>
 800d798:	dd24      	ble.n	800d7e4 <_strtod_l+0x434>
 800d79a:	2b16      	cmp	r3, #22
 800d79c:	dc0b      	bgt.n	800d7b6 <_strtod_l+0x406>
 800d79e:	496d      	ldr	r1, [pc, #436]	; (800d954 <_strtod_l+0x5a4>)
 800d7a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7a8:	4652      	mov	r2, sl
 800d7aa:	465b      	mov	r3, fp
 800d7ac:	f7f2 ff24 	bl	80005f8 <__aeabi_dmul>
 800d7b0:	4682      	mov	sl, r0
 800d7b2:	468b      	mov	fp, r1
 800d7b4:	e640      	b.n	800d438 <_strtod_l+0x88>
 800d7b6:	9a06      	ldr	r2, [sp, #24]
 800d7b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	db20      	blt.n	800d802 <_strtod_l+0x452>
 800d7c0:	4c64      	ldr	r4, [pc, #400]	; (800d954 <_strtod_l+0x5a4>)
 800d7c2:	f1c5 050f 	rsb	r5, r5, #15
 800d7c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d7ca:	4652      	mov	r2, sl
 800d7cc:	465b      	mov	r3, fp
 800d7ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7d2:	f7f2 ff11 	bl	80005f8 <__aeabi_dmul>
 800d7d6:	9b06      	ldr	r3, [sp, #24]
 800d7d8:	1b5d      	subs	r5, r3, r5
 800d7da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d7de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d7e2:	e7e3      	b.n	800d7ac <_strtod_l+0x3fc>
 800d7e4:	9b06      	ldr	r3, [sp, #24]
 800d7e6:	3316      	adds	r3, #22
 800d7e8:	db0b      	blt.n	800d802 <_strtod_l+0x452>
 800d7ea:	9b05      	ldr	r3, [sp, #20]
 800d7ec:	1b9e      	subs	r6, r3, r6
 800d7ee:	4b59      	ldr	r3, [pc, #356]	; (800d954 <_strtod_l+0x5a4>)
 800d7f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d7f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d7f8:	4650      	mov	r0, sl
 800d7fa:	4659      	mov	r1, fp
 800d7fc:	f7f3 f826 	bl	800084c <__aeabi_ddiv>
 800d800:	e7d6      	b.n	800d7b0 <_strtod_l+0x400>
 800d802:	9b06      	ldr	r3, [sp, #24]
 800d804:	eba5 0808 	sub.w	r8, r5, r8
 800d808:	4498      	add	r8, r3
 800d80a:	f1b8 0f00 	cmp.w	r8, #0
 800d80e:	dd74      	ble.n	800d8fa <_strtod_l+0x54a>
 800d810:	f018 030f 	ands.w	r3, r8, #15
 800d814:	d00a      	beq.n	800d82c <_strtod_l+0x47c>
 800d816:	494f      	ldr	r1, [pc, #316]	; (800d954 <_strtod_l+0x5a4>)
 800d818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d81c:	4652      	mov	r2, sl
 800d81e:	465b      	mov	r3, fp
 800d820:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d824:	f7f2 fee8 	bl	80005f8 <__aeabi_dmul>
 800d828:	4682      	mov	sl, r0
 800d82a:	468b      	mov	fp, r1
 800d82c:	f038 080f 	bics.w	r8, r8, #15
 800d830:	d04f      	beq.n	800d8d2 <_strtod_l+0x522>
 800d832:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d836:	dd22      	ble.n	800d87e <_strtod_l+0x4ce>
 800d838:	2500      	movs	r5, #0
 800d83a:	462e      	mov	r6, r5
 800d83c:	9507      	str	r5, [sp, #28]
 800d83e:	9505      	str	r5, [sp, #20]
 800d840:	2322      	movs	r3, #34	; 0x22
 800d842:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d95c <_strtod_l+0x5ac>
 800d846:	6023      	str	r3, [r4, #0]
 800d848:	f04f 0a00 	mov.w	sl, #0
 800d84c:	9b07      	ldr	r3, [sp, #28]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f43f adf2 	beq.w	800d438 <_strtod_l+0x88>
 800d854:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d856:	4620      	mov	r0, r4
 800d858:	f002 f9a2 	bl	800fba0 <_Bfree>
 800d85c:	9905      	ldr	r1, [sp, #20]
 800d85e:	4620      	mov	r0, r4
 800d860:	f002 f99e 	bl	800fba0 <_Bfree>
 800d864:	4631      	mov	r1, r6
 800d866:	4620      	mov	r0, r4
 800d868:	f002 f99a 	bl	800fba0 <_Bfree>
 800d86c:	9907      	ldr	r1, [sp, #28]
 800d86e:	4620      	mov	r0, r4
 800d870:	f002 f996 	bl	800fba0 <_Bfree>
 800d874:	4629      	mov	r1, r5
 800d876:	4620      	mov	r0, r4
 800d878:	f002 f992 	bl	800fba0 <_Bfree>
 800d87c:	e5dc      	b.n	800d438 <_strtod_l+0x88>
 800d87e:	4b36      	ldr	r3, [pc, #216]	; (800d958 <_strtod_l+0x5a8>)
 800d880:	9304      	str	r3, [sp, #16]
 800d882:	2300      	movs	r3, #0
 800d884:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d888:	4650      	mov	r0, sl
 800d88a:	4659      	mov	r1, fp
 800d88c:	4699      	mov	r9, r3
 800d88e:	f1b8 0f01 	cmp.w	r8, #1
 800d892:	dc21      	bgt.n	800d8d8 <_strtod_l+0x528>
 800d894:	b10b      	cbz	r3, 800d89a <_strtod_l+0x4ea>
 800d896:	4682      	mov	sl, r0
 800d898:	468b      	mov	fp, r1
 800d89a:	4b2f      	ldr	r3, [pc, #188]	; (800d958 <_strtod_l+0x5a8>)
 800d89c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d8a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d8a4:	4652      	mov	r2, sl
 800d8a6:	465b      	mov	r3, fp
 800d8a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d8ac:	f7f2 fea4 	bl	80005f8 <__aeabi_dmul>
 800d8b0:	4b2a      	ldr	r3, [pc, #168]	; (800d95c <_strtod_l+0x5ac>)
 800d8b2:	460a      	mov	r2, r1
 800d8b4:	400b      	ands	r3, r1
 800d8b6:	492a      	ldr	r1, [pc, #168]	; (800d960 <_strtod_l+0x5b0>)
 800d8b8:	428b      	cmp	r3, r1
 800d8ba:	4682      	mov	sl, r0
 800d8bc:	d8bc      	bhi.n	800d838 <_strtod_l+0x488>
 800d8be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d8c2:	428b      	cmp	r3, r1
 800d8c4:	bf86      	itte	hi
 800d8c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d964 <_strtod_l+0x5b4>
 800d8ca:	f04f 3aff 	movhi.w	sl, #4294967295
 800d8ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	9304      	str	r3, [sp, #16]
 800d8d6:	e084      	b.n	800d9e2 <_strtod_l+0x632>
 800d8d8:	f018 0f01 	tst.w	r8, #1
 800d8dc:	d005      	beq.n	800d8ea <_strtod_l+0x53a>
 800d8de:	9b04      	ldr	r3, [sp, #16]
 800d8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e4:	f7f2 fe88 	bl	80005f8 <__aeabi_dmul>
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	9a04      	ldr	r2, [sp, #16]
 800d8ec:	3208      	adds	r2, #8
 800d8ee:	f109 0901 	add.w	r9, r9, #1
 800d8f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d8f6:	9204      	str	r2, [sp, #16]
 800d8f8:	e7c9      	b.n	800d88e <_strtod_l+0x4de>
 800d8fa:	d0ea      	beq.n	800d8d2 <_strtod_l+0x522>
 800d8fc:	f1c8 0800 	rsb	r8, r8, #0
 800d900:	f018 020f 	ands.w	r2, r8, #15
 800d904:	d00a      	beq.n	800d91c <_strtod_l+0x56c>
 800d906:	4b13      	ldr	r3, [pc, #76]	; (800d954 <_strtod_l+0x5a4>)
 800d908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d90c:	4650      	mov	r0, sl
 800d90e:	4659      	mov	r1, fp
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	f7f2 ff9a 	bl	800084c <__aeabi_ddiv>
 800d918:	4682      	mov	sl, r0
 800d91a:	468b      	mov	fp, r1
 800d91c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d920:	d0d7      	beq.n	800d8d2 <_strtod_l+0x522>
 800d922:	f1b8 0f1f 	cmp.w	r8, #31
 800d926:	dd1f      	ble.n	800d968 <_strtod_l+0x5b8>
 800d928:	2500      	movs	r5, #0
 800d92a:	462e      	mov	r6, r5
 800d92c:	9507      	str	r5, [sp, #28]
 800d92e:	9505      	str	r5, [sp, #20]
 800d930:	2322      	movs	r3, #34	; 0x22
 800d932:	f04f 0a00 	mov.w	sl, #0
 800d936:	f04f 0b00 	mov.w	fp, #0
 800d93a:	6023      	str	r3, [r4, #0]
 800d93c:	e786      	b.n	800d84c <_strtod_l+0x49c>
 800d93e:	bf00      	nop
 800d940:	08011c45 	.word	0x08011c45
 800d944:	08011c84 	.word	0x08011c84
 800d948:	08011c3d 	.word	0x08011c3d
 800d94c:	08011dc4 	.word	0x08011dc4
 800d950:	080120f3 	.word	0x080120f3
 800d954:	08011fb8 	.word	0x08011fb8
 800d958:	08011f90 	.word	0x08011f90
 800d95c:	7ff00000 	.word	0x7ff00000
 800d960:	7ca00000 	.word	0x7ca00000
 800d964:	7fefffff 	.word	0x7fefffff
 800d968:	f018 0310 	ands.w	r3, r8, #16
 800d96c:	bf18      	it	ne
 800d96e:	236a      	movne	r3, #106	; 0x6a
 800d970:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dd20 <_strtod_l+0x970>
 800d974:	9304      	str	r3, [sp, #16]
 800d976:	4650      	mov	r0, sl
 800d978:	4659      	mov	r1, fp
 800d97a:	2300      	movs	r3, #0
 800d97c:	f018 0f01 	tst.w	r8, #1
 800d980:	d004      	beq.n	800d98c <_strtod_l+0x5dc>
 800d982:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d986:	f7f2 fe37 	bl	80005f8 <__aeabi_dmul>
 800d98a:	2301      	movs	r3, #1
 800d98c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d990:	f109 0908 	add.w	r9, r9, #8
 800d994:	d1f2      	bne.n	800d97c <_strtod_l+0x5cc>
 800d996:	b10b      	cbz	r3, 800d99c <_strtod_l+0x5ec>
 800d998:	4682      	mov	sl, r0
 800d99a:	468b      	mov	fp, r1
 800d99c:	9b04      	ldr	r3, [sp, #16]
 800d99e:	b1c3      	cbz	r3, 800d9d2 <_strtod_l+0x622>
 800d9a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d9a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	4659      	mov	r1, fp
 800d9ac:	dd11      	ble.n	800d9d2 <_strtod_l+0x622>
 800d9ae:	2b1f      	cmp	r3, #31
 800d9b0:	f340 8124 	ble.w	800dbfc <_strtod_l+0x84c>
 800d9b4:	2b34      	cmp	r3, #52	; 0x34
 800d9b6:	bfde      	ittt	le
 800d9b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d9bc:	f04f 33ff 	movle.w	r3, #4294967295
 800d9c0:	fa03 f202 	lslle.w	r2, r3, r2
 800d9c4:	f04f 0a00 	mov.w	sl, #0
 800d9c8:	bfcc      	ite	gt
 800d9ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d9ce:	ea02 0b01 	andle.w	fp, r2, r1
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	4650      	mov	r0, sl
 800d9d8:	4659      	mov	r1, fp
 800d9da:	f7f3 f875 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d1a2      	bne.n	800d928 <_strtod_l+0x578>
 800d9e2:	9b07      	ldr	r3, [sp, #28]
 800d9e4:	9300      	str	r3, [sp, #0]
 800d9e6:	9908      	ldr	r1, [sp, #32]
 800d9e8:	462b      	mov	r3, r5
 800d9ea:	463a      	mov	r2, r7
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f002 f93f 	bl	800fc70 <__s2b>
 800d9f2:	9007      	str	r0, [sp, #28]
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	f43f af1f 	beq.w	800d838 <_strtod_l+0x488>
 800d9fa:	9b05      	ldr	r3, [sp, #20]
 800d9fc:	1b9e      	subs	r6, r3, r6
 800d9fe:	9b06      	ldr	r3, [sp, #24]
 800da00:	2b00      	cmp	r3, #0
 800da02:	bfb4      	ite	lt
 800da04:	4633      	movlt	r3, r6
 800da06:	2300      	movge	r3, #0
 800da08:	930c      	str	r3, [sp, #48]	; 0x30
 800da0a:	9b06      	ldr	r3, [sp, #24]
 800da0c:	2500      	movs	r5, #0
 800da0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800da12:	9312      	str	r3, [sp, #72]	; 0x48
 800da14:	462e      	mov	r6, r5
 800da16:	9b07      	ldr	r3, [sp, #28]
 800da18:	4620      	mov	r0, r4
 800da1a:	6859      	ldr	r1, [r3, #4]
 800da1c:	f002 f880 	bl	800fb20 <_Balloc>
 800da20:	9005      	str	r0, [sp, #20]
 800da22:	2800      	cmp	r0, #0
 800da24:	f43f af0c 	beq.w	800d840 <_strtod_l+0x490>
 800da28:	9b07      	ldr	r3, [sp, #28]
 800da2a:	691a      	ldr	r2, [r3, #16]
 800da2c:	3202      	adds	r2, #2
 800da2e:	f103 010c 	add.w	r1, r3, #12
 800da32:	0092      	lsls	r2, r2, #2
 800da34:	300c      	adds	r0, #12
 800da36:	f002 f859 	bl	800faec <memcpy>
 800da3a:	ec4b ab10 	vmov	d0, sl, fp
 800da3e:	aa1a      	add	r2, sp, #104	; 0x68
 800da40:	a919      	add	r1, sp, #100	; 0x64
 800da42:	4620      	mov	r0, r4
 800da44:	f002 fc5a 	bl	80102fc <__d2b>
 800da48:	ec4b ab18 	vmov	d8, sl, fp
 800da4c:	9018      	str	r0, [sp, #96]	; 0x60
 800da4e:	2800      	cmp	r0, #0
 800da50:	f43f aef6 	beq.w	800d840 <_strtod_l+0x490>
 800da54:	2101      	movs	r1, #1
 800da56:	4620      	mov	r0, r4
 800da58:	f002 f9a4 	bl	800fda4 <__i2b>
 800da5c:	4606      	mov	r6, r0
 800da5e:	2800      	cmp	r0, #0
 800da60:	f43f aeee 	beq.w	800d840 <_strtod_l+0x490>
 800da64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da66:	9904      	ldr	r1, [sp, #16]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	bfab      	itete	ge
 800da6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800da6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800da70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800da72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800da76:	bfac      	ite	ge
 800da78:	eb03 0902 	addge.w	r9, r3, r2
 800da7c:	1ad7      	sublt	r7, r2, r3
 800da7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800da80:	eba3 0801 	sub.w	r8, r3, r1
 800da84:	4490      	add	r8, r2
 800da86:	4ba1      	ldr	r3, [pc, #644]	; (800dd0c <_strtod_l+0x95c>)
 800da88:	f108 38ff 	add.w	r8, r8, #4294967295
 800da8c:	4598      	cmp	r8, r3
 800da8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800da92:	f280 80c7 	bge.w	800dc24 <_strtod_l+0x874>
 800da96:	eba3 0308 	sub.w	r3, r3, r8
 800da9a:	2b1f      	cmp	r3, #31
 800da9c:	eba2 0203 	sub.w	r2, r2, r3
 800daa0:	f04f 0101 	mov.w	r1, #1
 800daa4:	f300 80b1 	bgt.w	800dc0a <_strtod_l+0x85a>
 800daa8:	fa01 f303 	lsl.w	r3, r1, r3
 800daac:	930d      	str	r3, [sp, #52]	; 0x34
 800daae:	2300      	movs	r3, #0
 800dab0:	9308      	str	r3, [sp, #32]
 800dab2:	eb09 0802 	add.w	r8, r9, r2
 800dab6:	9b04      	ldr	r3, [sp, #16]
 800dab8:	45c1      	cmp	r9, r8
 800daba:	4417      	add	r7, r2
 800dabc:	441f      	add	r7, r3
 800dabe:	464b      	mov	r3, r9
 800dac0:	bfa8      	it	ge
 800dac2:	4643      	movge	r3, r8
 800dac4:	42bb      	cmp	r3, r7
 800dac6:	bfa8      	it	ge
 800dac8:	463b      	movge	r3, r7
 800daca:	2b00      	cmp	r3, #0
 800dacc:	bfc2      	ittt	gt
 800dace:	eba8 0803 	subgt.w	r8, r8, r3
 800dad2:	1aff      	subgt	r7, r7, r3
 800dad4:	eba9 0903 	subgt.w	r9, r9, r3
 800dad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dada:	2b00      	cmp	r3, #0
 800dadc:	dd17      	ble.n	800db0e <_strtod_l+0x75e>
 800dade:	4631      	mov	r1, r6
 800dae0:	461a      	mov	r2, r3
 800dae2:	4620      	mov	r0, r4
 800dae4:	f002 fa1e 	bl	800ff24 <__pow5mult>
 800dae8:	4606      	mov	r6, r0
 800daea:	2800      	cmp	r0, #0
 800daec:	f43f aea8 	beq.w	800d840 <_strtod_l+0x490>
 800daf0:	4601      	mov	r1, r0
 800daf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800daf4:	4620      	mov	r0, r4
 800daf6:	f002 f96b 	bl	800fdd0 <__multiply>
 800dafa:	900b      	str	r0, [sp, #44]	; 0x2c
 800dafc:	2800      	cmp	r0, #0
 800dafe:	f43f ae9f 	beq.w	800d840 <_strtod_l+0x490>
 800db02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db04:	4620      	mov	r0, r4
 800db06:	f002 f84b 	bl	800fba0 <_Bfree>
 800db0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db0c:	9318      	str	r3, [sp, #96]	; 0x60
 800db0e:	f1b8 0f00 	cmp.w	r8, #0
 800db12:	f300 808c 	bgt.w	800dc2e <_strtod_l+0x87e>
 800db16:	9b06      	ldr	r3, [sp, #24]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	dd08      	ble.n	800db2e <_strtod_l+0x77e>
 800db1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db1e:	9905      	ldr	r1, [sp, #20]
 800db20:	4620      	mov	r0, r4
 800db22:	f002 f9ff 	bl	800ff24 <__pow5mult>
 800db26:	9005      	str	r0, [sp, #20]
 800db28:	2800      	cmp	r0, #0
 800db2a:	f43f ae89 	beq.w	800d840 <_strtod_l+0x490>
 800db2e:	2f00      	cmp	r7, #0
 800db30:	dd08      	ble.n	800db44 <_strtod_l+0x794>
 800db32:	9905      	ldr	r1, [sp, #20]
 800db34:	463a      	mov	r2, r7
 800db36:	4620      	mov	r0, r4
 800db38:	f002 fa4e 	bl	800ffd8 <__lshift>
 800db3c:	9005      	str	r0, [sp, #20]
 800db3e:	2800      	cmp	r0, #0
 800db40:	f43f ae7e 	beq.w	800d840 <_strtod_l+0x490>
 800db44:	f1b9 0f00 	cmp.w	r9, #0
 800db48:	dd08      	ble.n	800db5c <_strtod_l+0x7ac>
 800db4a:	4631      	mov	r1, r6
 800db4c:	464a      	mov	r2, r9
 800db4e:	4620      	mov	r0, r4
 800db50:	f002 fa42 	bl	800ffd8 <__lshift>
 800db54:	4606      	mov	r6, r0
 800db56:	2800      	cmp	r0, #0
 800db58:	f43f ae72 	beq.w	800d840 <_strtod_l+0x490>
 800db5c:	9a05      	ldr	r2, [sp, #20]
 800db5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db60:	4620      	mov	r0, r4
 800db62:	f002 fac5 	bl	80100f0 <__mdiff>
 800db66:	4605      	mov	r5, r0
 800db68:	2800      	cmp	r0, #0
 800db6a:	f43f ae69 	beq.w	800d840 <_strtod_l+0x490>
 800db6e:	68c3      	ldr	r3, [r0, #12]
 800db70:	930b      	str	r3, [sp, #44]	; 0x2c
 800db72:	2300      	movs	r3, #0
 800db74:	60c3      	str	r3, [r0, #12]
 800db76:	4631      	mov	r1, r6
 800db78:	f002 fa9e 	bl	80100b8 <__mcmp>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	da60      	bge.n	800dc42 <_strtod_l+0x892>
 800db80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db82:	ea53 030a 	orrs.w	r3, r3, sl
 800db86:	f040 8082 	bne.w	800dc8e <_strtod_l+0x8de>
 800db8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d17d      	bne.n	800dc8e <_strtod_l+0x8de>
 800db92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db96:	0d1b      	lsrs	r3, r3, #20
 800db98:	051b      	lsls	r3, r3, #20
 800db9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800db9e:	d976      	bls.n	800dc8e <_strtod_l+0x8de>
 800dba0:	696b      	ldr	r3, [r5, #20]
 800dba2:	b913      	cbnz	r3, 800dbaa <_strtod_l+0x7fa>
 800dba4:	692b      	ldr	r3, [r5, #16]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	dd71      	ble.n	800dc8e <_strtod_l+0x8de>
 800dbaa:	4629      	mov	r1, r5
 800dbac:	2201      	movs	r2, #1
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f002 fa12 	bl	800ffd8 <__lshift>
 800dbb4:	4631      	mov	r1, r6
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	f002 fa7e 	bl	80100b8 <__mcmp>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	dd66      	ble.n	800dc8e <_strtod_l+0x8de>
 800dbc0:	9904      	ldr	r1, [sp, #16]
 800dbc2:	4a53      	ldr	r2, [pc, #332]	; (800dd10 <_strtod_l+0x960>)
 800dbc4:	465b      	mov	r3, fp
 800dbc6:	2900      	cmp	r1, #0
 800dbc8:	f000 8081 	beq.w	800dcce <_strtod_l+0x91e>
 800dbcc:	ea02 010b 	and.w	r1, r2, fp
 800dbd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dbd4:	dc7b      	bgt.n	800dcce <_strtod_l+0x91e>
 800dbd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dbda:	f77f aea9 	ble.w	800d930 <_strtod_l+0x580>
 800dbde:	4b4d      	ldr	r3, [pc, #308]	; (800dd14 <_strtod_l+0x964>)
 800dbe0:	4650      	mov	r0, sl
 800dbe2:	4659      	mov	r1, fp
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f7f2 fd07 	bl	80005f8 <__aeabi_dmul>
 800dbea:	460b      	mov	r3, r1
 800dbec:	4303      	orrs	r3, r0
 800dbee:	bf08      	it	eq
 800dbf0:	2322      	moveq	r3, #34	; 0x22
 800dbf2:	4682      	mov	sl, r0
 800dbf4:	468b      	mov	fp, r1
 800dbf6:	bf08      	it	eq
 800dbf8:	6023      	streq	r3, [r4, #0]
 800dbfa:	e62b      	b.n	800d854 <_strtod_l+0x4a4>
 800dbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800dc00:	fa02 f303 	lsl.w	r3, r2, r3
 800dc04:	ea03 0a0a 	and.w	sl, r3, sl
 800dc08:	e6e3      	b.n	800d9d2 <_strtod_l+0x622>
 800dc0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dc0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dc12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dc16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dc1a:	fa01 f308 	lsl.w	r3, r1, r8
 800dc1e:	9308      	str	r3, [sp, #32]
 800dc20:	910d      	str	r1, [sp, #52]	; 0x34
 800dc22:	e746      	b.n	800dab2 <_strtod_l+0x702>
 800dc24:	2300      	movs	r3, #0
 800dc26:	9308      	str	r3, [sp, #32]
 800dc28:	2301      	movs	r3, #1
 800dc2a:	930d      	str	r3, [sp, #52]	; 0x34
 800dc2c:	e741      	b.n	800dab2 <_strtod_l+0x702>
 800dc2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc30:	4642      	mov	r2, r8
 800dc32:	4620      	mov	r0, r4
 800dc34:	f002 f9d0 	bl	800ffd8 <__lshift>
 800dc38:	9018      	str	r0, [sp, #96]	; 0x60
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	f47f af6b 	bne.w	800db16 <_strtod_l+0x766>
 800dc40:	e5fe      	b.n	800d840 <_strtod_l+0x490>
 800dc42:	465f      	mov	r7, fp
 800dc44:	d16e      	bne.n	800dd24 <_strtod_l+0x974>
 800dc46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc4c:	b342      	cbz	r2, 800dca0 <_strtod_l+0x8f0>
 800dc4e:	4a32      	ldr	r2, [pc, #200]	; (800dd18 <_strtod_l+0x968>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d128      	bne.n	800dca6 <_strtod_l+0x8f6>
 800dc54:	9b04      	ldr	r3, [sp, #16]
 800dc56:	4651      	mov	r1, sl
 800dc58:	b1eb      	cbz	r3, 800dc96 <_strtod_l+0x8e6>
 800dc5a:	4b2d      	ldr	r3, [pc, #180]	; (800dd10 <_strtod_l+0x960>)
 800dc5c:	403b      	ands	r3, r7
 800dc5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dc62:	f04f 32ff 	mov.w	r2, #4294967295
 800dc66:	d819      	bhi.n	800dc9c <_strtod_l+0x8ec>
 800dc68:	0d1b      	lsrs	r3, r3, #20
 800dc6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc72:	4299      	cmp	r1, r3
 800dc74:	d117      	bne.n	800dca6 <_strtod_l+0x8f6>
 800dc76:	4b29      	ldr	r3, [pc, #164]	; (800dd1c <_strtod_l+0x96c>)
 800dc78:	429f      	cmp	r7, r3
 800dc7a:	d102      	bne.n	800dc82 <_strtod_l+0x8d2>
 800dc7c:	3101      	adds	r1, #1
 800dc7e:	f43f addf 	beq.w	800d840 <_strtod_l+0x490>
 800dc82:	4b23      	ldr	r3, [pc, #140]	; (800dd10 <_strtod_l+0x960>)
 800dc84:	403b      	ands	r3, r7
 800dc86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dc8a:	f04f 0a00 	mov.w	sl, #0
 800dc8e:	9b04      	ldr	r3, [sp, #16]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d1a4      	bne.n	800dbde <_strtod_l+0x82e>
 800dc94:	e5de      	b.n	800d854 <_strtod_l+0x4a4>
 800dc96:	f04f 33ff 	mov.w	r3, #4294967295
 800dc9a:	e7ea      	b.n	800dc72 <_strtod_l+0x8c2>
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	e7e8      	b.n	800dc72 <_strtod_l+0x8c2>
 800dca0:	ea53 030a 	orrs.w	r3, r3, sl
 800dca4:	d08c      	beq.n	800dbc0 <_strtod_l+0x810>
 800dca6:	9b08      	ldr	r3, [sp, #32]
 800dca8:	b1db      	cbz	r3, 800dce2 <_strtod_l+0x932>
 800dcaa:	423b      	tst	r3, r7
 800dcac:	d0ef      	beq.n	800dc8e <_strtod_l+0x8de>
 800dcae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcb0:	9a04      	ldr	r2, [sp, #16]
 800dcb2:	4650      	mov	r0, sl
 800dcb4:	4659      	mov	r1, fp
 800dcb6:	b1c3      	cbz	r3, 800dcea <_strtod_l+0x93a>
 800dcb8:	f7ff fb5e 	bl	800d378 <sulp>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	ec51 0b18 	vmov	r0, r1, d8
 800dcc4:	f7f2 fae2 	bl	800028c <__adddf3>
 800dcc8:	4682      	mov	sl, r0
 800dcca:	468b      	mov	fp, r1
 800dccc:	e7df      	b.n	800dc8e <_strtod_l+0x8de>
 800dcce:	4013      	ands	r3, r2
 800dcd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dcd4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dcd8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dcdc:	f04f 3aff 	mov.w	sl, #4294967295
 800dce0:	e7d5      	b.n	800dc8e <_strtod_l+0x8de>
 800dce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dce4:	ea13 0f0a 	tst.w	r3, sl
 800dce8:	e7e0      	b.n	800dcac <_strtod_l+0x8fc>
 800dcea:	f7ff fb45 	bl	800d378 <sulp>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	ec51 0b18 	vmov	r0, r1, d8
 800dcf6:	f7f2 fac7 	bl	8000288 <__aeabi_dsub>
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	4682      	mov	sl, r0
 800dd00:	468b      	mov	fp, r1
 800dd02:	f7f2 fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d0c1      	beq.n	800dc8e <_strtod_l+0x8de>
 800dd0a:	e611      	b.n	800d930 <_strtod_l+0x580>
 800dd0c:	fffffc02 	.word	0xfffffc02
 800dd10:	7ff00000 	.word	0x7ff00000
 800dd14:	39500000 	.word	0x39500000
 800dd18:	000fffff 	.word	0x000fffff
 800dd1c:	7fefffff 	.word	0x7fefffff
 800dd20:	08011c98 	.word	0x08011c98
 800dd24:	4631      	mov	r1, r6
 800dd26:	4628      	mov	r0, r5
 800dd28:	f002 fb44 	bl	80103b4 <__ratio>
 800dd2c:	ec59 8b10 	vmov	r8, r9, d0
 800dd30:	ee10 0a10 	vmov	r0, s0
 800dd34:	2200      	movs	r2, #0
 800dd36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd3a:	4649      	mov	r1, r9
 800dd3c:	f7f2 fed8 	bl	8000af0 <__aeabi_dcmple>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d07a      	beq.n	800de3a <_strtod_l+0xa8a>
 800dd44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d04a      	beq.n	800dde0 <_strtod_l+0xa30>
 800dd4a:	4b95      	ldr	r3, [pc, #596]	; (800dfa0 <_strtod_l+0xbf0>)
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dfa0 <_strtod_l+0xbf0>
 800dd56:	f04f 0800 	mov.w	r8, #0
 800dd5a:	4b92      	ldr	r3, [pc, #584]	; (800dfa4 <_strtod_l+0xbf4>)
 800dd5c:	403b      	ands	r3, r7
 800dd5e:	930d      	str	r3, [sp, #52]	; 0x34
 800dd60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd62:	4b91      	ldr	r3, [pc, #580]	; (800dfa8 <_strtod_l+0xbf8>)
 800dd64:	429a      	cmp	r2, r3
 800dd66:	f040 80b0 	bne.w	800deca <_strtod_l+0xb1a>
 800dd6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800dd72:	ec4b ab10 	vmov	d0, sl, fp
 800dd76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd7a:	f002 fa43 	bl	8010204 <__ulp>
 800dd7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd82:	ec53 2b10 	vmov	r2, r3, d0
 800dd86:	f7f2 fc37 	bl	80005f8 <__aeabi_dmul>
 800dd8a:	4652      	mov	r2, sl
 800dd8c:	465b      	mov	r3, fp
 800dd8e:	f7f2 fa7d 	bl	800028c <__adddf3>
 800dd92:	460b      	mov	r3, r1
 800dd94:	4983      	ldr	r1, [pc, #524]	; (800dfa4 <_strtod_l+0xbf4>)
 800dd96:	4a85      	ldr	r2, [pc, #532]	; (800dfac <_strtod_l+0xbfc>)
 800dd98:	4019      	ands	r1, r3
 800dd9a:	4291      	cmp	r1, r2
 800dd9c:	4682      	mov	sl, r0
 800dd9e:	d960      	bls.n	800de62 <_strtod_l+0xab2>
 800dda0:	ee18 3a90 	vmov	r3, s17
 800dda4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d104      	bne.n	800ddb6 <_strtod_l+0xa06>
 800ddac:	ee18 3a10 	vmov	r3, s16
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	f43f ad45 	beq.w	800d840 <_strtod_l+0x490>
 800ddb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800dfb8 <_strtod_l+0xc08>
 800ddba:	f04f 3aff 	mov.w	sl, #4294967295
 800ddbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f001 feed 	bl	800fba0 <_Bfree>
 800ddc6:	9905      	ldr	r1, [sp, #20]
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f001 fee9 	bl	800fba0 <_Bfree>
 800ddce:	4631      	mov	r1, r6
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f001 fee5 	bl	800fba0 <_Bfree>
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f001 fee1 	bl	800fba0 <_Bfree>
 800ddde:	e61a      	b.n	800da16 <_strtod_l+0x666>
 800dde0:	f1ba 0f00 	cmp.w	sl, #0
 800dde4:	d11b      	bne.n	800de1e <_strtod_l+0xa6e>
 800dde6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddea:	b9f3      	cbnz	r3, 800de2a <_strtod_l+0xa7a>
 800ddec:	4b6c      	ldr	r3, [pc, #432]	; (800dfa0 <_strtod_l+0xbf0>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	4640      	mov	r0, r8
 800ddf2:	4649      	mov	r1, r9
 800ddf4:	f7f2 fe72 	bl	8000adc <__aeabi_dcmplt>
 800ddf8:	b9d0      	cbnz	r0, 800de30 <_strtod_l+0xa80>
 800ddfa:	4640      	mov	r0, r8
 800ddfc:	4649      	mov	r1, r9
 800ddfe:	4b6c      	ldr	r3, [pc, #432]	; (800dfb0 <_strtod_l+0xc00>)
 800de00:	2200      	movs	r2, #0
 800de02:	f7f2 fbf9 	bl	80005f8 <__aeabi_dmul>
 800de06:	4680      	mov	r8, r0
 800de08:	4689      	mov	r9, r1
 800de0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800de0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800de12:	9315      	str	r3, [sp, #84]	; 0x54
 800de14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800de18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de1c:	e79d      	b.n	800dd5a <_strtod_l+0x9aa>
 800de1e:	f1ba 0f01 	cmp.w	sl, #1
 800de22:	d102      	bne.n	800de2a <_strtod_l+0xa7a>
 800de24:	2f00      	cmp	r7, #0
 800de26:	f43f ad83 	beq.w	800d930 <_strtod_l+0x580>
 800de2a:	4b62      	ldr	r3, [pc, #392]	; (800dfb4 <_strtod_l+0xc04>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	e78e      	b.n	800dd4e <_strtod_l+0x99e>
 800de30:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800dfb0 <_strtod_l+0xc00>
 800de34:	f04f 0800 	mov.w	r8, #0
 800de38:	e7e7      	b.n	800de0a <_strtod_l+0xa5a>
 800de3a:	4b5d      	ldr	r3, [pc, #372]	; (800dfb0 <_strtod_l+0xc00>)
 800de3c:	4640      	mov	r0, r8
 800de3e:	4649      	mov	r1, r9
 800de40:	2200      	movs	r2, #0
 800de42:	f7f2 fbd9 	bl	80005f8 <__aeabi_dmul>
 800de46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de48:	4680      	mov	r8, r0
 800de4a:	4689      	mov	r9, r1
 800de4c:	b933      	cbnz	r3, 800de5c <_strtod_l+0xaac>
 800de4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de52:	900e      	str	r0, [sp, #56]	; 0x38
 800de54:	930f      	str	r3, [sp, #60]	; 0x3c
 800de56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800de5a:	e7dd      	b.n	800de18 <_strtod_l+0xa68>
 800de5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800de60:	e7f9      	b.n	800de56 <_strtod_l+0xaa6>
 800de62:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800de66:	9b04      	ldr	r3, [sp, #16]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1a8      	bne.n	800ddbe <_strtod_l+0xa0e>
 800de6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de72:	0d1b      	lsrs	r3, r3, #20
 800de74:	051b      	lsls	r3, r3, #20
 800de76:	429a      	cmp	r2, r3
 800de78:	d1a1      	bne.n	800ddbe <_strtod_l+0xa0e>
 800de7a:	4640      	mov	r0, r8
 800de7c:	4649      	mov	r1, r9
 800de7e:	f7f2 ff1b 	bl	8000cb8 <__aeabi_d2lz>
 800de82:	f7f2 fb8b 	bl	800059c <__aeabi_l2d>
 800de86:	4602      	mov	r2, r0
 800de88:	460b      	mov	r3, r1
 800de8a:	4640      	mov	r0, r8
 800de8c:	4649      	mov	r1, r9
 800de8e:	f7f2 f9fb 	bl	8000288 <__aeabi_dsub>
 800de92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de98:	ea43 030a 	orr.w	r3, r3, sl
 800de9c:	4313      	orrs	r3, r2
 800de9e:	4680      	mov	r8, r0
 800dea0:	4689      	mov	r9, r1
 800dea2:	d055      	beq.n	800df50 <_strtod_l+0xba0>
 800dea4:	a336      	add	r3, pc, #216	; (adr r3, 800df80 <_strtod_l+0xbd0>)
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	f7f2 fe17 	bl	8000adc <__aeabi_dcmplt>
 800deae:	2800      	cmp	r0, #0
 800deb0:	f47f acd0 	bne.w	800d854 <_strtod_l+0x4a4>
 800deb4:	a334      	add	r3, pc, #208	; (adr r3, 800df88 <_strtod_l+0xbd8>)
 800deb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deba:	4640      	mov	r0, r8
 800debc:	4649      	mov	r1, r9
 800debe:	f7f2 fe2b 	bl	8000b18 <__aeabi_dcmpgt>
 800dec2:	2800      	cmp	r0, #0
 800dec4:	f43f af7b 	beq.w	800ddbe <_strtod_l+0xa0e>
 800dec8:	e4c4      	b.n	800d854 <_strtod_l+0x4a4>
 800deca:	9b04      	ldr	r3, [sp, #16]
 800decc:	b333      	cbz	r3, 800df1c <_strtod_l+0xb6c>
 800dece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ded0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ded4:	d822      	bhi.n	800df1c <_strtod_l+0xb6c>
 800ded6:	a32e      	add	r3, pc, #184	; (adr r3, 800df90 <_strtod_l+0xbe0>)
 800ded8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dedc:	4640      	mov	r0, r8
 800dede:	4649      	mov	r1, r9
 800dee0:	f7f2 fe06 	bl	8000af0 <__aeabi_dcmple>
 800dee4:	b1a0      	cbz	r0, 800df10 <_strtod_l+0xb60>
 800dee6:	4649      	mov	r1, r9
 800dee8:	4640      	mov	r0, r8
 800deea:	f7f2 fe5d 	bl	8000ba8 <__aeabi_d2uiz>
 800deee:	2801      	cmp	r0, #1
 800def0:	bf38      	it	cc
 800def2:	2001      	movcc	r0, #1
 800def4:	f7f2 fb06 	bl	8000504 <__aeabi_ui2d>
 800def8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800defa:	4680      	mov	r8, r0
 800defc:	4689      	mov	r9, r1
 800defe:	bb23      	cbnz	r3, 800df4a <_strtod_l+0xb9a>
 800df00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df04:	9010      	str	r0, [sp, #64]	; 0x40
 800df06:	9311      	str	r3, [sp, #68]	; 0x44
 800df08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800df18:	1a9b      	subs	r3, r3, r2
 800df1a:	9309      	str	r3, [sp, #36]	; 0x24
 800df1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df20:	eeb0 0a48 	vmov.f32	s0, s16
 800df24:	eef0 0a68 	vmov.f32	s1, s17
 800df28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df2c:	f002 f96a 	bl	8010204 <__ulp>
 800df30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df34:	ec53 2b10 	vmov	r2, r3, d0
 800df38:	f7f2 fb5e 	bl	80005f8 <__aeabi_dmul>
 800df3c:	ec53 2b18 	vmov	r2, r3, d8
 800df40:	f7f2 f9a4 	bl	800028c <__adddf3>
 800df44:	4682      	mov	sl, r0
 800df46:	468b      	mov	fp, r1
 800df48:	e78d      	b.n	800de66 <_strtod_l+0xab6>
 800df4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800df4e:	e7db      	b.n	800df08 <_strtod_l+0xb58>
 800df50:	a311      	add	r3, pc, #68	; (adr r3, 800df98 <_strtod_l+0xbe8>)
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	f7f2 fdc1 	bl	8000adc <__aeabi_dcmplt>
 800df5a:	e7b2      	b.n	800dec2 <_strtod_l+0xb12>
 800df5c:	2300      	movs	r3, #0
 800df5e:	930a      	str	r3, [sp, #40]	; 0x28
 800df60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df64:	6013      	str	r3, [r2, #0]
 800df66:	f7ff ba6b 	b.w	800d440 <_strtod_l+0x90>
 800df6a:	2a65      	cmp	r2, #101	; 0x65
 800df6c:	f43f ab5f 	beq.w	800d62e <_strtod_l+0x27e>
 800df70:	2a45      	cmp	r2, #69	; 0x45
 800df72:	f43f ab5c 	beq.w	800d62e <_strtod_l+0x27e>
 800df76:	2301      	movs	r3, #1
 800df78:	f7ff bb94 	b.w	800d6a4 <_strtod_l+0x2f4>
 800df7c:	f3af 8000 	nop.w
 800df80:	94a03595 	.word	0x94a03595
 800df84:	3fdfffff 	.word	0x3fdfffff
 800df88:	35afe535 	.word	0x35afe535
 800df8c:	3fe00000 	.word	0x3fe00000
 800df90:	ffc00000 	.word	0xffc00000
 800df94:	41dfffff 	.word	0x41dfffff
 800df98:	94a03595 	.word	0x94a03595
 800df9c:	3fcfffff 	.word	0x3fcfffff
 800dfa0:	3ff00000 	.word	0x3ff00000
 800dfa4:	7ff00000 	.word	0x7ff00000
 800dfa8:	7fe00000 	.word	0x7fe00000
 800dfac:	7c9fffff 	.word	0x7c9fffff
 800dfb0:	3fe00000 	.word	0x3fe00000
 800dfb4:	bff00000 	.word	0xbff00000
 800dfb8:	7fefffff 	.word	0x7fefffff

0800dfbc <_strtod_r>:
 800dfbc:	4b01      	ldr	r3, [pc, #4]	; (800dfc4 <_strtod_r+0x8>)
 800dfbe:	f7ff b9f7 	b.w	800d3b0 <_strtod_l>
 800dfc2:	bf00      	nop
 800dfc4:	20000094 	.word	0x20000094

0800dfc8 <_strtol_l.constprop.0>:
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfce:	d001      	beq.n	800dfd4 <_strtol_l.constprop.0+0xc>
 800dfd0:	2b24      	cmp	r3, #36	; 0x24
 800dfd2:	d906      	bls.n	800dfe2 <_strtol_l.constprop.0+0x1a>
 800dfd4:	f7fe f89a 	bl	800c10c <__errno>
 800dfd8:	2316      	movs	r3, #22
 800dfda:	6003      	str	r3, [r0, #0]
 800dfdc:	2000      	movs	r0, #0
 800dfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfe2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e0c8 <_strtol_l.constprop.0+0x100>
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	462e      	mov	r6, r5
 800dfea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dff2:	f017 0708 	ands.w	r7, r7, #8
 800dff6:	d1f7      	bne.n	800dfe8 <_strtol_l.constprop.0+0x20>
 800dff8:	2c2d      	cmp	r4, #45	; 0x2d
 800dffa:	d132      	bne.n	800e062 <_strtol_l.constprop.0+0x9a>
 800dffc:	782c      	ldrb	r4, [r5, #0]
 800dffe:	2701      	movs	r7, #1
 800e000:	1cb5      	adds	r5, r6, #2
 800e002:	2b00      	cmp	r3, #0
 800e004:	d05b      	beq.n	800e0be <_strtol_l.constprop.0+0xf6>
 800e006:	2b10      	cmp	r3, #16
 800e008:	d109      	bne.n	800e01e <_strtol_l.constprop.0+0x56>
 800e00a:	2c30      	cmp	r4, #48	; 0x30
 800e00c:	d107      	bne.n	800e01e <_strtol_l.constprop.0+0x56>
 800e00e:	782c      	ldrb	r4, [r5, #0]
 800e010:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e014:	2c58      	cmp	r4, #88	; 0x58
 800e016:	d14d      	bne.n	800e0b4 <_strtol_l.constprop.0+0xec>
 800e018:	786c      	ldrb	r4, [r5, #1]
 800e01a:	2310      	movs	r3, #16
 800e01c:	3502      	adds	r5, #2
 800e01e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e022:	f108 38ff 	add.w	r8, r8, #4294967295
 800e026:	f04f 0c00 	mov.w	ip, #0
 800e02a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e02e:	4666      	mov	r6, ip
 800e030:	fb03 8a19 	mls	sl, r3, r9, r8
 800e034:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e038:	f1be 0f09 	cmp.w	lr, #9
 800e03c:	d816      	bhi.n	800e06c <_strtol_l.constprop.0+0xa4>
 800e03e:	4674      	mov	r4, lr
 800e040:	42a3      	cmp	r3, r4
 800e042:	dd24      	ble.n	800e08e <_strtol_l.constprop.0+0xc6>
 800e044:	f1bc 0f00 	cmp.w	ip, #0
 800e048:	db1e      	blt.n	800e088 <_strtol_l.constprop.0+0xc0>
 800e04a:	45b1      	cmp	r9, r6
 800e04c:	d31c      	bcc.n	800e088 <_strtol_l.constprop.0+0xc0>
 800e04e:	d101      	bne.n	800e054 <_strtol_l.constprop.0+0x8c>
 800e050:	45a2      	cmp	sl, r4
 800e052:	db19      	blt.n	800e088 <_strtol_l.constprop.0+0xc0>
 800e054:	fb06 4603 	mla	r6, r6, r3, r4
 800e058:	f04f 0c01 	mov.w	ip, #1
 800e05c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e060:	e7e8      	b.n	800e034 <_strtol_l.constprop.0+0x6c>
 800e062:	2c2b      	cmp	r4, #43	; 0x2b
 800e064:	bf04      	itt	eq
 800e066:	782c      	ldrbeq	r4, [r5, #0]
 800e068:	1cb5      	addeq	r5, r6, #2
 800e06a:	e7ca      	b.n	800e002 <_strtol_l.constprop.0+0x3a>
 800e06c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e070:	f1be 0f19 	cmp.w	lr, #25
 800e074:	d801      	bhi.n	800e07a <_strtol_l.constprop.0+0xb2>
 800e076:	3c37      	subs	r4, #55	; 0x37
 800e078:	e7e2      	b.n	800e040 <_strtol_l.constprop.0+0x78>
 800e07a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e07e:	f1be 0f19 	cmp.w	lr, #25
 800e082:	d804      	bhi.n	800e08e <_strtol_l.constprop.0+0xc6>
 800e084:	3c57      	subs	r4, #87	; 0x57
 800e086:	e7db      	b.n	800e040 <_strtol_l.constprop.0+0x78>
 800e088:	f04f 3cff 	mov.w	ip, #4294967295
 800e08c:	e7e6      	b.n	800e05c <_strtol_l.constprop.0+0x94>
 800e08e:	f1bc 0f00 	cmp.w	ip, #0
 800e092:	da05      	bge.n	800e0a0 <_strtol_l.constprop.0+0xd8>
 800e094:	2322      	movs	r3, #34	; 0x22
 800e096:	6003      	str	r3, [r0, #0]
 800e098:	4646      	mov	r6, r8
 800e09a:	b942      	cbnz	r2, 800e0ae <_strtol_l.constprop.0+0xe6>
 800e09c:	4630      	mov	r0, r6
 800e09e:	e79e      	b.n	800dfde <_strtol_l.constprop.0+0x16>
 800e0a0:	b107      	cbz	r7, 800e0a4 <_strtol_l.constprop.0+0xdc>
 800e0a2:	4276      	negs	r6, r6
 800e0a4:	2a00      	cmp	r2, #0
 800e0a6:	d0f9      	beq.n	800e09c <_strtol_l.constprop.0+0xd4>
 800e0a8:	f1bc 0f00 	cmp.w	ip, #0
 800e0ac:	d000      	beq.n	800e0b0 <_strtol_l.constprop.0+0xe8>
 800e0ae:	1e69      	subs	r1, r5, #1
 800e0b0:	6011      	str	r1, [r2, #0]
 800e0b2:	e7f3      	b.n	800e09c <_strtol_l.constprop.0+0xd4>
 800e0b4:	2430      	movs	r4, #48	; 0x30
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1b1      	bne.n	800e01e <_strtol_l.constprop.0+0x56>
 800e0ba:	2308      	movs	r3, #8
 800e0bc:	e7af      	b.n	800e01e <_strtol_l.constprop.0+0x56>
 800e0be:	2c30      	cmp	r4, #48	; 0x30
 800e0c0:	d0a5      	beq.n	800e00e <_strtol_l.constprop.0+0x46>
 800e0c2:	230a      	movs	r3, #10
 800e0c4:	e7ab      	b.n	800e01e <_strtol_l.constprop.0+0x56>
 800e0c6:	bf00      	nop
 800e0c8:	08011cc1 	.word	0x08011cc1

0800e0cc <_strtol_r>:
 800e0cc:	f7ff bf7c 	b.w	800dfc8 <_strtol_l.constprop.0>

0800e0d0 <__swbuf_r>:
 800e0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d2:	460e      	mov	r6, r1
 800e0d4:	4614      	mov	r4, r2
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	b118      	cbz	r0, 800e0e2 <__swbuf_r+0x12>
 800e0da:	6983      	ldr	r3, [r0, #24]
 800e0dc:	b90b      	cbnz	r3, 800e0e2 <__swbuf_r+0x12>
 800e0de:	f001 f85d 	bl	800f19c <__sinit>
 800e0e2:	4b21      	ldr	r3, [pc, #132]	; (800e168 <__swbuf_r+0x98>)
 800e0e4:	429c      	cmp	r4, r3
 800e0e6:	d12b      	bne.n	800e140 <__swbuf_r+0x70>
 800e0e8:	686c      	ldr	r4, [r5, #4]
 800e0ea:	69a3      	ldr	r3, [r4, #24]
 800e0ec:	60a3      	str	r3, [r4, #8]
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	071a      	lsls	r2, r3, #28
 800e0f2:	d52f      	bpl.n	800e154 <__swbuf_r+0x84>
 800e0f4:	6923      	ldr	r3, [r4, #16]
 800e0f6:	b36b      	cbz	r3, 800e154 <__swbuf_r+0x84>
 800e0f8:	6923      	ldr	r3, [r4, #16]
 800e0fa:	6820      	ldr	r0, [r4, #0]
 800e0fc:	1ac0      	subs	r0, r0, r3
 800e0fe:	6963      	ldr	r3, [r4, #20]
 800e100:	b2f6      	uxtb	r6, r6
 800e102:	4283      	cmp	r3, r0
 800e104:	4637      	mov	r7, r6
 800e106:	dc04      	bgt.n	800e112 <__swbuf_r+0x42>
 800e108:	4621      	mov	r1, r4
 800e10a:	4628      	mov	r0, r5
 800e10c:	f000 ffa0 	bl	800f050 <_fflush_r>
 800e110:	bb30      	cbnz	r0, 800e160 <__swbuf_r+0x90>
 800e112:	68a3      	ldr	r3, [r4, #8]
 800e114:	3b01      	subs	r3, #1
 800e116:	60a3      	str	r3, [r4, #8]
 800e118:	6823      	ldr	r3, [r4, #0]
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	6022      	str	r2, [r4, #0]
 800e11e:	701e      	strb	r6, [r3, #0]
 800e120:	6963      	ldr	r3, [r4, #20]
 800e122:	3001      	adds	r0, #1
 800e124:	4283      	cmp	r3, r0
 800e126:	d004      	beq.n	800e132 <__swbuf_r+0x62>
 800e128:	89a3      	ldrh	r3, [r4, #12]
 800e12a:	07db      	lsls	r3, r3, #31
 800e12c:	d506      	bpl.n	800e13c <__swbuf_r+0x6c>
 800e12e:	2e0a      	cmp	r6, #10
 800e130:	d104      	bne.n	800e13c <__swbuf_r+0x6c>
 800e132:	4621      	mov	r1, r4
 800e134:	4628      	mov	r0, r5
 800e136:	f000 ff8b 	bl	800f050 <_fflush_r>
 800e13a:	b988      	cbnz	r0, 800e160 <__swbuf_r+0x90>
 800e13c:	4638      	mov	r0, r7
 800e13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e140:	4b0a      	ldr	r3, [pc, #40]	; (800e16c <__swbuf_r+0x9c>)
 800e142:	429c      	cmp	r4, r3
 800e144:	d101      	bne.n	800e14a <__swbuf_r+0x7a>
 800e146:	68ac      	ldr	r4, [r5, #8]
 800e148:	e7cf      	b.n	800e0ea <__swbuf_r+0x1a>
 800e14a:	4b09      	ldr	r3, [pc, #36]	; (800e170 <__swbuf_r+0xa0>)
 800e14c:	429c      	cmp	r4, r3
 800e14e:	bf08      	it	eq
 800e150:	68ec      	ldreq	r4, [r5, #12]
 800e152:	e7ca      	b.n	800e0ea <__swbuf_r+0x1a>
 800e154:	4621      	mov	r1, r4
 800e156:	4628      	mov	r0, r5
 800e158:	f000 f80c 	bl	800e174 <__swsetup_r>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d0cb      	beq.n	800e0f8 <__swbuf_r+0x28>
 800e160:	f04f 37ff 	mov.w	r7, #4294967295
 800e164:	e7ea      	b.n	800e13c <__swbuf_r+0x6c>
 800e166:	bf00      	nop
 800e168:	08011e74 	.word	0x08011e74
 800e16c:	08011e94 	.word	0x08011e94
 800e170:	08011e54 	.word	0x08011e54

0800e174 <__swsetup_r>:
 800e174:	4b32      	ldr	r3, [pc, #200]	; (800e240 <__swsetup_r+0xcc>)
 800e176:	b570      	push	{r4, r5, r6, lr}
 800e178:	681d      	ldr	r5, [r3, #0]
 800e17a:	4606      	mov	r6, r0
 800e17c:	460c      	mov	r4, r1
 800e17e:	b125      	cbz	r5, 800e18a <__swsetup_r+0x16>
 800e180:	69ab      	ldr	r3, [r5, #24]
 800e182:	b913      	cbnz	r3, 800e18a <__swsetup_r+0x16>
 800e184:	4628      	mov	r0, r5
 800e186:	f001 f809 	bl	800f19c <__sinit>
 800e18a:	4b2e      	ldr	r3, [pc, #184]	; (800e244 <__swsetup_r+0xd0>)
 800e18c:	429c      	cmp	r4, r3
 800e18e:	d10f      	bne.n	800e1b0 <__swsetup_r+0x3c>
 800e190:	686c      	ldr	r4, [r5, #4]
 800e192:	89a3      	ldrh	r3, [r4, #12]
 800e194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e198:	0719      	lsls	r1, r3, #28
 800e19a:	d42c      	bmi.n	800e1f6 <__swsetup_r+0x82>
 800e19c:	06dd      	lsls	r5, r3, #27
 800e19e:	d411      	bmi.n	800e1c4 <__swsetup_r+0x50>
 800e1a0:	2309      	movs	r3, #9
 800e1a2:	6033      	str	r3, [r6, #0]
 800e1a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e1a8:	81a3      	strh	r3, [r4, #12]
 800e1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ae:	e03e      	b.n	800e22e <__swsetup_r+0xba>
 800e1b0:	4b25      	ldr	r3, [pc, #148]	; (800e248 <__swsetup_r+0xd4>)
 800e1b2:	429c      	cmp	r4, r3
 800e1b4:	d101      	bne.n	800e1ba <__swsetup_r+0x46>
 800e1b6:	68ac      	ldr	r4, [r5, #8]
 800e1b8:	e7eb      	b.n	800e192 <__swsetup_r+0x1e>
 800e1ba:	4b24      	ldr	r3, [pc, #144]	; (800e24c <__swsetup_r+0xd8>)
 800e1bc:	429c      	cmp	r4, r3
 800e1be:	bf08      	it	eq
 800e1c0:	68ec      	ldreq	r4, [r5, #12]
 800e1c2:	e7e6      	b.n	800e192 <__swsetup_r+0x1e>
 800e1c4:	0758      	lsls	r0, r3, #29
 800e1c6:	d512      	bpl.n	800e1ee <__swsetup_r+0x7a>
 800e1c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1ca:	b141      	cbz	r1, 800e1de <__swsetup_r+0x6a>
 800e1cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1d0:	4299      	cmp	r1, r3
 800e1d2:	d002      	beq.n	800e1da <__swsetup_r+0x66>
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f7fd ffd3 	bl	800c180 <_free_r>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	6363      	str	r3, [r4, #52]	; 0x34
 800e1de:	89a3      	ldrh	r3, [r4, #12]
 800e1e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1e4:	81a3      	strh	r3, [r4, #12]
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	6063      	str	r3, [r4, #4]
 800e1ea:	6923      	ldr	r3, [r4, #16]
 800e1ec:	6023      	str	r3, [r4, #0]
 800e1ee:	89a3      	ldrh	r3, [r4, #12]
 800e1f0:	f043 0308 	orr.w	r3, r3, #8
 800e1f4:	81a3      	strh	r3, [r4, #12]
 800e1f6:	6923      	ldr	r3, [r4, #16]
 800e1f8:	b94b      	cbnz	r3, 800e20e <__swsetup_r+0x9a>
 800e1fa:	89a3      	ldrh	r3, [r4, #12]
 800e1fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e204:	d003      	beq.n	800e20e <__swsetup_r+0x9a>
 800e206:	4621      	mov	r1, r4
 800e208:	4630      	mov	r0, r6
 800e20a:	f001 fc1d 	bl	800fa48 <__smakebuf_r>
 800e20e:	89a0      	ldrh	r0, [r4, #12]
 800e210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e214:	f010 0301 	ands.w	r3, r0, #1
 800e218:	d00a      	beq.n	800e230 <__swsetup_r+0xbc>
 800e21a:	2300      	movs	r3, #0
 800e21c:	60a3      	str	r3, [r4, #8]
 800e21e:	6963      	ldr	r3, [r4, #20]
 800e220:	425b      	negs	r3, r3
 800e222:	61a3      	str	r3, [r4, #24]
 800e224:	6923      	ldr	r3, [r4, #16]
 800e226:	b943      	cbnz	r3, 800e23a <__swsetup_r+0xc6>
 800e228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e22c:	d1ba      	bne.n	800e1a4 <__swsetup_r+0x30>
 800e22e:	bd70      	pop	{r4, r5, r6, pc}
 800e230:	0781      	lsls	r1, r0, #30
 800e232:	bf58      	it	pl
 800e234:	6963      	ldrpl	r3, [r4, #20]
 800e236:	60a3      	str	r3, [r4, #8]
 800e238:	e7f4      	b.n	800e224 <__swsetup_r+0xb0>
 800e23a:	2000      	movs	r0, #0
 800e23c:	e7f7      	b.n	800e22e <__swsetup_r+0xba>
 800e23e:	bf00      	nop
 800e240:	2000002c 	.word	0x2000002c
 800e244:	08011e74 	.word	0x08011e74
 800e248:	08011e94 	.word	0x08011e94
 800e24c:	08011e54 	.word	0x08011e54

0800e250 <quorem>:
 800e250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	6903      	ldr	r3, [r0, #16]
 800e256:	690c      	ldr	r4, [r1, #16]
 800e258:	42a3      	cmp	r3, r4
 800e25a:	4607      	mov	r7, r0
 800e25c:	f2c0 8081 	blt.w	800e362 <quorem+0x112>
 800e260:	3c01      	subs	r4, #1
 800e262:	f101 0814 	add.w	r8, r1, #20
 800e266:	f100 0514 	add.w	r5, r0, #20
 800e26a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e26e:	9301      	str	r3, [sp, #4]
 800e270:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e278:	3301      	adds	r3, #1
 800e27a:	429a      	cmp	r2, r3
 800e27c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e280:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e284:	fbb2 f6f3 	udiv	r6, r2, r3
 800e288:	d331      	bcc.n	800e2ee <quorem+0x9e>
 800e28a:	f04f 0e00 	mov.w	lr, #0
 800e28e:	4640      	mov	r0, r8
 800e290:	46ac      	mov	ip, r5
 800e292:	46f2      	mov	sl, lr
 800e294:	f850 2b04 	ldr.w	r2, [r0], #4
 800e298:	b293      	uxth	r3, r2
 800e29a:	fb06 e303 	mla	r3, r6, r3, lr
 800e29e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	ebaa 0303 	sub.w	r3, sl, r3
 800e2a8:	f8dc a000 	ldr.w	sl, [ip]
 800e2ac:	0c12      	lsrs	r2, r2, #16
 800e2ae:	fa13 f38a 	uxtah	r3, r3, sl
 800e2b2:	fb06 e202 	mla	r2, r6, r2, lr
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	9b00      	ldr	r3, [sp, #0]
 800e2ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e2be:	b292      	uxth	r2, r2
 800e2c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e2c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2c8:	f8bd 3000 	ldrh.w	r3, [sp]
 800e2cc:	4581      	cmp	r9, r0
 800e2ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2d2:	f84c 3b04 	str.w	r3, [ip], #4
 800e2d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e2da:	d2db      	bcs.n	800e294 <quorem+0x44>
 800e2dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800e2e0:	b92b      	cbnz	r3, 800e2ee <quorem+0x9e>
 800e2e2:	9b01      	ldr	r3, [sp, #4]
 800e2e4:	3b04      	subs	r3, #4
 800e2e6:	429d      	cmp	r5, r3
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	d32e      	bcc.n	800e34a <quorem+0xfa>
 800e2ec:	613c      	str	r4, [r7, #16]
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	f001 fee2 	bl	80100b8 <__mcmp>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	db24      	blt.n	800e342 <quorem+0xf2>
 800e2f8:	3601      	adds	r6, #1
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	f04f 0c00 	mov.w	ip, #0
 800e300:	f858 2b04 	ldr.w	r2, [r8], #4
 800e304:	f8d0 e000 	ldr.w	lr, [r0]
 800e308:	b293      	uxth	r3, r2
 800e30a:	ebac 0303 	sub.w	r3, ip, r3
 800e30e:	0c12      	lsrs	r2, r2, #16
 800e310:	fa13 f38e 	uxtah	r3, r3, lr
 800e314:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e322:	45c1      	cmp	r9, r8
 800e324:	f840 3b04 	str.w	r3, [r0], #4
 800e328:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e32c:	d2e8      	bcs.n	800e300 <quorem+0xb0>
 800e32e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e336:	b922      	cbnz	r2, 800e342 <quorem+0xf2>
 800e338:	3b04      	subs	r3, #4
 800e33a:	429d      	cmp	r5, r3
 800e33c:	461a      	mov	r2, r3
 800e33e:	d30a      	bcc.n	800e356 <quorem+0x106>
 800e340:	613c      	str	r4, [r7, #16]
 800e342:	4630      	mov	r0, r6
 800e344:	b003      	add	sp, #12
 800e346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34a:	6812      	ldr	r2, [r2, #0]
 800e34c:	3b04      	subs	r3, #4
 800e34e:	2a00      	cmp	r2, #0
 800e350:	d1cc      	bne.n	800e2ec <quorem+0x9c>
 800e352:	3c01      	subs	r4, #1
 800e354:	e7c7      	b.n	800e2e6 <quorem+0x96>
 800e356:	6812      	ldr	r2, [r2, #0]
 800e358:	3b04      	subs	r3, #4
 800e35a:	2a00      	cmp	r2, #0
 800e35c:	d1f0      	bne.n	800e340 <quorem+0xf0>
 800e35e:	3c01      	subs	r4, #1
 800e360:	e7eb      	b.n	800e33a <quorem+0xea>
 800e362:	2000      	movs	r0, #0
 800e364:	e7ee      	b.n	800e344 <quorem+0xf4>
	...

0800e368 <_dtoa_r>:
 800e368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36c:	ed2d 8b04 	vpush	{d8-d9}
 800e370:	ec57 6b10 	vmov	r6, r7, d0
 800e374:	b093      	sub	sp, #76	; 0x4c
 800e376:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e378:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e37c:	9106      	str	r1, [sp, #24]
 800e37e:	ee10 aa10 	vmov	sl, s0
 800e382:	4604      	mov	r4, r0
 800e384:	9209      	str	r2, [sp, #36]	; 0x24
 800e386:	930c      	str	r3, [sp, #48]	; 0x30
 800e388:	46bb      	mov	fp, r7
 800e38a:	b975      	cbnz	r5, 800e3aa <_dtoa_r+0x42>
 800e38c:	2010      	movs	r0, #16
 800e38e:	f7fd fee7 	bl	800c160 <malloc>
 800e392:	4602      	mov	r2, r0
 800e394:	6260      	str	r0, [r4, #36]	; 0x24
 800e396:	b920      	cbnz	r0, 800e3a2 <_dtoa_r+0x3a>
 800e398:	4ba7      	ldr	r3, [pc, #668]	; (800e638 <_dtoa_r+0x2d0>)
 800e39a:	21ea      	movs	r1, #234	; 0xea
 800e39c:	48a7      	ldr	r0, [pc, #668]	; (800e63c <_dtoa_r+0x2d4>)
 800e39e:	f003 f8fd 	bl	801159c <__assert_func>
 800e3a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3a6:	6005      	str	r5, [r0, #0]
 800e3a8:	60c5      	str	r5, [r0, #12]
 800e3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3ac:	6819      	ldr	r1, [r3, #0]
 800e3ae:	b151      	cbz	r1, 800e3c6 <_dtoa_r+0x5e>
 800e3b0:	685a      	ldr	r2, [r3, #4]
 800e3b2:	604a      	str	r2, [r1, #4]
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	4093      	lsls	r3, r2
 800e3b8:	608b      	str	r3, [r1, #8]
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f001 fbf0 	bl	800fba0 <_Bfree>
 800e3c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	601a      	str	r2, [r3, #0]
 800e3c6:	1e3b      	subs	r3, r7, #0
 800e3c8:	bfaa      	itet	ge
 800e3ca:	2300      	movge	r3, #0
 800e3cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e3d0:	f8c8 3000 	strge.w	r3, [r8]
 800e3d4:	4b9a      	ldr	r3, [pc, #616]	; (800e640 <_dtoa_r+0x2d8>)
 800e3d6:	bfbc      	itt	lt
 800e3d8:	2201      	movlt	r2, #1
 800e3da:	f8c8 2000 	strlt.w	r2, [r8]
 800e3de:	ea33 030b 	bics.w	r3, r3, fp
 800e3e2:	d11b      	bne.n	800e41c <_dtoa_r+0xb4>
 800e3e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e3ea:	6013      	str	r3, [r2, #0]
 800e3ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3f0:	4333      	orrs	r3, r6
 800e3f2:	f000 8592 	beq.w	800ef1a <_dtoa_r+0xbb2>
 800e3f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3f8:	b963      	cbnz	r3, 800e414 <_dtoa_r+0xac>
 800e3fa:	4b92      	ldr	r3, [pc, #584]	; (800e644 <_dtoa_r+0x2dc>)
 800e3fc:	e022      	b.n	800e444 <_dtoa_r+0xdc>
 800e3fe:	4b92      	ldr	r3, [pc, #584]	; (800e648 <_dtoa_r+0x2e0>)
 800e400:	9301      	str	r3, [sp, #4]
 800e402:	3308      	adds	r3, #8
 800e404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e406:	6013      	str	r3, [r2, #0]
 800e408:	9801      	ldr	r0, [sp, #4]
 800e40a:	b013      	add	sp, #76	; 0x4c
 800e40c:	ecbd 8b04 	vpop	{d8-d9}
 800e410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e414:	4b8b      	ldr	r3, [pc, #556]	; (800e644 <_dtoa_r+0x2dc>)
 800e416:	9301      	str	r3, [sp, #4]
 800e418:	3303      	adds	r3, #3
 800e41a:	e7f3      	b.n	800e404 <_dtoa_r+0x9c>
 800e41c:	2200      	movs	r2, #0
 800e41e:	2300      	movs	r3, #0
 800e420:	4650      	mov	r0, sl
 800e422:	4659      	mov	r1, fp
 800e424:	f7f2 fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 800e428:	ec4b ab19 	vmov	d9, sl, fp
 800e42c:	4680      	mov	r8, r0
 800e42e:	b158      	cbz	r0, 800e448 <_dtoa_r+0xe0>
 800e430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e432:	2301      	movs	r3, #1
 800e434:	6013      	str	r3, [r2, #0]
 800e436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e438:	2b00      	cmp	r3, #0
 800e43a:	f000 856b 	beq.w	800ef14 <_dtoa_r+0xbac>
 800e43e:	4883      	ldr	r0, [pc, #524]	; (800e64c <_dtoa_r+0x2e4>)
 800e440:	6018      	str	r0, [r3, #0]
 800e442:	1e43      	subs	r3, r0, #1
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	e7df      	b.n	800e408 <_dtoa_r+0xa0>
 800e448:	ec4b ab10 	vmov	d0, sl, fp
 800e44c:	aa10      	add	r2, sp, #64	; 0x40
 800e44e:	a911      	add	r1, sp, #68	; 0x44
 800e450:	4620      	mov	r0, r4
 800e452:	f001 ff53 	bl	80102fc <__d2b>
 800e456:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e45a:	ee08 0a10 	vmov	s16, r0
 800e45e:	2d00      	cmp	r5, #0
 800e460:	f000 8084 	beq.w	800e56c <_dtoa_r+0x204>
 800e464:	ee19 3a90 	vmov	r3, s19
 800e468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e46c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e470:	4656      	mov	r6, sl
 800e472:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e476:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e47a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e47e:	4b74      	ldr	r3, [pc, #464]	; (800e650 <_dtoa_r+0x2e8>)
 800e480:	2200      	movs	r2, #0
 800e482:	4630      	mov	r0, r6
 800e484:	4639      	mov	r1, r7
 800e486:	f7f1 feff 	bl	8000288 <__aeabi_dsub>
 800e48a:	a365      	add	r3, pc, #404	; (adr r3, 800e620 <_dtoa_r+0x2b8>)
 800e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e490:	f7f2 f8b2 	bl	80005f8 <__aeabi_dmul>
 800e494:	a364      	add	r3, pc, #400	; (adr r3, 800e628 <_dtoa_r+0x2c0>)
 800e496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49a:	f7f1 fef7 	bl	800028c <__adddf3>
 800e49e:	4606      	mov	r6, r0
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	460f      	mov	r7, r1
 800e4a4:	f7f2 f83e 	bl	8000524 <__aeabi_i2d>
 800e4a8:	a361      	add	r3, pc, #388	; (adr r3, 800e630 <_dtoa_r+0x2c8>)
 800e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ae:	f7f2 f8a3 	bl	80005f8 <__aeabi_dmul>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	4639      	mov	r1, r7
 800e4ba:	f7f1 fee7 	bl	800028c <__adddf3>
 800e4be:	4606      	mov	r6, r0
 800e4c0:	460f      	mov	r7, r1
 800e4c2:	f7f2 fb49 	bl	8000b58 <__aeabi_d2iz>
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	9000      	str	r0, [sp, #0]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	4639      	mov	r1, r7
 800e4d0:	f7f2 fb04 	bl	8000adc <__aeabi_dcmplt>
 800e4d4:	b150      	cbz	r0, 800e4ec <_dtoa_r+0x184>
 800e4d6:	9800      	ldr	r0, [sp, #0]
 800e4d8:	f7f2 f824 	bl	8000524 <__aeabi_i2d>
 800e4dc:	4632      	mov	r2, r6
 800e4de:	463b      	mov	r3, r7
 800e4e0:	f7f2 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4e4:	b910      	cbnz	r0, 800e4ec <_dtoa_r+0x184>
 800e4e6:	9b00      	ldr	r3, [sp, #0]
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	9300      	str	r3, [sp, #0]
 800e4ec:	9b00      	ldr	r3, [sp, #0]
 800e4ee:	2b16      	cmp	r3, #22
 800e4f0:	d85a      	bhi.n	800e5a8 <_dtoa_r+0x240>
 800e4f2:	9a00      	ldr	r2, [sp, #0]
 800e4f4:	4b57      	ldr	r3, [pc, #348]	; (800e654 <_dtoa_r+0x2ec>)
 800e4f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fe:	ec51 0b19 	vmov	r0, r1, d9
 800e502:	f7f2 faeb 	bl	8000adc <__aeabi_dcmplt>
 800e506:	2800      	cmp	r0, #0
 800e508:	d050      	beq.n	800e5ac <_dtoa_r+0x244>
 800e50a:	9b00      	ldr	r3, [sp, #0]
 800e50c:	3b01      	subs	r3, #1
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	2300      	movs	r3, #0
 800e512:	930b      	str	r3, [sp, #44]	; 0x2c
 800e514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e516:	1b5d      	subs	r5, r3, r5
 800e518:	1e6b      	subs	r3, r5, #1
 800e51a:	9305      	str	r3, [sp, #20]
 800e51c:	bf45      	ittet	mi
 800e51e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e522:	9304      	strmi	r3, [sp, #16]
 800e524:	2300      	movpl	r3, #0
 800e526:	2300      	movmi	r3, #0
 800e528:	bf4c      	ite	mi
 800e52a:	9305      	strmi	r3, [sp, #20]
 800e52c:	9304      	strpl	r3, [sp, #16]
 800e52e:	9b00      	ldr	r3, [sp, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	db3d      	blt.n	800e5b0 <_dtoa_r+0x248>
 800e534:	9b05      	ldr	r3, [sp, #20]
 800e536:	9a00      	ldr	r2, [sp, #0]
 800e538:	920a      	str	r2, [sp, #40]	; 0x28
 800e53a:	4413      	add	r3, r2
 800e53c:	9305      	str	r3, [sp, #20]
 800e53e:	2300      	movs	r3, #0
 800e540:	9307      	str	r3, [sp, #28]
 800e542:	9b06      	ldr	r3, [sp, #24]
 800e544:	2b09      	cmp	r3, #9
 800e546:	f200 8089 	bhi.w	800e65c <_dtoa_r+0x2f4>
 800e54a:	2b05      	cmp	r3, #5
 800e54c:	bfc4      	itt	gt
 800e54e:	3b04      	subgt	r3, #4
 800e550:	9306      	strgt	r3, [sp, #24]
 800e552:	9b06      	ldr	r3, [sp, #24]
 800e554:	f1a3 0302 	sub.w	r3, r3, #2
 800e558:	bfcc      	ite	gt
 800e55a:	2500      	movgt	r5, #0
 800e55c:	2501      	movle	r5, #1
 800e55e:	2b03      	cmp	r3, #3
 800e560:	f200 8087 	bhi.w	800e672 <_dtoa_r+0x30a>
 800e564:	e8df f003 	tbb	[pc, r3]
 800e568:	59383a2d 	.word	0x59383a2d
 800e56c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e570:	441d      	add	r5, r3
 800e572:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e576:	2b20      	cmp	r3, #32
 800e578:	bfc1      	itttt	gt
 800e57a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e57e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e582:	fa0b f303 	lslgt.w	r3, fp, r3
 800e586:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e58a:	bfda      	itte	le
 800e58c:	f1c3 0320 	rsble	r3, r3, #32
 800e590:	fa06 f003 	lslle.w	r0, r6, r3
 800e594:	4318      	orrgt	r0, r3
 800e596:	f7f1 ffb5 	bl	8000504 <__aeabi_ui2d>
 800e59a:	2301      	movs	r3, #1
 800e59c:	4606      	mov	r6, r0
 800e59e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e5a2:	3d01      	subs	r5, #1
 800e5a4:	930e      	str	r3, [sp, #56]	; 0x38
 800e5a6:	e76a      	b.n	800e47e <_dtoa_r+0x116>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e7b2      	b.n	800e512 <_dtoa_r+0x1aa>
 800e5ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800e5ae:	e7b1      	b.n	800e514 <_dtoa_r+0x1ac>
 800e5b0:	9b04      	ldr	r3, [sp, #16]
 800e5b2:	9a00      	ldr	r2, [sp, #0]
 800e5b4:	1a9b      	subs	r3, r3, r2
 800e5b6:	9304      	str	r3, [sp, #16]
 800e5b8:	4253      	negs	r3, r2
 800e5ba:	9307      	str	r3, [sp, #28]
 800e5bc:	2300      	movs	r3, #0
 800e5be:	930a      	str	r3, [sp, #40]	; 0x28
 800e5c0:	e7bf      	b.n	800e542 <_dtoa_r+0x1da>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	9308      	str	r3, [sp, #32]
 800e5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	dc55      	bgt.n	800e678 <_dtoa_r+0x310>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	9209      	str	r2, [sp, #36]	; 0x24
 800e5d6:	e00c      	b.n	800e5f2 <_dtoa_r+0x28a>
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e7f3      	b.n	800e5c4 <_dtoa_r+0x25c>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5e0:	9308      	str	r3, [sp, #32]
 800e5e2:	9b00      	ldr	r3, [sp, #0]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	9302      	str	r3, [sp, #8]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	2b01      	cmp	r3, #1
 800e5ec:	9303      	str	r3, [sp, #12]
 800e5ee:	bfb8      	it	lt
 800e5f0:	2301      	movlt	r3, #1
 800e5f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	6042      	str	r2, [r0, #4]
 800e5f8:	2204      	movs	r2, #4
 800e5fa:	f102 0614 	add.w	r6, r2, #20
 800e5fe:	429e      	cmp	r6, r3
 800e600:	6841      	ldr	r1, [r0, #4]
 800e602:	d93d      	bls.n	800e680 <_dtoa_r+0x318>
 800e604:	4620      	mov	r0, r4
 800e606:	f001 fa8b 	bl	800fb20 <_Balloc>
 800e60a:	9001      	str	r0, [sp, #4]
 800e60c:	2800      	cmp	r0, #0
 800e60e:	d13b      	bne.n	800e688 <_dtoa_r+0x320>
 800e610:	4b11      	ldr	r3, [pc, #68]	; (800e658 <_dtoa_r+0x2f0>)
 800e612:	4602      	mov	r2, r0
 800e614:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e618:	e6c0      	b.n	800e39c <_dtoa_r+0x34>
 800e61a:	2301      	movs	r3, #1
 800e61c:	e7df      	b.n	800e5de <_dtoa_r+0x276>
 800e61e:	bf00      	nop
 800e620:	636f4361 	.word	0x636f4361
 800e624:	3fd287a7 	.word	0x3fd287a7
 800e628:	8b60c8b3 	.word	0x8b60c8b3
 800e62c:	3fc68a28 	.word	0x3fc68a28
 800e630:	509f79fb 	.word	0x509f79fb
 800e634:	3fd34413 	.word	0x3fd34413
 800e638:	08011dce 	.word	0x08011dce
 800e63c:	08011de5 	.word	0x08011de5
 800e640:	7ff00000 	.word	0x7ff00000
 800e644:	08011dca 	.word	0x08011dca
 800e648:	08011dc1 	.word	0x08011dc1
 800e64c:	080120a2 	.word	0x080120a2
 800e650:	3ff80000 	.word	0x3ff80000
 800e654:	08011fb8 	.word	0x08011fb8
 800e658:	08011e40 	.word	0x08011e40
 800e65c:	2501      	movs	r5, #1
 800e65e:	2300      	movs	r3, #0
 800e660:	9306      	str	r3, [sp, #24]
 800e662:	9508      	str	r5, [sp, #32]
 800e664:	f04f 33ff 	mov.w	r3, #4294967295
 800e668:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e66c:	2200      	movs	r2, #0
 800e66e:	2312      	movs	r3, #18
 800e670:	e7b0      	b.n	800e5d4 <_dtoa_r+0x26c>
 800e672:	2301      	movs	r3, #1
 800e674:	9308      	str	r3, [sp, #32]
 800e676:	e7f5      	b.n	800e664 <_dtoa_r+0x2fc>
 800e678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e67a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e67e:	e7b8      	b.n	800e5f2 <_dtoa_r+0x28a>
 800e680:	3101      	adds	r1, #1
 800e682:	6041      	str	r1, [r0, #4]
 800e684:	0052      	lsls	r2, r2, #1
 800e686:	e7b8      	b.n	800e5fa <_dtoa_r+0x292>
 800e688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e68a:	9a01      	ldr	r2, [sp, #4]
 800e68c:	601a      	str	r2, [r3, #0]
 800e68e:	9b03      	ldr	r3, [sp, #12]
 800e690:	2b0e      	cmp	r3, #14
 800e692:	f200 809d 	bhi.w	800e7d0 <_dtoa_r+0x468>
 800e696:	2d00      	cmp	r5, #0
 800e698:	f000 809a 	beq.w	800e7d0 <_dtoa_r+0x468>
 800e69c:	9b00      	ldr	r3, [sp, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	dd32      	ble.n	800e708 <_dtoa_r+0x3a0>
 800e6a2:	4ab7      	ldr	r2, [pc, #732]	; (800e980 <_dtoa_r+0x618>)
 800e6a4:	f003 030f 	and.w	r3, r3, #15
 800e6a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e6ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6b0:	9b00      	ldr	r3, [sp, #0]
 800e6b2:	05d8      	lsls	r0, r3, #23
 800e6b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e6b8:	d516      	bpl.n	800e6e8 <_dtoa_r+0x380>
 800e6ba:	4bb2      	ldr	r3, [pc, #712]	; (800e984 <_dtoa_r+0x61c>)
 800e6bc:	ec51 0b19 	vmov	r0, r1, d9
 800e6c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e6c4:	f7f2 f8c2 	bl	800084c <__aeabi_ddiv>
 800e6c8:	f007 070f 	and.w	r7, r7, #15
 800e6cc:	4682      	mov	sl, r0
 800e6ce:	468b      	mov	fp, r1
 800e6d0:	2503      	movs	r5, #3
 800e6d2:	4eac      	ldr	r6, [pc, #688]	; (800e984 <_dtoa_r+0x61c>)
 800e6d4:	b957      	cbnz	r7, 800e6ec <_dtoa_r+0x384>
 800e6d6:	4642      	mov	r2, r8
 800e6d8:	464b      	mov	r3, r9
 800e6da:	4650      	mov	r0, sl
 800e6dc:	4659      	mov	r1, fp
 800e6de:	f7f2 f8b5 	bl	800084c <__aeabi_ddiv>
 800e6e2:	4682      	mov	sl, r0
 800e6e4:	468b      	mov	fp, r1
 800e6e6:	e028      	b.n	800e73a <_dtoa_r+0x3d2>
 800e6e8:	2502      	movs	r5, #2
 800e6ea:	e7f2      	b.n	800e6d2 <_dtoa_r+0x36a>
 800e6ec:	07f9      	lsls	r1, r7, #31
 800e6ee:	d508      	bpl.n	800e702 <_dtoa_r+0x39a>
 800e6f0:	4640      	mov	r0, r8
 800e6f2:	4649      	mov	r1, r9
 800e6f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e6f8:	f7f1 ff7e 	bl	80005f8 <__aeabi_dmul>
 800e6fc:	3501      	adds	r5, #1
 800e6fe:	4680      	mov	r8, r0
 800e700:	4689      	mov	r9, r1
 800e702:	107f      	asrs	r7, r7, #1
 800e704:	3608      	adds	r6, #8
 800e706:	e7e5      	b.n	800e6d4 <_dtoa_r+0x36c>
 800e708:	f000 809b 	beq.w	800e842 <_dtoa_r+0x4da>
 800e70c:	9b00      	ldr	r3, [sp, #0]
 800e70e:	4f9d      	ldr	r7, [pc, #628]	; (800e984 <_dtoa_r+0x61c>)
 800e710:	425e      	negs	r6, r3
 800e712:	4b9b      	ldr	r3, [pc, #620]	; (800e980 <_dtoa_r+0x618>)
 800e714:	f006 020f 	and.w	r2, r6, #15
 800e718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	ec51 0b19 	vmov	r0, r1, d9
 800e724:	f7f1 ff68 	bl	80005f8 <__aeabi_dmul>
 800e728:	1136      	asrs	r6, r6, #4
 800e72a:	4682      	mov	sl, r0
 800e72c:	468b      	mov	fp, r1
 800e72e:	2300      	movs	r3, #0
 800e730:	2502      	movs	r5, #2
 800e732:	2e00      	cmp	r6, #0
 800e734:	d17a      	bne.n	800e82c <_dtoa_r+0x4c4>
 800e736:	2b00      	cmp	r3, #0
 800e738:	d1d3      	bne.n	800e6e2 <_dtoa_r+0x37a>
 800e73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f000 8082 	beq.w	800e846 <_dtoa_r+0x4de>
 800e742:	4b91      	ldr	r3, [pc, #580]	; (800e988 <_dtoa_r+0x620>)
 800e744:	2200      	movs	r2, #0
 800e746:	4650      	mov	r0, sl
 800e748:	4659      	mov	r1, fp
 800e74a:	f7f2 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800e74e:	2800      	cmp	r0, #0
 800e750:	d079      	beq.n	800e846 <_dtoa_r+0x4de>
 800e752:	9b03      	ldr	r3, [sp, #12]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d076      	beq.n	800e846 <_dtoa_r+0x4de>
 800e758:	9b02      	ldr	r3, [sp, #8]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	dd36      	ble.n	800e7cc <_dtoa_r+0x464>
 800e75e:	9b00      	ldr	r3, [sp, #0]
 800e760:	4650      	mov	r0, sl
 800e762:	4659      	mov	r1, fp
 800e764:	1e5f      	subs	r7, r3, #1
 800e766:	2200      	movs	r2, #0
 800e768:	4b88      	ldr	r3, [pc, #544]	; (800e98c <_dtoa_r+0x624>)
 800e76a:	f7f1 ff45 	bl	80005f8 <__aeabi_dmul>
 800e76e:	9e02      	ldr	r6, [sp, #8]
 800e770:	4682      	mov	sl, r0
 800e772:	468b      	mov	fp, r1
 800e774:	3501      	adds	r5, #1
 800e776:	4628      	mov	r0, r5
 800e778:	f7f1 fed4 	bl	8000524 <__aeabi_i2d>
 800e77c:	4652      	mov	r2, sl
 800e77e:	465b      	mov	r3, fp
 800e780:	f7f1 ff3a 	bl	80005f8 <__aeabi_dmul>
 800e784:	4b82      	ldr	r3, [pc, #520]	; (800e990 <_dtoa_r+0x628>)
 800e786:	2200      	movs	r2, #0
 800e788:	f7f1 fd80 	bl	800028c <__adddf3>
 800e78c:	46d0      	mov	r8, sl
 800e78e:	46d9      	mov	r9, fp
 800e790:	4682      	mov	sl, r0
 800e792:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e796:	2e00      	cmp	r6, #0
 800e798:	d158      	bne.n	800e84c <_dtoa_r+0x4e4>
 800e79a:	4b7e      	ldr	r3, [pc, #504]	; (800e994 <_dtoa_r+0x62c>)
 800e79c:	2200      	movs	r2, #0
 800e79e:	4640      	mov	r0, r8
 800e7a0:	4649      	mov	r1, r9
 800e7a2:	f7f1 fd71 	bl	8000288 <__aeabi_dsub>
 800e7a6:	4652      	mov	r2, sl
 800e7a8:	465b      	mov	r3, fp
 800e7aa:	4680      	mov	r8, r0
 800e7ac:	4689      	mov	r9, r1
 800e7ae:	f7f2 f9b3 	bl	8000b18 <__aeabi_dcmpgt>
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	f040 8295 	bne.w	800ece2 <_dtoa_r+0x97a>
 800e7b8:	4652      	mov	r2, sl
 800e7ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e7be:	4640      	mov	r0, r8
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	f7f2 f98b 	bl	8000adc <__aeabi_dcmplt>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	f040 8289 	bne.w	800ecde <_dtoa_r+0x976>
 800e7cc:	ec5b ab19 	vmov	sl, fp, d9
 800e7d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	f2c0 8148 	blt.w	800ea68 <_dtoa_r+0x700>
 800e7d8:	9a00      	ldr	r2, [sp, #0]
 800e7da:	2a0e      	cmp	r2, #14
 800e7dc:	f300 8144 	bgt.w	800ea68 <_dtoa_r+0x700>
 800e7e0:	4b67      	ldr	r3, [pc, #412]	; (800e980 <_dtoa_r+0x618>)
 800e7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	f280 80d5 	bge.w	800e99c <_dtoa_r+0x634>
 800e7f2:	9b03      	ldr	r3, [sp, #12]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f300 80d1 	bgt.w	800e99c <_dtoa_r+0x634>
 800e7fa:	f040 826f 	bne.w	800ecdc <_dtoa_r+0x974>
 800e7fe:	4b65      	ldr	r3, [pc, #404]	; (800e994 <_dtoa_r+0x62c>)
 800e800:	2200      	movs	r2, #0
 800e802:	4640      	mov	r0, r8
 800e804:	4649      	mov	r1, r9
 800e806:	f7f1 fef7 	bl	80005f8 <__aeabi_dmul>
 800e80a:	4652      	mov	r2, sl
 800e80c:	465b      	mov	r3, fp
 800e80e:	f7f2 f979 	bl	8000b04 <__aeabi_dcmpge>
 800e812:	9e03      	ldr	r6, [sp, #12]
 800e814:	4637      	mov	r7, r6
 800e816:	2800      	cmp	r0, #0
 800e818:	f040 8245 	bne.w	800eca6 <_dtoa_r+0x93e>
 800e81c:	9d01      	ldr	r5, [sp, #4]
 800e81e:	2331      	movs	r3, #49	; 0x31
 800e820:	f805 3b01 	strb.w	r3, [r5], #1
 800e824:	9b00      	ldr	r3, [sp, #0]
 800e826:	3301      	adds	r3, #1
 800e828:	9300      	str	r3, [sp, #0]
 800e82a:	e240      	b.n	800ecae <_dtoa_r+0x946>
 800e82c:	07f2      	lsls	r2, r6, #31
 800e82e:	d505      	bpl.n	800e83c <_dtoa_r+0x4d4>
 800e830:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e834:	f7f1 fee0 	bl	80005f8 <__aeabi_dmul>
 800e838:	3501      	adds	r5, #1
 800e83a:	2301      	movs	r3, #1
 800e83c:	1076      	asrs	r6, r6, #1
 800e83e:	3708      	adds	r7, #8
 800e840:	e777      	b.n	800e732 <_dtoa_r+0x3ca>
 800e842:	2502      	movs	r5, #2
 800e844:	e779      	b.n	800e73a <_dtoa_r+0x3d2>
 800e846:	9f00      	ldr	r7, [sp, #0]
 800e848:	9e03      	ldr	r6, [sp, #12]
 800e84a:	e794      	b.n	800e776 <_dtoa_r+0x40e>
 800e84c:	9901      	ldr	r1, [sp, #4]
 800e84e:	4b4c      	ldr	r3, [pc, #304]	; (800e980 <_dtoa_r+0x618>)
 800e850:	4431      	add	r1, r6
 800e852:	910d      	str	r1, [sp, #52]	; 0x34
 800e854:	9908      	ldr	r1, [sp, #32]
 800e856:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e85a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e85e:	2900      	cmp	r1, #0
 800e860:	d043      	beq.n	800e8ea <_dtoa_r+0x582>
 800e862:	494d      	ldr	r1, [pc, #308]	; (800e998 <_dtoa_r+0x630>)
 800e864:	2000      	movs	r0, #0
 800e866:	f7f1 fff1 	bl	800084c <__aeabi_ddiv>
 800e86a:	4652      	mov	r2, sl
 800e86c:	465b      	mov	r3, fp
 800e86e:	f7f1 fd0b 	bl	8000288 <__aeabi_dsub>
 800e872:	9d01      	ldr	r5, [sp, #4]
 800e874:	4682      	mov	sl, r0
 800e876:	468b      	mov	fp, r1
 800e878:	4649      	mov	r1, r9
 800e87a:	4640      	mov	r0, r8
 800e87c:	f7f2 f96c 	bl	8000b58 <__aeabi_d2iz>
 800e880:	4606      	mov	r6, r0
 800e882:	f7f1 fe4f 	bl	8000524 <__aeabi_i2d>
 800e886:	4602      	mov	r2, r0
 800e888:	460b      	mov	r3, r1
 800e88a:	4640      	mov	r0, r8
 800e88c:	4649      	mov	r1, r9
 800e88e:	f7f1 fcfb 	bl	8000288 <__aeabi_dsub>
 800e892:	3630      	adds	r6, #48	; 0x30
 800e894:	f805 6b01 	strb.w	r6, [r5], #1
 800e898:	4652      	mov	r2, sl
 800e89a:	465b      	mov	r3, fp
 800e89c:	4680      	mov	r8, r0
 800e89e:	4689      	mov	r9, r1
 800e8a0:	f7f2 f91c 	bl	8000adc <__aeabi_dcmplt>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	d163      	bne.n	800e970 <_dtoa_r+0x608>
 800e8a8:	4642      	mov	r2, r8
 800e8aa:	464b      	mov	r3, r9
 800e8ac:	4936      	ldr	r1, [pc, #216]	; (800e988 <_dtoa_r+0x620>)
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	f7f1 fcea 	bl	8000288 <__aeabi_dsub>
 800e8b4:	4652      	mov	r2, sl
 800e8b6:	465b      	mov	r3, fp
 800e8b8:	f7f2 f910 	bl	8000adc <__aeabi_dcmplt>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	f040 80b5 	bne.w	800ea2c <_dtoa_r+0x6c4>
 800e8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8c4:	429d      	cmp	r5, r3
 800e8c6:	d081      	beq.n	800e7cc <_dtoa_r+0x464>
 800e8c8:	4b30      	ldr	r3, [pc, #192]	; (800e98c <_dtoa_r+0x624>)
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	4650      	mov	r0, sl
 800e8ce:	4659      	mov	r1, fp
 800e8d0:	f7f1 fe92 	bl	80005f8 <__aeabi_dmul>
 800e8d4:	4b2d      	ldr	r3, [pc, #180]	; (800e98c <_dtoa_r+0x624>)
 800e8d6:	4682      	mov	sl, r0
 800e8d8:	468b      	mov	fp, r1
 800e8da:	4640      	mov	r0, r8
 800e8dc:	4649      	mov	r1, r9
 800e8de:	2200      	movs	r2, #0
 800e8e0:	f7f1 fe8a 	bl	80005f8 <__aeabi_dmul>
 800e8e4:	4680      	mov	r8, r0
 800e8e6:	4689      	mov	r9, r1
 800e8e8:	e7c6      	b.n	800e878 <_dtoa_r+0x510>
 800e8ea:	4650      	mov	r0, sl
 800e8ec:	4659      	mov	r1, fp
 800e8ee:	f7f1 fe83 	bl	80005f8 <__aeabi_dmul>
 800e8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8f4:	9d01      	ldr	r5, [sp, #4]
 800e8f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8f8:	4682      	mov	sl, r0
 800e8fa:	468b      	mov	fp, r1
 800e8fc:	4649      	mov	r1, r9
 800e8fe:	4640      	mov	r0, r8
 800e900:	f7f2 f92a 	bl	8000b58 <__aeabi_d2iz>
 800e904:	4606      	mov	r6, r0
 800e906:	f7f1 fe0d 	bl	8000524 <__aeabi_i2d>
 800e90a:	3630      	adds	r6, #48	; 0x30
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	4640      	mov	r0, r8
 800e912:	4649      	mov	r1, r9
 800e914:	f7f1 fcb8 	bl	8000288 <__aeabi_dsub>
 800e918:	f805 6b01 	strb.w	r6, [r5], #1
 800e91c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e91e:	429d      	cmp	r5, r3
 800e920:	4680      	mov	r8, r0
 800e922:	4689      	mov	r9, r1
 800e924:	f04f 0200 	mov.w	r2, #0
 800e928:	d124      	bne.n	800e974 <_dtoa_r+0x60c>
 800e92a:	4b1b      	ldr	r3, [pc, #108]	; (800e998 <_dtoa_r+0x630>)
 800e92c:	4650      	mov	r0, sl
 800e92e:	4659      	mov	r1, fp
 800e930:	f7f1 fcac 	bl	800028c <__adddf3>
 800e934:	4602      	mov	r2, r0
 800e936:	460b      	mov	r3, r1
 800e938:	4640      	mov	r0, r8
 800e93a:	4649      	mov	r1, r9
 800e93c:	f7f2 f8ec 	bl	8000b18 <__aeabi_dcmpgt>
 800e940:	2800      	cmp	r0, #0
 800e942:	d173      	bne.n	800ea2c <_dtoa_r+0x6c4>
 800e944:	4652      	mov	r2, sl
 800e946:	465b      	mov	r3, fp
 800e948:	4913      	ldr	r1, [pc, #76]	; (800e998 <_dtoa_r+0x630>)
 800e94a:	2000      	movs	r0, #0
 800e94c:	f7f1 fc9c 	bl	8000288 <__aeabi_dsub>
 800e950:	4602      	mov	r2, r0
 800e952:	460b      	mov	r3, r1
 800e954:	4640      	mov	r0, r8
 800e956:	4649      	mov	r1, r9
 800e958:	f7f2 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	f43f af35 	beq.w	800e7cc <_dtoa_r+0x464>
 800e962:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e964:	1e6b      	subs	r3, r5, #1
 800e966:	930f      	str	r3, [sp, #60]	; 0x3c
 800e968:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e96c:	2b30      	cmp	r3, #48	; 0x30
 800e96e:	d0f8      	beq.n	800e962 <_dtoa_r+0x5fa>
 800e970:	9700      	str	r7, [sp, #0]
 800e972:	e049      	b.n	800ea08 <_dtoa_r+0x6a0>
 800e974:	4b05      	ldr	r3, [pc, #20]	; (800e98c <_dtoa_r+0x624>)
 800e976:	f7f1 fe3f 	bl	80005f8 <__aeabi_dmul>
 800e97a:	4680      	mov	r8, r0
 800e97c:	4689      	mov	r9, r1
 800e97e:	e7bd      	b.n	800e8fc <_dtoa_r+0x594>
 800e980:	08011fb8 	.word	0x08011fb8
 800e984:	08011f90 	.word	0x08011f90
 800e988:	3ff00000 	.word	0x3ff00000
 800e98c:	40240000 	.word	0x40240000
 800e990:	401c0000 	.word	0x401c0000
 800e994:	40140000 	.word	0x40140000
 800e998:	3fe00000 	.word	0x3fe00000
 800e99c:	9d01      	ldr	r5, [sp, #4]
 800e99e:	4656      	mov	r6, sl
 800e9a0:	465f      	mov	r7, fp
 800e9a2:	4642      	mov	r2, r8
 800e9a4:	464b      	mov	r3, r9
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	f7f1 ff4f 	bl	800084c <__aeabi_ddiv>
 800e9ae:	f7f2 f8d3 	bl	8000b58 <__aeabi_d2iz>
 800e9b2:	4682      	mov	sl, r0
 800e9b4:	f7f1 fdb6 	bl	8000524 <__aeabi_i2d>
 800e9b8:	4642      	mov	r2, r8
 800e9ba:	464b      	mov	r3, r9
 800e9bc:	f7f1 fe1c 	bl	80005f8 <__aeabi_dmul>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	4639      	mov	r1, r7
 800e9c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e9cc:	f7f1 fc5c 	bl	8000288 <__aeabi_dsub>
 800e9d0:	f805 6b01 	strb.w	r6, [r5], #1
 800e9d4:	9e01      	ldr	r6, [sp, #4]
 800e9d6:	9f03      	ldr	r7, [sp, #12]
 800e9d8:	1bae      	subs	r6, r5, r6
 800e9da:	42b7      	cmp	r7, r6
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	d135      	bne.n	800ea4e <_dtoa_r+0x6e6>
 800e9e2:	f7f1 fc53 	bl	800028c <__adddf3>
 800e9e6:	4642      	mov	r2, r8
 800e9e8:	464b      	mov	r3, r9
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	460f      	mov	r7, r1
 800e9ee:	f7f2 f893 	bl	8000b18 <__aeabi_dcmpgt>
 800e9f2:	b9d0      	cbnz	r0, 800ea2a <_dtoa_r+0x6c2>
 800e9f4:	4642      	mov	r2, r8
 800e9f6:	464b      	mov	r3, r9
 800e9f8:	4630      	mov	r0, r6
 800e9fa:	4639      	mov	r1, r7
 800e9fc:	f7f2 f864 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea00:	b110      	cbz	r0, 800ea08 <_dtoa_r+0x6a0>
 800ea02:	f01a 0f01 	tst.w	sl, #1
 800ea06:	d110      	bne.n	800ea2a <_dtoa_r+0x6c2>
 800ea08:	4620      	mov	r0, r4
 800ea0a:	ee18 1a10 	vmov	r1, s16
 800ea0e:	f001 f8c7 	bl	800fba0 <_Bfree>
 800ea12:	2300      	movs	r3, #0
 800ea14:	9800      	ldr	r0, [sp, #0]
 800ea16:	702b      	strb	r3, [r5, #0]
 800ea18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea1a:	3001      	adds	r0, #1
 800ea1c:	6018      	str	r0, [r3, #0]
 800ea1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f43f acf1 	beq.w	800e408 <_dtoa_r+0xa0>
 800ea26:	601d      	str	r5, [r3, #0]
 800ea28:	e4ee      	b.n	800e408 <_dtoa_r+0xa0>
 800ea2a:	9f00      	ldr	r7, [sp, #0]
 800ea2c:	462b      	mov	r3, r5
 800ea2e:	461d      	mov	r5, r3
 800ea30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea34:	2a39      	cmp	r2, #57	; 0x39
 800ea36:	d106      	bne.n	800ea46 <_dtoa_r+0x6de>
 800ea38:	9a01      	ldr	r2, [sp, #4]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d1f7      	bne.n	800ea2e <_dtoa_r+0x6c6>
 800ea3e:	9901      	ldr	r1, [sp, #4]
 800ea40:	2230      	movs	r2, #48	; 0x30
 800ea42:	3701      	adds	r7, #1
 800ea44:	700a      	strb	r2, [r1, #0]
 800ea46:	781a      	ldrb	r2, [r3, #0]
 800ea48:	3201      	adds	r2, #1
 800ea4a:	701a      	strb	r2, [r3, #0]
 800ea4c:	e790      	b.n	800e970 <_dtoa_r+0x608>
 800ea4e:	4ba6      	ldr	r3, [pc, #664]	; (800ece8 <_dtoa_r+0x980>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	f7f1 fdd1 	bl	80005f8 <__aeabi_dmul>
 800ea56:	2200      	movs	r2, #0
 800ea58:	2300      	movs	r3, #0
 800ea5a:	4606      	mov	r6, r0
 800ea5c:	460f      	mov	r7, r1
 800ea5e:	f7f2 f833 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	d09d      	beq.n	800e9a2 <_dtoa_r+0x63a>
 800ea66:	e7cf      	b.n	800ea08 <_dtoa_r+0x6a0>
 800ea68:	9a08      	ldr	r2, [sp, #32]
 800ea6a:	2a00      	cmp	r2, #0
 800ea6c:	f000 80d7 	beq.w	800ec1e <_dtoa_r+0x8b6>
 800ea70:	9a06      	ldr	r2, [sp, #24]
 800ea72:	2a01      	cmp	r2, #1
 800ea74:	f300 80ba 	bgt.w	800ebec <_dtoa_r+0x884>
 800ea78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea7a:	2a00      	cmp	r2, #0
 800ea7c:	f000 80b2 	beq.w	800ebe4 <_dtoa_r+0x87c>
 800ea80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ea84:	9e07      	ldr	r6, [sp, #28]
 800ea86:	9d04      	ldr	r5, [sp, #16]
 800ea88:	9a04      	ldr	r2, [sp, #16]
 800ea8a:	441a      	add	r2, r3
 800ea8c:	9204      	str	r2, [sp, #16]
 800ea8e:	9a05      	ldr	r2, [sp, #20]
 800ea90:	2101      	movs	r1, #1
 800ea92:	441a      	add	r2, r3
 800ea94:	4620      	mov	r0, r4
 800ea96:	9205      	str	r2, [sp, #20]
 800ea98:	f001 f984 	bl	800fda4 <__i2b>
 800ea9c:	4607      	mov	r7, r0
 800ea9e:	2d00      	cmp	r5, #0
 800eaa0:	dd0c      	ble.n	800eabc <_dtoa_r+0x754>
 800eaa2:	9b05      	ldr	r3, [sp, #20]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	dd09      	ble.n	800eabc <_dtoa_r+0x754>
 800eaa8:	42ab      	cmp	r3, r5
 800eaaa:	9a04      	ldr	r2, [sp, #16]
 800eaac:	bfa8      	it	ge
 800eaae:	462b      	movge	r3, r5
 800eab0:	1ad2      	subs	r2, r2, r3
 800eab2:	9204      	str	r2, [sp, #16]
 800eab4:	9a05      	ldr	r2, [sp, #20]
 800eab6:	1aed      	subs	r5, r5, r3
 800eab8:	1ad3      	subs	r3, r2, r3
 800eaba:	9305      	str	r3, [sp, #20]
 800eabc:	9b07      	ldr	r3, [sp, #28]
 800eabe:	b31b      	cbz	r3, 800eb08 <_dtoa_r+0x7a0>
 800eac0:	9b08      	ldr	r3, [sp, #32]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f000 80af 	beq.w	800ec26 <_dtoa_r+0x8be>
 800eac8:	2e00      	cmp	r6, #0
 800eaca:	dd13      	ble.n	800eaf4 <_dtoa_r+0x78c>
 800eacc:	4639      	mov	r1, r7
 800eace:	4632      	mov	r2, r6
 800ead0:	4620      	mov	r0, r4
 800ead2:	f001 fa27 	bl	800ff24 <__pow5mult>
 800ead6:	ee18 2a10 	vmov	r2, s16
 800eada:	4601      	mov	r1, r0
 800eadc:	4607      	mov	r7, r0
 800eade:	4620      	mov	r0, r4
 800eae0:	f001 f976 	bl	800fdd0 <__multiply>
 800eae4:	ee18 1a10 	vmov	r1, s16
 800eae8:	4680      	mov	r8, r0
 800eaea:	4620      	mov	r0, r4
 800eaec:	f001 f858 	bl	800fba0 <_Bfree>
 800eaf0:	ee08 8a10 	vmov	s16, r8
 800eaf4:	9b07      	ldr	r3, [sp, #28]
 800eaf6:	1b9a      	subs	r2, r3, r6
 800eaf8:	d006      	beq.n	800eb08 <_dtoa_r+0x7a0>
 800eafa:	ee18 1a10 	vmov	r1, s16
 800eafe:	4620      	mov	r0, r4
 800eb00:	f001 fa10 	bl	800ff24 <__pow5mult>
 800eb04:	ee08 0a10 	vmov	s16, r0
 800eb08:	2101      	movs	r1, #1
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f001 f94a 	bl	800fda4 <__i2b>
 800eb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	4606      	mov	r6, r0
 800eb16:	f340 8088 	ble.w	800ec2a <_dtoa_r+0x8c2>
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	4601      	mov	r1, r0
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f001 fa00 	bl	800ff24 <__pow5mult>
 800eb24:	9b06      	ldr	r3, [sp, #24]
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	4606      	mov	r6, r0
 800eb2a:	f340 8081 	ble.w	800ec30 <_dtoa_r+0x8c8>
 800eb2e:	f04f 0800 	mov.w	r8, #0
 800eb32:	6933      	ldr	r3, [r6, #16]
 800eb34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eb38:	6918      	ldr	r0, [r3, #16]
 800eb3a:	f001 f8e3 	bl	800fd04 <__hi0bits>
 800eb3e:	f1c0 0020 	rsb	r0, r0, #32
 800eb42:	9b05      	ldr	r3, [sp, #20]
 800eb44:	4418      	add	r0, r3
 800eb46:	f010 001f 	ands.w	r0, r0, #31
 800eb4a:	f000 8092 	beq.w	800ec72 <_dtoa_r+0x90a>
 800eb4e:	f1c0 0320 	rsb	r3, r0, #32
 800eb52:	2b04      	cmp	r3, #4
 800eb54:	f340 808a 	ble.w	800ec6c <_dtoa_r+0x904>
 800eb58:	f1c0 001c 	rsb	r0, r0, #28
 800eb5c:	9b04      	ldr	r3, [sp, #16]
 800eb5e:	4403      	add	r3, r0
 800eb60:	9304      	str	r3, [sp, #16]
 800eb62:	9b05      	ldr	r3, [sp, #20]
 800eb64:	4403      	add	r3, r0
 800eb66:	4405      	add	r5, r0
 800eb68:	9305      	str	r3, [sp, #20]
 800eb6a:	9b04      	ldr	r3, [sp, #16]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	dd07      	ble.n	800eb80 <_dtoa_r+0x818>
 800eb70:	ee18 1a10 	vmov	r1, s16
 800eb74:	461a      	mov	r2, r3
 800eb76:	4620      	mov	r0, r4
 800eb78:	f001 fa2e 	bl	800ffd8 <__lshift>
 800eb7c:	ee08 0a10 	vmov	s16, r0
 800eb80:	9b05      	ldr	r3, [sp, #20]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	dd05      	ble.n	800eb92 <_dtoa_r+0x82a>
 800eb86:	4631      	mov	r1, r6
 800eb88:	461a      	mov	r2, r3
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f001 fa24 	bl	800ffd8 <__lshift>
 800eb90:	4606      	mov	r6, r0
 800eb92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d06e      	beq.n	800ec76 <_dtoa_r+0x90e>
 800eb98:	ee18 0a10 	vmov	r0, s16
 800eb9c:	4631      	mov	r1, r6
 800eb9e:	f001 fa8b 	bl	80100b8 <__mcmp>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	da67      	bge.n	800ec76 <_dtoa_r+0x90e>
 800eba6:	9b00      	ldr	r3, [sp, #0]
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	ee18 1a10 	vmov	r1, s16
 800ebae:	9300      	str	r3, [sp, #0]
 800ebb0:	220a      	movs	r2, #10
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f001 f815 	bl	800fbe4 <__multadd>
 800ebba:	9b08      	ldr	r3, [sp, #32]
 800ebbc:	ee08 0a10 	vmov	s16, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f000 81b1 	beq.w	800ef28 <_dtoa_r+0xbc0>
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	4639      	mov	r1, r7
 800ebca:	220a      	movs	r2, #10
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f001 f809 	bl	800fbe4 <__multadd>
 800ebd2:	9b02      	ldr	r3, [sp, #8]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	4607      	mov	r7, r0
 800ebd8:	f300 808e 	bgt.w	800ecf8 <_dtoa_r+0x990>
 800ebdc:	9b06      	ldr	r3, [sp, #24]
 800ebde:	2b02      	cmp	r3, #2
 800ebe0:	dc51      	bgt.n	800ec86 <_dtoa_r+0x91e>
 800ebe2:	e089      	b.n	800ecf8 <_dtoa_r+0x990>
 800ebe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ebe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ebea:	e74b      	b.n	800ea84 <_dtoa_r+0x71c>
 800ebec:	9b03      	ldr	r3, [sp, #12]
 800ebee:	1e5e      	subs	r6, r3, #1
 800ebf0:	9b07      	ldr	r3, [sp, #28]
 800ebf2:	42b3      	cmp	r3, r6
 800ebf4:	bfbf      	itttt	lt
 800ebf6:	9b07      	ldrlt	r3, [sp, #28]
 800ebf8:	9607      	strlt	r6, [sp, #28]
 800ebfa:	1af2      	sublt	r2, r6, r3
 800ebfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ebfe:	bfb6      	itet	lt
 800ec00:	189b      	addlt	r3, r3, r2
 800ec02:	1b9e      	subge	r6, r3, r6
 800ec04:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ec06:	9b03      	ldr	r3, [sp, #12]
 800ec08:	bfb8      	it	lt
 800ec0a:	2600      	movlt	r6, #0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	bfb7      	itett	lt
 800ec10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ec14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ec18:	1a9d      	sublt	r5, r3, r2
 800ec1a:	2300      	movlt	r3, #0
 800ec1c:	e734      	b.n	800ea88 <_dtoa_r+0x720>
 800ec1e:	9e07      	ldr	r6, [sp, #28]
 800ec20:	9d04      	ldr	r5, [sp, #16]
 800ec22:	9f08      	ldr	r7, [sp, #32]
 800ec24:	e73b      	b.n	800ea9e <_dtoa_r+0x736>
 800ec26:	9a07      	ldr	r2, [sp, #28]
 800ec28:	e767      	b.n	800eafa <_dtoa_r+0x792>
 800ec2a:	9b06      	ldr	r3, [sp, #24]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	dc18      	bgt.n	800ec62 <_dtoa_r+0x8fa>
 800ec30:	f1ba 0f00 	cmp.w	sl, #0
 800ec34:	d115      	bne.n	800ec62 <_dtoa_r+0x8fa>
 800ec36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec3a:	b993      	cbnz	r3, 800ec62 <_dtoa_r+0x8fa>
 800ec3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec40:	0d1b      	lsrs	r3, r3, #20
 800ec42:	051b      	lsls	r3, r3, #20
 800ec44:	b183      	cbz	r3, 800ec68 <_dtoa_r+0x900>
 800ec46:	9b04      	ldr	r3, [sp, #16]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	9304      	str	r3, [sp, #16]
 800ec4c:	9b05      	ldr	r3, [sp, #20]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	9305      	str	r3, [sp, #20]
 800ec52:	f04f 0801 	mov.w	r8, #1
 800ec56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f47f af6a 	bne.w	800eb32 <_dtoa_r+0x7ca>
 800ec5e:	2001      	movs	r0, #1
 800ec60:	e76f      	b.n	800eb42 <_dtoa_r+0x7da>
 800ec62:	f04f 0800 	mov.w	r8, #0
 800ec66:	e7f6      	b.n	800ec56 <_dtoa_r+0x8ee>
 800ec68:	4698      	mov	r8, r3
 800ec6a:	e7f4      	b.n	800ec56 <_dtoa_r+0x8ee>
 800ec6c:	f43f af7d 	beq.w	800eb6a <_dtoa_r+0x802>
 800ec70:	4618      	mov	r0, r3
 800ec72:	301c      	adds	r0, #28
 800ec74:	e772      	b.n	800eb5c <_dtoa_r+0x7f4>
 800ec76:	9b03      	ldr	r3, [sp, #12]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	dc37      	bgt.n	800ecec <_dtoa_r+0x984>
 800ec7c:	9b06      	ldr	r3, [sp, #24]
 800ec7e:	2b02      	cmp	r3, #2
 800ec80:	dd34      	ble.n	800ecec <_dtoa_r+0x984>
 800ec82:	9b03      	ldr	r3, [sp, #12]
 800ec84:	9302      	str	r3, [sp, #8]
 800ec86:	9b02      	ldr	r3, [sp, #8]
 800ec88:	b96b      	cbnz	r3, 800eca6 <_dtoa_r+0x93e>
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	2205      	movs	r2, #5
 800ec8e:	4620      	mov	r0, r4
 800ec90:	f000 ffa8 	bl	800fbe4 <__multadd>
 800ec94:	4601      	mov	r1, r0
 800ec96:	4606      	mov	r6, r0
 800ec98:	ee18 0a10 	vmov	r0, s16
 800ec9c:	f001 fa0c 	bl	80100b8 <__mcmp>
 800eca0:	2800      	cmp	r0, #0
 800eca2:	f73f adbb 	bgt.w	800e81c <_dtoa_r+0x4b4>
 800eca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eca8:	9d01      	ldr	r5, [sp, #4]
 800ecaa:	43db      	mvns	r3, r3
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	f04f 0800 	mov.w	r8, #0
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	f000 ff73 	bl	800fba0 <_Bfree>
 800ecba:	2f00      	cmp	r7, #0
 800ecbc:	f43f aea4 	beq.w	800ea08 <_dtoa_r+0x6a0>
 800ecc0:	f1b8 0f00 	cmp.w	r8, #0
 800ecc4:	d005      	beq.n	800ecd2 <_dtoa_r+0x96a>
 800ecc6:	45b8      	cmp	r8, r7
 800ecc8:	d003      	beq.n	800ecd2 <_dtoa_r+0x96a>
 800ecca:	4641      	mov	r1, r8
 800eccc:	4620      	mov	r0, r4
 800ecce:	f000 ff67 	bl	800fba0 <_Bfree>
 800ecd2:	4639      	mov	r1, r7
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	f000 ff63 	bl	800fba0 <_Bfree>
 800ecda:	e695      	b.n	800ea08 <_dtoa_r+0x6a0>
 800ecdc:	2600      	movs	r6, #0
 800ecde:	4637      	mov	r7, r6
 800ece0:	e7e1      	b.n	800eca6 <_dtoa_r+0x93e>
 800ece2:	9700      	str	r7, [sp, #0]
 800ece4:	4637      	mov	r7, r6
 800ece6:	e599      	b.n	800e81c <_dtoa_r+0x4b4>
 800ece8:	40240000 	.word	0x40240000
 800ecec:	9b08      	ldr	r3, [sp, #32]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f000 80ca 	beq.w	800ee88 <_dtoa_r+0xb20>
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	9302      	str	r3, [sp, #8]
 800ecf8:	2d00      	cmp	r5, #0
 800ecfa:	dd05      	ble.n	800ed08 <_dtoa_r+0x9a0>
 800ecfc:	4639      	mov	r1, r7
 800ecfe:	462a      	mov	r2, r5
 800ed00:	4620      	mov	r0, r4
 800ed02:	f001 f969 	bl	800ffd8 <__lshift>
 800ed06:	4607      	mov	r7, r0
 800ed08:	f1b8 0f00 	cmp.w	r8, #0
 800ed0c:	d05b      	beq.n	800edc6 <_dtoa_r+0xa5e>
 800ed0e:	6879      	ldr	r1, [r7, #4]
 800ed10:	4620      	mov	r0, r4
 800ed12:	f000 ff05 	bl	800fb20 <_Balloc>
 800ed16:	4605      	mov	r5, r0
 800ed18:	b928      	cbnz	r0, 800ed26 <_dtoa_r+0x9be>
 800ed1a:	4b87      	ldr	r3, [pc, #540]	; (800ef38 <_dtoa_r+0xbd0>)
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ed22:	f7ff bb3b 	b.w	800e39c <_dtoa_r+0x34>
 800ed26:	693a      	ldr	r2, [r7, #16]
 800ed28:	3202      	adds	r2, #2
 800ed2a:	0092      	lsls	r2, r2, #2
 800ed2c:	f107 010c 	add.w	r1, r7, #12
 800ed30:	300c      	adds	r0, #12
 800ed32:	f000 fedb 	bl	800faec <memcpy>
 800ed36:	2201      	movs	r2, #1
 800ed38:	4629      	mov	r1, r5
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	f001 f94c 	bl	800ffd8 <__lshift>
 800ed40:	9b01      	ldr	r3, [sp, #4]
 800ed42:	f103 0901 	add.w	r9, r3, #1
 800ed46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ed4a:	4413      	add	r3, r2
 800ed4c:	9305      	str	r3, [sp, #20]
 800ed4e:	f00a 0301 	and.w	r3, sl, #1
 800ed52:	46b8      	mov	r8, r7
 800ed54:	9304      	str	r3, [sp, #16]
 800ed56:	4607      	mov	r7, r0
 800ed58:	4631      	mov	r1, r6
 800ed5a:	ee18 0a10 	vmov	r0, s16
 800ed5e:	f7ff fa77 	bl	800e250 <quorem>
 800ed62:	4641      	mov	r1, r8
 800ed64:	9002      	str	r0, [sp, #8]
 800ed66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ed6a:	ee18 0a10 	vmov	r0, s16
 800ed6e:	f001 f9a3 	bl	80100b8 <__mcmp>
 800ed72:	463a      	mov	r2, r7
 800ed74:	9003      	str	r0, [sp, #12]
 800ed76:	4631      	mov	r1, r6
 800ed78:	4620      	mov	r0, r4
 800ed7a:	f001 f9b9 	bl	80100f0 <__mdiff>
 800ed7e:	68c2      	ldr	r2, [r0, #12]
 800ed80:	f109 3bff 	add.w	fp, r9, #4294967295
 800ed84:	4605      	mov	r5, r0
 800ed86:	bb02      	cbnz	r2, 800edca <_dtoa_r+0xa62>
 800ed88:	4601      	mov	r1, r0
 800ed8a:	ee18 0a10 	vmov	r0, s16
 800ed8e:	f001 f993 	bl	80100b8 <__mcmp>
 800ed92:	4602      	mov	r2, r0
 800ed94:	4629      	mov	r1, r5
 800ed96:	4620      	mov	r0, r4
 800ed98:	9207      	str	r2, [sp, #28]
 800ed9a:	f000 ff01 	bl	800fba0 <_Bfree>
 800ed9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800eda2:	ea43 0102 	orr.w	r1, r3, r2
 800eda6:	9b04      	ldr	r3, [sp, #16]
 800eda8:	430b      	orrs	r3, r1
 800edaa:	464d      	mov	r5, r9
 800edac:	d10f      	bne.n	800edce <_dtoa_r+0xa66>
 800edae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800edb2:	d02a      	beq.n	800ee0a <_dtoa_r+0xaa2>
 800edb4:	9b03      	ldr	r3, [sp, #12]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	dd02      	ble.n	800edc0 <_dtoa_r+0xa58>
 800edba:	9b02      	ldr	r3, [sp, #8]
 800edbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800edc0:	f88b a000 	strb.w	sl, [fp]
 800edc4:	e775      	b.n	800ecb2 <_dtoa_r+0x94a>
 800edc6:	4638      	mov	r0, r7
 800edc8:	e7ba      	b.n	800ed40 <_dtoa_r+0x9d8>
 800edca:	2201      	movs	r2, #1
 800edcc:	e7e2      	b.n	800ed94 <_dtoa_r+0xa2c>
 800edce:	9b03      	ldr	r3, [sp, #12]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	db04      	blt.n	800edde <_dtoa_r+0xa76>
 800edd4:	9906      	ldr	r1, [sp, #24]
 800edd6:	430b      	orrs	r3, r1
 800edd8:	9904      	ldr	r1, [sp, #16]
 800edda:	430b      	orrs	r3, r1
 800eddc:	d122      	bne.n	800ee24 <_dtoa_r+0xabc>
 800edde:	2a00      	cmp	r2, #0
 800ede0:	ddee      	ble.n	800edc0 <_dtoa_r+0xa58>
 800ede2:	ee18 1a10 	vmov	r1, s16
 800ede6:	2201      	movs	r2, #1
 800ede8:	4620      	mov	r0, r4
 800edea:	f001 f8f5 	bl	800ffd8 <__lshift>
 800edee:	4631      	mov	r1, r6
 800edf0:	ee08 0a10 	vmov	s16, r0
 800edf4:	f001 f960 	bl	80100b8 <__mcmp>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	dc03      	bgt.n	800ee04 <_dtoa_r+0xa9c>
 800edfc:	d1e0      	bne.n	800edc0 <_dtoa_r+0xa58>
 800edfe:	f01a 0f01 	tst.w	sl, #1
 800ee02:	d0dd      	beq.n	800edc0 <_dtoa_r+0xa58>
 800ee04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ee08:	d1d7      	bne.n	800edba <_dtoa_r+0xa52>
 800ee0a:	2339      	movs	r3, #57	; 0x39
 800ee0c:	f88b 3000 	strb.w	r3, [fp]
 800ee10:	462b      	mov	r3, r5
 800ee12:	461d      	mov	r5, r3
 800ee14:	3b01      	subs	r3, #1
 800ee16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ee1a:	2a39      	cmp	r2, #57	; 0x39
 800ee1c:	d071      	beq.n	800ef02 <_dtoa_r+0xb9a>
 800ee1e:	3201      	adds	r2, #1
 800ee20:	701a      	strb	r2, [r3, #0]
 800ee22:	e746      	b.n	800ecb2 <_dtoa_r+0x94a>
 800ee24:	2a00      	cmp	r2, #0
 800ee26:	dd07      	ble.n	800ee38 <_dtoa_r+0xad0>
 800ee28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ee2c:	d0ed      	beq.n	800ee0a <_dtoa_r+0xaa2>
 800ee2e:	f10a 0301 	add.w	r3, sl, #1
 800ee32:	f88b 3000 	strb.w	r3, [fp]
 800ee36:	e73c      	b.n	800ecb2 <_dtoa_r+0x94a>
 800ee38:	9b05      	ldr	r3, [sp, #20]
 800ee3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ee3e:	4599      	cmp	r9, r3
 800ee40:	d047      	beq.n	800eed2 <_dtoa_r+0xb6a>
 800ee42:	ee18 1a10 	vmov	r1, s16
 800ee46:	2300      	movs	r3, #0
 800ee48:	220a      	movs	r2, #10
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f000 feca 	bl	800fbe4 <__multadd>
 800ee50:	45b8      	cmp	r8, r7
 800ee52:	ee08 0a10 	vmov	s16, r0
 800ee56:	f04f 0300 	mov.w	r3, #0
 800ee5a:	f04f 020a 	mov.w	r2, #10
 800ee5e:	4641      	mov	r1, r8
 800ee60:	4620      	mov	r0, r4
 800ee62:	d106      	bne.n	800ee72 <_dtoa_r+0xb0a>
 800ee64:	f000 febe 	bl	800fbe4 <__multadd>
 800ee68:	4680      	mov	r8, r0
 800ee6a:	4607      	mov	r7, r0
 800ee6c:	f109 0901 	add.w	r9, r9, #1
 800ee70:	e772      	b.n	800ed58 <_dtoa_r+0x9f0>
 800ee72:	f000 feb7 	bl	800fbe4 <__multadd>
 800ee76:	4639      	mov	r1, r7
 800ee78:	4680      	mov	r8, r0
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	220a      	movs	r2, #10
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f000 feb0 	bl	800fbe4 <__multadd>
 800ee84:	4607      	mov	r7, r0
 800ee86:	e7f1      	b.n	800ee6c <_dtoa_r+0xb04>
 800ee88:	9b03      	ldr	r3, [sp, #12]
 800ee8a:	9302      	str	r3, [sp, #8]
 800ee8c:	9d01      	ldr	r5, [sp, #4]
 800ee8e:	ee18 0a10 	vmov	r0, s16
 800ee92:	4631      	mov	r1, r6
 800ee94:	f7ff f9dc 	bl	800e250 <quorem>
 800ee98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ee9c:	9b01      	ldr	r3, [sp, #4]
 800ee9e:	f805 ab01 	strb.w	sl, [r5], #1
 800eea2:	1aea      	subs	r2, r5, r3
 800eea4:	9b02      	ldr	r3, [sp, #8]
 800eea6:	4293      	cmp	r3, r2
 800eea8:	dd09      	ble.n	800eebe <_dtoa_r+0xb56>
 800eeaa:	ee18 1a10 	vmov	r1, s16
 800eeae:	2300      	movs	r3, #0
 800eeb0:	220a      	movs	r2, #10
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 fe96 	bl	800fbe4 <__multadd>
 800eeb8:	ee08 0a10 	vmov	s16, r0
 800eebc:	e7e7      	b.n	800ee8e <_dtoa_r+0xb26>
 800eebe:	9b02      	ldr	r3, [sp, #8]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	bfc8      	it	gt
 800eec4:	461d      	movgt	r5, r3
 800eec6:	9b01      	ldr	r3, [sp, #4]
 800eec8:	bfd8      	it	le
 800eeca:	2501      	movle	r5, #1
 800eecc:	441d      	add	r5, r3
 800eece:	f04f 0800 	mov.w	r8, #0
 800eed2:	ee18 1a10 	vmov	r1, s16
 800eed6:	2201      	movs	r2, #1
 800eed8:	4620      	mov	r0, r4
 800eeda:	f001 f87d 	bl	800ffd8 <__lshift>
 800eede:	4631      	mov	r1, r6
 800eee0:	ee08 0a10 	vmov	s16, r0
 800eee4:	f001 f8e8 	bl	80100b8 <__mcmp>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	dc91      	bgt.n	800ee10 <_dtoa_r+0xaa8>
 800eeec:	d102      	bne.n	800eef4 <_dtoa_r+0xb8c>
 800eeee:	f01a 0f01 	tst.w	sl, #1
 800eef2:	d18d      	bne.n	800ee10 <_dtoa_r+0xaa8>
 800eef4:	462b      	mov	r3, r5
 800eef6:	461d      	mov	r5, r3
 800eef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eefc:	2a30      	cmp	r2, #48	; 0x30
 800eefe:	d0fa      	beq.n	800eef6 <_dtoa_r+0xb8e>
 800ef00:	e6d7      	b.n	800ecb2 <_dtoa_r+0x94a>
 800ef02:	9a01      	ldr	r2, [sp, #4]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d184      	bne.n	800ee12 <_dtoa_r+0xaaa>
 800ef08:	9b00      	ldr	r3, [sp, #0]
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	9300      	str	r3, [sp, #0]
 800ef0e:	2331      	movs	r3, #49	; 0x31
 800ef10:	7013      	strb	r3, [r2, #0]
 800ef12:	e6ce      	b.n	800ecb2 <_dtoa_r+0x94a>
 800ef14:	4b09      	ldr	r3, [pc, #36]	; (800ef3c <_dtoa_r+0xbd4>)
 800ef16:	f7ff ba95 	b.w	800e444 <_dtoa_r+0xdc>
 800ef1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f47f aa6e 	bne.w	800e3fe <_dtoa_r+0x96>
 800ef22:	4b07      	ldr	r3, [pc, #28]	; (800ef40 <_dtoa_r+0xbd8>)
 800ef24:	f7ff ba8e 	b.w	800e444 <_dtoa_r+0xdc>
 800ef28:	9b02      	ldr	r3, [sp, #8]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	dcae      	bgt.n	800ee8c <_dtoa_r+0xb24>
 800ef2e:	9b06      	ldr	r3, [sp, #24]
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	f73f aea8 	bgt.w	800ec86 <_dtoa_r+0x91e>
 800ef36:	e7a9      	b.n	800ee8c <_dtoa_r+0xb24>
 800ef38:	08011e40 	.word	0x08011e40
 800ef3c:	080120a1 	.word	0x080120a1
 800ef40:	08011dc1 	.word	0x08011dc1

0800ef44 <__sflush_r>:
 800ef44:	898a      	ldrh	r2, [r1, #12]
 800ef46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4a:	4605      	mov	r5, r0
 800ef4c:	0710      	lsls	r0, r2, #28
 800ef4e:	460c      	mov	r4, r1
 800ef50:	d458      	bmi.n	800f004 <__sflush_r+0xc0>
 800ef52:	684b      	ldr	r3, [r1, #4]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	dc05      	bgt.n	800ef64 <__sflush_r+0x20>
 800ef58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	dc02      	bgt.n	800ef64 <__sflush_r+0x20>
 800ef5e:	2000      	movs	r0, #0
 800ef60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef66:	2e00      	cmp	r6, #0
 800ef68:	d0f9      	beq.n	800ef5e <__sflush_r+0x1a>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef70:	682f      	ldr	r7, [r5, #0]
 800ef72:	602b      	str	r3, [r5, #0]
 800ef74:	d032      	beq.n	800efdc <__sflush_r+0x98>
 800ef76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef78:	89a3      	ldrh	r3, [r4, #12]
 800ef7a:	075a      	lsls	r2, r3, #29
 800ef7c:	d505      	bpl.n	800ef8a <__sflush_r+0x46>
 800ef7e:	6863      	ldr	r3, [r4, #4]
 800ef80:	1ac0      	subs	r0, r0, r3
 800ef82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef84:	b10b      	cbz	r3, 800ef8a <__sflush_r+0x46>
 800ef86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef88:	1ac0      	subs	r0, r0, r3
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef90:	6a21      	ldr	r1, [r4, #32]
 800ef92:	4628      	mov	r0, r5
 800ef94:	47b0      	blx	r6
 800ef96:	1c43      	adds	r3, r0, #1
 800ef98:	89a3      	ldrh	r3, [r4, #12]
 800ef9a:	d106      	bne.n	800efaa <__sflush_r+0x66>
 800ef9c:	6829      	ldr	r1, [r5, #0]
 800ef9e:	291d      	cmp	r1, #29
 800efa0:	d82c      	bhi.n	800effc <__sflush_r+0xb8>
 800efa2:	4a2a      	ldr	r2, [pc, #168]	; (800f04c <__sflush_r+0x108>)
 800efa4:	40ca      	lsrs	r2, r1
 800efa6:	07d6      	lsls	r6, r2, #31
 800efa8:	d528      	bpl.n	800effc <__sflush_r+0xb8>
 800efaa:	2200      	movs	r2, #0
 800efac:	6062      	str	r2, [r4, #4]
 800efae:	04d9      	lsls	r1, r3, #19
 800efb0:	6922      	ldr	r2, [r4, #16]
 800efb2:	6022      	str	r2, [r4, #0]
 800efb4:	d504      	bpl.n	800efc0 <__sflush_r+0x7c>
 800efb6:	1c42      	adds	r2, r0, #1
 800efb8:	d101      	bne.n	800efbe <__sflush_r+0x7a>
 800efba:	682b      	ldr	r3, [r5, #0]
 800efbc:	b903      	cbnz	r3, 800efc0 <__sflush_r+0x7c>
 800efbe:	6560      	str	r0, [r4, #84]	; 0x54
 800efc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efc2:	602f      	str	r7, [r5, #0]
 800efc4:	2900      	cmp	r1, #0
 800efc6:	d0ca      	beq.n	800ef5e <__sflush_r+0x1a>
 800efc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efcc:	4299      	cmp	r1, r3
 800efce:	d002      	beq.n	800efd6 <__sflush_r+0x92>
 800efd0:	4628      	mov	r0, r5
 800efd2:	f7fd f8d5 	bl	800c180 <_free_r>
 800efd6:	2000      	movs	r0, #0
 800efd8:	6360      	str	r0, [r4, #52]	; 0x34
 800efda:	e7c1      	b.n	800ef60 <__sflush_r+0x1c>
 800efdc:	6a21      	ldr	r1, [r4, #32]
 800efde:	2301      	movs	r3, #1
 800efe0:	4628      	mov	r0, r5
 800efe2:	47b0      	blx	r6
 800efe4:	1c41      	adds	r1, r0, #1
 800efe6:	d1c7      	bne.n	800ef78 <__sflush_r+0x34>
 800efe8:	682b      	ldr	r3, [r5, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d0c4      	beq.n	800ef78 <__sflush_r+0x34>
 800efee:	2b1d      	cmp	r3, #29
 800eff0:	d001      	beq.n	800eff6 <__sflush_r+0xb2>
 800eff2:	2b16      	cmp	r3, #22
 800eff4:	d101      	bne.n	800effa <__sflush_r+0xb6>
 800eff6:	602f      	str	r7, [r5, #0]
 800eff8:	e7b1      	b.n	800ef5e <__sflush_r+0x1a>
 800effa:	89a3      	ldrh	r3, [r4, #12]
 800effc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f000:	81a3      	strh	r3, [r4, #12]
 800f002:	e7ad      	b.n	800ef60 <__sflush_r+0x1c>
 800f004:	690f      	ldr	r7, [r1, #16]
 800f006:	2f00      	cmp	r7, #0
 800f008:	d0a9      	beq.n	800ef5e <__sflush_r+0x1a>
 800f00a:	0793      	lsls	r3, r2, #30
 800f00c:	680e      	ldr	r6, [r1, #0]
 800f00e:	bf08      	it	eq
 800f010:	694b      	ldreq	r3, [r1, #20]
 800f012:	600f      	str	r7, [r1, #0]
 800f014:	bf18      	it	ne
 800f016:	2300      	movne	r3, #0
 800f018:	eba6 0807 	sub.w	r8, r6, r7
 800f01c:	608b      	str	r3, [r1, #8]
 800f01e:	f1b8 0f00 	cmp.w	r8, #0
 800f022:	dd9c      	ble.n	800ef5e <__sflush_r+0x1a>
 800f024:	6a21      	ldr	r1, [r4, #32]
 800f026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f028:	4643      	mov	r3, r8
 800f02a:	463a      	mov	r2, r7
 800f02c:	4628      	mov	r0, r5
 800f02e:	47b0      	blx	r6
 800f030:	2800      	cmp	r0, #0
 800f032:	dc06      	bgt.n	800f042 <__sflush_r+0xfe>
 800f034:	89a3      	ldrh	r3, [r4, #12]
 800f036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f03a:	81a3      	strh	r3, [r4, #12]
 800f03c:	f04f 30ff 	mov.w	r0, #4294967295
 800f040:	e78e      	b.n	800ef60 <__sflush_r+0x1c>
 800f042:	4407      	add	r7, r0
 800f044:	eba8 0800 	sub.w	r8, r8, r0
 800f048:	e7e9      	b.n	800f01e <__sflush_r+0xda>
 800f04a:	bf00      	nop
 800f04c:	20400001 	.word	0x20400001

0800f050 <_fflush_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	690b      	ldr	r3, [r1, #16]
 800f054:	4605      	mov	r5, r0
 800f056:	460c      	mov	r4, r1
 800f058:	b913      	cbnz	r3, 800f060 <_fflush_r+0x10>
 800f05a:	2500      	movs	r5, #0
 800f05c:	4628      	mov	r0, r5
 800f05e:	bd38      	pop	{r3, r4, r5, pc}
 800f060:	b118      	cbz	r0, 800f06a <_fflush_r+0x1a>
 800f062:	6983      	ldr	r3, [r0, #24]
 800f064:	b90b      	cbnz	r3, 800f06a <_fflush_r+0x1a>
 800f066:	f000 f899 	bl	800f19c <__sinit>
 800f06a:	4b14      	ldr	r3, [pc, #80]	; (800f0bc <_fflush_r+0x6c>)
 800f06c:	429c      	cmp	r4, r3
 800f06e:	d11b      	bne.n	800f0a8 <_fflush_r+0x58>
 800f070:	686c      	ldr	r4, [r5, #4]
 800f072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d0ef      	beq.n	800f05a <_fflush_r+0xa>
 800f07a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f07c:	07d0      	lsls	r0, r2, #31
 800f07e:	d404      	bmi.n	800f08a <_fflush_r+0x3a>
 800f080:	0599      	lsls	r1, r3, #22
 800f082:	d402      	bmi.n	800f08a <_fflush_r+0x3a>
 800f084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f086:	f000 fcb8 	bl	800f9fa <__retarget_lock_acquire_recursive>
 800f08a:	4628      	mov	r0, r5
 800f08c:	4621      	mov	r1, r4
 800f08e:	f7ff ff59 	bl	800ef44 <__sflush_r>
 800f092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f094:	07da      	lsls	r2, r3, #31
 800f096:	4605      	mov	r5, r0
 800f098:	d4e0      	bmi.n	800f05c <_fflush_r+0xc>
 800f09a:	89a3      	ldrh	r3, [r4, #12]
 800f09c:	059b      	lsls	r3, r3, #22
 800f09e:	d4dd      	bmi.n	800f05c <_fflush_r+0xc>
 800f0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0a2:	f000 fcab 	bl	800f9fc <__retarget_lock_release_recursive>
 800f0a6:	e7d9      	b.n	800f05c <_fflush_r+0xc>
 800f0a8:	4b05      	ldr	r3, [pc, #20]	; (800f0c0 <_fflush_r+0x70>)
 800f0aa:	429c      	cmp	r4, r3
 800f0ac:	d101      	bne.n	800f0b2 <_fflush_r+0x62>
 800f0ae:	68ac      	ldr	r4, [r5, #8]
 800f0b0:	e7df      	b.n	800f072 <_fflush_r+0x22>
 800f0b2:	4b04      	ldr	r3, [pc, #16]	; (800f0c4 <_fflush_r+0x74>)
 800f0b4:	429c      	cmp	r4, r3
 800f0b6:	bf08      	it	eq
 800f0b8:	68ec      	ldreq	r4, [r5, #12]
 800f0ba:	e7da      	b.n	800f072 <_fflush_r+0x22>
 800f0bc:	08011e74 	.word	0x08011e74
 800f0c0:	08011e94 	.word	0x08011e94
 800f0c4:	08011e54 	.word	0x08011e54

0800f0c8 <fflush>:
 800f0c8:	4601      	mov	r1, r0
 800f0ca:	b920      	cbnz	r0, 800f0d6 <fflush+0xe>
 800f0cc:	4b04      	ldr	r3, [pc, #16]	; (800f0e0 <fflush+0x18>)
 800f0ce:	4905      	ldr	r1, [pc, #20]	; (800f0e4 <fflush+0x1c>)
 800f0d0:	6818      	ldr	r0, [r3, #0]
 800f0d2:	f000 b8fe 	b.w	800f2d2 <_fwalk_reent>
 800f0d6:	4b04      	ldr	r3, [pc, #16]	; (800f0e8 <fflush+0x20>)
 800f0d8:	6818      	ldr	r0, [r3, #0]
 800f0da:	f7ff bfb9 	b.w	800f050 <_fflush_r>
 800f0de:	bf00      	nop
 800f0e0:	08011c34 	.word	0x08011c34
 800f0e4:	0800f051 	.word	0x0800f051
 800f0e8:	2000002c 	.word	0x2000002c

0800f0ec <std>:
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	b510      	push	{r4, lr}
 800f0f0:	4604      	mov	r4, r0
 800f0f2:	e9c0 3300 	strd	r3, r3, [r0]
 800f0f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0fa:	6083      	str	r3, [r0, #8]
 800f0fc:	8181      	strh	r1, [r0, #12]
 800f0fe:	6643      	str	r3, [r0, #100]	; 0x64
 800f100:	81c2      	strh	r2, [r0, #14]
 800f102:	6183      	str	r3, [r0, #24]
 800f104:	4619      	mov	r1, r3
 800f106:	2208      	movs	r2, #8
 800f108:	305c      	adds	r0, #92	; 0x5c
 800f10a:	f7fd f831 	bl	800c170 <memset>
 800f10e:	4b05      	ldr	r3, [pc, #20]	; (800f124 <std+0x38>)
 800f110:	6263      	str	r3, [r4, #36]	; 0x24
 800f112:	4b05      	ldr	r3, [pc, #20]	; (800f128 <std+0x3c>)
 800f114:	62a3      	str	r3, [r4, #40]	; 0x28
 800f116:	4b05      	ldr	r3, [pc, #20]	; (800f12c <std+0x40>)
 800f118:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f11a:	4b05      	ldr	r3, [pc, #20]	; (800f130 <std+0x44>)
 800f11c:	6224      	str	r4, [r4, #32]
 800f11e:	6323      	str	r3, [r4, #48]	; 0x30
 800f120:	bd10      	pop	{r4, pc}
 800f122:	bf00      	nop
 800f124:	08011221 	.word	0x08011221
 800f128:	08011243 	.word	0x08011243
 800f12c:	0801127b 	.word	0x0801127b
 800f130:	0801129f 	.word	0x0801129f

0800f134 <_cleanup_r>:
 800f134:	4901      	ldr	r1, [pc, #4]	; (800f13c <_cleanup_r+0x8>)
 800f136:	f000 b8cc 	b.w	800f2d2 <_fwalk_reent>
 800f13a:	bf00      	nop
 800f13c:	0800f051 	.word	0x0800f051

0800f140 <__sfmoreglue>:
 800f140:	b570      	push	{r4, r5, r6, lr}
 800f142:	2268      	movs	r2, #104	; 0x68
 800f144:	1e4d      	subs	r5, r1, #1
 800f146:	4355      	muls	r5, r2
 800f148:	460e      	mov	r6, r1
 800f14a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f14e:	f7fd f883 	bl	800c258 <_malloc_r>
 800f152:	4604      	mov	r4, r0
 800f154:	b140      	cbz	r0, 800f168 <__sfmoreglue+0x28>
 800f156:	2100      	movs	r1, #0
 800f158:	e9c0 1600 	strd	r1, r6, [r0]
 800f15c:	300c      	adds	r0, #12
 800f15e:	60a0      	str	r0, [r4, #8]
 800f160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f164:	f7fd f804 	bl	800c170 <memset>
 800f168:	4620      	mov	r0, r4
 800f16a:	bd70      	pop	{r4, r5, r6, pc}

0800f16c <__sfp_lock_acquire>:
 800f16c:	4801      	ldr	r0, [pc, #4]	; (800f174 <__sfp_lock_acquire+0x8>)
 800f16e:	f000 bc44 	b.w	800f9fa <__retarget_lock_acquire_recursive>
 800f172:	bf00      	nop
 800f174:	20000785 	.word	0x20000785

0800f178 <__sfp_lock_release>:
 800f178:	4801      	ldr	r0, [pc, #4]	; (800f180 <__sfp_lock_release+0x8>)
 800f17a:	f000 bc3f 	b.w	800f9fc <__retarget_lock_release_recursive>
 800f17e:	bf00      	nop
 800f180:	20000785 	.word	0x20000785

0800f184 <__sinit_lock_acquire>:
 800f184:	4801      	ldr	r0, [pc, #4]	; (800f18c <__sinit_lock_acquire+0x8>)
 800f186:	f000 bc38 	b.w	800f9fa <__retarget_lock_acquire_recursive>
 800f18a:	bf00      	nop
 800f18c:	20000786 	.word	0x20000786

0800f190 <__sinit_lock_release>:
 800f190:	4801      	ldr	r0, [pc, #4]	; (800f198 <__sinit_lock_release+0x8>)
 800f192:	f000 bc33 	b.w	800f9fc <__retarget_lock_release_recursive>
 800f196:	bf00      	nop
 800f198:	20000786 	.word	0x20000786

0800f19c <__sinit>:
 800f19c:	b510      	push	{r4, lr}
 800f19e:	4604      	mov	r4, r0
 800f1a0:	f7ff fff0 	bl	800f184 <__sinit_lock_acquire>
 800f1a4:	69a3      	ldr	r3, [r4, #24]
 800f1a6:	b11b      	cbz	r3, 800f1b0 <__sinit+0x14>
 800f1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1ac:	f7ff bff0 	b.w	800f190 <__sinit_lock_release>
 800f1b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f1b4:	6523      	str	r3, [r4, #80]	; 0x50
 800f1b6:	4b13      	ldr	r3, [pc, #76]	; (800f204 <__sinit+0x68>)
 800f1b8:	4a13      	ldr	r2, [pc, #76]	; (800f208 <__sinit+0x6c>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f1be:	42a3      	cmp	r3, r4
 800f1c0:	bf04      	itt	eq
 800f1c2:	2301      	moveq	r3, #1
 800f1c4:	61a3      	streq	r3, [r4, #24]
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f000 f820 	bl	800f20c <__sfp>
 800f1cc:	6060      	str	r0, [r4, #4]
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	f000 f81c 	bl	800f20c <__sfp>
 800f1d4:	60a0      	str	r0, [r4, #8]
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f000 f818 	bl	800f20c <__sfp>
 800f1dc:	2200      	movs	r2, #0
 800f1de:	60e0      	str	r0, [r4, #12]
 800f1e0:	2104      	movs	r1, #4
 800f1e2:	6860      	ldr	r0, [r4, #4]
 800f1e4:	f7ff ff82 	bl	800f0ec <std>
 800f1e8:	68a0      	ldr	r0, [r4, #8]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	2109      	movs	r1, #9
 800f1ee:	f7ff ff7d 	bl	800f0ec <std>
 800f1f2:	68e0      	ldr	r0, [r4, #12]
 800f1f4:	2202      	movs	r2, #2
 800f1f6:	2112      	movs	r1, #18
 800f1f8:	f7ff ff78 	bl	800f0ec <std>
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	61a3      	str	r3, [r4, #24]
 800f200:	e7d2      	b.n	800f1a8 <__sinit+0xc>
 800f202:	bf00      	nop
 800f204:	08011c34 	.word	0x08011c34
 800f208:	0800f135 	.word	0x0800f135

0800f20c <__sfp>:
 800f20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f20e:	4607      	mov	r7, r0
 800f210:	f7ff ffac 	bl	800f16c <__sfp_lock_acquire>
 800f214:	4b1e      	ldr	r3, [pc, #120]	; (800f290 <__sfp+0x84>)
 800f216:	681e      	ldr	r6, [r3, #0]
 800f218:	69b3      	ldr	r3, [r6, #24]
 800f21a:	b913      	cbnz	r3, 800f222 <__sfp+0x16>
 800f21c:	4630      	mov	r0, r6
 800f21e:	f7ff ffbd 	bl	800f19c <__sinit>
 800f222:	3648      	adds	r6, #72	; 0x48
 800f224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f228:	3b01      	subs	r3, #1
 800f22a:	d503      	bpl.n	800f234 <__sfp+0x28>
 800f22c:	6833      	ldr	r3, [r6, #0]
 800f22e:	b30b      	cbz	r3, 800f274 <__sfp+0x68>
 800f230:	6836      	ldr	r6, [r6, #0]
 800f232:	e7f7      	b.n	800f224 <__sfp+0x18>
 800f234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f238:	b9d5      	cbnz	r5, 800f270 <__sfp+0x64>
 800f23a:	4b16      	ldr	r3, [pc, #88]	; (800f294 <__sfp+0x88>)
 800f23c:	60e3      	str	r3, [r4, #12]
 800f23e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f242:	6665      	str	r5, [r4, #100]	; 0x64
 800f244:	f000 fbd8 	bl	800f9f8 <__retarget_lock_init_recursive>
 800f248:	f7ff ff96 	bl	800f178 <__sfp_lock_release>
 800f24c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f254:	6025      	str	r5, [r4, #0]
 800f256:	61a5      	str	r5, [r4, #24]
 800f258:	2208      	movs	r2, #8
 800f25a:	4629      	mov	r1, r5
 800f25c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f260:	f7fc ff86 	bl	800c170 <memset>
 800f264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f26c:	4620      	mov	r0, r4
 800f26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f270:	3468      	adds	r4, #104	; 0x68
 800f272:	e7d9      	b.n	800f228 <__sfp+0x1c>
 800f274:	2104      	movs	r1, #4
 800f276:	4638      	mov	r0, r7
 800f278:	f7ff ff62 	bl	800f140 <__sfmoreglue>
 800f27c:	4604      	mov	r4, r0
 800f27e:	6030      	str	r0, [r6, #0]
 800f280:	2800      	cmp	r0, #0
 800f282:	d1d5      	bne.n	800f230 <__sfp+0x24>
 800f284:	f7ff ff78 	bl	800f178 <__sfp_lock_release>
 800f288:	230c      	movs	r3, #12
 800f28a:	603b      	str	r3, [r7, #0]
 800f28c:	e7ee      	b.n	800f26c <__sfp+0x60>
 800f28e:	bf00      	nop
 800f290:	08011c34 	.word	0x08011c34
 800f294:	ffff0001 	.word	0xffff0001

0800f298 <_fwalk>:
 800f298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f29c:	460f      	mov	r7, r1
 800f29e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2a2:	2600      	movs	r6, #0
 800f2a4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800f2a8:	f1b8 0801 	subs.w	r8, r8, #1
 800f2ac:	d505      	bpl.n	800f2ba <_fwalk+0x22>
 800f2ae:	6824      	ldr	r4, [r4, #0]
 800f2b0:	2c00      	cmp	r4, #0
 800f2b2:	d1f7      	bne.n	800f2a4 <_fwalk+0xc>
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2ba:	89ab      	ldrh	r3, [r5, #12]
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d906      	bls.n	800f2ce <_fwalk+0x36>
 800f2c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	d002      	beq.n	800f2ce <_fwalk+0x36>
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	47b8      	blx	r7
 800f2cc:	4306      	orrs	r6, r0
 800f2ce:	3568      	adds	r5, #104	; 0x68
 800f2d0:	e7ea      	b.n	800f2a8 <_fwalk+0x10>

0800f2d2 <_fwalk_reent>:
 800f2d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2d6:	4606      	mov	r6, r0
 800f2d8:	4688      	mov	r8, r1
 800f2da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2de:	2700      	movs	r7, #0
 800f2e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2e4:	f1b9 0901 	subs.w	r9, r9, #1
 800f2e8:	d505      	bpl.n	800f2f6 <_fwalk_reent+0x24>
 800f2ea:	6824      	ldr	r4, [r4, #0]
 800f2ec:	2c00      	cmp	r4, #0
 800f2ee:	d1f7      	bne.n	800f2e0 <_fwalk_reent+0xe>
 800f2f0:	4638      	mov	r0, r7
 800f2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2f6:	89ab      	ldrh	r3, [r5, #12]
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d907      	bls.n	800f30c <_fwalk_reent+0x3a>
 800f2fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f300:	3301      	adds	r3, #1
 800f302:	d003      	beq.n	800f30c <_fwalk_reent+0x3a>
 800f304:	4629      	mov	r1, r5
 800f306:	4630      	mov	r0, r6
 800f308:	47c0      	blx	r8
 800f30a:	4307      	orrs	r7, r0
 800f30c:	3568      	adds	r5, #104	; 0x68
 800f30e:	e7e9      	b.n	800f2e4 <_fwalk_reent+0x12>

0800f310 <rshift>:
 800f310:	6903      	ldr	r3, [r0, #16]
 800f312:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f31a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f31e:	f100 0414 	add.w	r4, r0, #20
 800f322:	dd45      	ble.n	800f3b0 <rshift+0xa0>
 800f324:	f011 011f 	ands.w	r1, r1, #31
 800f328:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f32c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f330:	d10c      	bne.n	800f34c <rshift+0x3c>
 800f332:	f100 0710 	add.w	r7, r0, #16
 800f336:	4629      	mov	r1, r5
 800f338:	42b1      	cmp	r1, r6
 800f33a:	d334      	bcc.n	800f3a6 <rshift+0x96>
 800f33c:	1a9b      	subs	r3, r3, r2
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	1eea      	subs	r2, r5, #3
 800f342:	4296      	cmp	r6, r2
 800f344:	bf38      	it	cc
 800f346:	2300      	movcc	r3, #0
 800f348:	4423      	add	r3, r4
 800f34a:	e015      	b.n	800f378 <rshift+0x68>
 800f34c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f350:	f1c1 0820 	rsb	r8, r1, #32
 800f354:	40cf      	lsrs	r7, r1
 800f356:	f105 0e04 	add.w	lr, r5, #4
 800f35a:	46a1      	mov	r9, r4
 800f35c:	4576      	cmp	r6, lr
 800f35e:	46f4      	mov	ip, lr
 800f360:	d815      	bhi.n	800f38e <rshift+0x7e>
 800f362:	1a9a      	subs	r2, r3, r2
 800f364:	0092      	lsls	r2, r2, #2
 800f366:	3a04      	subs	r2, #4
 800f368:	3501      	adds	r5, #1
 800f36a:	42ae      	cmp	r6, r5
 800f36c:	bf38      	it	cc
 800f36e:	2200      	movcc	r2, #0
 800f370:	18a3      	adds	r3, r4, r2
 800f372:	50a7      	str	r7, [r4, r2]
 800f374:	b107      	cbz	r7, 800f378 <rshift+0x68>
 800f376:	3304      	adds	r3, #4
 800f378:	1b1a      	subs	r2, r3, r4
 800f37a:	42a3      	cmp	r3, r4
 800f37c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f380:	bf08      	it	eq
 800f382:	2300      	moveq	r3, #0
 800f384:	6102      	str	r2, [r0, #16]
 800f386:	bf08      	it	eq
 800f388:	6143      	streq	r3, [r0, #20]
 800f38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f38e:	f8dc c000 	ldr.w	ip, [ip]
 800f392:	fa0c fc08 	lsl.w	ip, ip, r8
 800f396:	ea4c 0707 	orr.w	r7, ip, r7
 800f39a:	f849 7b04 	str.w	r7, [r9], #4
 800f39e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f3a2:	40cf      	lsrs	r7, r1
 800f3a4:	e7da      	b.n	800f35c <rshift+0x4c>
 800f3a6:	f851 cb04 	ldr.w	ip, [r1], #4
 800f3aa:	f847 cf04 	str.w	ip, [r7, #4]!
 800f3ae:	e7c3      	b.n	800f338 <rshift+0x28>
 800f3b0:	4623      	mov	r3, r4
 800f3b2:	e7e1      	b.n	800f378 <rshift+0x68>

0800f3b4 <__hexdig_fun>:
 800f3b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f3b8:	2b09      	cmp	r3, #9
 800f3ba:	d802      	bhi.n	800f3c2 <__hexdig_fun+0xe>
 800f3bc:	3820      	subs	r0, #32
 800f3be:	b2c0      	uxtb	r0, r0
 800f3c0:	4770      	bx	lr
 800f3c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f3c6:	2b05      	cmp	r3, #5
 800f3c8:	d801      	bhi.n	800f3ce <__hexdig_fun+0x1a>
 800f3ca:	3847      	subs	r0, #71	; 0x47
 800f3cc:	e7f7      	b.n	800f3be <__hexdig_fun+0xa>
 800f3ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f3d2:	2b05      	cmp	r3, #5
 800f3d4:	d801      	bhi.n	800f3da <__hexdig_fun+0x26>
 800f3d6:	3827      	subs	r0, #39	; 0x27
 800f3d8:	e7f1      	b.n	800f3be <__hexdig_fun+0xa>
 800f3da:	2000      	movs	r0, #0
 800f3dc:	4770      	bx	lr
	...

0800f3e0 <__gethex>:
 800f3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e4:	ed2d 8b02 	vpush	{d8}
 800f3e8:	b089      	sub	sp, #36	; 0x24
 800f3ea:	ee08 0a10 	vmov	s16, r0
 800f3ee:	9304      	str	r3, [sp, #16]
 800f3f0:	4bb4      	ldr	r3, [pc, #720]	; (800f6c4 <__gethex+0x2e4>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	9301      	str	r3, [sp, #4]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	468b      	mov	fp, r1
 800f3fa:	4690      	mov	r8, r2
 800f3fc:	f7f0 fee8 	bl	80001d0 <strlen>
 800f400:	9b01      	ldr	r3, [sp, #4]
 800f402:	f8db 2000 	ldr.w	r2, [fp]
 800f406:	4403      	add	r3, r0
 800f408:	4682      	mov	sl, r0
 800f40a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f40e:	9305      	str	r3, [sp, #20]
 800f410:	1c93      	adds	r3, r2, #2
 800f412:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f416:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f41a:	32fe      	adds	r2, #254	; 0xfe
 800f41c:	18d1      	adds	r1, r2, r3
 800f41e:	461f      	mov	r7, r3
 800f420:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f424:	9100      	str	r1, [sp, #0]
 800f426:	2830      	cmp	r0, #48	; 0x30
 800f428:	d0f8      	beq.n	800f41c <__gethex+0x3c>
 800f42a:	f7ff ffc3 	bl	800f3b4 <__hexdig_fun>
 800f42e:	4604      	mov	r4, r0
 800f430:	2800      	cmp	r0, #0
 800f432:	d13a      	bne.n	800f4aa <__gethex+0xca>
 800f434:	9901      	ldr	r1, [sp, #4]
 800f436:	4652      	mov	r2, sl
 800f438:	4638      	mov	r0, r7
 800f43a:	f001 ff34 	bl	80112a6 <strncmp>
 800f43e:	4605      	mov	r5, r0
 800f440:	2800      	cmp	r0, #0
 800f442:	d168      	bne.n	800f516 <__gethex+0x136>
 800f444:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f448:	eb07 060a 	add.w	r6, r7, sl
 800f44c:	f7ff ffb2 	bl	800f3b4 <__hexdig_fun>
 800f450:	2800      	cmp	r0, #0
 800f452:	d062      	beq.n	800f51a <__gethex+0x13a>
 800f454:	4633      	mov	r3, r6
 800f456:	7818      	ldrb	r0, [r3, #0]
 800f458:	2830      	cmp	r0, #48	; 0x30
 800f45a:	461f      	mov	r7, r3
 800f45c:	f103 0301 	add.w	r3, r3, #1
 800f460:	d0f9      	beq.n	800f456 <__gethex+0x76>
 800f462:	f7ff ffa7 	bl	800f3b4 <__hexdig_fun>
 800f466:	2301      	movs	r3, #1
 800f468:	fab0 f480 	clz	r4, r0
 800f46c:	0964      	lsrs	r4, r4, #5
 800f46e:	4635      	mov	r5, r6
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	463a      	mov	r2, r7
 800f474:	4616      	mov	r6, r2
 800f476:	3201      	adds	r2, #1
 800f478:	7830      	ldrb	r0, [r6, #0]
 800f47a:	f7ff ff9b 	bl	800f3b4 <__hexdig_fun>
 800f47e:	2800      	cmp	r0, #0
 800f480:	d1f8      	bne.n	800f474 <__gethex+0x94>
 800f482:	9901      	ldr	r1, [sp, #4]
 800f484:	4652      	mov	r2, sl
 800f486:	4630      	mov	r0, r6
 800f488:	f001 ff0d 	bl	80112a6 <strncmp>
 800f48c:	b980      	cbnz	r0, 800f4b0 <__gethex+0xd0>
 800f48e:	b94d      	cbnz	r5, 800f4a4 <__gethex+0xc4>
 800f490:	eb06 050a 	add.w	r5, r6, sl
 800f494:	462a      	mov	r2, r5
 800f496:	4616      	mov	r6, r2
 800f498:	3201      	adds	r2, #1
 800f49a:	7830      	ldrb	r0, [r6, #0]
 800f49c:	f7ff ff8a 	bl	800f3b4 <__hexdig_fun>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	d1f8      	bne.n	800f496 <__gethex+0xb6>
 800f4a4:	1bad      	subs	r5, r5, r6
 800f4a6:	00ad      	lsls	r5, r5, #2
 800f4a8:	e004      	b.n	800f4b4 <__gethex+0xd4>
 800f4aa:	2400      	movs	r4, #0
 800f4ac:	4625      	mov	r5, r4
 800f4ae:	e7e0      	b.n	800f472 <__gethex+0x92>
 800f4b0:	2d00      	cmp	r5, #0
 800f4b2:	d1f7      	bne.n	800f4a4 <__gethex+0xc4>
 800f4b4:	7833      	ldrb	r3, [r6, #0]
 800f4b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f4ba:	2b50      	cmp	r3, #80	; 0x50
 800f4bc:	d13b      	bne.n	800f536 <__gethex+0x156>
 800f4be:	7873      	ldrb	r3, [r6, #1]
 800f4c0:	2b2b      	cmp	r3, #43	; 0x2b
 800f4c2:	d02c      	beq.n	800f51e <__gethex+0x13e>
 800f4c4:	2b2d      	cmp	r3, #45	; 0x2d
 800f4c6:	d02e      	beq.n	800f526 <__gethex+0x146>
 800f4c8:	1c71      	adds	r1, r6, #1
 800f4ca:	f04f 0900 	mov.w	r9, #0
 800f4ce:	7808      	ldrb	r0, [r1, #0]
 800f4d0:	f7ff ff70 	bl	800f3b4 <__hexdig_fun>
 800f4d4:	1e43      	subs	r3, r0, #1
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	2b18      	cmp	r3, #24
 800f4da:	d82c      	bhi.n	800f536 <__gethex+0x156>
 800f4dc:	f1a0 0210 	sub.w	r2, r0, #16
 800f4e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f4e4:	f7ff ff66 	bl	800f3b4 <__hexdig_fun>
 800f4e8:	1e43      	subs	r3, r0, #1
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	2b18      	cmp	r3, #24
 800f4ee:	d91d      	bls.n	800f52c <__gethex+0x14c>
 800f4f0:	f1b9 0f00 	cmp.w	r9, #0
 800f4f4:	d000      	beq.n	800f4f8 <__gethex+0x118>
 800f4f6:	4252      	negs	r2, r2
 800f4f8:	4415      	add	r5, r2
 800f4fa:	f8cb 1000 	str.w	r1, [fp]
 800f4fe:	b1e4      	cbz	r4, 800f53a <__gethex+0x15a>
 800f500:	9b00      	ldr	r3, [sp, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	bf14      	ite	ne
 800f506:	2700      	movne	r7, #0
 800f508:	2706      	moveq	r7, #6
 800f50a:	4638      	mov	r0, r7
 800f50c:	b009      	add	sp, #36	; 0x24
 800f50e:	ecbd 8b02 	vpop	{d8}
 800f512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f516:	463e      	mov	r6, r7
 800f518:	4625      	mov	r5, r4
 800f51a:	2401      	movs	r4, #1
 800f51c:	e7ca      	b.n	800f4b4 <__gethex+0xd4>
 800f51e:	f04f 0900 	mov.w	r9, #0
 800f522:	1cb1      	adds	r1, r6, #2
 800f524:	e7d3      	b.n	800f4ce <__gethex+0xee>
 800f526:	f04f 0901 	mov.w	r9, #1
 800f52a:	e7fa      	b.n	800f522 <__gethex+0x142>
 800f52c:	230a      	movs	r3, #10
 800f52e:	fb03 0202 	mla	r2, r3, r2, r0
 800f532:	3a10      	subs	r2, #16
 800f534:	e7d4      	b.n	800f4e0 <__gethex+0x100>
 800f536:	4631      	mov	r1, r6
 800f538:	e7df      	b.n	800f4fa <__gethex+0x11a>
 800f53a:	1bf3      	subs	r3, r6, r7
 800f53c:	3b01      	subs	r3, #1
 800f53e:	4621      	mov	r1, r4
 800f540:	2b07      	cmp	r3, #7
 800f542:	dc0b      	bgt.n	800f55c <__gethex+0x17c>
 800f544:	ee18 0a10 	vmov	r0, s16
 800f548:	f000 faea 	bl	800fb20 <_Balloc>
 800f54c:	4604      	mov	r4, r0
 800f54e:	b940      	cbnz	r0, 800f562 <__gethex+0x182>
 800f550:	4b5d      	ldr	r3, [pc, #372]	; (800f6c8 <__gethex+0x2e8>)
 800f552:	4602      	mov	r2, r0
 800f554:	21de      	movs	r1, #222	; 0xde
 800f556:	485d      	ldr	r0, [pc, #372]	; (800f6cc <__gethex+0x2ec>)
 800f558:	f002 f820 	bl	801159c <__assert_func>
 800f55c:	3101      	adds	r1, #1
 800f55e:	105b      	asrs	r3, r3, #1
 800f560:	e7ee      	b.n	800f540 <__gethex+0x160>
 800f562:	f100 0914 	add.w	r9, r0, #20
 800f566:	f04f 0b00 	mov.w	fp, #0
 800f56a:	f1ca 0301 	rsb	r3, sl, #1
 800f56e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f572:	f8cd b000 	str.w	fp, [sp]
 800f576:	9306      	str	r3, [sp, #24]
 800f578:	42b7      	cmp	r7, r6
 800f57a:	d340      	bcc.n	800f5fe <__gethex+0x21e>
 800f57c:	9802      	ldr	r0, [sp, #8]
 800f57e:	9b00      	ldr	r3, [sp, #0]
 800f580:	f840 3b04 	str.w	r3, [r0], #4
 800f584:	eba0 0009 	sub.w	r0, r0, r9
 800f588:	1080      	asrs	r0, r0, #2
 800f58a:	0146      	lsls	r6, r0, #5
 800f58c:	6120      	str	r0, [r4, #16]
 800f58e:	4618      	mov	r0, r3
 800f590:	f000 fbb8 	bl	800fd04 <__hi0bits>
 800f594:	1a30      	subs	r0, r6, r0
 800f596:	f8d8 6000 	ldr.w	r6, [r8]
 800f59a:	42b0      	cmp	r0, r6
 800f59c:	dd63      	ble.n	800f666 <__gethex+0x286>
 800f59e:	1b87      	subs	r7, r0, r6
 800f5a0:	4639      	mov	r1, r7
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	f000 ff5c 	bl	8010460 <__any_on>
 800f5a8:	4682      	mov	sl, r0
 800f5aa:	b1a8      	cbz	r0, 800f5d8 <__gethex+0x1f8>
 800f5ac:	1e7b      	subs	r3, r7, #1
 800f5ae:	1159      	asrs	r1, r3, #5
 800f5b0:	f003 021f 	and.w	r2, r3, #31
 800f5b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f5b8:	f04f 0a01 	mov.w	sl, #1
 800f5bc:	fa0a f202 	lsl.w	r2, sl, r2
 800f5c0:	420a      	tst	r2, r1
 800f5c2:	d009      	beq.n	800f5d8 <__gethex+0x1f8>
 800f5c4:	4553      	cmp	r3, sl
 800f5c6:	dd05      	ble.n	800f5d4 <__gethex+0x1f4>
 800f5c8:	1eb9      	subs	r1, r7, #2
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	f000 ff48 	bl	8010460 <__any_on>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d145      	bne.n	800f660 <__gethex+0x280>
 800f5d4:	f04f 0a02 	mov.w	sl, #2
 800f5d8:	4639      	mov	r1, r7
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f7ff fe98 	bl	800f310 <rshift>
 800f5e0:	443d      	add	r5, r7
 800f5e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5e6:	42ab      	cmp	r3, r5
 800f5e8:	da4c      	bge.n	800f684 <__gethex+0x2a4>
 800f5ea:	ee18 0a10 	vmov	r0, s16
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	f000 fad6 	bl	800fba0 <_Bfree>
 800f5f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	6013      	str	r3, [r2, #0]
 800f5fa:	27a3      	movs	r7, #163	; 0xa3
 800f5fc:	e785      	b.n	800f50a <__gethex+0x12a>
 800f5fe:	1e73      	subs	r3, r6, #1
 800f600:	9a05      	ldr	r2, [sp, #20]
 800f602:	9303      	str	r3, [sp, #12]
 800f604:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f608:	4293      	cmp	r3, r2
 800f60a:	d019      	beq.n	800f640 <__gethex+0x260>
 800f60c:	f1bb 0f20 	cmp.w	fp, #32
 800f610:	d107      	bne.n	800f622 <__gethex+0x242>
 800f612:	9b02      	ldr	r3, [sp, #8]
 800f614:	9a00      	ldr	r2, [sp, #0]
 800f616:	f843 2b04 	str.w	r2, [r3], #4
 800f61a:	9302      	str	r3, [sp, #8]
 800f61c:	2300      	movs	r3, #0
 800f61e:	9300      	str	r3, [sp, #0]
 800f620:	469b      	mov	fp, r3
 800f622:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f626:	f7ff fec5 	bl	800f3b4 <__hexdig_fun>
 800f62a:	9b00      	ldr	r3, [sp, #0]
 800f62c:	f000 000f 	and.w	r0, r0, #15
 800f630:	fa00 f00b 	lsl.w	r0, r0, fp
 800f634:	4303      	orrs	r3, r0
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	f10b 0b04 	add.w	fp, fp, #4
 800f63c:	9b03      	ldr	r3, [sp, #12]
 800f63e:	e00d      	b.n	800f65c <__gethex+0x27c>
 800f640:	9b03      	ldr	r3, [sp, #12]
 800f642:	9a06      	ldr	r2, [sp, #24]
 800f644:	4413      	add	r3, r2
 800f646:	42bb      	cmp	r3, r7
 800f648:	d3e0      	bcc.n	800f60c <__gethex+0x22c>
 800f64a:	4618      	mov	r0, r3
 800f64c:	9901      	ldr	r1, [sp, #4]
 800f64e:	9307      	str	r3, [sp, #28]
 800f650:	4652      	mov	r2, sl
 800f652:	f001 fe28 	bl	80112a6 <strncmp>
 800f656:	9b07      	ldr	r3, [sp, #28]
 800f658:	2800      	cmp	r0, #0
 800f65a:	d1d7      	bne.n	800f60c <__gethex+0x22c>
 800f65c:	461e      	mov	r6, r3
 800f65e:	e78b      	b.n	800f578 <__gethex+0x198>
 800f660:	f04f 0a03 	mov.w	sl, #3
 800f664:	e7b8      	b.n	800f5d8 <__gethex+0x1f8>
 800f666:	da0a      	bge.n	800f67e <__gethex+0x29e>
 800f668:	1a37      	subs	r7, r6, r0
 800f66a:	4621      	mov	r1, r4
 800f66c:	ee18 0a10 	vmov	r0, s16
 800f670:	463a      	mov	r2, r7
 800f672:	f000 fcb1 	bl	800ffd8 <__lshift>
 800f676:	1bed      	subs	r5, r5, r7
 800f678:	4604      	mov	r4, r0
 800f67a:	f100 0914 	add.w	r9, r0, #20
 800f67e:	f04f 0a00 	mov.w	sl, #0
 800f682:	e7ae      	b.n	800f5e2 <__gethex+0x202>
 800f684:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f688:	42a8      	cmp	r0, r5
 800f68a:	dd72      	ble.n	800f772 <__gethex+0x392>
 800f68c:	1b45      	subs	r5, r0, r5
 800f68e:	42ae      	cmp	r6, r5
 800f690:	dc36      	bgt.n	800f700 <__gethex+0x320>
 800f692:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f696:	2b02      	cmp	r3, #2
 800f698:	d02a      	beq.n	800f6f0 <__gethex+0x310>
 800f69a:	2b03      	cmp	r3, #3
 800f69c:	d02c      	beq.n	800f6f8 <__gethex+0x318>
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d11c      	bne.n	800f6dc <__gethex+0x2fc>
 800f6a2:	42ae      	cmp	r6, r5
 800f6a4:	d11a      	bne.n	800f6dc <__gethex+0x2fc>
 800f6a6:	2e01      	cmp	r6, #1
 800f6a8:	d112      	bne.n	800f6d0 <__gethex+0x2f0>
 800f6aa:	9a04      	ldr	r2, [sp, #16]
 800f6ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f6b0:	6013      	str	r3, [r2, #0]
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	6123      	str	r3, [r4, #16]
 800f6b6:	f8c9 3000 	str.w	r3, [r9]
 800f6ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6bc:	2762      	movs	r7, #98	; 0x62
 800f6be:	601c      	str	r4, [r3, #0]
 800f6c0:	e723      	b.n	800f50a <__gethex+0x12a>
 800f6c2:	bf00      	nop
 800f6c4:	08011f1c 	.word	0x08011f1c
 800f6c8:	08011e40 	.word	0x08011e40
 800f6cc:	08011eb4 	.word	0x08011eb4
 800f6d0:	1e71      	subs	r1, r6, #1
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f000 fec4 	bl	8010460 <__any_on>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d1e6      	bne.n	800f6aa <__gethex+0x2ca>
 800f6dc:	ee18 0a10 	vmov	r0, s16
 800f6e0:	4621      	mov	r1, r4
 800f6e2:	f000 fa5d 	bl	800fba0 <_Bfree>
 800f6e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	6013      	str	r3, [r2, #0]
 800f6ec:	2750      	movs	r7, #80	; 0x50
 800f6ee:	e70c      	b.n	800f50a <__gethex+0x12a>
 800f6f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1f2      	bne.n	800f6dc <__gethex+0x2fc>
 800f6f6:	e7d8      	b.n	800f6aa <__gethex+0x2ca>
 800f6f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d1d5      	bne.n	800f6aa <__gethex+0x2ca>
 800f6fe:	e7ed      	b.n	800f6dc <__gethex+0x2fc>
 800f700:	1e6f      	subs	r7, r5, #1
 800f702:	f1ba 0f00 	cmp.w	sl, #0
 800f706:	d131      	bne.n	800f76c <__gethex+0x38c>
 800f708:	b127      	cbz	r7, 800f714 <__gethex+0x334>
 800f70a:	4639      	mov	r1, r7
 800f70c:	4620      	mov	r0, r4
 800f70e:	f000 fea7 	bl	8010460 <__any_on>
 800f712:	4682      	mov	sl, r0
 800f714:	117b      	asrs	r3, r7, #5
 800f716:	2101      	movs	r1, #1
 800f718:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f71c:	f007 071f 	and.w	r7, r7, #31
 800f720:	fa01 f707 	lsl.w	r7, r1, r7
 800f724:	421f      	tst	r7, r3
 800f726:	4629      	mov	r1, r5
 800f728:	4620      	mov	r0, r4
 800f72a:	bf18      	it	ne
 800f72c:	f04a 0a02 	orrne.w	sl, sl, #2
 800f730:	1b76      	subs	r6, r6, r5
 800f732:	f7ff fded 	bl	800f310 <rshift>
 800f736:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f73a:	2702      	movs	r7, #2
 800f73c:	f1ba 0f00 	cmp.w	sl, #0
 800f740:	d048      	beq.n	800f7d4 <__gethex+0x3f4>
 800f742:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f746:	2b02      	cmp	r3, #2
 800f748:	d015      	beq.n	800f776 <__gethex+0x396>
 800f74a:	2b03      	cmp	r3, #3
 800f74c:	d017      	beq.n	800f77e <__gethex+0x39e>
 800f74e:	2b01      	cmp	r3, #1
 800f750:	d109      	bne.n	800f766 <__gethex+0x386>
 800f752:	f01a 0f02 	tst.w	sl, #2
 800f756:	d006      	beq.n	800f766 <__gethex+0x386>
 800f758:	f8d9 0000 	ldr.w	r0, [r9]
 800f75c:	ea4a 0a00 	orr.w	sl, sl, r0
 800f760:	f01a 0f01 	tst.w	sl, #1
 800f764:	d10e      	bne.n	800f784 <__gethex+0x3a4>
 800f766:	f047 0710 	orr.w	r7, r7, #16
 800f76a:	e033      	b.n	800f7d4 <__gethex+0x3f4>
 800f76c:	f04f 0a01 	mov.w	sl, #1
 800f770:	e7d0      	b.n	800f714 <__gethex+0x334>
 800f772:	2701      	movs	r7, #1
 800f774:	e7e2      	b.n	800f73c <__gethex+0x35c>
 800f776:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f778:	f1c3 0301 	rsb	r3, r3, #1
 800f77c:	9315      	str	r3, [sp, #84]	; 0x54
 800f77e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f780:	2b00      	cmp	r3, #0
 800f782:	d0f0      	beq.n	800f766 <__gethex+0x386>
 800f784:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f788:	f104 0314 	add.w	r3, r4, #20
 800f78c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f790:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f794:	f04f 0c00 	mov.w	ip, #0
 800f798:	4618      	mov	r0, r3
 800f79a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f79e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f7a2:	d01c      	beq.n	800f7de <__gethex+0x3fe>
 800f7a4:	3201      	adds	r2, #1
 800f7a6:	6002      	str	r2, [r0, #0]
 800f7a8:	2f02      	cmp	r7, #2
 800f7aa:	f104 0314 	add.w	r3, r4, #20
 800f7ae:	d13f      	bne.n	800f830 <__gethex+0x450>
 800f7b0:	f8d8 2000 	ldr.w	r2, [r8]
 800f7b4:	3a01      	subs	r2, #1
 800f7b6:	42b2      	cmp	r2, r6
 800f7b8:	d10a      	bne.n	800f7d0 <__gethex+0x3f0>
 800f7ba:	1171      	asrs	r1, r6, #5
 800f7bc:	2201      	movs	r2, #1
 800f7be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f7c2:	f006 061f 	and.w	r6, r6, #31
 800f7c6:	fa02 f606 	lsl.w	r6, r2, r6
 800f7ca:	421e      	tst	r6, r3
 800f7cc:	bf18      	it	ne
 800f7ce:	4617      	movne	r7, r2
 800f7d0:	f047 0720 	orr.w	r7, r7, #32
 800f7d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7d6:	601c      	str	r4, [r3, #0]
 800f7d8:	9b04      	ldr	r3, [sp, #16]
 800f7da:	601d      	str	r5, [r3, #0]
 800f7dc:	e695      	b.n	800f50a <__gethex+0x12a>
 800f7de:	4299      	cmp	r1, r3
 800f7e0:	f843 cc04 	str.w	ip, [r3, #-4]
 800f7e4:	d8d8      	bhi.n	800f798 <__gethex+0x3b8>
 800f7e6:	68a3      	ldr	r3, [r4, #8]
 800f7e8:	459b      	cmp	fp, r3
 800f7ea:	db19      	blt.n	800f820 <__gethex+0x440>
 800f7ec:	6861      	ldr	r1, [r4, #4]
 800f7ee:	ee18 0a10 	vmov	r0, s16
 800f7f2:	3101      	adds	r1, #1
 800f7f4:	f000 f994 	bl	800fb20 <_Balloc>
 800f7f8:	4681      	mov	r9, r0
 800f7fa:	b918      	cbnz	r0, 800f804 <__gethex+0x424>
 800f7fc:	4b1a      	ldr	r3, [pc, #104]	; (800f868 <__gethex+0x488>)
 800f7fe:	4602      	mov	r2, r0
 800f800:	2184      	movs	r1, #132	; 0x84
 800f802:	e6a8      	b.n	800f556 <__gethex+0x176>
 800f804:	6922      	ldr	r2, [r4, #16]
 800f806:	3202      	adds	r2, #2
 800f808:	f104 010c 	add.w	r1, r4, #12
 800f80c:	0092      	lsls	r2, r2, #2
 800f80e:	300c      	adds	r0, #12
 800f810:	f000 f96c 	bl	800faec <memcpy>
 800f814:	4621      	mov	r1, r4
 800f816:	ee18 0a10 	vmov	r0, s16
 800f81a:	f000 f9c1 	bl	800fba0 <_Bfree>
 800f81e:	464c      	mov	r4, r9
 800f820:	6923      	ldr	r3, [r4, #16]
 800f822:	1c5a      	adds	r2, r3, #1
 800f824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f828:	6122      	str	r2, [r4, #16]
 800f82a:	2201      	movs	r2, #1
 800f82c:	615a      	str	r2, [r3, #20]
 800f82e:	e7bb      	b.n	800f7a8 <__gethex+0x3c8>
 800f830:	6922      	ldr	r2, [r4, #16]
 800f832:	455a      	cmp	r2, fp
 800f834:	dd0b      	ble.n	800f84e <__gethex+0x46e>
 800f836:	2101      	movs	r1, #1
 800f838:	4620      	mov	r0, r4
 800f83a:	f7ff fd69 	bl	800f310 <rshift>
 800f83e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f842:	3501      	adds	r5, #1
 800f844:	42ab      	cmp	r3, r5
 800f846:	f6ff aed0 	blt.w	800f5ea <__gethex+0x20a>
 800f84a:	2701      	movs	r7, #1
 800f84c:	e7c0      	b.n	800f7d0 <__gethex+0x3f0>
 800f84e:	f016 061f 	ands.w	r6, r6, #31
 800f852:	d0fa      	beq.n	800f84a <__gethex+0x46a>
 800f854:	4453      	add	r3, sl
 800f856:	f1c6 0620 	rsb	r6, r6, #32
 800f85a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f85e:	f000 fa51 	bl	800fd04 <__hi0bits>
 800f862:	42b0      	cmp	r0, r6
 800f864:	dbe7      	blt.n	800f836 <__gethex+0x456>
 800f866:	e7f0      	b.n	800f84a <__gethex+0x46a>
 800f868:	08011e40 	.word	0x08011e40

0800f86c <L_shift>:
 800f86c:	f1c2 0208 	rsb	r2, r2, #8
 800f870:	0092      	lsls	r2, r2, #2
 800f872:	b570      	push	{r4, r5, r6, lr}
 800f874:	f1c2 0620 	rsb	r6, r2, #32
 800f878:	6843      	ldr	r3, [r0, #4]
 800f87a:	6804      	ldr	r4, [r0, #0]
 800f87c:	fa03 f506 	lsl.w	r5, r3, r6
 800f880:	432c      	orrs	r4, r5
 800f882:	40d3      	lsrs	r3, r2
 800f884:	6004      	str	r4, [r0, #0]
 800f886:	f840 3f04 	str.w	r3, [r0, #4]!
 800f88a:	4288      	cmp	r0, r1
 800f88c:	d3f4      	bcc.n	800f878 <L_shift+0xc>
 800f88e:	bd70      	pop	{r4, r5, r6, pc}

0800f890 <__match>:
 800f890:	b530      	push	{r4, r5, lr}
 800f892:	6803      	ldr	r3, [r0, #0]
 800f894:	3301      	adds	r3, #1
 800f896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f89a:	b914      	cbnz	r4, 800f8a2 <__match+0x12>
 800f89c:	6003      	str	r3, [r0, #0]
 800f89e:	2001      	movs	r0, #1
 800f8a0:	bd30      	pop	{r4, r5, pc}
 800f8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f8aa:	2d19      	cmp	r5, #25
 800f8ac:	bf98      	it	ls
 800f8ae:	3220      	addls	r2, #32
 800f8b0:	42a2      	cmp	r2, r4
 800f8b2:	d0f0      	beq.n	800f896 <__match+0x6>
 800f8b4:	2000      	movs	r0, #0
 800f8b6:	e7f3      	b.n	800f8a0 <__match+0x10>

0800f8b8 <__hexnan>:
 800f8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8bc:	680b      	ldr	r3, [r1, #0]
 800f8be:	115e      	asrs	r6, r3, #5
 800f8c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f8c4:	f013 031f 	ands.w	r3, r3, #31
 800f8c8:	b087      	sub	sp, #28
 800f8ca:	bf18      	it	ne
 800f8cc:	3604      	addne	r6, #4
 800f8ce:	2500      	movs	r5, #0
 800f8d0:	1f37      	subs	r7, r6, #4
 800f8d2:	4690      	mov	r8, r2
 800f8d4:	6802      	ldr	r2, [r0, #0]
 800f8d6:	9301      	str	r3, [sp, #4]
 800f8d8:	4682      	mov	sl, r0
 800f8da:	f846 5c04 	str.w	r5, [r6, #-4]
 800f8de:	46b9      	mov	r9, r7
 800f8e0:	463c      	mov	r4, r7
 800f8e2:	9502      	str	r5, [sp, #8]
 800f8e4:	46ab      	mov	fp, r5
 800f8e6:	7851      	ldrb	r1, [r2, #1]
 800f8e8:	1c53      	adds	r3, r2, #1
 800f8ea:	9303      	str	r3, [sp, #12]
 800f8ec:	b341      	cbz	r1, 800f940 <__hexnan+0x88>
 800f8ee:	4608      	mov	r0, r1
 800f8f0:	9205      	str	r2, [sp, #20]
 800f8f2:	9104      	str	r1, [sp, #16]
 800f8f4:	f7ff fd5e 	bl	800f3b4 <__hexdig_fun>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	d14f      	bne.n	800f99c <__hexnan+0xe4>
 800f8fc:	9904      	ldr	r1, [sp, #16]
 800f8fe:	9a05      	ldr	r2, [sp, #20]
 800f900:	2920      	cmp	r1, #32
 800f902:	d818      	bhi.n	800f936 <__hexnan+0x7e>
 800f904:	9b02      	ldr	r3, [sp, #8]
 800f906:	459b      	cmp	fp, r3
 800f908:	dd13      	ble.n	800f932 <__hexnan+0x7a>
 800f90a:	454c      	cmp	r4, r9
 800f90c:	d206      	bcs.n	800f91c <__hexnan+0x64>
 800f90e:	2d07      	cmp	r5, #7
 800f910:	dc04      	bgt.n	800f91c <__hexnan+0x64>
 800f912:	462a      	mov	r2, r5
 800f914:	4649      	mov	r1, r9
 800f916:	4620      	mov	r0, r4
 800f918:	f7ff ffa8 	bl	800f86c <L_shift>
 800f91c:	4544      	cmp	r4, r8
 800f91e:	d950      	bls.n	800f9c2 <__hexnan+0x10a>
 800f920:	2300      	movs	r3, #0
 800f922:	f1a4 0904 	sub.w	r9, r4, #4
 800f926:	f844 3c04 	str.w	r3, [r4, #-4]
 800f92a:	f8cd b008 	str.w	fp, [sp, #8]
 800f92e:	464c      	mov	r4, r9
 800f930:	461d      	mov	r5, r3
 800f932:	9a03      	ldr	r2, [sp, #12]
 800f934:	e7d7      	b.n	800f8e6 <__hexnan+0x2e>
 800f936:	2929      	cmp	r1, #41	; 0x29
 800f938:	d156      	bne.n	800f9e8 <__hexnan+0x130>
 800f93a:	3202      	adds	r2, #2
 800f93c:	f8ca 2000 	str.w	r2, [sl]
 800f940:	f1bb 0f00 	cmp.w	fp, #0
 800f944:	d050      	beq.n	800f9e8 <__hexnan+0x130>
 800f946:	454c      	cmp	r4, r9
 800f948:	d206      	bcs.n	800f958 <__hexnan+0xa0>
 800f94a:	2d07      	cmp	r5, #7
 800f94c:	dc04      	bgt.n	800f958 <__hexnan+0xa0>
 800f94e:	462a      	mov	r2, r5
 800f950:	4649      	mov	r1, r9
 800f952:	4620      	mov	r0, r4
 800f954:	f7ff ff8a 	bl	800f86c <L_shift>
 800f958:	4544      	cmp	r4, r8
 800f95a:	d934      	bls.n	800f9c6 <__hexnan+0x10e>
 800f95c:	f1a8 0204 	sub.w	r2, r8, #4
 800f960:	4623      	mov	r3, r4
 800f962:	f853 1b04 	ldr.w	r1, [r3], #4
 800f966:	f842 1f04 	str.w	r1, [r2, #4]!
 800f96a:	429f      	cmp	r7, r3
 800f96c:	d2f9      	bcs.n	800f962 <__hexnan+0xaa>
 800f96e:	1b3b      	subs	r3, r7, r4
 800f970:	f023 0303 	bic.w	r3, r3, #3
 800f974:	3304      	adds	r3, #4
 800f976:	3401      	adds	r4, #1
 800f978:	3e03      	subs	r6, #3
 800f97a:	42b4      	cmp	r4, r6
 800f97c:	bf88      	it	hi
 800f97e:	2304      	movhi	r3, #4
 800f980:	4443      	add	r3, r8
 800f982:	2200      	movs	r2, #0
 800f984:	f843 2b04 	str.w	r2, [r3], #4
 800f988:	429f      	cmp	r7, r3
 800f98a:	d2fb      	bcs.n	800f984 <__hexnan+0xcc>
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	b91b      	cbnz	r3, 800f998 <__hexnan+0xe0>
 800f990:	4547      	cmp	r7, r8
 800f992:	d127      	bne.n	800f9e4 <__hexnan+0x12c>
 800f994:	2301      	movs	r3, #1
 800f996:	603b      	str	r3, [r7, #0]
 800f998:	2005      	movs	r0, #5
 800f99a:	e026      	b.n	800f9ea <__hexnan+0x132>
 800f99c:	3501      	adds	r5, #1
 800f99e:	2d08      	cmp	r5, #8
 800f9a0:	f10b 0b01 	add.w	fp, fp, #1
 800f9a4:	dd06      	ble.n	800f9b4 <__hexnan+0xfc>
 800f9a6:	4544      	cmp	r4, r8
 800f9a8:	d9c3      	bls.n	800f932 <__hexnan+0x7a>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9b0:	2501      	movs	r5, #1
 800f9b2:	3c04      	subs	r4, #4
 800f9b4:	6822      	ldr	r2, [r4, #0]
 800f9b6:	f000 000f 	and.w	r0, r0, #15
 800f9ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f9be:	6022      	str	r2, [r4, #0]
 800f9c0:	e7b7      	b.n	800f932 <__hexnan+0x7a>
 800f9c2:	2508      	movs	r5, #8
 800f9c4:	e7b5      	b.n	800f932 <__hexnan+0x7a>
 800f9c6:	9b01      	ldr	r3, [sp, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d0df      	beq.n	800f98c <__hexnan+0xd4>
 800f9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d0:	f1c3 0320 	rsb	r3, r3, #32
 800f9d4:	fa22 f303 	lsr.w	r3, r2, r3
 800f9d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f9dc:	401a      	ands	r2, r3
 800f9de:	f846 2c04 	str.w	r2, [r6, #-4]
 800f9e2:	e7d3      	b.n	800f98c <__hexnan+0xd4>
 800f9e4:	3f04      	subs	r7, #4
 800f9e6:	e7d1      	b.n	800f98c <__hexnan+0xd4>
 800f9e8:	2004      	movs	r0, #4
 800f9ea:	b007      	add	sp, #28
 800f9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f9f0 <_localeconv_r>:
 800f9f0:	4800      	ldr	r0, [pc, #0]	; (800f9f4 <_localeconv_r+0x4>)
 800f9f2:	4770      	bx	lr
 800f9f4:	20000184 	.word	0x20000184

0800f9f8 <__retarget_lock_init_recursive>:
 800f9f8:	4770      	bx	lr

0800f9fa <__retarget_lock_acquire_recursive>:
 800f9fa:	4770      	bx	lr

0800f9fc <__retarget_lock_release_recursive>:
 800f9fc:	4770      	bx	lr

0800f9fe <__swhatbuf_r>:
 800f9fe:	b570      	push	{r4, r5, r6, lr}
 800fa00:	460e      	mov	r6, r1
 800fa02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa06:	2900      	cmp	r1, #0
 800fa08:	b096      	sub	sp, #88	; 0x58
 800fa0a:	4614      	mov	r4, r2
 800fa0c:	461d      	mov	r5, r3
 800fa0e:	da08      	bge.n	800fa22 <__swhatbuf_r+0x24>
 800fa10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fa14:	2200      	movs	r2, #0
 800fa16:	602a      	str	r2, [r5, #0]
 800fa18:	061a      	lsls	r2, r3, #24
 800fa1a:	d410      	bmi.n	800fa3e <__swhatbuf_r+0x40>
 800fa1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa20:	e00e      	b.n	800fa40 <__swhatbuf_r+0x42>
 800fa22:	466a      	mov	r2, sp
 800fa24:	f001 fdfa 	bl	801161c <_fstat_r>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	dbf1      	blt.n	800fa10 <__swhatbuf_r+0x12>
 800fa2c:	9a01      	ldr	r2, [sp, #4]
 800fa2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa36:	425a      	negs	r2, r3
 800fa38:	415a      	adcs	r2, r3
 800fa3a:	602a      	str	r2, [r5, #0]
 800fa3c:	e7ee      	b.n	800fa1c <__swhatbuf_r+0x1e>
 800fa3e:	2340      	movs	r3, #64	; 0x40
 800fa40:	2000      	movs	r0, #0
 800fa42:	6023      	str	r3, [r4, #0]
 800fa44:	b016      	add	sp, #88	; 0x58
 800fa46:	bd70      	pop	{r4, r5, r6, pc}

0800fa48 <__smakebuf_r>:
 800fa48:	898b      	ldrh	r3, [r1, #12]
 800fa4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa4c:	079d      	lsls	r5, r3, #30
 800fa4e:	4606      	mov	r6, r0
 800fa50:	460c      	mov	r4, r1
 800fa52:	d507      	bpl.n	800fa64 <__smakebuf_r+0x1c>
 800fa54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa58:	6023      	str	r3, [r4, #0]
 800fa5a:	6123      	str	r3, [r4, #16]
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	6163      	str	r3, [r4, #20]
 800fa60:	b002      	add	sp, #8
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
 800fa64:	ab01      	add	r3, sp, #4
 800fa66:	466a      	mov	r2, sp
 800fa68:	f7ff ffc9 	bl	800f9fe <__swhatbuf_r>
 800fa6c:	9900      	ldr	r1, [sp, #0]
 800fa6e:	4605      	mov	r5, r0
 800fa70:	4630      	mov	r0, r6
 800fa72:	f7fc fbf1 	bl	800c258 <_malloc_r>
 800fa76:	b948      	cbnz	r0, 800fa8c <__smakebuf_r+0x44>
 800fa78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa7c:	059a      	lsls	r2, r3, #22
 800fa7e:	d4ef      	bmi.n	800fa60 <__smakebuf_r+0x18>
 800fa80:	f023 0303 	bic.w	r3, r3, #3
 800fa84:	f043 0302 	orr.w	r3, r3, #2
 800fa88:	81a3      	strh	r3, [r4, #12]
 800fa8a:	e7e3      	b.n	800fa54 <__smakebuf_r+0xc>
 800fa8c:	4b0d      	ldr	r3, [pc, #52]	; (800fac4 <__smakebuf_r+0x7c>)
 800fa8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa90:	89a3      	ldrh	r3, [r4, #12]
 800fa92:	6020      	str	r0, [r4, #0]
 800fa94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa98:	81a3      	strh	r3, [r4, #12]
 800fa9a:	9b00      	ldr	r3, [sp, #0]
 800fa9c:	6163      	str	r3, [r4, #20]
 800fa9e:	9b01      	ldr	r3, [sp, #4]
 800faa0:	6120      	str	r0, [r4, #16]
 800faa2:	b15b      	cbz	r3, 800fabc <__smakebuf_r+0x74>
 800faa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800faa8:	4630      	mov	r0, r6
 800faaa:	f001 fdc9 	bl	8011640 <_isatty_r>
 800faae:	b128      	cbz	r0, 800fabc <__smakebuf_r+0x74>
 800fab0:	89a3      	ldrh	r3, [r4, #12]
 800fab2:	f023 0303 	bic.w	r3, r3, #3
 800fab6:	f043 0301 	orr.w	r3, r3, #1
 800faba:	81a3      	strh	r3, [r4, #12]
 800fabc:	89a0      	ldrh	r0, [r4, #12]
 800fabe:	4305      	orrs	r5, r0
 800fac0:	81a5      	strh	r5, [r4, #12]
 800fac2:	e7cd      	b.n	800fa60 <__smakebuf_r+0x18>
 800fac4:	0800f135 	.word	0x0800f135

0800fac8 <__ascii_mbtowc>:
 800fac8:	b082      	sub	sp, #8
 800faca:	b901      	cbnz	r1, 800face <__ascii_mbtowc+0x6>
 800facc:	a901      	add	r1, sp, #4
 800face:	b142      	cbz	r2, 800fae2 <__ascii_mbtowc+0x1a>
 800fad0:	b14b      	cbz	r3, 800fae6 <__ascii_mbtowc+0x1e>
 800fad2:	7813      	ldrb	r3, [r2, #0]
 800fad4:	600b      	str	r3, [r1, #0]
 800fad6:	7812      	ldrb	r2, [r2, #0]
 800fad8:	1e10      	subs	r0, r2, #0
 800fada:	bf18      	it	ne
 800fadc:	2001      	movne	r0, #1
 800fade:	b002      	add	sp, #8
 800fae0:	4770      	bx	lr
 800fae2:	4610      	mov	r0, r2
 800fae4:	e7fb      	b.n	800fade <__ascii_mbtowc+0x16>
 800fae6:	f06f 0001 	mvn.w	r0, #1
 800faea:	e7f8      	b.n	800fade <__ascii_mbtowc+0x16>

0800faec <memcpy>:
 800faec:	440a      	add	r2, r1
 800faee:	4291      	cmp	r1, r2
 800faf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800faf4:	d100      	bne.n	800faf8 <memcpy+0xc>
 800faf6:	4770      	bx	lr
 800faf8:	b510      	push	{r4, lr}
 800fafa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fafe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb02:	4291      	cmp	r1, r2
 800fb04:	d1f9      	bne.n	800fafa <memcpy+0xe>
 800fb06:	bd10      	pop	{r4, pc}

0800fb08 <__malloc_lock>:
 800fb08:	4801      	ldr	r0, [pc, #4]	; (800fb10 <__malloc_lock+0x8>)
 800fb0a:	f7ff bf76 	b.w	800f9fa <__retarget_lock_acquire_recursive>
 800fb0e:	bf00      	nop
 800fb10:	20000784 	.word	0x20000784

0800fb14 <__malloc_unlock>:
 800fb14:	4801      	ldr	r0, [pc, #4]	; (800fb1c <__malloc_unlock+0x8>)
 800fb16:	f7ff bf71 	b.w	800f9fc <__retarget_lock_release_recursive>
 800fb1a:	bf00      	nop
 800fb1c:	20000784 	.word	0x20000784

0800fb20 <_Balloc>:
 800fb20:	b570      	push	{r4, r5, r6, lr}
 800fb22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb24:	4604      	mov	r4, r0
 800fb26:	460d      	mov	r5, r1
 800fb28:	b976      	cbnz	r6, 800fb48 <_Balloc+0x28>
 800fb2a:	2010      	movs	r0, #16
 800fb2c:	f7fc fb18 	bl	800c160 <malloc>
 800fb30:	4602      	mov	r2, r0
 800fb32:	6260      	str	r0, [r4, #36]	; 0x24
 800fb34:	b920      	cbnz	r0, 800fb40 <_Balloc+0x20>
 800fb36:	4b18      	ldr	r3, [pc, #96]	; (800fb98 <_Balloc+0x78>)
 800fb38:	4818      	ldr	r0, [pc, #96]	; (800fb9c <_Balloc+0x7c>)
 800fb3a:	2166      	movs	r1, #102	; 0x66
 800fb3c:	f001 fd2e 	bl	801159c <__assert_func>
 800fb40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb44:	6006      	str	r6, [r0, #0]
 800fb46:	60c6      	str	r6, [r0, #12]
 800fb48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fb4a:	68f3      	ldr	r3, [r6, #12]
 800fb4c:	b183      	cbz	r3, 800fb70 <_Balloc+0x50>
 800fb4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb56:	b9b8      	cbnz	r0, 800fb88 <_Balloc+0x68>
 800fb58:	2101      	movs	r1, #1
 800fb5a:	fa01 f605 	lsl.w	r6, r1, r5
 800fb5e:	1d72      	adds	r2, r6, #5
 800fb60:	0092      	lsls	r2, r2, #2
 800fb62:	4620      	mov	r0, r4
 800fb64:	f000 fc9d 	bl	80104a2 <_calloc_r>
 800fb68:	b160      	cbz	r0, 800fb84 <_Balloc+0x64>
 800fb6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb6e:	e00e      	b.n	800fb8e <_Balloc+0x6e>
 800fb70:	2221      	movs	r2, #33	; 0x21
 800fb72:	2104      	movs	r1, #4
 800fb74:	4620      	mov	r0, r4
 800fb76:	f000 fc94 	bl	80104a2 <_calloc_r>
 800fb7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb7c:	60f0      	str	r0, [r6, #12]
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d1e4      	bne.n	800fb4e <_Balloc+0x2e>
 800fb84:	2000      	movs	r0, #0
 800fb86:	bd70      	pop	{r4, r5, r6, pc}
 800fb88:	6802      	ldr	r2, [r0, #0]
 800fb8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb94:	e7f7      	b.n	800fb86 <_Balloc+0x66>
 800fb96:	bf00      	nop
 800fb98:	08011dce 	.word	0x08011dce
 800fb9c:	08011f30 	.word	0x08011f30

0800fba0 <_Bfree>:
 800fba0:	b570      	push	{r4, r5, r6, lr}
 800fba2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fba4:	4605      	mov	r5, r0
 800fba6:	460c      	mov	r4, r1
 800fba8:	b976      	cbnz	r6, 800fbc8 <_Bfree+0x28>
 800fbaa:	2010      	movs	r0, #16
 800fbac:	f7fc fad8 	bl	800c160 <malloc>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	6268      	str	r0, [r5, #36]	; 0x24
 800fbb4:	b920      	cbnz	r0, 800fbc0 <_Bfree+0x20>
 800fbb6:	4b09      	ldr	r3, [pc, #36]	; (800fbdc <_Bfree+0x3c>)
 800fbb8:	4809      	ldr	r0, [pc, #36]	; (800fbe0 <_Bfree+0x40>)
 800fbba:	218a      	movs	r1, #138	; 0x8a
 800fbbc:	f001 fcee 	bl	801159c <__assert_func>
 800fbc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbc4:	6006      	str	r6, [r0, #0]
 800fbc6:	60c6      	str	r6, [r0, #12]
 800fbc8:	b13c      	cbz	r4, 800fbda <_Bfree+0x3a>
 800fbca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fbcc:	6862      	ldr	r2, [r4, #4]
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fbd4:	6021      	str	r1, [r4, #0]
 800fbd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fbda:	bd70      	pop	{r4, r5, r6, pc}
 800fbdc:	08011dce 	.word	0x08011dce
 800fbe0:	08011f30 	.word	0x08011f30

0800fbe4 <__multadd>:
 800fbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe8:	690d      	ldr	r5, [r1, #16]
 800fbea:	4607      	mov	r7, r0
 800fbec:	460c      	mov	r4, r1
 800fbee:	461e      	mov	r6, r3
 800fbf0:	f101 0c14 	add.w	ip, r1, #20
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	f8dc 3000 	ldr.w	r3, [ip]
 800fbfa:	b299      	uxth	r1, r3
 800fbfc:	fb02 6101 	mla	r1, r2, r1, r6
 800fc00:	0c1e      	lsrs	r6, r3, #16
 800fc02:	0c0b      	lsrs	r3, r1, #16
 800fc04:	fb02 3306 	mla	r3, r2, r6, r3
 800fc08:	b289      	uxth	r1, r1
 800fc0a:	3001      	adds	r0, #1
 800fc0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc10:	4285      	cmp	r5, r0
 800fc12:	f84c 1b04 	str.w	r1, [ip], #4
 800fc16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc1a:	dcec      	bgt.n	800fbf6 <__multadd+0x12>
 800fc1c:	b30e      	cbz	r6, 800fc62 <__multadd+0x7e>
 800fc1e:	68a3      	ldr	r3, [r4, #8]
 800fc20:	42ab      	cmp	r3, r5
 800fc22:	dc19      	bgt.n	800fc58 <__multadd+0x74>
 800fc24:	6861      	ldr	r1, [r4, #4]
 800fc26:	4638      	mov	r0, r7
 800fc28:	3101      	adds	r1, #1
 800fc2a:	f7ff ff79 	bl	800fb20 <_Balloc>
 800fc2e:	4680      	mov	r8, r0
 800fc30:	b928      	cbnz	r0, 800fc3e <__multadd+0x5a>
 800fc32:	4602      	mov	r2, r0
 800fc34:	4b0c      	ldr	r3, [pc, #48]	; (800fc68 <__multadd+0x84>)
 800fc36:	480d      	ldr	r0, [pc, #52]	; (800fc6c <__multadd+0x88>)
 800fc38:	21b5      	movs	r1, #181	; 0xb5
 800fc3a:	f001 fcaf 	bl	801159c <__assert_func>
 800fc3e:	6922      	ldr	r2, [r4, #16]
 800fc40:	3202      	adds	r2, #2
 800fc42:	f104 010c 	add.w	r1, r4, #12
 800fc46:	0092      	lsls	r2, r2, #2
 800fc48:	300c      	adds	r0, #12
 800fc4a:	f7ff ff4f 	bl	800faec <memcpy>
 800fc4e:	4621      	mov	r1, r4
 800fc50:	4638      	mov	r0, r7
 800fc52:	f7ff ffa5 	bl	800fba0 <_Bfree>
 800fc56:	4644      	mov	r4, r8
 800fc58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc5c:	3501      	adds	r5, #1
 800fc5e:	615e      	str	r6, [r3, #20]
 800fc60:	6125      	str	r5, [r4, #16]
 800fc62:	4620      	mov	r0, r4
 800fc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc68:	08011e40 	.word	0x08011e40
 800fc6c:	08011f30 	.word	0x08011f30

0800fc70 <__s2b>:
 800fc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc74:	460c      	mov	r4, r1
 800fc76:	4615      	mov	r5, r2
 800fc78:	461f      	mov	r7, r3
 800fc7a:	2209      	movs	r2, #9
 800fc7c:	3308      	adds	r3, #8
 800fc7e:	4606      	mov	r6, r0
 800fc80:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc84:	2100      	movs	r1, #0
 800fc86:	2201      	movs	r2, #1
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	db09      	blt.n	800fca0 <__s2b+0x30>
 800fc8c:	4630      	mov	r0, r6
 800fc8e:	f7ff ff47 	bl	800fb20 <_Balloc>
 800fc92:	b940      	cbnz	r0, 800fca6 <__s2b+0x36>
 800fc94:	4602      	mov	r2, r0
 800fc96:	4b19      	ldr	r3, [pc, #100]	; (800fcfc <__s2b+0x8c>)
 800fc98:	4819      	ldr	r0, [pc, #100]	; (800fd00 <__s2b+0x90>)
 800fc9a:	21ce      	movs	r1, #206	; 0xce
 800fc9c:	f001 fc7e 	bl	801159c <__assert_func>
 800fca0:	0052      	lsls	r2, r2, #1
 800fca2:	3101      	adds	r1, #1
 800fca4:	e7f0      	b.n	800fc88 <__s2b+0x18>
 800fca6:	9b08      	ldr	r3, [sp, #32]
 800fca8:	6143      	str	r3, [r0, #20]
 800fcaa:	2d09      	cmp	r5, #9
 800fcac:	f04f 0301 	mov.w	r3, #1
 800fcb0:	6103      	str	r3, [r0, #16]
 800fcb2:	dd16      	ble.n	800fce2 <__s2b+0x72>
 800fcb4:	f104 0909 	add.w	r9, r4, #9
 800fcb8:	46c8      	mov	r8, r9
 800fcba:	442c      	add	r4, r5
 800fcbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fcc0:	4601      	mov	r1, r0
 800fcc2:	3b30      	subs	r3, #48	; 0x30
 800fcc4:	220a      	movs	r2, #10
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	f7ff ff8c 	bl	800fbe4 <__multadd>
 800fccc:	45a0      	cmp	r8, r4
 800fcce:	d1f5      	bne.n	800fcbc <__s2b+0x4c>
 800fcd0:	f1a5 0408 	sub.w	r4, r5, #8
 800fcd4:	444c      	add	r4, r9
 800fcd6:	1b2d      	subs	r5, r5, r4
 800fcd8:	1963      	adds	r3, r4, r5
 800fcda:	42bb      	cmp	r3, r7
 800fcdc:	db04      	blt.n	800fce8 <__s2b+0x78>
 800fcde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fce2:	340a      	adds	r4, #10
 800fce4:	2509      	movs	r5, #9
 800fce6:	e7f6      	b.n	800fcd6 <__s2b+0x66>
 800fce8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fcec:	4601      	mov	r1, r0
 800fcee:	3b30      	subs	r3, #48	; 0x30
 800fcf0:	220a      	movs	r2, #10
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	f7ff ff76 	bl	800fbe4 <__multadd>
 800fcf8:	e7ee      	b.n	800fcd8 <__s2b+0x68>
 800fcfa:	bf00      	nop
 800fcfc:	08011e40 	.word	0x08011e40
 800fd00:	08011f30 	.word	0x08011f30

0800fd04 <__hi0bits>:
 800fd04:	0c03      	lsrs	r3, r0, #16
 800fd06:	041b      	lsls	r3, r3, #16
 800fd08:	b9d3      	cbnz	r3, 800fd40 <__hi0bits+0x3c>
 800fd0a:	0400      	lsls	r0, r0, #16
 800fd0c:	2310      	movs	r3, #16
 800fd0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fd12:	bf04      	itt	eq
 800fd14:	0200      	lsleq	r0, r0, #8
 800fd16:	3308      	addeq	r3, #8
 800fd18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fd1c:	bf04      	itt	eq
 800fd1e:	0100      	lsleq	r0, r0, #4
 800fd20:	3304      	addeq	r3, #4
 800fd22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fd26:	bf04      	itt	eq
 800fd28:	0080      	lsleq	r0, r0, #2
 800fd2a:	3302      	addeq	r3, #2
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	db05      	blt.n	800fd3c <__hi0bits+0x38>
 800fd30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fd34:	f103 0301 	add.w	r3, r3, #1
 800fd38:	bf08      	it	eq
 800fd3a:	2320      	moveq	r3, #32
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	4770      	bx	lr
 800fd40:	2300      	movs	r3, #0
 800fd42:	e7e4      	b.n	800fd0e <__hi0bits+0xa>

0800fd44 <__lo0bits>:
 800fd44:	6803      	ldr	r3, [r0, #0]
 800fd46:	f013 0207 	ands.w	r2, r3, #7
 800fd4a:	4601      	mov	r1, r0
 800fd4c:	d00b      	beq.n	800fd66 <__lo0bits+0x22>
 800fd4e:	07da      	lsls	r2, r3, #31
 800fd50:	d423      	bmi.n	800fd9a <__lo0bits+0x56>
 800fd52:	0798      	lsls	r0, r3, #30
 800fd54:	bf49      	itett	mi
 800fd56:	085b      	lsrmi	r3, r3, #1
 800fd58:	089b      	lsrpl	r3, r3, #2
 800fd5a:	2001      	movmi	r0, #1
 800fd5c:	600b      	strmi	r3, [r1, #0]
 800fd5e:	bf5c      	itt	pl
 800fd60:	600b      	strpl	r3, [r1, #0]
 800fd62:	2002      	movpl	r0, #2
 800fd64:	4770      	bx	lr
 800fd66:	b298      	uxth	r0, r3
 800fd68:	b9a8      	cbnz	r0, 800fd96 <__lo0bits+0x52>
 800fd6a:	0c1b      	lsrs	r3, r3, #16
 800fd6c:	2010      	movs	r0, #16
 800fd6e:	b2da      	uxtb	r2, r3
 800fd70:	b90a      	cbnz	r2, 800fd76 <__lo0bits+0x32>
 800fd72:	3008      	adds	r0, #8
 800fd74:	0a1b      	lsrs	r3, r3, #8
 800fd76:	071a      	lsls	r2, r3, #28
 800fd78:	bf04      	itt	eq
 800fd7a:	091b      	lsreq	r3, r3, #4
 800fd7c:	3004      	addeq	r0, #4
 800fd7e:	079a      	lsls	r2, r3, #30
 800fd80:	bf04      	itt	eq
 800fd82:	089b      	lsreq	r3, r3, #2
 800fd84:	3002      	addeq	r0, #2
 800fd86:	07da      	lsls	r2, r3, #31
 800fd88:	d403      	bmi.n	800fd92 <__lo0bits+0x4e>
 800fd8a:	085b      	lsrs	r3, r3, #1
 800fd8c:	f100 0001 	add.w	r0, r0, #1
 800fd90:	d005      	beq.n	800fd9e <__lo0bits+0x5a>
 800fd92:	600b      	str	r3, [r1, #0]
 800fd94:	4770      	bx	lr
 800fd96:	4610      	mov	r0, r2
 800fd98:	e7e9      	b.n	800fd6e <__lo0bits+0x2a>
 800fd9a:	2000      	movs	r0, #0
 800fd9c:	4770      	bx	lr
 800fd9e:	2020      	movs	r0, #32
 800fda0:	4770      	bx	lr
	...

0800fda4 <__i2b>:
 800fda4:	b510      	push	{r4, lr}
 800fda6:	460c      	mov	r4, r1
 800fda8:	2101      	movs	r1, #1
 800fdaa:	f7ff feb9 	bl	800fb20 <_Balloc>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	b928      	cbnz	r0, 800fdbe <__i2b+0x1a>
 800fdb2:	4b05      	ldr	r3, [pc, #20]	; (800fdc8 <__i2b+0x24>)
 800fdb4:	4805      	ldr	r0, [pc, #20]	; (800fdcc <__i2b+0x28>)
 800fdb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fdba:	f001 fbef 	bl	801159c <__assert_func>
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	6144      	str	r4, [r0, #20]
 800fdc2:	6103      	str	r3, [r0, #16]
 800fdc4:	bd10      	pop	{r4, pc}
 800fdc6:	bf00      	nop
 800fdc8:	08011e40 	.word	0x08011e40
 800fdcc:	08011f30 	.word	0x08011f30

0800fdd0 <__multiply>:
 800fdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd4:	4691      	mov	r9, r2
 800fdd6:	690a      	ldr	r2, [r1, #16]
 800fdd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	bfb8      	it	lt
 800fde0:	460b      	movlt	r3, r1
 800fde2:	460c      	mov	r4, r1
 800fde4:	bfbc      	itt	lt
 800fde6:	464c      	movlt	r4, r9
 800fde8:	4699      	movlt	r9, r3
 800fdea:	6927      	ldr	r7, [r4, #16]
 800fdec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fdf0:	68a3      	ldr	r3, [r4, #8]
 800fdf2:	6861      	ldr	r1, [r4, #4]
 800fdf4:	eb07 060a 	add.w	r6, r7, sl
 800fdf8:	42b3      	cmp	r3, r6
 800fdfa:	b085      	sub	sp, #20
 800fdfc:	bfb8      	it	lt
 800fdfe:	3101      	addlt	r1, #1
 800fe00:	f7ff fe8e 	bl	800fb20 <_Balloc>
 800fe04:	b930      	cbnz	r0, 800fe14 <__multiply+0x44>
 800fe06:	4602      	mov	r2, r0
 800fe08:	4b44      	ldr	r3, [pc, #272]	; (800ff1c <__multiply+0x14c>)
 800fe0a:	4845      	ldr	r0, [pc, #276]	; (800ff20 <__multiply+0x150>)
 800fe0c:	f240 115d 	movw	r1, #349	; 0x15d
 800fe10:	f001 fbc4 	bl	801159c <__assert_func>
 800fe14:	f100 0514 	add.w	r5, r0, #20
 800fe18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe1c:	462b      	mov	r3, r5
 800fe1e:	2200      	movs	r2, #0
 800fe20:	4543      	cmp	r3, r8
 800fe22:	d321      	bcc.n	800fe68 <__multiply+0x98>
 800fe24:	f104 0314 	add.w	r3, r4, #20
 800fe28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fe2c:	f109 0314 	add.w	r3, r9, #20
 800fe30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fe34:	9202      	str	r2, [sp, #8]
 800fe36:	1b3a      	subs	r2, r7, r4
 800fe38:	3a15      	subs	r2, #21
 800fe3a:	f022 0203 	bic.w	r2, r2, #3
 800fe3e:	3204      	adds	r2, #4
 800fe40:	f104 0115 	add.w	r1, r4, #21
 800fe44:	428f      	cmp	r7, r1
 800fe46:	bf38      	it	cc
 800fe48:	2204      	movcc	r2, #4
 800fe4a:	9201      	str	r2, [sp, #4]
 800fe4c:	9a02      	ldr	r2, [sp, #8]
 800fe4e:	9303      	str	r3, [sp, #12]
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d80c      	bhi.n	800fe6e <__multiply+0x9e>
 800fe54:	2e00      	cmp	r6, #0
 800fe56:	dd03      	ble.n	800fe60 <__multiply+0x90>
 800fe58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d05a      	beq.n	800ff16 <__multiply+0x146>
 800fe60:	6106      	str	r6, [r0, #16]
 800fe62:	b005      	add	sp, #20
 800fe64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe68:	f843 2b04 	str.w	r2, [r3], #4
 800fe6c:	e7d8      	b.n	800fe20 <__multiply+0x50>
 800fe6e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fe72:	f1ba 0f00 	cmp.w	sl, #0
 800fe76:	d024      	beq.n	800fec2 <__multiply+0xf2>
 800fe78:	f104 0e14 	add.w	lr, r4, #20
 800fe7c:	46a9      	mov	r9, r5
 800fe7e:	f04f 0c00 	mov.w	ip, #0
 800fe82:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fe86:	f8d9 1000 	ldr.w	r1, [r9]
 800fe8a:	fa1f fb82 	uxth.w	fp, r2
 800fe8e:	b289      	uxth	r1, r1
 800fe90:	fb0a 110b 	mla	r1, sl, fp, r1
 800fe94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fe98:	f8d9 2000 	ldr.w	r2, [r9]
 800fe9c:	4461      	add	r1, ip
 800fe9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fea2:	fb0a c20b 	mla	r2, sl, fp, ip
 800fea6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800feaa:	b289      	uxth	r1, r1
 800feac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800feb0:	4577      	cmp	r7, lr
 800feb2:	f849 1b04 	str.w	r1, [r9], #4
 800feb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800feba:	d8e2      	bhi.n	800fe82 <__multiply+0xb2>
 800febc:	9a01      	ldr	r2, [sp, #4]
 800febe:	f845 c002 	str.w	ip, [r5, r2]
 800fec2:	9a03      	ldr	r2, [sp, #12]
 800fec4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fec8:	3304      	adds	r3, #4
 800feca:	f1b9 0f00 	cmp.w	r9, #0
 800fece:	d020      	beq.n	800ff12 <__multiply+0x142>
 800fed0:	6829      	ldr	r1, [r5, #0]
 800fed2:	f104 0c14 	add.w	ip, r4, #20
 800fed6:	46ae      	mov	lr, r5
 800fed8:	f04f 0a00 	mov.w	sl, #0
 800fedc:	f8bc b000 	ldrh.w	fp, [ip]
 800fee0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fee4:	fb09 220b 	mla	r2, r9, fp, r2
 800fee8:	4492      	add	sl, r2
 800feea:	b289      	uxth	r1, r1
 800feec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fef0:	f84e 1b04 	str.w	r1, [lr], #4
 800fef4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fef8:	f8be 1000 	ldrh.w	r1, [lr]
 800fefc:	0c12      	lsrs	r2, r2, #16
 800fefe:	fb09 1102 	mla	r1, r9, r2, r1
 800ff02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ff06:	4567      	cmp	r7, ip
 800ff08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff0c:	d8e6      	bhi.n	800fedc <__multiply+0x10c>
 800ff0e:	9a01      	ldr	r2, [sp, #4]
 800ff10:	50a9      	str	r1, [r5, r2]
 800ff12:	3504      	adds	r5, #4
 800ff14:	e79a      	b.n	800fe4c <__multiply+0x7c>
 800ff16:	3e01      	subs	r6, #1
 800ff18:	e79c      	b.n	800fe54 <__multiply+0x84>
 800ff1a:	bf00      	nop
 800ff1c:	08011e40 	.word	0x08011e40
 800ff20:	08011f30 	.word	0x08011f30

0800ff24 <__pow5mult>:
 800ff24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff28:	4615      	mov	r5, r2
 800ff2a:	f012 0203 	ands.w	r2, r2, #3
 800ff2e:	4606      	mov	r6, r0
 800ff30:	460f      	mov	r7, r1
 800ff32:	d007      	beq.n	800ff44 <__pow5mult+0x20>
 800ff34:	4c25      	ldr	r4, [pc, #148]	; (800ffcc <__pow5mult+0xa8>)
 800ff36:	3a01      	subs	r2, #1
 800ff38:	2300      	movs	r3, #0
 800ff3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff3e:	f7ff fe51 	bl	800fbe4 <__multadd>
 800ff42:	4607      	mov	r7, r0
 800ff44:	10ad      	asrs	r5, r5, #2
 800ff46:	d03d      	beq.n	800ffc4 <__pow5mult+0xa0>
 800ff48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ff4a:	b97c      	cbnz	r4, 800ff6c <__pow5mult+0x48>
 800ff4c:	2010      	movs	r0, #16
 800ff4e:	f7fc f907 	bl	800c160 <malloc>
 800ff52:	4602      	mov	r2, r0
 800ff54:	6270      	str	r0, [r6, #36]	; 0x24
 800ff56:	b928      	cbnz	r0, 800ff64 <__pow5mult+0x40>
 800ff58:	4b1d      	ldr	r3, [pc, #116]	; (800ffd0 <__pow5mult+0xac>)
 800ff5a:	481e      	ldr	r0, [pc, #120]	; (800ffd4 <__pow5mult+0xb0>)
 800ff5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ff60:	f001 fb1c 	bl	801159c <__assert_func>
 800ff64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff68:	6004      	str	r4, [r0, #0]
 800ff6a:	60c4      	str	r4, [r0, #12]
 800ff6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff74:	b94c      	cbnz	r4, 800ff8a <__pow5mult+0x66>
 800ff76:	f240 2171 	movw	r1, #625	; 0x271
 800ff7a:	4630      	mov	r0, r6
 800ff7c:	f7ff ff12 	bl	800fda4 <__i2b>
 800ff80:	2300      	movs	r3, #0
 800ff82:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff86:	4604      	mov	r4, r0
 800ff88:	6003      	str	r3, [r0, #0]
 800ff8a:	f04f 0900 	mov.w	r9, #0
 800ff8e:	07eb      	lsls	r3, r5, #31
 800ff90:	d50a      	bpl.n	800ffa8 <__pow5mult+0x84>
 800ff92:	4639      	mov	r1, r7
 800ff94:	4622      	mov	r2, r4
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7ff ff1a 	bl	800fdd0 <__multiply>
 800ff9c:	4639      	mov	r1, r7
 800ff9e:	4680      	mov	r8, r0
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f7ff fdfd 	bl	800fba0 <_Bfree>
 800ffa6:	4647      	mov	r7, r8
 800ffa8:	106d      	asrs	r5, r5, #1
 800ffaa:	d00b      	beq.n	800ffc4 <__pow5mult+0xa0>
 800ffac:	6820      	ldr	r0, [r4, #0]
 800ffae:	b938      	cbnz	r0, 800ffc0 <__pow5mult+0x9c>
 800ffb0:	4622      	mov	r2, r4
 800ffb2:	4621      	mov	r1, r4
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	f7ff ff0b 	bl	800fdd0 <__multiply>
 800ffba:	6020      	str	r0, [r4, #0]
 800ffbc:	f8c0 9000 	str.w	r9, [r0]
 800ffc0:	4604      	mov	r4, r0
 800ffc2:	e7e4      	b.n	800ff8e <__pow5mult+0x6a>
 800ffc4:	4638      	mov	r0, r7
 800ffc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffca:	bf00      	nop
 800ffcc:	08012080 	.word	0x08012080
 800ffd0:	08011dce 	.word	0x08011dce
 800ffd4:	08011f30 	.word	0x08011f30

0800ffd8 <__lshift>:
 800ffd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffdc:	460c      	mov	r4, r1
 800ffde:	6849      	ldr	r1, [r1, #4]
 800ffe0:	6923      	ldr	r3, [r4, #16]
 800ffe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ffe6:	68a3      	ldr	r3, [r4, #8]
 800ffe8:	4607      	mov	r7, r0
 800ffea:	4691      	mov	r9, r2
 800ffec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fff0:	f108 0601 	add.w	r6, r8, #1
 800fff4:	42b3      	cmp	r3, r6
 800fff6:	db0b      	blt.n	8010010 <__lshift+0x38>
 800fff8:	4638      	mov	r0, r7
 800fffa:	f7ff fd91 	bl	800fb20 <_Balloc>
 800fffe:	4605      	mov	r5, r0
 8010000:	b948      	cbnz	r0, 8010016 <__lshift+0x3e>
 8010002:	4602      	mov	r2, r0
 8010004:	4b2a      	ldr	r3, [pc, #168]	; (80100b0 <__lshift+0xd8>)
 8010006:	482b      	ldr	r0, [pc, #172]	; (80100b4 <__lshift+0xdc>)
 8010008:	f240 11d9 	movw	r1, #473	; 0x1d9
 801000c:	f001 fac6 	bl	801159c <__assert_func>
 8010010:	3101      	adds	r1, #1
 8010012:	005b      	lsls	r3, r3, #1
 8010014:	e7ee      	b.n	800fff4 <__lshift+0x1c>
 8010016:	2300      	movs	r3, #0
 8010018:	f100 0114 	add.w	r1, r0, #20
 801001c:	f100 0210 	add.w	r2, r0, #16
 8010020:	4618      	mov	r0, r3
 8010022:	4553      	cmp	r3, sl
 8010024:	db37      	blt.n	8010096 <__lshift+0xbe>
 8010026:	6920      	ldr	r0, [r4, #16]
 8010028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801002c:	f104 0314 	add.w	r3, r4, #20
 8010030:	f019 091f 	ands.w	r9, r9, #31
 8010034:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010038:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801003c:	d02f      	beq.n	801009e <__lshift+0xc6>
 801003e:	f1c9 0e20 	rsb	lr, r9, #32
 8010042:	468a      	mov	sl, r1
 8010044:	f04f 0c00 	mov.w	ip, #0
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	fa02 f209 	lsl.w	r2, r2, r9
 801004e:	ea42 020c 	orr.w	r2, r2, ip
 8010052:	f84a 2b04 	str.w	r2, [sl], #4
 8010056:	f853 2b04 	ldr.w	r2, [r3], #4
 801005a:	4298      	cmp	r0, r3
 801005c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010060:	d8f2      	bhi.n	8010048 <__lshift+0x70>
 8010062:	1b03      	subs	r3, r0, r4
 8010064:	3b15      	subs	r3, #21
 8010066:	f023 0303 	bic.w	r3, r3, #3
 801006a:	3304      	adds	r3, #4
 801006c:	f104 0215 	add.w	r2, r4, #21
 8010070:	4290      	cmp	r0, r2
 8010072:	bf38      	it	cc
 8010074:	2304      	movcc	r3, #4
 8010076:	f841 c003 	str.w	ip, [r1, r3]
 801007a:	f1bc 0f00 	cmp.w	ip, #0
 801007e:	d001      	beq.n	8010084 <__lshift+0xac>
 8010080:	f108 0602 	add.w	r6, r8, #2
 8010084:	3e01      	subs	r6, #1
 8010086:	4638      	mov	r0, r7
 8010088:	612e      	str	r6, [r5, #16]
 801008a:	4621      	mov	r1, r4
 801008c:	f7ff fd88 	bl	800fba0 <_Bfree>
 8010090:	4628      	mov	r0, r5
 8010092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010096:	f842 0f04 	str.w	r0, [r2, #4]!
 801009a:	3301      	adds	r3, #1
 801009c:	e7c1      	b.n	8010022 <__lshift+0x4a>
 801009e:	3904      	subs	r1, #4
 80100a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80100a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80100a8:	4298      	cmp	r0, r3
 80100aa:	d8f9      	bhi.n	80100a0 <__lshift+0xc8>
 80100ac:	e7ea      	b.n	8010084 <__lshift+0xac>
 80100ae:	bf00      	nop
 80100b0:	08011e40 	.word	0x08011e40
 80100b4:	08011f30 	.word	0x08011f30

080100b8 <__mcmp>:
 80100b8:	b530      	push	{r4, r5, lr}
 80100ba:	6902      	ldr	r2, [r0, #16]
 80100bc:	690c      	ldr	r4, [r1, #16]
 80100be:	1b12      	subs	r2, r2, r4
 80100c0:	d10e      	bne.n	80100e0 <__mcmp+0x28>
 80100c2:	f100 0314 	add.w	r3, r0, #20
 80100c6:	3114      	adds	r1, #20
 80100c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80100cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80100d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80100d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80100d8:	42a5      	cmp	r5, r4
 80100da:	d003      	beq.n	80100e4 <__mcmp+0x2c>
 80100dc:	d305      	bcc.n	80100ea <__mcmp+0x32>
 80100de:	2201      	movs	r2, #1
 80100e0:	4610      	mov	r0, r2
 80100e2:	bd30      	pop	{r4, r5, pc}
 80100e4:	4283      	cmp	r3, r0
 80100e6:	d3f3      	bcc.n	80100d0 <__mcmp+0x18>
 80100e8:	e7fa      	b.n	80100e0 <__mcmp+0x28>
 80100ea:	f04f 32ff 	mov.w	r2, #4294967295
 80100ee:	e7f7      	b.n	80100e0 <__mcmp+0x28>

080100f0 <__mdiff>:
 80100f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f4:	460c      	mov	r4, r1
 80100f6:	4606      	mov	r6, r0
 80100f8:	4611      	mov	r1, r2
 80100fa:	4620      	mov	r0, r4
 80100fc:	4690      	mov	r8, r2
 80100fe:	f7ff ffdb 	bl	80100b8 <__mcmp>
 8010102:	1e05      	subs	r5, r0, #0
 8010104:	d110      	bne.n	8010128 <__mdiff+0x38>
 8010106:	4629      	mov	r1, r5
 8010108:	4630      	mov	r0, r6
 801010a:	f7ff fd09 	bl	800fb20 <_Balloc>
 801010e:	b930      	cbnz	r0, 801011e <__mdiff+0x2e>
 8010110:	4b3a      	ldr	r3, [pc, #232]	; (80101fc <__mdiff+0x10c>)
 8010112:	4602      	mov	r2, r0
 8010114:	f240 2132 	movw	r1, #562	; 0x232
 8010118:	4839      	ldr	r0, [pc, #228]	; (8010200 <__mdiff+0x110>)
 801011a:	f001 fa3f 	bl	801159c <__assert_func>
 801011e:	2301      	movs	r3, #1
 8010120:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010128:	bfa4      	itt	ge
 801012a:	4643      	movge	r3, r8
 801012c:	46a0      	movge	r8, r4
 801012e:	4630      	mov	r0, r6
 8010130:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010134:	bfa6      	itte	ge
 8010136:	461c      	movge	r4, r3
 8010138:	2500      	movge	r5, #0
 801013a:	2501      	movlt	r5, #1
 801013c:	f7ff fcf0 	bl	800fb20 <_Balloc>
 8010140:	b920      	cbnz	r0, 801014c <__mdiff+0x5c>
 8010142:	4b2e      	ldr	r3, [pc, #184]	; (80101fc <__mdiff+0x10c>)
 8010144:	4602      	mov	r2, r0
 8010146:	f44f 7110 	mov.w	r1, #576	; 0x240
 801014a:	e7e5      	b.n	8010118 <__mdiff+0x28>
 801014c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010150:	6926      	ldr	r6, [r4, #16]
 8010152:	60c5      	str	r5, [r0, #12]
 8010154:	f104 0914 	add.w	r9, r4, #20
 8010158:	f108 0514 	add.w	r5, r8, #20
 801015c:	f100 0e14 	add.w	lr, r0, #20
 8010160:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010164:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010168:	f108 0210 	add.w	r2, r8, #16
 801016c:	46f2      	mov	sl, lr
 801016e:	2100      	movs	r1, #0
 8010170:	f859 3b04 	ldr.w	r3, [r9], #4
 8010174:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010178:	fa1f f883 	uxth.w	r8, r3
 801017c:	fa11 f18b 	uxtah	r1, r1, fp
 8010180:	0c1b      	lsrs	r3, r3, #16
 8010182:	eba1 0808 	sub.w	r8, r1, r8
 8010186:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801018a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801018e:	fa1f f888 	uxth.w	r8, r8
 8010192:	1419      	asrs	r1, r3, #16
 8010194:	454e      	cmp	r6, r9
 8010196:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801019a:	f84a 3b04 	str.w	r3, [sl], #4
 801019e:	d8e7      	bhi.n	8010170 <__mdiff+0x80>
 80101a0:	1b33      	subs	r3, r6, r4
 80101a2:	3b15      	subs	r3, #21
 80101a4:	f023 0303 	bic.w	r3, r3, #3
 80101a8:	3304      	adds	r3, #4
 80101aa:	3415      	adds	r4, #21
 80101ac:	42a6      	cmp	r6, r4
 80101ae:	bf38      	it	cc
 80101b0:	2304      	movcc	r3, #4
 80101b2:	441d      	add	r5, r3
 80101b4:	4473      	add	r3, lr
 80101b6:	469e      	mov	lr, r3
 80101b8:	462e      	mov	r6, r5
 80101ba:	4566      	cmp	r6, ip
 80101bc:	d30e      	bcc.n	80101dc <__mdiff+0xec>
 80101be:	f10c 0203 	add.w	r2, ip, #3
 80101c2:	1b52      	subs	r2, r2, r5
 80101c4:	f022 0203 	bic.w	r2, r2, #3
 80101c8:	3d03      	subs	r5, #3
 80101ca:	45ac      	cmp	ip, r5
 80101cc:	bf38      	it	cc
 80101ce:	2200      	movcc	r2, #0
 80101d0:	441a      	add	r2, r3
 80101d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80101d6:	b17b      	cbz	r3, 80101f8 <__mdiff+0x108>
 80101d8:	6107      	str	r7, [r0, #16]
 80101da:	e7a3      	b.n	8010124 <__mdiff+0x34>
 80101dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80101e0:	fa11 f288 	uxtah	r2, r1, r8
 80101e4:	1414      	asrs	r4, r2, #16
 80101e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80101ea:	b292      	uxth	r2, r2
 80101ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80101f0:	f84e 2b04 	str.w	r2, [lr], #4
 80101f4:	1421      	asrs	r1, r4, #16
 80101f6:	e7e0      	b.n	80101ba <__mdiff+0xca>
 80101f8:	3f01      	subs	r7, #1
 80101fa:	e7ea      	b.n	80101d2 <__mdiff+0xe2>
 80101fc:	08011e40 	.word	0x08011e40
 8010200:	08011f30 	.word	0x08011f30

08010204 <__ulp>:
 8010204:	b082      	sub	sp, #8
 8010206:	ed8d 0b00 	vstr	d0, [sp]
 801020a:	9b01      	ldr	r3, [sp, #4]
 801020c:	4912      	ldr	r1, [pc, #72]	; (8010258 <__ulp+0x54>)
 801020e:	4019      	ands	r1, r3
 8010210:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010214:	2900      	cmp	r1, #0
 8010216:	dd05      	ble.n	8010224 <__ulp+0x20>
 8010218:	2200      	movs	r2, #0
 801021a:	460b      	mov	r3, r1
 801021c:	ec43 2b10 	vmov	d0, r2, r3
 8010220:	b002      	add	sp, #8
 8010222:	4770      	bx	lr
 8010224:	4249      	negs	r1, r1
 8010226:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801022a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801022e:	f04f 0200 	mov.w	r2, #0
 8010232:	f04f 0300 	mov.w	r3, #0
 8010236:	da04      	bge.n	8010242 <__ulp+0x3e>
 8010238:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801023c:	fa41 f300 	asr.w	r3, r1, r0
 8010240:	e7ec      	b.n	801021c <__ulp+0x18>
 8010242:	f1a0 0114 	sub.w	r1, r0, #20
 8010246:	291e      	cmp	r1, #30
 8010248:	bfda      	itte	le
 801024a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801024e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010252:	2101      	movgt	r1, #1
 8010254:	460a      	mov	r2, r1
 8010256:	e7e1      	b.n	801021c <__ulp+0x18>
 8010258:	7ff00000 	.word	0x7ff00000

0801025c <__b2d>:
 801025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801025e:	6905      	ldr	r5, [r0, #16]
 8010260:	f100 0714 	add.w	r7, r0, #20
 8010264:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010268:	1f2e      	subs	r6, r5, #4
 801026a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801026e:	4620      	mov	r0, r4
 8010270:	f7ff fd48 	bl	800fd04 <__hi0bits>
 8010274:	f1c0 0320 	rsb	r3, r0, #32
 8010278:	280a      	cmp	r0, #10
 801027a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80102f8 <__b2d+0x9c>
 801027e:	600b      	str	r3, [r1, #0]
 8010280:	dc14      	bgt.n	80102ac <__b2d+0x50>
 8010282:	f1c0 0e0b 	rsb	lr, r0, #11
 8010286:	fa24 f10e 	lsr.w	r1, r4, lr
 801028a:	42b7      	cmp	r7, r6
 801028c:	ea41 030c 	orr.w	r3, r1, ip
 8010290:	bf34      	ite	cc
 8010292:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010296:	2100      	movcs	r1, #0
 8010298:	3015      	adds	r0, #21
 801029a:	fa04 f000 	lsl.w	r0, r4, r0
 801029e:	fa21 f10e 	lsr.w	r1, r1, lr
 80102a2:	ea40 0201 	orr.w	r2, r0, r1
 80102a6:	ec43 2b10 	vmov	d0, r2, r3
 80102aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102ac:	42b7      	cmp	r7, r6
 80102ae:	bf3a      	itte	cc
 80102b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80102b4:	f1a5 0608 	subcc.w	r6, r5, #8
 80102b8:	2100      	movcs	r1, #0
 80102ba:	380b      	subs	r0, #11
 80102bc:	d017      	beq.n	80102ee <__b2d+0x92>
 80102be:	f1c0 0c20 	rsb	ip, r0, #32
 80102c2:	fa04 f500 	lsl.w	r5, r4, r0
 80102c6:	42be      	cmp	r6, r7
 80102c8:	fa21 f40c 	lsr.w	r4, r1, ip
 80102cc:	ea45 0504 	orr.w	r5, r5, r4
 80102d0:	bf8c      	ite	hi
 80102d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80102d6:	2400      	movls	r4, #0
 80102d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80102dc:	fa01 f000 	lsl.w	r0, r1, r0
 80102e0:	fa24 f40c 	lsr.w	r4, r4, ip
 80102e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80102e8:	ea40 0204 	orr.w	r2, r0, r4
 80102ec:	e7db      	b.n	80102a6 <__b2d+0x4a>
 80102ee:	ea44 030c 	orr.w	r3, r4, ip
 80102f2:	460a      	mov	r2, r1
 80102f4:	e7d7      	b.n	80102a6 <__b2d+0x4a>
 80102f6:	bf00      	nop
 80102f8:	3ff00000 	.word	0x3ff00000

080102fc <__d2b>:
 80102fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010300:	4689      	mov	r9, r1
 8010302:	2101      	movs	r1, #1
 8010304:	ec57 6b10 	vmov	r6, r7, d0
 8010308:	4690      	mov	r8, r2
 801030a:	f7ff fc09 	bl	800fb20 <_Balloc>
 801030e:	4604      	mov	r4, r0
 8010310:	b930      	cbnz	r0, 8010320 <__d2b+0x24>
 8010312:	4602      	mov	r2, r0
 8010314:	4b25      	ldr	r3, [pc, #148]	; (80103ac <__d2b+0xb0>)
 8010316:	4826      	ldr	r0, [pc, #152]	; (80103b0 <__d2b+0xb4>)
 8010318:	f240 310a 	movw	r1, #778	; 0x30a
 801031c:	f001 f93e 	bl	801159c <__assert_func>
 8010320:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010324:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010328:	bb35      	cbnz	r5, 8010378 <__d2b+0x7c>
 801032a:	2e00      	cmp	r6, #0
 801032c:	9301      	str	r3, [sp, #4]
 801032e:	d028      	beq.n	8010382 <__d2b+0x86>
 8010330:	4668      	mov	r0, sp
 8010332:	9600      	str	r6, [sp, #0]
 8010334:	f7ff fd06 	bl	800fd44 <__lo0bits>
 8010338:	9900      	ldr	r1, [sp, #0]
 801033a:	b300      	cbz	r0, 801037e <__d2b+0x82>
 801033c:	9a01      	ldr	r2, [sp, #4]
 801033e:	f1c0 0320 	rsb	r3, r0, #32
 8010342:	fa02 f303 	lsl.w	r3, r2, r3
 8010346:	430b      	orrs	r3, r1
 8010348:	40c2      	lsrs	r2, r0
 801034a:	6163      	str	r3, [r4, #20]
 801034c:	9201      	str	r2, [sp, #4]
 801034e:	9b01      	ldr	r3, [sp, #4]
 8010350:	61a3      	str	r3, [r4, #24]
 8010352:	2b00      	cmp	r3, #0
 8010354:	bf14      	ite	ne
 8010356:	2202      	movne	r2, #2
 8010358:	2201      	moveq	r2, #1
 801035a:	6122      	str	r2, [r4, #16]
 801035c:	b1d5      	cbz	r5, 8010394 <__d2b+0x98>
 801035e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010362:	4405      	add	r5, r0
 8010364:	f8c9 5000 	str.w	r5, [r9]
 8010368:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801036c:	f8c8 0000 	str.w	r0, [r8]
 8010370:	4620      	mov	r0, r4
 8010372:	b003      	add	sp, #12
 8010374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801037c:	e7d5      	b.n	801032a <__d2b+0x2e>
 801037e:	6161      	str	r1, [r4, #20]
 8010380:	e7e5      	b.n	801034e <__d2b+0x52>
 8010382:	a801      	add	r0, sp, #4
 8010384:	f7ff fcde 	bl	800fd44 <__lo0bits>
 8010388:	9b01      	ldr	r3, [sp, #4]
 801038a:	6163      	str	r3, [r4, #20]
 801038c:	2201      	movs	r2, #1
 801038e:	6122      	str	r2, [r4, #16]
 8010390:	3020      	adds	r0, #32
 8010392:	e7e3      	b.n	801035c <__d2b+0x60>
 8010394:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010398:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801039c:	f8c9 0000 	str.w	r0, [r9]
 80103a0:	6918      	ldr	r0, [r3, #16]
 80103a2:	f7ff fcaf 	bl	800fd04 <__hi0bits>
 80103a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103aa:	e7df      	b.n	801036c <__d2b+0x70>
 80103ac:	08011e40 	.word	0x08011e40
 80103b0:	08011f30 	.word	0x08011f30

080103b4 <__ratio>:
 80103b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b8:	4688      	mov	r8, r1
 80103ba:	4669      	mov	r1, sp
 80103bc:	4681      	mov	r9, r0
 80103be:	f7ff ff4d 	bl	801025c <__b2d>
 80103c2:	a901      	add	r1, sp, #4
 80103c4:	4640      	mov	r0, r8
 80103c6:	ec55 4b10 	vmov	r4, r5, d0
 80103ca:	f7ff ff47 	bl	801025c <__b2d>
 80103ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80103d6:	eba3 0c02 	sub.w	ip, r3, r2
 80103da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80103de:	1a9b      	subs	r3, r3, r2
 80103e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80103e4:	ec51 0b10 	vmov	r0, r1, d0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	bfd6      	itet	le
 80103ec:	460a      	movle	r2, r1
 80103ee:	462a      	movgt	r2, r5
 80103f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80103f4:	468b      	mov	fp, r1
 80103f6:	462f      	mov	r7, r5
 80103f8:	bfd4      	ite	le
 80103fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80103fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010402:	4620      	mov	r0, r4
 8010404:	ee10 2a10 	vmov	r2, s0
 8010408:	465b      	mov	r3, fp
 801040a:	4639      	mov	r1, r7
 801040c:	f7f0 fa1e 	bl	800084c <__aeabi_ddiv>
 8010410:	ec41 0b10 	vmov	d0, r0, r1
 8010414:	b003      	add	sp, #12
 8010416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801041a <__copybits>:
 801041a:	3901      	subs	r1, #1
 801041c:	b570      	push	{r4, r5, r6, lr}
 801041e:	1149      	asrs	r1, r1, #5
 8010420:	6914      	ldr	r4, [r2, #16]
 8010422:	3101      	adds	r1, #1
 8010424:	f102 0314 	add.w	r3, r2, #20
 8010428:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801042c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010430:	1f05      	subs	r5, r0, #4
 8010432:	42a3      	cmp	r3, r4
 8010434:	d30c      	bcc.n	8010450 <__copybits+0x36>
 8010436:	1aa3      	subs	r3, r4, r2
 8010438:	3b11      	subs	r3, #17
 801043a:	f023 0303 	bic.w	r3, r3, #3
 801043e:	3211      	adds	r2, #17
 8010440:	42a2      	cmp	r2, r4
 8010442:	bf88      	it	hi
 8010444:	2300      	movhi	r3, #0
 8010446:	4418      	add	r0, r3
 8010448:	2300      	movs	r3, #0
 801044a:	4288      	cmp	r0, r1
 801044c:	d305      	bcc.n	801045a <__copybits+0x40>
 801044e:	bd70      	pop	{r4, r5, r6, pc}
 8010450:	f853 6b04 	ldr.w	r6, [r3], #4
 8010454:	f845 6f04 	str.w	r6, [r5, #4]!
 8010458:	e7eb      	b.n	8010432 <__copybits+0x18>
 801045a:	f840 3b04 	str.w	r3, [r0], #4
 801045e:	e7f4      	b.n	801044a <__copybits+0x30>

08010460 <__any_on>:
 8010460:	f100 0214 	add.w	r2, r0, #20
 8010464:	6900      	ldr	r0, [r0, #16]
 8010466:	114b      	asrs	r3, r1, #5
 8010468:	4298      	cmp	r0, r3
 801046a:	b510      	push	{r4, lr}
 801046c:	db11      	blt.n	8010492 <__any_on+0x32>
 801046e:	dd0a      	ble.n	8010486 <__any_on+0x26>
 8010470:	f011 011f 	ands.w	r1, r1, #31
 8010474:	d007      	beq.n	8010486 <__any_on+0x26>
 8010476:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801047a:	fa24 f001 	lsr.w	r0, r4, r1
 801047e:	fa00 f101 	lsl.w	r1, r0, r1
 8010482:	428c      	cmp	r4, r1
 8010484:	d10b      	bne.n	801049e <__any_on+0x3e>
 8010486:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801048a:	4293      	cmp	r3, r2
 801048c:	d803      	bhi.n	8010496 <__any_on+0x36>
 801048e:	2000      	movs	r0, #0
 8010490:	bd10      	pop	{r4, pc}
 8010492:	4603      	mov	r3, r0
 8010494:	e7f7      	b.n	8010486 <__any_on+0x26>
 8010496:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801049a:	2900      	cmp	r1, #0
 801049c:	d0f5      	beq.n	801048a <__any_on+0x2a>
 801049e:	2001      	movs	r0, #1
 80104a0:	e7f6      	b.n	8010490 <__any_on+0x30>

080104a2 <_calloc_r>:
 80104a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104a4:	fba1 2402 	umull	r2, r4, r1, r2
 80104a8:	b94c      	cbnz	r4, 80104be <_calloc_r+0x1c>
 80104aa:	4611      	mov	r1, r2
 80104ac:	9201      	str	r2, [sp, #4]
 80104ae:	f7fb fed3 	bl	800c258 <_malloc_r>
 80104b2:	9a01      	ldr	r2, [sp, #4]
 80104b4:	4605      	mov	r5, r0
 80104b6:	b930      	cbnz	r0, 80104c6 <_calloc_r+0x24>
 80104b8:	4628      	mov	r0, r5
 80104ba:	b003      	add	sp, #12
 80104bc:	bd30      	pop	{r4, r5, pc}
 80104be:	220c      	movs	r2, #12
 80104c0:	6002      	str	r2, [r0, #0]
 80104c2:	2500      	movs	r5, #0
 80104c4:	e7f8      	b.n	80104b8 <_calloc_r+0x16>
 80104c6:	4621      	mov	r1, r4
 80104c8:	f7fb fe52 	bl	800c170 <memset>
 80104cc:	e7f4      	b.n	80104b8 <_calloc_r+0x16>

080104ce <__ssputs_r>:
 80104ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104d2:	688e      	ldr	r6, [r1, #8]
 80104d4:	429e      	cmp	r6, r3
 80104d6:	4682      	mov	sl, r0
 80104d8:	460c      	mov	r4, r1
 80104da:	4690      	mov	r8, r2
 80104dc:	461f      	mov	r7, r3
 80104de:	d838      	bhi.n	8010552 <__ssputs_r+0x84>
 80104e0:	898a      	ldrh	r2, [r1, #12]
 80104e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80104e6:	d032      	beq.n	801054e <__ssputs_r+0x80>
 80104e8:	6825      	ldr	r5, [r4, #0]
 80104ea:	6909      	ldr	r1, [r1, #16]
 80104ec:	eba5 0901 	sub.w	r9, r5, r1
 80104f0:	6965      	ldr	r5, [r4, #20]
 80104f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80104fa:	3301      	adds	r3, #1
 80104fc:	444b      	add	r3, r9
 80104fe:	106d      	asrs	r5, r5, #1
 8010500:	429d      	cmp	r5, r3
 8010502:	bf38      	it	cc
 8010504:	461d      	movcc	r5, r3
 8010506:	0553      	lsls	r3, r2, #21
 8010508:	d531      	bpl.n	801056e <__ssputs_r+0xa0>
 801050a:	4629      	mov	r1, r5
 801050c:	f7fb fea4 	bl	800c258 <_malloc_r>
 8010510:	4606      	mov	r6, r0
 8010512:	b950      	cbnz	r0, 801052a <__ssputs_r+0x5c>
 8010514:	230c      	movs	r3, #12
 8010516:	f8ca 3000 	str.w	r3, [sl]
 801051a:	89a3      	ldrh	r3, [r4, #12]
 801051c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010520:	81a3      	strh	r3, [r4, #12]
 8010522:	f04f 30ff 	mov.w	r0, #4294967295
 8010526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801052a:	6921      	ldr	r1, [r4, #16]
 801052c:	464a      	mov	r2, r9
 801052e:	f7ff fadd 	bl	800faec <memcpy>
 8010532:	89a3      	ldrh	r3, [r4, #12]
 8010534:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801053c:	81a3      	strh	r3, [r4, #12]
 801053e:	6126      	str	r6, [r4, #16]
 8010540:	6165      	str	r5, [r4, #20]
 8010542:	444e      	add	r6, r9
 8010544:	eba5 0509 	sub.w	r5, r5, r9
 8010548:	6026      	str	r6, [r4, #0]
 801054a:	60a5      	str	r5, [r4, #8]
 801054c:	463e      	mov	r6, r7
 801054e:	42be      	cmp	r6, r7
 8010550:	d900      	bls.n	8010554 <__ssputs_r+0x86>
 8010552:	463e      	mov	r6, r7
 8010554:	6820      	ldr	r0, [r4, #0]
 8010556:	4632      	mov	r2, r6
 8010558:	4641      	mov	r1, r8
 801055a:	f001 f893 	bl	8011684 <memmove>
 801055e:	68a3      	ldr	r3, [r4, #8]
 8010560:	1b9b      	subs	r3, r3, r6
 8010562:	60a3      	str	r3, [r4, #8]
 8010564:	6823      	ldr	r3, [r4, #0]
 8010566:	4433      	add	r3, r6
 8010568:	6023      	str	r3, [r4, #0]
 801056a:	2000      	movs	r0, #0
 801056c:	e7db      	b.n	8010526 <__ssputs_r+0x58>
 801056e:	462a      	mov	r2, r5
 8010570:	f001 f8a2 	bl	80116b8 <_realloc_r>
 8010574:	4606      	mov	r6, r0
 8010576:	2800      	cmp	r0, #0
 8010578:	d1e1      	bne.n	801053e <__ssputs_r+0x70>
 801057a:	6921      	ldr	r1, [r4, #16]
 801057c:	4650      	mov	r0, sl
 801057e:	f7fb fdff 	bl	800c180 <_free_r>
 8010582:	e7c7      	b.n	8010514 <__ssputs_r+0x46>

08010584 <_svfiprintf_r>:
 8010584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010588:	4698      	mov	r8, r3
 801058a:	898b      	ldrh	r3, [r1, #12]
 801058c:	061b      	lsls	r3, r3, #24
 801058e:	b09d      	sub	sp, #116	; 0x74
 8010590:	4607      	mov	r7, r0
 8010592:	460d      	mov	r5, r1
 8010594:	4614      	mov	r4, r2
 8010596:	d50e      	bpl.n	80105b6 <_svfiprintf_r+0x32>
 8010598:	690b      	ldr	r3, [r1, #16]
 801059a:	b963      	cbnz	r3, 80105b6 <_svfiprintf_r+0x32>
 801059c:	2140      	movs	r1, #64	; 0x40
 801059e:	f7fb fe5b 	bl	800c258 <_malloc_r>
 80105a2:	6028      	str	r0, [r5, #0]
 80105a4:	6128      	str	r0, [r5, #16]
 80105a6:	b920      	cbnz	r0, 80105b2 <_svfiprintf_r+0x2e>
 80105a8:	230c      	movs	r3, #12
 80105aa:	603b      	str	r3, [r7, #0]
 80105ac:	f04f 30ff 	mov.w	r0, #4294967295
 80105b0:	e0d1      	b.n	8010756 <_svfiprintf_r+0x1d2>
 80105b2:	2340      	movs	r3, #64	; 0x40
 80105b4:	616b      	str	r3, [r5, #20]
 80105b6:	2300      	movs	r3, #0
 80105b8:	9309      	str	r3, [sp, #36]	; 0x24
 80105ba:	2320      	movs	r3, #32
 80105bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80105c4:	2330      	movs	r3, #48	; 0x30
 80105c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010770 <_svfiprintf_r+0x1ec>
 80105ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105ce:	f04f 0901 	mov.w	r9, #1
 80105d2:	4623      	mov	r3, r4
 80105d4:	469a      	mov	sl, r3
 80105d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105da:	b10a      	cbz	r2, 80105e0 <_svfiprintf_r+0x5c>
 80105dc:	2a25      	cmp	r2, #37	; 0x25
 80105de:	d1f9      	bne.n	80105d4 <_svfiprintf_r+0x50>
 80105e0:	ebba 0b04 	subs.w	fp, sl, r4
 80105e4:	d00b      	beq.n	80105fe <_svfiprintf_r+0x7a>
 80105e6:	465b      	mov	r3, fp
 80105e8:	4622      	mov	r2, r4
 80105ea:	4629      	mov	r1, r5
 80105ec:	4638      	mov	r0, r7
 80105ee:	f7ff ff6e 	bl	80104ce <__ssputs_r>
 80105f2:	3001      	adds	r0, #1
 80105f4:	f000 80aa 	beq.w	801074c <_svfiprintf_r+0x1c8>
 80105f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105fa:	445a      	add	r2, fp
 80105fc:	9209      	str	r2, [sp, #36]	; 0x24
 80105fe:	f89a 3000 	ldrb.w	r3, [sl]
 8010602:	2b00      	cmp	r3, #0
 8010604:	f000 80a2 	beq.w	801074c <_svfiprintf_r+0x1c8>
 8010608:	2300      	movs	r3, #0
 801060a:	f04f 32ff 	mov.w	r2, #4294967295
 801060e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010612:	f10a 0a01 	add.w	sl, sl, #1
 8010616:	9304      	str	r3, [sp, #16]
 8010618:	9307      	str	r3, [sp, #28]
 801061a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801061e:	931a      	str	r3, [sp, #104]	; 0x68
 8010620:	4654      	mov	r4, sl
 8010622:	2205      	movs	r2, #5
 8010624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010628:	4851      	ldr	r0, [pc, #324]	; (8010770 <_svfiprintf_r+0x1ec>)
 801062a:	f7ef fdd9 	bl	80001e0 <memchr>
 801062e:	9a04      	ldr	r2, [sp, #16]
 8010630:	b9d8      	cbnz	r0, 801066a <_svfiprintf_r+0xe6>
 8010632:	06d0      	lsls	r0, r2, #27
 8010634:	bf44      	itt	mi
 8010636:	2320      	movmi	r3, #32
 8010638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801063c:	0711      	lsls	r1, r2, #28
 801063e:	bf44      	itt	mi
 8010640:	232b      	movmi	r3, #43	; 0x2b
 8010642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010646:	f89a 3000 	ldrb.w	r3, [sl]
 801064a:	2b2a      	cmp	r3, #42	; 0x2a
 801064c:	d015      	beq.n	801067a <_svfiprintf_r+0xf6>
 801064e:	9a07      	ldr	r2, [sp, #28]
 8010650:	4654      	mov	r4, sl
 8010652:	2000      	movs	r0, #0
 8010654:	f04f 0c0a 	mov.w	ip, #10
 8010658:	4621      	mov	r1, r4
 801065a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801065e:	3b30      	subs	r3, #48	; 0x30
 8010660:	2b09      	cmp	r3, #9
 8010662:	d94e      	bls.n	8010702 <_svfiprintf_r+0x17e>
 8010664:	b1b0      	cbz	r0, 8010694 <_svfiprintf_r+0x110>
 8010666:	9207      	str	r2, [sp, #28]
 8010668:	e014      	b.n	8010694 <_svfiprintf_r+0x110>
 801066a:	eba0 0308 	sub.w	r3, r0, r8
 801066e:	fa09 f303 	lsl.w	r3, r9, r3
 8010672:	4313      	orrs	r3, r2
 8010674:	9304      	str	r3, [sp, #16]
 8010676:	46a2      	mov	sl, r4
 8010678:	e7d2      	b.n	8010620 <_svfiprintf_r+0x9c>
 801067a:	9b03      	ldr	r3, [sp, #12]
 801067c:	1d19      	adds	r1, r3, #4
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	9103      	str	r1, [sp, #12]
 8010682:	2b00      	cmp	r3, #0
 8010684:	bfbb      	ittet	lt
 8010686:	425b      	neglt	r3, r3
 8010688:	f042 0202 	orrlt.w	r2, r2, #2
 801068c:	9307      	strge	r3, [sp, #28]
 801068e:	9307      	strlt	r3, [sp, #28]
 8010690:	bfb8      	it	lt
 8010692:	9204      	strlt	r2, [sp, #16]
 8010694:	7823      	ldrb	r3, [r4, #0]
 8010696:	2b2e      	cmp	r3, #46	; 0x2e
 8010698:	d10c      	bne.n	80106b4 <_svfiprintf_r+0x130>
 801069a:	7863      	ldrb	r3, [r4, #1]
 801069c:	2b2a      	cmp	r3, #42	; 0x2a
 801069e:	d135      	bne.n	801070c <_svfiprintf_r+0x188>
 80106a0:	9b03      	ldr	r3, [sp, #12]
 80106a2:	1d1a      	adds	r2, r3, #4
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	9203      	str	r2, [sp, #12]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	bfb8      	it	lt
 80106ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80106b0:	3402      	adds	r4, #2
 80106b2:	9305      	str	r3, [sp, #20]
 80106b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010780 <_svfiprintf_r+0x1fc>
 80106b8:	7821      	ldrb	r1, [r4, #0]
 80106ba:	2203      	movs	r2, #3
 80106bc:	4650      	mov	r0, sl
 80106be:	f7ef fd8f 	bl	80001e0 <memchr>
 80106c2:	b140      	cbz	r0, 80106d6 <_svfiprintf_r+0x152>
 80106c4:	2340      	movs	r3, #64	; 0x40
 80106c6:	eba0 000a 	sub.w	r0, r0, sl
 80106ca:	fa03 f000 	lsl.w	r0, r3, r0
 80106ce:	9b04      	ldr	r3, [sp, #16]
 80106d0:	4303      	orrs	r3, r0
 80106d2:	3401      	adds	r4, #1
 80106d4:	9304      	str	r3, [sp, #16]
 80106d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106da:	4826      	ldr	r0, [pc, #152]	; (8010774 <_svfiprintf_r+0x1f0>)
 80106dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106e0:	2206      	movs	r2, #6
 80106e2:	f7ef fd7d 	bl	80001e0 <memchr>
 80106e6:	2800      	cmp	r0, #0
 80106e8:	d038      	beq.n	801075c <_svfiprintf_r+0x1d8>
 80106ea:	4b23      	ldr	r3, [pc, #140]	; (8010778 <_svfiprintf_r+0x1f4>)
 80106ec:	bb1b      	cbnz	r3, 8010736 <_svfiprintf_r+0x1b2>
 80106ee:	9b03      	ldr	r3, [sp, #12]
 80106f0:	3307      	adds	r3, #7
 80106f2:	f023 0307 	bic.w	r3, r3, #7
 80106f6:	3308      	adds	r3, #8
 80106f8:	9303      	str	r3, [sp, #12]
 80106fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106fc:	4433      	add	r3, r6
 80106fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010700:	e767      	b.n	80105d2 <_svfiprintf_r+0x4e>
 8010702:	fb0c 3202 	mla	r2, ip, r2, r3
 8010706:	460c      	mov	r4, r1
 8010708:	2001      	movs	r0, #1
 801070a:	e7a5      	b.n	8010658 <_svfiprintf_r+0xd4>
 801070c:	2300      	movs	r3, #0
 801070e:	3401      	adds	r4, #1
 8010710:	9305      	str	r3, [sp, #20]
 8010712:	4619      	mov	r1, r3
 8010714:	f04f 0c0a 	mov.w	ip, #10
 8010718:	4620      	mov	r0, r4
 801071a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801071e:	3a30      	subs	r2, #48	; 0x30
 8010720:	2a09      	cmp	r2, #9
 8010722:	d903      	bls.n	801072c <_svfiprintf_r+0x1a8>
 8010724:	2b00      	cmp	r3, #0
 8010726:	d0c5      	beq.n	80106b4 <_svfiprintf_r+0x130>
 8010728:	9105      	str	r1, [sp, #20]
 801072a:	e7c3      	b.n	80106b4 <_svfiprintf_r+0x130>
 801072c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010730:	4604      	mov	r4, r0
 8010732:	2301      	movs	r3, #1
 8010734:	e7f0      	b.n	8010718 <_svfiprintf_r+0x194>
 8010736:	ab03      	add	r3, sp, #12
 8010738:	9300      	str	r3, [sp, #0]
 801073a:	462a      	mov	r2, r5
 801073c:	4b0f      	ldr	r3, [pc, #60]	; (801077c <_svfiprintf_r+0x1f8>)
 801073e:	a904      	add	r1, sp, #16
 8010740:	4638      	mov	r0, r7
 8010742:	f7fb fe9d 	bl	800c480 <_printf_float>
 8010746:	1c42      	adds	r2, r0, #1
 8010748:	4606      	mov	r6, r0
 801074a:	d1d6      	bne.n	80106fa <_svfiprintf_r+0x176>
 801074c:	89ab      	ldrh	r3, [r5, #12]
 801074e:	065b      	lsls	r3, r3, #25
 8010750:	f53f af2c 	bmi.w	80105ac <_svfiprintf_r+0x28>
 8010754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010756:	b01d      	add	sp, #116	; 0x74
 8010758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075c:	ab03      	add	r3, sp, #12
 801075e:	9300      	str	r3, [sp, #0]
 8010760:	462a      	mov	r2, r5
 8010762:	4b06      	ldr	r3, [pc, #24]	; (801077c <_svfiprintf_r+0x1f8>)
 8010764:	a904      	add	r1, sp, #16
 8010766:	4638      	mov	r0, r7
 8010768:	f7fc f92e 	bl	800c9c8 <_printf_i>
 801076c:	e7eb      	b.n	8010746 <_svfiprintf_r+0x1c2>
 801076e:	bf00      	nop
 8010770:	0801208c 	.word	0x0801208c
 8010774:	08012096 	.word	0x08012096
 8010778:	0800c481 	.word	0x0800c481
 801077c:	080104cf 	.word	0x080104cf
 8010780:	08012092 	.word	0x08012092

08010784 <__sfputc_r>:
 8010784:	6893      	ldr	r3, [r2, #8]
 8010786:	3b01      	subs	r3, #1
 8010788:	2b00      	cmp	r3, #0
 801078a:	b410      	push	{r4}
 801078c:	6093      	str	r3, [r2, #8]
 801078e:	da08      	bge.n	80107a2 <__sfputc_r+0x1e>
 8010790:	6994      	ldr	r4, [r2, #24]
 8010792:	42a3      	cmp	r3, r4
 8010794:	db01      	blt.n	801079a <__sfputc_r+0x16>
 8010796:	290a      	cmp	r1, #10
 8010798:	d103      	bne.n	80107a2 <__sfputc_r+0x1e>
 801079a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801079e:	f7fd bc97 	b.w	800e0d0 <__swbuf_r>
 80107a2:	6813      	ldr	r3, [r2, #0]
 80107a4:	1c58      	adds	r0, r3, #1
 80107a6:	6010      	str	r0, [r2, #0]
 80107a8:	7019      	strb	r1, [r3, #0]
 80107aa:	4608      	mov	r0, r1
 80107ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107b0:	4770      	bx	lr

080107b2 <__sfputs_r>:
 80107b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b4:	4606      	mov	r6, r0
 80107b6:	460f      	mov	r7, r1
 80107b8:	4614      	mov	r4, r2
 80107ba:	18d5      	adds	r5, r2, r3
 80107bc:	42ac      	cmp	r4, r5
 80107be:	d101      	bne.n	80107c4 <__sfputs_r+0x12>
 80107c0:	2000      	movs	r0, #0
 80107c2:	e007      	b.n	80107d4 <__sfputs_r+0x22>
 80107c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107c8:	463a      	mov	r2, r7
 80107ca:	4630      	mov	r0, r6
 80107cc:	f7ff ffda 	bl	8010784 <__sfputc_r>
 80107d0:	1c43      	adds	r3, r0, #1
 80107d2:	d1f3      	bne.n	80107bc <__sfputs_r+0xa>
 80107d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107d8 <_vfiprintf_r>:
 80107d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107dc:	460d      	mov	r5, r1
 80107de:	b09d      	sub	sp, #116	; 0x74
 80107e0:	4614      	mov	r4, r2
 80107e2:	4698      	mov	r8, r3
 80107e4:	4606      	mov	r6, r0
 80107e6:	b118      	cbz	r0, 80107f0 <_vfiprintf_r+0x18>
 80107e8:	6983      	ldr	r3, [r0, #24]
 80107ea:	b90b      	cbnz	r3, 80107f0 <_vfiprintf_r+0x18>
 80107ec:	f7fe fcd6 	bl	800f19c <__sinit>
 80107f0:	4b89      	ldr	r3, [pc, #548]	; (8010a18 <_vfiprintf_r+0x240>)
 80107f2:	429d      	cmp	r5, r3
 80107f4:	d11b      	bne.n	801082e <_vfiprintf_r+0x56>
 80107f6:	6875      	ldr	r5, [r6, #4]
 80107f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107fa:	07d9      	lsls	r1, r3, #31
 80107fc:	d405      	bmi.n	801080a <_vfiprintf_r+0x32>
 80107fe:	89ab      	ldrh	r3, [r5, #12]
 8010800:	059a      	lsls	r2, r3, #22
 8010802:	d402      	bmi.n	801080a <_vfiprintf_r+0x32>
 8010804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010806:	f7ff f8f8 	bl	800f9fa <__retarget_lock_acquire_recursive>
 801080a:	89ab      	ldrh	r3, [r5, #12]
 801080c:	071b      	lsls	r3, r3, #28
 801080e:	d501      	bpl.n	8010814 <_vfiprintf_r+0x3c>
 8010810:	692b      	ldr	r3, [r5, #16]
 8010812:	b9eb      	cbnz	r3, 8010850 <_vfiprintf_r+0x78>
 8010814:	4629      	mov	r1, r5
 8010816:	4630      	mov	r0, r6
 8010818:	f7fd fcac 	bl	800e174 <__swsetup_r>
 801081c:	b1c0      	cbz	r0, 8010850 <_vfiprintf_r+0x78>
 801081e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010820:	07dc      	lsls	r4, r3, #31
 8010822:	d50e      	bpl.n	8010842 <_vfiprintf_r+0x6a>
 8010824:	f04f 30ff 	mov.w	r0, #4294967295
 8010828:	b01d      	add	sp, #116	; 0x74
 801082a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801082e:	4b7b      	ldr	r3, [pc, #492]	; (8010a1c <_vfiprintf_r+0x244>)
 8010830:	429d      	cmp	r5, r3
 8010832:	d101      	bne.n	8010838 <_vfiprintf_r+0x60>
 8010834:	68b5      	ldr	r5, [r6, #8]
 8010836:	e7df      	b.n	80107f8 <_vfiprintf_r+0x20>
 8010838:	4b79      	ldr	r3, [pc, #484]	; (8010a20 <_vfiprintf_r+0x248>)
 801083a:	429d      	cmp	r5, r3
 801083c:	bf08      	it	eq
 801083e:	68f5      	ldreq	r5, [r6, #12]
 8010840:	e7da      	b.n	80107f8 <_vfiprintf_r+0x20>
 8010842:	89ab      	ldrh	r3, [r5, #12]
 8010844:	0598      	lsls	r0, r3, #22
 8010846:	d4ed      	bmi.n	8010824 <_vfiprintf_r+0x4c>
 8010848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801084a:	f7ff f8d7 	bl	800f9fc <__retarget_lock_release_recursive>
 801084e:	e7e9      	b.n	8010824 <_vfiprintf_r+0x4c>
 8010850:	2300      	movs	r3, #0
 8010852:	9309      	str	r3, [sp, #36]	; 0x24
 8010854:	2320      	movs	r3, #32
 8010856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801085a:	f8cd 800c 	str.w	r8, [sp, #12]
 801085e:	2330      	movs	r3, #48	; 0x30
 8010860:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010a24 <_vfiprintf_r+0x24c>
 8010864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010868:	f04f 0901 	mov.w	r9, #1
 801086c:	4623      	mov	r3, r4
 801086e:	469a      	mov	sl, r3
 8010870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010874:	b10a      	cbz	r2, 801087a <_vfiprintf_r+0xa2>
 8010876:	2a25      	cmp	r2, #37	; 0x25
 8010878:	d1f9      	bne.n	801086e <_vfiprintf_r+0x96>
 801087a:	ebba 0b04 	subs.w	fp, sl, r4
 801087e:	d00b      	beq.n	8010898 <_vfiprintf_r+0xc0>
 8010880:	465b      	mov	r3, fp
 8010882:	4622      	mov	r2, r4
 8010884:	4629      	mov	r1, r5
 8010886:	4630      	mov	r0, r6
 8010888:	f7ff ff93 	bl	80107b2 <__sfputs_r>
 801088c:	3001      	adds	r0, #1
 801088e:	f000 80aa 	beq.w	80109e6 <_vfiprintf_r+0x20e>
 8010892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010894:	445a      	add	r2, fp
 8010896:	9209      	str	r2, [sp, #36]	; 0x24
 8010898:	f89a 3000 	ldrb.w	r3, [sl]
 801089c:	2b00      	cmp	r3, #0
 801089e:	f000 80a2 	beq.w	80109e6 <_vfiprintf_r+0x20e>
 80108a2:	2300      	movs	r3, #0
 80108a4:	f04f 32ff 	mov.w	r2, #4294967295
 80108a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108ac:	f10a 0a01 	add.w	sl, sl, #1
 80108b0:	9304      	str	r3, [sp, #16]
 80108b2:	9307      	str	r3, [sp, #28]
 80108b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108b8:	931a      	str	r3, [sp, #104]	; 0x68
 80108ba:	4654      	mov	r4, sl
 80108bc:	2205      	movs	r2, #5
 80108be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108c2:	4858      	ldr	r0, [pc, #352]	; (8010a24 <_vfiprintf_r+0x24c>)
 80108c4:	f7ef fc8c 	bl	80001e0 <memchr>
 80108c8:	9a04      	ldr	r2, [sp, #16]
 80108ca:	b9d8      	cbnz	r0, 8010904 <_vfiprintf_r+0x12c>
 80108cc:	06d1      	lsls	r1, r2, #27
 80108ce:	bf44      	itt	mi
 80108d0:	2320      	movmi	r3, #32
 80108d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108d6:	0713      	lsls	r3, r2, #28
 80108d8:	bf44      	itt	mi
 80108da:	232b      	movmi	r3, #43	; 0x2b
 80108dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108e0:	f89a 3000 	ldrb.w	r3, [sl]
 80108e4:	2b2a      	cmp	r3, #42	; 0x2a
 80108e6:	d015      	beq.n	8010914 <_vfiprintf_r+0x13c>
 80108e8:	9a07      	ldr	r2, [sp, #28]
 80108ea:	4654      	mov	r4, sl
 80108ec:	2000      	movs	r0, #0
 80108ee:	f04f 0c0a 	mov.w	ip, #10
 80108f2:	4621      	mov	r1, r4
 80108f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108f8:	3b30      	subs	r3, #48	; 0x30
 80108fa:	2b09      	cmp	r3, #9
 80108fc:	d94e      	bls.n	801099c <_vfiprintf_r+0x1c4>
 80108fe:	b1b0      	cbz	r0, 801092e <_vfiprintf_r+0x156>
 8010900:	9207      	str	r2, [sp, #28]
 8010902:	e014      	b.n	801092e <_vfiprintf_r+0x156>
 8010904:	eba0 0308 	sub.w	r3, r0, r8
 8010908:	fa09 f303 	lsl.w	r3, r9, r3
 801090c:	4313      	orrs	r3, r2
 801090e:	9304      	str	r3, [sp, #16]
 8010910:	46a2      	mov	sl, r4
 8010912:	e7d2      	b.n	80108ba <_vfiprintf_r+0xe2>
 8010914:	9b03      	ldr	r3, [sp, #12]
 8010916:	1d19      	adds	r1, r3, #4
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	9103      	str	r1, [sp, #12]
 801091c:	2b00      	cmp	r3, #0
 801091e:	bfbb      	ittet	lt
 8010920:	425b      	neglt	r3, r3
 8010922:	f042 0202 	orrlt.w	r2, r2, #2
 8010926:	9307      	strge	r3, [sp, #28]
 8010928:	9307      	strlt	r3, [sp, #28]
 801092a:	bfb8      	it	lt
 801092c:	9204      	strlt	r2, [sp, #16]
 801092e:	7823      	ldrb	r3, [r4, #0]
 8010930:	2b2e      	cmp	r3, #46	; 0x2e
 8010932:	d10c      	bne.n	801094e <_vfiprintf_r+0x176>
 8010934:	7863      	ldrb	r3, [r4, #1]
 8010936:	2b2a      	cmp	r3, #42	; 0x2a
 8010938:	d135      	bne.n	80109a6 <_vfiprintf_r+0x1ce>
 801093a:	9b03      	ldr	r3, [sp, #12]
 801093c:	1d1a      	adds	r2, r3, #4
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	9203      	str	r2, [sp, #12]
 8010942:	2b00      	cmp	r3, #0
 8010944:	bfb8      	it	lt
 8010946:	f04f 33ff 	movlt.w	r3, #4294967295
 801094a:	3402      	adds	r4, #2
 801094c:	9305      	str	r3, [sp, #20]
 801094e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a34 <_vfiprintf_r+0x25c>
 8010952:	7821      	ldrb	r1, [r4, #0]
 8010954:	2203      	movs	r2, #3
 8010956:	4650      	mov	r0, sl
 8010958:	f7ef fc42 	bl	80001e0 <memchr>
 801095c:	b140      	cbz	r0, 8010970 <_vfiprintf_r+0x198>
 801095e:	2340      	movs	r3, #64	; 0x40
 8010960:	eba0 000a 	sub.w	r0, r0, sl
 8010964:	fa03 f000 	lsl.w	r0, r3, r0
 8010968:	9b04      	ldr	r3, [sp, #16]
 801096a:	4303      	orrs	r3, r0
 801096c:	3401      	adds	r4, #1
 801096e:	9304      	str	r3, [sp, #16]
 8010970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010974:	482c      	ldr	r0, [pc, #176]	; (8010a28 <_vfiprintf_r+0x250>)
 8010976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801097a:	2206      	movs	r2, #6
 801097c:	f7ef fc30 	bl	80001e0 <memchr>
 8010980:	2800      	cmp	r0, #0
 8010982:	d03f      	beq.n	8010a04 <_vfiprintf_r+0x22c>
 8010984:	4b29      	ldr	r3, [pc, #164]	; (8010a2c <_vfiprintf_r+0x254>)
 8010986:	bb1b      	cbnz	r3, 80109d0 <_vfiprintf_r+0x1f8>
 8010988:	9b03      	ldr	r3, [sp, #12]
 801098a:	3307      	adds	r3, #7
 801098c:	f023 0307 	bic.w	r3, r3, #7
 8010990:	3308      	adds	r3, #8
 8010992:	9303      	str	r3, [sp, #12]
 8010994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010996:	443b      	add	r3, r7
 8010998:	9309      	str	r3, [sp, #36]	; 0x24
 801099a:	e767      	b.n	801086c <_vfiprintf_r+0x94>
 801099c:	fb0c 3202 	mla	r2, ip, r2, r3
 80109a0:	460c      	mov	r4, r1
 80109a2:	2001      	movs	r0, #1
 80109a4:	e7a5      	b.n	80108f2 <_vfiprintf_r+0x11a>
 80109a6:	2300      	movs	r3, #0
 80109a8:	3401      	adds	r4, #1
 80109aa:	9305      	str	r3, [sp, #20]
 80109ac:	4619      	mov	r1, r3
 80109ae:	f04f 0c0a 	mov.w	ip, #10
 80109b2:	4620      	mov	r0, r4
 80109b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109b8:	3a30      	subs	r2, #48	; 0x30
 80109ba:	2a09      	cmp	r2, #9
 80109bc:	d903      	bls.n	80109c6 <_vfiprintf_r+0x1ee>
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d0c5      	beq.n	801094e <_vfiprintf_r+0x176>
 80109c2:	9105      	str	r1, [sp, #20]
 80109c4:	e7c3      	b.n	801094e <_vfiprintf_r+0x176>
 80109c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80109ca:	4604      	mov	r4, r0
 80109cc:	2301      	movs	r3, #1
 80109ce:	e7f0      	b.n	80109b2 <_vfiprintf_r+0x1da>
 80109d0:	ab03      	add	r3, sp, #12
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	462a      	mov	r2, r5
 80109d6:	4b16      	ldr	r3, [pc, #88]	; (8010a30 <_vfiprintf_r+0x258>)
 80109d8:	a904      	add	r1, sp, #16
 80109da:	4630      	mov	r0, r6
 80109dc:	f7fb fd50 	bl	800c480 <_printf_float>
 80109e0:	4607      	mov	r7, r0
 80109e2:	1c78      	adds	r0, r7, #1
 80109e4:	d1d6      	bne.n	8010994 <_vfiprintf_r+0x1bc>
 80109e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109e8:	07d9      	lsls	r1, r3, #31
 80109ea:	d405      	bmi.n	80109f8 <_vfiprintf_r+0x220>
 80109ec:	89ab      	ldrh	r3, [r5, #12]
 80109ee:	059a      	lsls	r2, r3, #22
 80109f0:	d402      	bmi.n	80109f8 <_vfiprintf_r+0x220>
 80109f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109f4:	f7ff f802 	bl	800f9fc <__retarget_lock_release_recursive>
 80109f8:	89ab      	ldrh	r3, [r5, #12]
 80109fa:	065b      	lsls	r3, r3, #25
 80109fc:	f53f af12 	bmi.w	8010824 <_vfiprintf_r+0x4c>
 8010a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a02:	e711      	b.n	8010828 <_vfiprintf_r+0x50>
 8010a04:	ab03      	add	r3, sp, #12
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	462a      	mov	r2, r5
 8010a0a:	4b09      	ldr	r3, [pc, #36]	; (8010a30 <_vfiprintf_r+0x258>)
 8010a0c:	a904      	add	r1, sp, #16
 8010a0e:	4630      	mov	r0, r6
 8010a10:	f7fb ffda 	bl	800c9c8 <_printf_i>
 8010a14:	e7e4      	b.n	80109e0 <_vfiprintf_r+0x208>
 8010a16:	bf00      	nop
 8010a18:	08011e74 	.word	0x08011e74
 8010a1c:	08011e94 	.word	0x08011e94
 8010a20:	08011e54 	.word	0x08011e54
 8010a24:	0801208c 	.word	0x0801208c
 8010a28:	08012096 	.word	0x08012096
 8010a2c:	0800c481 	.word	0x0800c481
 8010a30:	080107b3 	.word	0x080107b3
 8010a34:	08012092 	.word	0x08012092

08010a38 <__svfiscanf_r>:
 8010a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a3c:	461d      	mov	r5, r3
 8010a3e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010a40:	07df      	lsls	r7, r3, #31
 8010a42:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010a46:	4606      	mov	r6, r0
 8010a48:	460c      	mov	r4, r1
 8010a4a:	4692      	mov	sl, r2
 8010a4c:	d405      	bmi.n	8010a5a <__svfiscanf_r+0x22>
 8010a4e:	898b      	ldrh	r3, [r1, #12]
 8010a50:	0598      	lsls	r0, r3, #22
 8010a52:	d402      	bmi.n	8010a5a <__svfiscanf_r+0x22>
 8010a54:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8010a56:	f7fe ffd0 	bl	800f9fa <__retarget_lock_acquire_recursive>
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8010a60:	4ba6      	ldr	r3, [pc, #664]	; (8010cfc <__svfiscanf_r+0x2c4>)
 8010a62:	93a0      	str	r3, [sp, #640]	; 0x280
 8010a64:	f10d 0804 	add.w	r8, sp, #4
 8010a68:	4ba5      	ldr	r3, [pc, #660]	; (8010d00 <__svfiscanf_r+0x2c8>)
 8010a6a:	4fa6      	ldr	r7, [pc, #664]	; (8010d04 <__svfiscanf_r+0x2cc>)
 8010a6c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010d08 <__svfiscanf_r+0x2d0>
 8010a70:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010a74:	93a1      	str	r3, [sp, #644]	; 0x284
 8010a76:	9500      	str	r5, [sp, #0]
 8010a78:	f89a 3000 	ldrb.w	r3, [sl]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f000 8173 	beq.w	8010d68 <__svfiscanf_r+0x330>
 8010a82:	5dd9      	ldrb	r1, [r3, r7]
 8010a84:	f011 0108 	ands.w	r1, r1, #8
 8010a88:	f10a 0501 	add.w	r5, sl, #1
 8010a8c:	d019      	beq.n	8010ac2 <__svfiscanf_r+0x8a>
 8010a8e:	6863      	ldr	r3, [r4, #4]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	dd0f      	ble.n	8010ab4 <__svfiscanf_r+0x7c>
 8010a94:	6823      	ldr	r3, [r4, #0]
 8010a96:	781a      	ldrb	r2, [r3, #0]
 8010a98:	5cba      	ldrb	r2, [r7, r2]
 8010a9a:	0711      	lsls	r1, r2, #28
 8010a9c:	d401      	bmi.n	8010aa2 <__svfiscanf_r+0x6a>
 8010a9e:	46aa      	mov	sl, r5
 8010aa0:	e7ea      	b.n	8010a78 <__svfiscanf_r+0x40>
 8010aa2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010aa4:	3201      	adds	r2, #1
 8010aa6:	9245      	str	r2, [sp, #276]	; 0x114
 8010aa8:	6862      	ldr	r2, [r4, #4]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	3a01      	subs	r2, #1
 8010aae:	6062      	str	r2, [r4, #4]
 8010ab0:	6023      	str	r3, [r4, #0]
 8010ab2:	e7ec      	b.n	8010a8e <__svfiscanf_r+0x56>
 8010ab4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010ab6:	4621      	mov	r1, r4
 8010ab8:	4630      	mov	r0, r6
 8010aba:	4798      	blx	r3
 8010abc:	2800      	cmp	r0, #0
 8010abe:	d0e9      	beq.n	8010a94 <__svfiscanf_r+0x5c>
 8010ac0:	e7ed      	b.n	8010a9e <__svfiscanf_r+0x66>
 8010ac2:	2b25      	cmp	r3, #37	; 0x25
 8010ac4:	d012      	beq.n	8010aec <__svfiscanf_r+0xb4>
 8010ac6:	469a      	mov	sl, r3
 8010ac8:	6863      	ldr	r3, [r4, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f340 8095 	ble.w	8010bfa <__svfiscanf_r+0x1c2>
 8010ad0:	6822      	ldr	r2, [r4, #0]
 8010ad2:	7813      	ldrb	r3, [r2, #0]
 8010ad4:	4553      	cmp	r3, sl
 8010ad6:	f040 8147 	bne.w	8010d68 <__svfiscanf_r+0x330>
 8010ada:	6863      	ldr	r3, [r4, #4]
 8010adc:	3b01      	subs	r3, #1
 8010ade:	6063      	str	r3, [r4, #4]
 8010ae0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010ae2:	3201      	adds	r2, #1
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	6022      	str	r2, [r4, #0]
 8010ae8:	9345      	str	r3, [sp, #276]	; 0x114
 8010aea:	e7d8      	b.n	8010a9e <__svfiscanf_r+0x66>
 8010aec:	9141      	str	r1, [sp, #260]	; 0x104
 8010aee:	9143      	str	r1, [sp, #268]	; 0x10c
 8010af0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8010af4:	2b2a      	cmp	r3, #42	; 0x2a
 8010af6:	bf02      	ittt	eq
 8010af8:	2310      	moveq	r3, #16
 8010afa:	9341      	streq	r3, [sp, #260]	; 0x104
 8010afc:	f10a 0502 	addeq.w	r5, sl, #2
 8010b00:	220a      	movs	r2, #10
 8010b02:	46aa      	mov	sl, r5
 8010b04:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010b08:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010b0c:	2b09      	cmp	r3, #9
 8010b0e:	d91e      	bls.n	8010b4e <__svfiscanf_r+0x116>
 8010b10:	487d      	ldr	r0, [pc, #500]	; (8010d08 <__svfiscanf_r+0x2d0>)
 8010b12:	2203      	movs	r2, #3
 8010b14:	f7ef fb64 	bl	80001e0 <memchr>
 8010b18:	b140      	cbz	r0, 8010b2c <__svfiscanf_r+0xf4>
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	eba0 0009 	sub.w	r0, r0, r9
 8010b20:	fa03 f000 	lsl.w	r0, r3, r0
 8010b24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010b26:	4318      	orrs	r0, r3
 8010b28:	9041      	str	r0, [sp, #260]	; 0x104
 8010b2a:	4655      	mov	r5, sl
 8010b2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010b30:	2b78      	cmp	r3, #120	; 0x78
 8010b32:	d807      	bhi.n	8010b44 <__svfiscanf_r+0x10c>
 8010b34:	2b57      	cmp	r3, #87	; 0x57
 8010b36:	d811      	bhi.n	8010b5c <__svfiscanf_r+0x124>
 8010b38:	2b25      	cmp	r3, #37	; 0x25
 8010b3a:	d0c4      	beq.n	8010ac6 <__svfiscanf_r+0x8e>
 8010b3c:	d858      	bhi.n	8010bf0 <__svfiscanf_r+0x1b8>
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f000 80c8 	beq.w	8010cd4 <__svfiscanf_r+0x29c>
 8010b44:	2303      	movs	r3, #3
 8010b46:	9347      	str	r3, [sp, #284]	; 0x11c
 8010b48:	230a      	movs	r3, #10
 8010b4a:	9342      	str	r3, [sp, #264]	; 0x108
 8010b4c:	e07c      	b.n	8010c48 <__svfiscanf_r+0x210>
 8010b4e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010b50:	fb02 1103 	mla	r1, r2, r3, r1
 8010b54:	3930      	subs	r1, #48	; 0x30
 8010b56:	9143      	str	r1, [sp, #268]	; 0x10c
 8010b58:	4655      	mov	r5, sl
 8010b5a:	e7d2      	b.n	8010b02 <__svfiscanf_r+0xca>
 8010b5c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010b60:	2a20      	cmp	r2, #32
 8010b62:	d8ef      	bhi.n	8010b44 <__svfiscanf_r+0x10c>
 8010b64:	a101      	add	r1, pc, #4	; (adr r1, 8010b6c <__svfiscanf_r+0x134>)
 8010b66:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010b6a:	bf00      	nop
 8010b6c:	08010c33 	.word	0x08010c33
 8010b70:	08010b45 	.word	0x08010b45
 8010b74:	08010b45 	.word	0x08010b45
 8010b78:	08010c91 	.word	0x08010c91
 8010b7c:	08010b45 	.word	0x08010b45
 8010b80:	08010b45 	.word	0x08010b45
 8010b84:	08010b45 	.word	0x08010b45
 8010b88:	08010b45 	.word	0x08010b45
 8010b8c:	08010b45 	.word	0x08010b45
 8010b90:	08010b45 	.word	0x08010b45
 8010b94:	08010b45 	.word	0x08010b45
 8010b98:	08010ca7 	.word	0x08010ca7
 8010b9c:	08010c7d 	.word	0x08010c7d
 8010ba0:	08010bf7 	.word	0x08010bf7
 8010ba4:	08010bf7 	.word	0x08010bf7
 8010ba8:	08010bf7 	.word	0x08010bf7
 8010bac:	08010b45 	.word	0x08010b45
 8010bb0:	08010c81 	.word	0x08010c81
 8010bb4:	08010b45 	.word	0x08010b45
 8010bb8:	08010b45 	.word	0x08010b45
 8010bbc:	08010b45 	.word	0x08010b45
 8010bc0:	08010b45 	.word	0x08010b45
 8010bc4:	08010cb7 	.word	0x08010cb7
 8010bc8:	08010c89 	.word	0x08010c89
 8010bcc:	08010c2b 	.word	0x08010c2b
 8010bd0:	08010b45 	.word	0x08010b45
 8010bd4:	08010b45 	.word	0x08010b45
 8010bd8:	08010cb3 	.word	0x08010cb3
 8010bdc:	08010b45 	.word	0x08010b45
 8010be0:	08010c7d 	.word	0x08010c7d
 8010be4:	08010b45 	.word	0x08010b45
 8010be8:	08010b45 	.word	0x08010b45
 8010bec:	08010c33 	.word	0x08010c33
 8010bf0:	3b45      	subs	r3, #69	; 0x45
 8010bf2:	2b02      	cmp	r3, #2
 8010bf4:	d8a6      	bhi.n	8010b44 <__svfiscanf_r+0x10c>
 8010bf6:	2305      	movs	r3, #5
 8010bf8:	e025      	b.n	8010c46 <__svfiscanf_r+0x20e>
 8010bfa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010bfc:	4621      	mov	r1, r4
 8010bfe:	4630      	mov	r0, r6
 8010c00:	4798      	blx	r3
 8010c02:	2800      	cmp	r0, #0
 8010c04:	f43f af64 	beq.w	8010ad0 <__svfiscanf_r+0x98>
 8010c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c0a:	07da      	lsls	r2, r3, #31
 8010c0c:	f140 80a4 	bpl.w	8010d58 <__svfiscanf_r+0x320>
 8010c10:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010c12:	2800      	cmp	r0, #0
 8010c14:	d067      	beq.n	8010ce6 <__svfiscanf_r+0x2ae>
 8010c16:	89a3      	ldrh	r3, [r4, #12]
 8010c18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010c1c:	bf18      	it	ne
 8010c1e:	f04f 30ff 	movne.w	r0, #4294967295
 8010c22:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010c2c:	f042 0220 	orr.w	r2, r2, #32
 8010c30:	9241      	str	r2, [sp, #260]	; 0x104
 8010c32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010c38:	9241      	str	r2, [sp, #260]	; 0x104
 8010c3a:	2210      	movs	r2, #16
 8010c3c:	2b6f      	cmp	r3, #111	; 0x6f
 8010c3e:	9242      	str	r2, [sp, #264]	; 0x108
 8010c40:	bf34      	ite	cc
 8010c42:	2303      	movcc	r3, #3
 8010c44:	2304      	movcs	r3, #4
 8010c46:	9347      	str	r3, [sp, #284]	; 0x11c
 8010c48:	6863      	ldr	r3, [r4, #4]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	dd4e      	ble.n	8010cec <__svfiscanf_r+0x2b4>
 8010c4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c50:	065b      	lsls	r3, r3, #25
 8010c52:	d404      	bmi.n	8010c5e <__svfiscanf_r+0x226>
 8010c54:	6823      	ldr	r3, [r4, #0]
 8010c56:	781a      	ldrb	r2, [r3, #0]
 8010c58:	5cba      	ldrb	r2, [r7, r2]
 8010c5a:	0710      	lsls	r0, r2, #28
 8010c5c:	d456      	bmi.n	8010d0c <__svfiscanf_r+0x2d4>
 8010c5e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010c60:	2b02      	cmp	r3, #2
 8010c62:	dc65      	bgt.n	8010d30 <__svfiscanf_r+0x2f8>
 8010c64:	466b      	mov	r3, sp
 8010c66:	4622      	mov	r2, r4
 8010c68:	a941      	add	r1, sp, #260	; 0x104
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f000 f8b2 	bl	8010dd4 <_scanf_chars>
 8010c70:	2801      	cmp	r0, #1
 8010c72:	d079      	beq.n	8010d68 <__svfiscanf_r+0x330>
 8010c74:	2802      	cmp	r0, #2
 8010c76:	f47f af12 	bne.w	8010a9e <__svfiscanf_r+0x66>
 8010c7a:	e7c5      	b.n	8010c08 <__svfiscanf_r+0x1d0>
 8010c7c:	220a      	movs	r2, #10
 8010c7e:	e7dd      	b.n	8010c3c <__svfiscanf_r+0x204>
 8010c80:	2300      	movs	r3, #0
 8010c82:	9342      	str	r3, [sp, #264]	; 0x108
 8010c84:	2303      	movs	r3, #3
 8010c86:	e7de      	b.n	8010c46 <__svfiscanf_r+0x20e>
 8010c88:	2308      	movs	r3, #8
 8010c8a:	9342      	str	r3, [sp, #264]	; 0x108
 8010c8c:	2304      	movs	r3, #4
 8010c8e:	e7da      	b.n	8010c46 <__svfiscanf_r+0x20e>
 8010c90:	4629      	mov	r1, r5
 8010c92:	4640      	mov	r0, r8
 8010c94:	f000 fa8c 	bl	80111b0 <__sccl>
 8010c98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c9e:	9341      	str	r3, [sp, #260]	; 0x104
 8010ca0:	4605      	mov	r5, r0
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	e7cf      	b.n	8010c46 <__svfiscanf_r+0x20e>
 8010ca6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cac:	9341      	str	r3, [sp, #260]	; 0x104
 8010cae:	2300      	movs	r3, #0
 8010cb0:	e7c9      	b.n	8010c46 <__svfiscanf_r+0x20e>
 8010cb2:	2302      	movs	r3, #2
 8010cb4:	e7c7      	b.n	8010c46 <__svfiscanf_r+0x20e>
 8010cb6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010cb8:	06c3      	lsls	r3, r0, #27
 8010cba:	f53f aef0 	bmi.w	8010a9e <__svfiscanf_r+0x66>
 8010cbe:	9b00      	ldr	r3, [sp, #0]
 8010cc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010cc2:	1d19      	adds	r1, r3, #4
 8010cc4:	9100      	str	r1, [sp, #0]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f010 0f01 	tst.w	r0, #1
 8010ccc:	bf14      	ite	ne
 8010cce:	801a      	strhne	r2, [r3, #0]
 8010cd0:	601a      	streq	r2, [r3, #0]
 8010cd2:	e6e4      	b.n	8010a9e <__svfiscanf_r+0x66>
 8010cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010cd6:	07d8      	lsls	r0, r3, #31
 8010cd8:	d405      	bmi.n	8010ce6 <__svfiscanf_r+0x2ae>
 8010cda:	89a3      	ldrh	r3, [r4, #12]
 8010cdc:	0599      	lsls	r1, r3, #22
 8010cde:	d402      	bmi.n	8010ce6 <__svfiscanf_r+0x2ae>
 8010ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ce2:	f7fe fe8b 	bl	800f9fc <__retarget_lock_release_recursive>
 8010ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8010cea:	e79a      	b.n	8010c22 <__svfiscanf_r+0x1ea>
 8010cec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010cee:	4621      	mov	r1, r4
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	4798      	blx	r3
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	d0aa      	beq.n	8010c4e <__svfiscanf_r+0x216>
 8010cf8:	e786      	b.n	8010c08 <__svfiscanf_r+0x1d0>
 8010cfa:	bf00      	nop
 8010cfc:	0801142d 	.word	0x0801142d
 8010d00:	0801108d 	.word	0x0801108d
 8010d04:	08011cc1 	.word	0x08011cc1
 8010d08:	08012092 	.word	0x08012092
 8010d0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010d0e:	3201      	adds	r2, #1
 8010d10:	9245      	str	r2, [sp, #276]	; 0x114
 8010d12:	6862      	ldr	r2, [r4, #4]
 8010d14:	3a01      	subs	r2, #1
 8010d16:	2a00      	cmp	r2, #0
 8010d18:	6062      	str	r2, [r4, #4]
 8010d1a:	dd02      	ble.n	8010d22 <__svfiscanf_r+0x2ea>
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	6023      	str	r3, [r4, #0]
 8010d20:	e798      	b.n	8010c54 <__svfiscanf_r+0x21c>
 8010d22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010d24:	4621      	mov	r1, r4
 8010d26:	4630      	mov	r0, r6
 8010d28:	4798      	blx	r3
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	d092      	beq.n	8010c54 <__svfiscanf_r+0x21c>
 8010d2e:	e76b      	b.n	8010c08 <__svfiscanf_r+0x1d0>
 8010d30:	2b04      	cmp	r3, #4
 8010d32:	dc06      	bgt.n	8010d42 <__svfiscanf_r+0x30a>
 8010d34:	466b      	mov	r3, sp
 8010d36:	4622      	mov	r2, r4
 8010d38:	a941      	add	r1, sp, #260	; 0x104
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	f000 f8a4 	bl	8010e88 <_scanf_i>
 8010d40:	e796      	b.n	8010c70 <__svfiscanf_r+0x238>
 8010d42:	4b0f      	ldr	r3, [pc, #60]	; (8010d80 <__svfiscanf_r+0x348>)
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f43f aeaa 	beq.w	8010a9e <__svfiscanf_r+0x66>
 8010d4a:	466b      	mov	r3, sp
 8010d4c:	4622      	mov	r2, r4
 8010d4e:	a941      	add	r1, sp, #260	; 0x104
 8010d50:	4630      	mov	r0, r6
 8010d52:	f7fb ff5f 	bl	800cc14 <_scanf_float>
 8010d56:	e78b      	b.n	8010c70 <__svfiscanf_r+0x238>
 8010d58:	89a3      	ldrh	r3, [r4, #12]
 8010d5a:	0599      	lsls	r1, r3, #22
 8010d5c:	f53f af58 	bmi.w	8010c10 <__svfiscanf_r+0x1d8>
 8010d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d62:	f7fe fe4b 	bl	800f9fc <__retarget_lock_release_recursive>
 8010d66:	e753      	b.n	8010c10 <__svfiscanf_r+0x1d8>
 8010d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d6a:	07da      	lsls	r2, r3, #31
 8010d6c:	d405      	bmi.n	8010d7a <__svfiscanf_r+0x342>
 8010d6e:	89a3      	ldrh	r3, [r4, #12]
 8010d70:	059b      	lsls	r3, r3, #22
 8010d72:	d402      	bmi.n	8010d7a <__svfiscanf_r+0x342>
 8010d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d76:	f7fe fe41 	bl	800f9fc <__retarget_lock_release_recursive>
 8010d7a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010d7c:	e751      	b.n	8010c22 <__svfiscanf_r+0x1ea>
 8010d7e:	bf00      	nop
 8010d80:	0800cc15 	.word	0x0800cc15

08010d84 <_vfiscanf_r>:
 8010d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d86:	460c      	mov	r4, r1
 8010d88:	4605      	mov	r5, r0
 8010d8a:	b138      	cbz	r0, 8010d9c <_vfiscanf_r+0x18>
 8010d8c:	6981      	ldr	r1, [r0, #24]
 8010d8e:	b929      	cbnz	r1, 8010d9c <_vfiscanf_r+0x18>
 8010d90:	e9cd 2300 	strd	r2, r3, [sp]
 8010d94:	f7fe fa02 	bl	800f19c <__sinit>
 8010d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d9c:	490a      	ldr	r1, [pc, #40]	; (8010dc8 <_vfiscanf_r+0x44>)
 8010d9e:	428c      	cmp	r4, r1
 8010da0:	d107      	bne.n	8010db2 <_vfiscanf_r+0x2e>
 8010da2:	686c      	ldr	r4, [r5, #4]
 8010da4:	4621      	mov	r1, r4
 8010da6:	4628      	mov	r0, r5
 8010da8:	b003      	add	sp, #12
 8010daa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dae:	f7ff be43 	b.w	8010a38 <__svfiscanf_r>
 8010db2:	4906      	ldr	r1, [pc, #24]	; (8010dcc <_vfiscanf_r+0x48>)
 8010db4:	428c      	cmp	r4, r1
 8010db6:	d101      	bne.n	8010dbc <_vfiscanf_r+0x38>
 8010db8:	68ac      	ldr	r4, [r5, #8]
 8010dba:	e7f3      	b.n	8010da4 <_vfiscanf_r+0x20>
 8010dbc:	4904      	ldr	r1, [pc, #16]	; (8010dd0 <_vfiscanf_r+0x4c>)
 8010dbe:	428c      	cmp	r4, r1
 8010dc0:	bf08      	it	eq
 8010dc2:	68ec      	ldreq	r4, [r5, #12]
 8010dc4:	e7ee      	b.n	8010da4 <_vfiscanf_r+0x20>
 8010dc6:	bf00      	nop
 8010dc8:	08011e74 	.word	0x08011e74
 8010dcc:	08011e94 	.word	0x08011e94
 8010dd0:	08011e54 	.word	0x08011e54

08010dd4 <_scanf_chars>:
 8010dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dd8:	4615      	mov	r5, r2
 8010dda:	688a      	ldr	r2, [r1, #8]
 8010ddc:	4680      	mov	r8, r0
 8010dde:	460c      	mov	r4, r1
 8010de0:	b932      	cbnz	r2, 8010df0 <_scanf_chars+0x1c>
 8010de2:	698a      	ldr	r2, [r1, #24]
 8010de4:	2a00      	cmp	r2, #0
 8010de6:	bf0c      	ite	eq
 8010de8:	2201      	moveq	r2, #1
 8010dea:	f04f 32ff 	movne.w	r2, #4294967295
 8010dee:	608a      	str	r2, [r1, #8]
 8010df0:	6822      	ldr	r2, [r4, #0]
 8010df2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010e84 <_scanf_chars+0xb0>
 8010df6:	06d1      	lsls	r1, r2, #27
 8010df8:	bf5f      	itttt	pl
 8010dfa:	681a      	ldrpl	r2, [r3, #0]
 8010dfc:	1d11      	addpl	r1, r2, #4
 8010dfe:	6019      	strpl	r1, [r3, #0]
 8010e00:	6816      	ldrpl	r6, [r2, #0]
 8010e02:	2700      	movs	r7, #0
 8010e04:	69a0      	ldr	r0, [r4, #24]
 8010e06:	b188      	cbz	r0, 8010e2c <_scanf_chars+0x58>
 8010e08:	2801      	cmp	r0, #1
 8010e0a:	d107      	bne.n	8010e1c <_scanf_chars+0x48>
 8010e0c:	682a      	ldr	r2, [r5, #0]
 8010e0e:	7811      	ldrb	r1, [r2, #0]
 8010e10:	6962      	ldr	r2, [r4, #20]
 8010e12:	5c52      	ldrb	r2, [r2, r1]
 8010e14:	b952      	cbnz	r2, 8010e2c <_scanf_chars+0x58>
 8010e16:	2f00      	cmp	r7, #0
 8010e18:	d031      	beq.n	8010e7e <_scanf_chars+0xaa>
 8010e1a:	e022      	b.n	8010e62 <_scanf_chars+0x8e>
 8010e1c:	2802      	cmp	r0, #2
 8010e1e:	d120      	bne.n	8010e62 <_scanf_chars+0x8e>
 8010e20:	682b      	ldr	r3, [r5, #0]
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010e28:	071b      	lsls	r3, r3, #28
 8010e2a:	d41a      	bmi.n	8010e62 <_scanf_chars+0x8e>
 8010e2c:	6823      	ldr	r3, [r4, #0]
 8010e2e:	06da      	lsls	r2, r3, #27
 8010e30:	bf5e      	ittt	pl
 8010e32:	682b      	ldrpl	r3, [r5, #0]
 8010e34:	781b      	ldrbpl	r3, [r3, #0]
 8010e36:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010e3a:	682a      	ldr	r2, [r5, #0]
 8010e3c:	686b      	ldr	r3, [r5, #4]
 8010e3e:	3201      	adds	r2, #1
 8010e40:	602a      	str	r2, [r5, #0]
 8010e42:	68a2      	ldr	r2, [r4, #8]
 8010e44:	3b01      	subs	r3, #1
 8010e46:	3a01      	subs	r2, #1
 8010e48:	606b      	str	r3, [r5, #4]
 8010e4a:	3701      	adds	r7, #1
 8010e4c:	60a2      	str	r2, [r4, #8]
 8010e4e:	b142      	cbz	r2, 8010e62 <_scanf_chars+0x8e>
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	dcd7      	bgt.n	8010e04 <_scanf_chars+0x30>
 8010e54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010e58:	4629      	mov	r1, r5
 8010e5a:	4640      	mov	r0, r8
 8010e5c:	4798      	blx	r3
 8010e5e:	2800      	cmp	r0, #0
 8010e60:	d0d0      	beq.n	8010e04 <_scanf_chars+0x30>
 8010e62:	6823      	ldr	r3, [r4, #0]
 8010e64:	f013 0310 	ands.w	r3, r3, #16
 8010e68:	d105      	bne.n	8010e76 <_scanf_chars+0xa2>
 8010e6a:	68e2      	ldr	r2, [r4, #12]
 8010e6c:	3201      	adds	r2, #1
 8010e6e:	60e2      	str	r2, [r4, #12]
 8010e70:	69a2      	ldr	r2, [r4, #24]
 8010e72:	b102      	cbz	r2, 8010e76 <_scanf_chars+0xa2>
 8010e74:	7033      	strb	r3, [r6, #0]
 8010e76:	6923      	ldr	r3, [r4, #16]
 8010e78:	443b      	add	r3, r7
 8010e7a:	6123      	str	r3, [r4, #16]
 8010e7c:	2000      	movs	r0, #0
 8010e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e82:	bf00      	nop
 8010e84:	08011cc1 	.word	0x08011cc1

08010e88 <_scanf_i>:
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	4698      	mov	r8, r3
 8010e8e:	4b76      	ldr	r3, [pc, #472]	; (8011068 <_scanf_i+0x1e0>)
 8010e90:	460c      	mov	r4, r1
 8010e92:	4682      	mov	sl, r0
 8010e94:	4616      	mov	r6, r2
 8010e96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010e9a:	b087      	sub	sp, #28
 8010e9c:	ab03      	add	r3, sp, #12
 8010e9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010ea2:	4b72      	ldr	r3, [pc, #456]	; (801106c <_scanf_i+0x1e4>)
 8010ea4:	69a1      	ldr	r1, [r4, #24]
 8010ea6:	4a72      	ldr	r2, [pc, #456]	; (8011070 <_scanf_i+0x1e8>)
 8010ea8:	2903      	cmp	r1, #3
 8010eaa:	bf18      	it	ne
 8010eac:	461a      	movne	r2, r3
 8010eae:	68a3      	ldr	r3, [r4, #8]
 8010eb0:	9201      	str	r2, [sp, #4]
 8010eb2:	1e5a      	subs	r2, r3, #1
 8010eb4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010eb8:	bf88      	it	hi
 8010eba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010ebe:	4627      	mov	r7, r4
 8010ec0:	bf82      	ittt	hi
 8010ec2:	eb03 0905 	addhi.w	r9, r3, r5
 8010ec6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010eca:	60a3      	strhi	r3, [r4, #8]
 8010ecc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010ed0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010ed4:	bf98      	it	ls
 8010ed6:	f04f 0900 	movls.w	r9, #0
 8010eda:	6023      	str	r3, [r4, #0]
 8010edc:	463d      	mov	r5, r7
 8010ede:	f04f 0b00 	mov.w	fp, #0
 8010ee2:	6831      	ldr	r1, [r6, #0]
 8010ee4:	ab03      	add	r3, sp, #12
 8010ee6:	7809      	ldrb	r1, [r1, #0]
 8010ee8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010eec:	2202      	movs	r2, #2
 8010eee:	f7ef f977 	bl	80001e0 <memchr>
 8010ef2:	b328      	cbz	r0, 8010f40 <_scanf_i+0xb8>
 8010ef4:	f1bb 0f01 	cmp.w	fp, #1
 8010ef8:	d159      	bne.n	8010fae <_scanf_i+0x126>
 8010efa:	6862      	ldr	r2, [r4, #4]
 8010efc:	b92a      	cbnz	r2, 8010f0a <_scanf_i+0x82>
 8010efe:	6822      	ldr	r2, [r4, #0]
 8010f00:	2308      	movs	r3, #8
 8010f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010f06:	6063      	str	r3, [r4, #4]
 8010f08:	6022      	str	r2, [r4, #0]
 8010f0a:	6822      	ldr	r2, [r4, #0]
 8010f0c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010f10:	6022      	str	r2, [r4, #0]
 8010f12:	68a2      	ldr	r2, [r4, #8]
 8010f14:	1e51      	subs	r1, r2, #1
 8010f16:	60a1      	str	r1, [r4, #8]
 8010f18:	b192      	cbz	r2, 8010f40 <_scanf_i+0xb8>
 8010f1a:	6832      	ldr	r2, [r6, #0]
 8010f1c:	1c51      	adds	r1, r2, #1
 8010f1e:	6031      	str	r1, [r6, #0]
 8010f20:	7812      	ldrb	r2, [r2, #0]
 8010f22:	f805 2b01 	strb.w	r2, [r5], #1
 8010f26:	6872      	ldr	r2, [r6, #4]
 8010f28:	3a01      	subs	r2, #1
 8010f2a:	2a00      	cmp	r2, #0
 8010f2c:	6072      	str	r2, [r6, #4]
 8010f2e:	dc07      	bgt.n	8010f40 <_scanf_i+0xb8>
 8010f30:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010f34:	4631      	mov	r1, r6
 8010f36:	4650      	mov	r0, sl
 8010f38:	4790      	blx	r2
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	f040 8085 	bne.w	801104a <_scanf_i+0x1c2>
 8010f40:	f10b 0b01 	add.w	fp, fp, #1
 8010f44:	f1bb 0f03 	cmp.w	fp, #3
 8010f48:	d1cb      	bne.n	8010ee2 <_scanf_i+0x5a>
 8010f4a:	6863      	ldr	r3, [r4, #4]
 8010f4c:	b90b      	cbnz	r3, 8010f52 <_scanf_i+0xca>
 8010f4e:	230a      	movs	r3, #10
 8010f50:	6063      	str	r3, [r4, #4]
 8010f52:	6863      	ldr	r3, [r4, #4]
 8010f54:	4947      	ldr	r1, [pc, #284]	; (8011074 <_scanf_i+0x1ec>)
 8010f56:	6960      	ldr	r0, [r4, #20]
 8010f58:	1ac9      	subs	r1, r1, r3
 8010f5a:	f000 f929 	bl	80111b0 <__sccl>
 8010f5e:	f04f 0b00 	mov.w	fp, #0
 8010f62:	68a3      	ldr	r3, [r4, #8]
 8010f64:	6822      	ldr	r2, [r4, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d03d      	beq.n	8010fe6 <_scanf_i+0x15e>
 8010f6a:	6831      	ldr	r1, [r6, #0]
 8010f6c:	6960      	ldr	r0, [r4, #20]
 8010f6e:	f891 c000 	ldrb.w	ip, [r1]
 8010f72:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010f76:	2800      	cmp	r0, #0
 8010f78:	d035      	beq.n	8010fe6 <_scanf_i+0x15e>
 8010f7a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010f7e:	d124      	bne.n	8010fca <_scanf_i+0x142>
 8010f80:	0510      	lsls	r0, r2, #20
 8010f82:	d522      	bpl.n	8010fca <_scanf_i+0x142>
 8010f84:	f10b 0b01 	add.w	fp, fp, #1
 8010f88:	f1b9 0f00 	cmp.w	r9, #0
 8010f8c:	d003      	beq.n	8010f96 <_scanf_i+0x10e>
 8010f8e:	3301      	adds	r3, #1
 8010f90:	f109 39ff 	add.w	r9, r9, #4294967295
 8010f94:	60a3      	str	r3, [r4, #8]
 8010f96:	6873      	ldr	r3, [r6, #4]
 8010f98:	3b01      	subs	r3, #1
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	6073      	str	r3, [r6, #4]
 8010f9e:	dd1b      	ble.n	8010fd8 <_scanf_i+0x150>
 8010fa0:	6833      	ldr	r3, [r6, #0]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	6033      	str	r3, [r6, #0]
 8010fa6:	68a3      	ldr	r3, [r4, #8]
 8010fa8:	3b01      	subs	r3, #1
 8010faa:	60a3      	str	r3, [r4, #8]
 8010fac:	e7d9      	b.n	8010f62 <_scanf_i+0xda>
 8010fae:	f1bb 0f02 	cmp.w	fp, #2
 8010fb2:	d1ae      	bne.n	8010f12 <_scanf_i+0x8a>
 8010fb4:	6822      	ldr	r2, [r4, #0]
 8010fb6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010fba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010fbe:	d1bf      	bne.n	8010f40 <_scanf_i+0xb8>
 8010fc0:	2310      	movs	r3, #16
 8010fc2:	6063      	str	r3, [r4, #4]
 8010fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010fc8:	e7a2      	b.n	8010f10 <_scanf_i+0x88>
 8010fca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010fce:	6022      	str	r2, [r4, #0]
 8010fd0:	780b      	ldrb	r3, [r1, #0]
 8010fd2:	f805 3b01 	strb.w	r3, [r5], #1
 8010fd6:	e7de      	b.n	8010f96 <_scanf_i+0x10e>
 8010fd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010fdc:	4631      	mov	r1, r6
 8010fde:	4650      	mov	r0, sl
 8010fe0:	4798      	blx	r3
 8010fe2:	2800      	cmp	r0, #0
 8010fe4:	d0df      	beq.n	8010fa6 <_scanf_i+0x11e>
 8010fe6:	6823      	ldr	r3, [r4, #0]
 8010fe8:	05db      	lsls	r3, r3, #23
 8010fea:	d50d      	bpl.n	8011008 <_scanf_i+0x180>
 8010fec:	42bd      	cmp	r5, r7
 8010fee:	d909      	bls.n	8011004 <_scanf_i+0x17c>
 8010ff0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010ff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ff8:	4632      	mov	r2, r6
 8010ffa:	4650      	mov	r0, sl
 8010ffc:	4798      	blx	r3
 8010ffe:	f105 39ff 	add.w	r9, r5, #4294967295
 8011002:	464d      	mov	r5, r9
 8011004:	42bd      	cmp	r5, r7
 8011006:	d02d      	beq.n	8011064 <_scanf_i+0x1dc>
 8011008:	6822      	ldr	r2, [r4, #0]
 801100a:	f012 0210 	ands.w	r2, r2, #16
 801100e:	d113      	bne.n	8011038 <_scanf_i+0x1b0>
 8011010:	702a      	strb	r2, [r5, #0]
 8011012:	6863      	ldr	r3, [r4, #4]
 8011014:	9e01      	ldr	r6, [sp, #4]
 8011016:	4639      	mov	r1, r7
 8011018:	4650      	mov	r0, sl
 801101a:	47b0      	blx	r6
 801101c:	6821      	ldr	r1, [r4, #0]
 801101e:	f8d8 3000 	ldr.w	r3, [r8]
 8011022:	f011 0f20 	tst.w	r1, #32
 8011026:	d013      	beq.n	8011050 <_scanf_i+0x1c8>
 8011028:	1d1a      	adds	r2, r3, #4
 801102a:	f8c8 2000 	str.w	r2, [r8]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	6018      	str	r0, [r3, #0]
 8011032:	68e3      	ldr	r3, [r4, #12]
 8011034:	3301      	adds	r3, #1
 8011036:	60e3      	str	r3, [r4, #12]
 8011038:	1bed      	subs	r5, r5, r7
 801103a:	44ab      	add	fp, r5
 801103c:	6925      	ldr	r5, [r4, #16]
 801103e:	445d      	add	r5, fp
 8011040:	6125      	str	r5, [r4, #16]
 8011042:	2000      	movs	r0, #0
 8011044:	b007      	add	sp, #28
 8011046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104a:	f04f 0b00 	mov.w	fp, #0
 801104e:	e7ca      	b.n	8010fe6 <_scanf_i+0x15e>
 8011050:	1d1a      	adds	r2, r3, #4
 8011052:	f8c8 2000 	str.w	r2, [r8]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f011 0f01 	tst.w	r1, #1
 801105c:	bf14      	ite	ne
 801105e:	8018      	strhne	r0, [r3, #0]
 8011060:	6018      	streq	r0, [r3, #0]
 8011062:	e7e6      	b.n	8011032 <_scanf_i+0x1aa>
 8011064:	2001      	movs	r0, #1
 8011066:	e7ed      	b.n	8011044 <_scanf_i+0x1bc>
 8011068:	08011be0 	.word	0x08011be0
 801106c:	080113b5 	.word	0x080113b5
 8011070:	0800e0cd 	.word	0x0800e0cd
 8011074:	080120b6 	.word	0x080120b6

08011078 <lflush>:
 8011078:	8983      	ldrh	r3, [r0, #12]
 801107a:	f003 0309 	and.w	r3, r3, #9
 801107e:	2b09      	cmp	r3, #9
 8011080:	d101      	bne.n	8011086 <lflush+0xe>
 8011082:	f7fe b821 	b.w	800f0c8 <fflush>
 8011086:	2000      	movs	r0, #0
 8011088:	4770      	bx	lr
	...

0801108c <__srefill_r>:
 801108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801108e:	460c      	mov	r4, r1
 8011090:	4605      	mov	r5, r0
 8011092:	b118      	cbz	r0, 801109c <__srefill_r+0x10>
 8011094:	6983      	ldr	r3, [r0, #24]
 8011096:	b90b      	cbnz	r3, 801109c <__srefill_r+0x10>
 8011098:	f7fe f880 	bl	800f19c <__sinit>
 801109c:	4b3b      	ldr	r3, [pc, #236]	; (801118c <__srefill_r+0x100>)
 801109e:	429c      	cmp	r4, r3
 80110a0:	d10a      	bne.n	80110b8 <__srefill_r+0x2c>
 80110a2:	686c      	ldr	r4, [r5, #4]
 80110a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110a8:	2300      	movs	r3, #0
 80110aa:	6063      	str	r3, [r4, #4]
 80110ac:	89a3      	ldrh	r3, [r4, #12]
 80110ae:	069e      	lsls	r6, r3, #26
 80110b0:	d50c      	bpl.n	80110cc <__srefill_r+0x40>
 80110b2:	f04f 30ff 	mov.w	r0, #4294967295
 80110b6:	e066      	b.n	8011186 <__srefill_r+0xfa>
 80110b8:	4b35      	ldr	r3, [pc, #212]	; (8011190 <__srefill_r+0x104>)
 80110ba:	429c      	cmp	r4, r3
 80110bc:	d101      	bne.n	80110c2 <__srefill_r+0x36>
 80110be:	68ac      	ldr	r4, [r5, #8]
 80110c0:	e7f0      	b.n	80110a4 <__srefill_r+0x18>
 80110c2:	4b34      	ldr	r3, [pc, #208]	; (8011194 <__srefill_r+0x108>)
 80110c4:	429c      	cmp	r4, r3
 80110c6:	bf08      	it	eq
 80110c8:	68ec      	ldreq	r4, [r5, #12]
 80110ca:	e7eb      	b.n	80110a4 <__srefill_r+0x18>
 80110cc:	0758      	lsls	r0, r3, #29
 80110ce:	d448      	bmi.n	8011162 <__srefill_r+0xd6>
 80110d0:	06d9      	lsls	r1, r3, #27
 80110d2:	d405      	bmi.n	80110e0 <__srefill_r+0x54>
 80110d4:	2309      	movs	r3, #9
 80110d6:	602b      	str	r3, [r5, #0]
 80110d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110dc:	81a3      	strh	r3, [r4, #12]
 80110de:	e7e8      	b.n	80110b2 <__srefill_r+0x26>
 80110e0:	071a      	lsls	r2, r3, #28
 80110e2:	d50b      	bpl.n	80110fc <__srefill_r+0x70>
 80110e4:	4621      	mov	r1, r4
 80110e6:	4628      	mov	r0, r5
 80110e8:	f7fd ffb2 	bl	800f050 <_fflush_r>
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d1e0      	bne.n	80110b2 <__srefill_r+0x26>
 80110f0:	89a3      	ldrh	r3, [r4, #12]
 80110f2:	60a0      	str	r0, [r4, #8]
 80110f4:	f023 0308 	bic.w	r3, r3, #8
 80110f8:	81a3      	strh	r3, [r4, #12]
 80110fa:	61a0      	str	r0, [r4, #24]
 80110fc:	89a3      	ldrh	r3, [r4, #12]
 80110fe:	f043 0304 	orr.w	r3, r3, #4
 8011102:	81a3      	strh	r3, [r4, #12]
 8011104:	6923      	ldr	r3, [r4, #16]
 8011106:	b91b      	cbnz	r3, 8011110 <__srefill_r+0x84>
 8011108:	4621      	mov	r1, r4
 801110a:	4628      	mov	r0, r5
 801110c:	f7fe fc9c 	bl	800fa48 <__smakebuf_r>
 8011110:	89a6      	ldrh	r6, [r4, #12]
 8011112:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8011116:	07b3      	lsls	r3, r6, #30
 8011118:	d00f      	beq.n	801113a <__srefill_r+0xae>
 801111a:	2301      	movs	r3, #1
 801111c:	81a3      	strh	r3, [r4, #12]
 801111e:	4b1e      	ldr	r3, [pc, #120]	; (8011198 <__srefill_r+0x10c>)
 8011120:	491e      	ldr	r1, [pc, #120]	; (801119c <__srefill_r+0x110>)
 8011122:	6818      	ldr	r0, [r3, #0]
 8011124:	f006 0609 	and.w	r6, r6, #9
 8011128:	f7fe f8b6 	bl	800f298 <_fwalk>
 801112c:	2e09      	cmp	r6, #9
 801112e:	81a7      	strh	r7, [r4, #12]
 8011130:	d103      	bne.n	801113a <__srefill_r+0xae>
 8011132:	4621      	mov	r1, r4
 8011134:	4628      	mov	r0, r5
 8011136:	f7fd ff05 	bl	800ef44 <__sflush_r>
 801113a:	6922      	ldr	r2, [r4, #16]
 801113c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801113e:	6963      	ldr	r3, [r4, #20]
 8011140:	6a21      	ldr	r1, [r4, #32]
 8011142:	6022      	str	r2, [r4, #0]
 8011144:	4628      	mov	r0, r5
 8011146:	47b0      	blx	r6
 8011148:	2800      	cmp	r0, #0
 801114a:	6060      	str	r0, [r4, #4]
 801114c:	dc1c      	bgt.n	8011188 <__srefill_r+0xfc>
 801114e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011152:	bf17      	itett	ne
 8011154:	2200      	movne	r2, #0
 8011156:	f043 0320 	orreq.w	r3, r3, #32
 801115a:	6062      	strne	r2, [r4, #4]
 801115c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8011160:	e7bc      	b.n	80110dc <__srefill_r+0x50>
 8011162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011164:	2900      	cmp	r1, #0
 8011166:	d0cd      	beq.n	8011104 <__srefill_r+0x78>
 8011168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801116c:	4299      	cmp	r1, r3
 801116e:	d002      	beq.n	8011176 <__srefill_r+0xea>
 8011170:	4628      	mov	r0, r5
 8011172:	f7fb f805 	bl	800c180 <_free_r>
 8011176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011178:	6063      	str	r3, [r4, #4]
 801117a:	2000      	movs	r0, #0
 801117c:	6360      	str	r0, [r4, #52]	; 0x34
 801117e:	2b00      	cmp	r3, #0
 8011180:	d0c0      	beq.n	8011104 <__srefill_r+0x78>
 8011182:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011184:	6023      	str	r3, [r4, #0]
 8011186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011188:	2000      	movs	r0, #0
 801118a:	e7fc      	b.n	8011186 <__srefill_r+0xfa>
 801118c:	08011e74 	.word	0x08011e74
 8011190:	08011e94 	.word	0x08011e94
 8011194:	08011e54 	.word	0x08011e54
 8011198:	08011c34 	.word	0x08011c34
 801119c:	08011079 	.word	0x08011079

080111a0 <nan>:
 80111a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80111a8 <nan+0x8>
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop
 80111a8:	00000000 	.word	0x00000000
 80111ac:	7ff80000 	.word	0x7ff80000

080111b0 <__sccl>:
 80111b0:	b570      	push	{r4, r5, r6, lr}
 80111b2:	780b      	ldrb	r3, [r1, #0]
 80111b4:	4604      	mov	r4, r0
 80111b6:	2b5e      	cmp	r3, #94	; 0x5e
 80111b8:	bf0b      	itete	eq
 80111ba:	784b      	ldrbeq	r3, [r1, #1]
 80111bc:	1c48      	addne	r0, r1, #1
 80111be:	1c88      	addeq	r0, r1, #2
 80111c0:	2200      	movne	r2, #0
 80111c2:	bf08      	it	eq
 80111c4:	2201      	moveq	r2, #1
 80111c6:	1e61      	subs	r1, r4, #1
 80111c8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80111cc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80111d0:	42a9      	cmp	r1, r5
 80111d2:	d1fb      	bne.n	80111cc <__sccl+0x1c>
 80111d4:	b90b      	cbnz	r3, 80111da <__sccl+0x2a>
 80111d6:	3801      	subs	r0, #1
 80111d8:	bd70      	pop	{r4, r5, r6, pc}
 80111da:	f082 0201 	eor.w	r2, r2, #1
 80111de:	54e2      	strb	r2, [r4, r3]
 80111e0:	4605      	mov	r5, r0
 80111e2:	4628      	mov	r0, r5
 80111e4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80111e8:	292d      	cmp	r1, #45	; 0x2d
 80111ea:	d006      	beq.n	80111fa <__sccl+0x4a>
 80111ec:	295d      	cmp	r1, #93	; 0x5d
 80111ee:	d0f3      	beq.n	80111d8 <__sccl+0x28>
 80111f0:	b909      	cbnz	r1, 80111f6 <__sccl+0x46>
 80111f2:	4628      	mov	r0, r5
 80111f4:	e7f0      	b.n	80111d8 <__sccl+0x28>
 80111f6:	460b      	mov	r3, r1
 80111f8:	e7f1      	b.n	80111de <__sccl+0x2e>
 80111fa:	786e      	ldrb	r6, [r5, #1]
 80111fc:	2e5d      	cmp	r6, #93	; 0x5d
 80111fe:	d0fa      	beq.n	80111f6 <__sccl+0x46>
 8011200:	42b3      	cmp	r3, r6
 8011202:	dcf8      	bgt.n	80111f6 <__sccl+0x46>
 8011204:	3502      	adds	r5, #2
 8011206:	4619      	mov	r1, r3
 8011208:	3101      	adds	r1, #1
 801120a:	428e      	cmp	r6, r1
 801120c:	5462      	strb	r2, [r4, r1]
 801120e:	dcfb      	bgt.n	8011208 <__sccl+0x58>
 8011210:	1af1      	subs	r1, r6, r3
 8011212:	3901      	subs	r1, #1
 8011214:	1c58      	adds	r0, r3, #1
 8011216:	42b3      	cmp	r3, r6
 8011218:	bfa8      	it	ge
 801121a:	2100      	movge	r1, #0
 801121c:	1843      	adds	r3, r0, r1
 801121e:	e7e0      	b.n	80111e2 <__sccl+0x32>

08011220 <__sread>:
 8011220:	b510      	push	{r4, lr}
 8011222:	460c      	mov	r4, r1
 8011224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011228:	f000 fa76 	bl	8011718 <_read_r>
 801122c:	2800      	cmp	r0, #0
 801122e:	bfab      	itete	ge
 8011230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011232:	89a3      	ldrhlt	r3, [r4, #12]
 8011234:	181b      	addge	r3, r3, r0
 8011236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801123a:	bfac      	ite	ge
 801123c:	6563      	strge	r3, [r4, #84]	; 0x54
 801123e:	81a3      	strhlt	r3, [r4, #12]
 8011240:	bd10      	pop	{r4, pc}

08011242 <__swrite>:
 8011242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011246:	461f      	mov	r7, r3
 8011248:	898b      	ldrh	r3, [r1, #12]
 801124a:	05db      	lsls	r3, r3, #23
 801124c:	4605      	mov	r5, r0
 801124e:	460c      	mov	r4, r1
 8011250:	4616      	mov	r6, r2
 8011252:	d505      	bpl.n	8011260 <__swrite+0x1e>
 8011254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011258:	2302      	movs	r3, #2
 801125a:	2200      	movs	r2, #0
 801125c:	f000 fa00 	bl	8011660 <_lseek_r>
 8011260:	89a3      	ldrh	r3, [r4, #12]
 8011262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801126a:	81a3      	strh	r3, [r4, #12]
 801126c:	4632      	mov	r2, r6
 801126e:	463b      	mov	r3, r7
 8011270:	4628      	mov	r0, r5
 8011272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011276:	f000 b97f 	b.w	8011578 <_write_r>

0801127a <__sseek>:
 801127a:	b510      	push	{r4, lr}
 801127c:	460c      	mov	r4, r1
 801127e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011282:	f000 f9ed 	bl	8011660 <_lseek_r>
 8011286:	1c43      	adds	r3, r0, #1
 8011288:	89a3      	ldrh	r3, [r4, #12]
 801128a:	bf15      	itete	ne
 801128c:	6560      	strne	r0, [r4, #84]	; 0x54
 801128e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011296:	81a3      	strheq	r3, [r4, #12]
 8011298:	bf18      	it	ne
 801129a:	81a3      	strhne	r3, [r4, #12]
 801129c:	bd10      	pop	{r4, pc}

0801129e <__sclose>:
 801129e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112a2:	f000 b999 	b.w	80115d8 <_close_r>

080112a6 <strncmp>:
 80112a6:	b510      	push	{r4, lr}
 80112a8:	b17a      	cbz	r2, 80112ca <strncmp+0x24>
 80112aa:	4603      	mov	r3, r0
 80112ac:	3901      	subs	r1, #1
 80112ae:	1884      	adds	r4, r0, r2
 80112b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80112b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80112b8:	4290      	cmp	r0, r2
 80112ba:	d101      	bne.n	80112c0 <strncmp+0x1a>
 80112bc:	42a3      	cmp	r3, r4
 80112be:	d101      	bne.n	80112c4 <strncmp+0x1e>
 80112c0:	1a80      	subs	r0, r0, r2
 80112c2:	bd10      	pop	{r4, pc}
 80112c4:	2800      	cmp	r0, #0
 80112c6:	d1f3      	bne.n	80112b0 <strncmp+0xa>
 80112c8:	e7fa      	b.n	80112c0 <strncmp+0x1a>
 80112ca:	4610      	mov	r0, r2
 80112cc:	e7f9      	b.n	80112c2 <strncmp+0x1c>
	...

080112d0 <_strtoul_l.constprop.0>:
 80112d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112d4:	4f36      	ldr	r7, [pc, #216]	; (80113b0 <_strtoul_l.constprop.0+0xe0>)
 80112d6:	4686      	mov	lr, r0
 80112d8:	460d      	mov	r5, r1
 80112da:	4628      	mov	r0, r5
 80112dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80112e0:	5de6      	ldrb	r6, [r4, r7]
 80112e2:	f016 0608 	ands.w	r6, r6, #8
 80112e6:	d1f8      	bne.n	80112da <_strtoul_l.constprop.0+0xa>
 80112e8:	2c2d      	cmp	r4, #45	; 0x2d
 80112ea:	d12f      	bne.n	801134c <_strtoul_l.constprop.0+0x7c>
 80112ec:	782c      	ldrb	r4, [r5, #0]
 80112ee:	2601      	movs	r6, #1
 80112f0:	1c85      	adds	r5, r0, #2
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d057      	beq.n	80113a6 <_strtoul_l.constprop.0+0xd6>
 80112f6:	2b10      	cmp	r3, #16
 80112f8:	d109      	bne.n	801130e <_strtoul_l.constprop.0+0x3e>
 80112fa:	2c30      	cmp	r4, #48	; 0x30
 80112fc:	d107      	bne.n	801130e <_strtoul_l.constprop.0+0x3e>
 80112fe:	7828      	ldrb	r0, [r5, #0]
 8011300:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011304:	2858      	cmp	r0, #88	; 0x58
 8011306:	d149      	bne.n	801139c <_strtoul_l.constprop.0+0xcc>
 8011308:	786c      	ldrb	r4, [r5, #1]
 801130a:	2310      	movs	r3, #16
 801130c:	3502      	adds	r5, #2
 801130e:	f04f 38ff 	mov.w	r8, #4294967295
 8011312:	2700      	movs	r7, #0
 8011314:	fbb8 f8f3 	udiv	r8, r8, r3
 8011318:	fb03 f908 	mul.w	r9, r3, r8
 801131c:	ea6f 0909 	mvn.w	r9, r9
 8011320:	4638      	mov	r0, r7
 8011322:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011326:	f1bc 0f09 	cmp.w	ip, #9
 801132a:	d814      	bhi.n	8011356 <_strtoul_l.constprop.0+0x86>
 801132c:	4664      	mov	r4, ip
 801132e:	42a3      	cmp	r3, r4
 8011330:	dd22      	ble.n	8011378 <_strtoul_l.constprop.0+0xa8>
 8011332:	2f00      	cmp	r7, #0
 8011334:	db1d      	blt.n	8011372 <_strtoul_l.constprop.0+0xa2>
 8011336:	4580      	cmp	r8, r0
 8011338:	d31b      	bcc.n	8011372 <_strtoul_l.constprop.0+0xa2>
 801133a:	d101      	bne.n	8011340 <_strtoul_l.constprop.0+0x70>
 801133c:	45a1      	cmp	r9, r4
 801133e:	db18      	blt.n	8011372 <_strtoul_l.constprop.0+0xa2>
 8011340:	fb00 4003 	mla	r0, r0, r3, r4
 8011344:	2701      	movs	r7, #1
 8011346:	f815 4b01 	ldrb.w	r4, [r5], #1
 801134a:	e7ea      	b.n	8011322 <_strtoul_l.constprop.0+0x52>
 801134c:	2c2b      	cmp	r4, #43	; 0x2b
 801134e:	bf04      	itt	eq
 8011350:	782c      	ldrbeq	r4, [r5, #0]
 8011352:	1c85      	addeq	r5, r0, #2
 8011354:	e7cd      	b.n	80112f2 <_strtoul_l.constprop.0+0x22>
 8011356:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801135a:	f1bc 0f19 	cmp.w	ip, #25
 801135e:	d801      	bhi.n	8011364 <_strtoul_l.constprop.0+0x94>
 8011360:	3c37      	subs	r4, #55	; 0x37
 8011362:	e7e4      	b.n	801132e <_strtoul_l.constprop.0+0x5e>
 8011364:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011368:	f1bc 0f19 	cmp.w	ip, #25
 801136c:	d804      	bhi.n	8011378 <_strtoul_l.constprop.0+0xa8>
 801136e:	3c57      	subs	r4, #87	; 0x57
 8011370:	e7dd      	b.n	801132e <_strtoul_l.constprop.0+0x5e>
 8011372:	f04f 37ff 	mov.w	r7, #4294967295
 8011376:	e7e6      	b.n	8011346 <_strtoul_l.constprop.0+0x76>
 8011378:	2f00      	cmp	r7, #0
 801137a:	da07      	bge.n	801138c <_strtoul_l.constprop.0+0xbc>
 801137c:	2322      	movs	r3, #34	; 0x22
 801137e:	f8ce 3000 	str.w	r3, [lr]
 8011382:	f04f 30ff 	mov.w	r0, #4294967295
 8011386:	b932      	cbnz	r2, 8011396 <_strtoul_l.constprop.0+0xc6>
 8011388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801138c:	b106      	cbz	r6, 8011390 <_strtoul_l.constprop.0+0xc0>
 801138e:	4240      	negs	r0, r0
 8011390:	2a00      	cmp	r2, #0
 8011392:	d0f9      	beq.n	8011388 <_strtoul_l.constprop.0+0xb8>
 8011394:	b107      	cbz	r7, 8011398 <_strtoul_l.constprop.0+0xc8>
 8011396:	1e69      	subs	r1, r5, #1
 8011398:	6011      	str	r1, [r2, #0]
 801139a:	e7f5      	b.n	8011388 <_strtoul_l.constprop.0+0xb8>
 801139c:	2430      	movs	r4, #48	; 0x30
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d1b5      	bne.n	801130e <_strtoul_l.constprop.0+0x3e>
 80113a2:	2308      	movs	r3, #8
 80113a4:	e7b3      	b.n	801130e <_strtoul_l.constprop.0+0x3e>
 80113a6:	2c30      	cmp	r4, #48	; 0x30
 80113a8:	d0a9      	beq.n	80112fe <_strtoul_l.constprop.0+0x2e>
 80113aa:	230a      	movs	r3, #10
 80113ac:	e7af      	b.n	801130e <_strtoul_l.constprop.0+0x3e>
 80113ae:	bf00      	nop
 80113b0:	08011cc1 	.word	0x08011cc1

080113b4 <_strtoul_r>:
 80113b4:	f7ff bf8c 	b.w	80112d0 <_strtoul_l.constprop.0>

080113b8 <__submore>:
 80113b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113bc:	460c      	mov	r4, r1
 80113be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80113c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113c4:	4299      	cmp	r1, r3
 80113c6:	d11d      	bne.n	8011404 <__submore+0x4c>
 80113c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80113cc:	f7fa ff44 	bl	800c258 <_malloc_r>
 80113d0:	b918      	cbnz	r0, 80113da <__submore+0x22>
 80113d2:	f04f 30ff 	mov.w	r0, #4294967295
 80113d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113de:	63a3      	str	r3, [r4, #56]	; 0x38
 80113e0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80113e4:	6360      	str	r0, [r4, #52]	; 0x34
 80113e6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80113ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80113ee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80113f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80113f6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80113fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80113fe:	6020      	str	r0, [r4, #0]
 8011400:	2000      	movs	r0, #0
 8011402:	e7e8      	b.n	80113d6 <__submore+0x1e>
 8011404:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011406:	0077      	lsls	r7, r6, #1
 8011408:	463a      	mov	r2, r7
 801140a:	f000 f955 	bl	80116b8 <_realloc_r>
 801140e:	4605      	mov	r5, r0
 8011410:	2800      	cmp	r0, #0
 8011412:	d0de      	beq.n	80113d2 <__submore+0x1a>
 8011414:	eb00 0806 	add.w	r8, r0, r6
 8011418:	4601      	mov	r1, r0
 801141a:	4632      	mov	r2, r6
 801141c:	4640      	mov	r0, r8
 801141e:	f7fe fb65 	bl	800faec <memcpy>
 8011422:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011426:	f8c4 8000 	str.w	r8, [r4]
 801142a:	e7e9      	b.n	8011400 <__submore+0x48>

0801142c <_ungetc_r>:
 801142c:	b570      	push	{r4, r5, r6, lr}
 801142e:	4614      	mov	r4, r2
 8011430:	1c4a      	adds	r2, r1, #1
 8011432:	4606      	mov	r6, r0
 8011434:	460d      	mov	r5, r1
 8011436:	d103      	bne.n	8011440 <_ungetc_r+0x14>
 8011438:	f04f 35ff 	mov.w	r5, #4294967295
 801143c:	4628      	mov	r0, r5
 801143e:	bd70      	pop	{r4, r5, r6, pc}
 8011440:	b118      	cbz	r0, 801144a <_ungetc_r+0x1e>
 8011442:	6983      	ldr	r3, [r0, #24]
 8011444:	b90b      	cbnz	r3, 801144a <_ungetc_r+0x1e>
 8011446:	f7fd fea9 	bl	800f19c <__sinit>
 801144a:	4b41      	ldr	r3, [pc, #260]	; (8011550 <_ungetc_r+0x124>)
 801144c:	429c      	cmp	r4, r3
 801144e:	d11d      	bne.n	801148c <_ungetc_r+0x60>
 8011450:	6874      	ldr	r4, [r6, #4]
 8011452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011454:	07db      	lsls	r3, r3, #31
 8011456:	d405      	bmi.n	8011464 <_ungetc_r+0x38>
 8011458:	89a3      	ldrh	r3, [r4, #12]
 801145a:	0598      	lsls	r0, r3, #22
 801145c:	d402      	bmi.n	8011464 <_ungetc_r+0x38>
 801145e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011460:	f7fe facb 	bl	800f9fa <__retarget_lock_acquire_recursive>
 8011464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011468:	f023 0320 	bic.w	r3, r3, #32
 801146c:	0759      	lsls	r1, r3, #29
 801146e:	81a3      	strh	r3, [r4, #12]
 8011470:	b29a      	uxth	r2, r3
 8011472:	d42d      	bmi.n	80114d0 <_ungetc_r+0xa4>
 8011474:	06d3      	lsls	r3, r2, #27
 8011476:	d413      	bmi.n	80114a0 <_ungetc_r+0x74>
 8011478:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801147a:	07dd      	lsls	r5, r3, #31
 801147c:	d4dc      	bmi.n	8011438 <_ungetc_r+0xc>
 801147e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8011482:	d1d9      	bne.n	8011438 <_ungetc_r+0xc>
 8011484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011486:	f7fe fab9 	bl	800f9fc <__retarget_lock_release_recursive>
 801148a:	e7d5      	b.n	8011438 <_ungetc_r+0xc>
 801148c:	4b31      	ldr	r3, [pc, #196]	; (8011554 <_ungetc_r+0x128>)
 801148e:	429c      	cmp	r4, r3
 8011490:	d101      	bne.n	8011496 <_ungetc_r+0x6a>
 8011492:	68b4      	ldr	r4, [r6, #8]
 8011494:	e7dd      	b.n	8011452 <_ungetc_r+0x26>
 8011496:	4b30      	ldr	r3, [pc, #192]	; (8011558 <_ungetc_r+0x12c>)
 8011498:	429c      	cmp	r4, r3
 801149a:	bf08      	it	eq
 801149c:	68f4      	ldreq	r4, [r6, #12]
 801149e:	e7d8      	b.n	8011452 <_ungetc_r+0x26>
 80114a0:	0710      	lsls	r0, r2, #28
 80114a2:	d511      	bpl.n	80114c8 <_ungetc_r+0x9c>
 80114a4:	4621      	mov	r1, r4
 80114a6:	4630      	mov	r0, r6
 80114a8:	f7fd fdd2 	bl	800f050 <_fflush_r>
 80114ac:	b130      	cbz	r0, 80114bc <_ungetc_r+0x90>
 80114ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114b0:	07d9      	lsls	r1, r3, #31
 80114b2:	d4c1      	bmi.n	8011438 <_ungetc_r+0xc>
 80114b4:	89a3      	ldrh	r3, [r4, #12]
 80114b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80114ba:	e7e2      	b.n	8011482 <_ungetc_r+0x56>
 80114bc:	89a3      	ldrh	r3, [r4, #12]
 80114be:	60a0      	str	r0, [r4, #8]
 80114c0:	f023 0308 	bic.w	r3, r3, #8
 80114c4:	81a3      	strh	r3, [r4, #12]
 80114c6:	61a0      	str	r0, [r4, #24]
 80114c8:	89a3      	ldrh	r3, [r4, #12]
 80114ca:	f043 0304 	orr.w	r3, r3, #4
 80114ce:	81a3      	strh	r3, [r4, #12]
 80114d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114d2:	6862      	ldr	r2, [r4, #4]
 80114d4:	b2ed      	uxtb	r5, r5
 80114d6:	b1d3      	cbz	r3, 801150e <_ungetc_r+0xe2>
 80114d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80114da:	4293      	cmp	r3, r2
 80114dc:	dc05      	bgt.n	80114ea <_ungetc_r+0xbe>
 80114de:	4621      	mov	r1, r4
 80114e0:	4630      	mov	r0, r6
 80114e2:	f7ff ff69 	bl	80113b8 <__submore>
 80114e6:	2800      	cmp	r0, #0
 80114e8:	d1e1      	bne.n	80114ae <_ungetc_r+0x82>
 80114ea:	6823      	ldr	r3, [r4, #0]
 80114ec:	1e5a      	subs	r2, r3, #1
 80114ee:	6022      	str	r2, [r4, #0]
 80114f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80114f4:	6863      	ldr	r3, [r4, #4]
 80114f6:	3301      	adds	r3, #1
 80114f8:	6063      	str	r3, [r4, #4]
 80114fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114fc:	07da      	lsls	r2, r3, #31
 80114fe:	d49d      	bmi.n	801143c <_ungetc_r+0x10>
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	059b      	lsls	r3, r3, #22
 8011504:	d49a      	bmi.n	801143c <_ungetc_r+0x10>
 8011506:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011508:	f7fe fa78 	bl	800f9fc <__retarget_lock_release_recursive>
 801150c:	e796      	b.n	801143c <_ungetc_r+0x10>
 801150e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8011510:	6920      	ldr	r0, [r4, #16]
 8011512:	6823      	ldr	r3, [r4, #0]
 8011514:	f001 0101 	and.w	r1, r1, #1
 8011518:	b160      	cbz	r0, 8011534 <_ungetc_r+0x108>
 801151a:	4298      	cmp	r0, r3
 801151c:	d20a      	bcs.n	8011534 <_ungetc_r+0x108>
 801151e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8011522:	42a8      	cmp	r0, r5
 8011524:	d106      	bne.n	8011534 <_ungetc_r+0x108>
 8011526:	3b01      	subs	r3, #1
 8011528:	3201      	adds	r2, #1
 801152a:	6023      	str	r3, [r4, #0]
 801152c:	6062      	str	r2, [r4, #4]
 801152e:	2900      	cmp	r1, #0
 8011530:	d184      	bne.n	801143c <_ungetc_r+0x10>
 8011532:	e7e5      	b.n	8011500 <_ungetc_r+0xd4>
 8011534:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801153c:	6363      	str	r3, [r4, #52]	; 0x34
 801153e:	2303      	movs	r3, #3
 8011540:	63a3      	str	r3, [r4, #56]	; 0x38
 8011542:	4623      	mov	r3, r4
 8011544:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011548:	6023      	str	r3, [r4, #0]
 801154a:	2301      	movs	r3, #1
 801154c:	6063      	str	r3, [r4, #4]
 801154e:	e7ee      	b.n	801152e <_ungetc_r+0x102>
 8011550:	08011e74 	.word	0x08011e74
 8011554:	08011e94 	.word	0x08011e94
 8011558:	08011e54 	.word	0x08011e54

0801155c <__ascii_wctomb>:
 801155c:	b149      	cbz	r1, 8011572 <__ascii_wctomb+0x16>
 801155e:	2aff      	cmp	r2, #255	; 0xff
 8011560:	bf85      	ittet	hi
 8011562:	238a      	movhi	r3, #138	; 0x8a
 8011564:	6003      	strhi	r3, [r0, #0]
 8011566:	700a      	strbls	r2, [r1, #0]
 8011568:	f04f 30ff 	movhi.w	r0, #4294967295
 801156c:	bf98      	it	ls
 801156e:	2001      	movls	r0, #1
 8011570:	4770      	bx	lr
 8011572:	4608      	mov	r0, r1
 8011574:	4770      	bx	lr
	...

08011578 <_write_r>:
 8011578:	b538      	push	{r3, r4, r5, lr}
 801157a:	4d07      	ldr	r5, [pc, #28]	; (8011598 <_write_r+0x20>)
 801157c:	4604      	mov	r4, r0
 801157e:	4608      	mov	r0, r1
 8011580:	4611      	mov	r1, r2
 8011582:	2200      	movs	r2, #0
 8011584:	602a      	str	r2, [r5, #0]
 8011586:	461a      	mov	r2, r3
 8011588:	f7f1 fa24 	bl	80029d4 <_write>
 801158c:	1c43      	adds	r3, r0, #1
 801158e:	d102      	bne.n	8011596 <_write_r+0x1e>
 8011590:	682b      	ldr	r3, [r5, #0]
 8011592:	b103      	cbz	r3, 8011596 <_write_r+0x1e>
 8011594:	6023      	str	r3, [r4, #0]
 8011596:	bd38      	pop	{r3, r4, r5, pc}
 8011598:	20000788 	.word	0x20000788

0801159c <__assert_func>:
 801159c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801159e:	4614      	mov	r4, r2
 80115a0:	461a      	mov	r2, r3
 80115a2:	4b09      	ldr	r3, [pc, #36]	; (80115c8 <__assert_func+0x2c>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	4605      	mov	r5, r0
 80115a8:	68d8      	ldr	r0, [r3, #12]
 80115aa:	b14c      	cbz	r4, 80115c0 <__assert_func+0x24>
 80115ac:	4b07      	ldr	r3, [pc, #28]	; (80115cc <__assert_func+0x30>)
 80115ae:	9100      	str	r1, [sp, #0]
 80115b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80115b4:	4906      	ldr	r1, [pc, #24]	; (80115d0 <__assert_func+0x34>)
 80115b6:	462b      	mov	r3, r5
 80115b8:	f000 f81e 	bl	80115f8 <fiprintf>
 80115bc:	f000 f8be 	bl	801173c <abort>
 80115c0:	4b04      	ldr	r3, [pc, #16]	; (80115d4 <__assert_func+0x38>)
 80115c2:	461c      	mov	r4, r3
 80115c4:	e7f3      	b.n	80115ae <__assert_func+0x12>
 80115c6:	bf00      	nop
 80115c8:	2000002c 	.word	0x2000002c
 80115cc:	080120b8 	.word	0x080120b8
 80115d0:	080120c5 	.word	0x080120c5
 80115d4:	080120f3 	.word	0x080120f3

080115d8 <_close_r>:
 80115d8:	b538      	push	{r3, r4, r5, lr}
 80115da:	4d06      	ldr	r5, [pc, #24]	; (80115f4 <_close_r+0x1c>)
 80115dc:	2300      	movs	r3, #0
 80115de:	4604      	mov	r4, r0
 80115e0:	4608      	mov	r0, r1
 80115e2:	602b      	str	r3, [r5, #0]
 80115e4:	f7f1 fa22 	bl	8002a2c <_close>
 80115e8:	1c43      	adds	r3, r0, #1
 80115ea:	d102      	bne.n	80115f2 <_close_r+0x1a>
 80115ec:	682b      	ldr	r3, [r5, #0]
 80115ee:	b103      	cbz	r3, 80115f2 <_close_r+0x1a>
 80115f0:	6023      	str	r3, [r4, #0]
 80115f2:	bd38      	pop	{r3, r4, r5, pc}
 80115f4:	20000788 	.word	0x20000788

080115f8 <fiprintf>:
 80115f8:	b40e      	push	{r1, r2, r3}
 80115fa:	b503      	push	{r0, r1, lr}
 80115fc:	4601      	mov	r1, r0
 80115fe:	ab03      	add	r3, sp, #12
 8011600:	4805      	ldr	r0, [pc, #20]	; (8011618 <fiprintf+0x20>)
 8011602:	f853 2b04 	ldr.w	r2, [r3], #4
 8011606:	6800      	ldr	r0, [r0, #0]
 8011608:	9301      	str	r3, [sp, #4]
 801160a:	f7ff f8e5 	bl	80107d8 <_vfiprintf_r>
 801160e:	b002      	add	sp, #8
 8011610:	f85d eb04 	ldr.w	lr, [sp], #4
 8011614:	b003      	add	sp, #12
 8011616:	4770      	bx	lr
 8011618:	2000002c 	.word	0x2000002c

0801161c <_fstat_r>:
 801161c:	b538      	push	{r3, r4, r5, lr}
 801161e:	4d07      	ldr	r5, [pc, #28]	; (801163c <_fstat_r+0x20>)
 8011620:	2300      	movs	r3, #0
 8011622:	4604      	mov	r4, r0
 8011624:	4608      	mov	r0, r1
 8011626:	4611      	mov	r1, r2
 8011628:	602b      	str	r3, [r5, #0]
 801162a:	f7f1 fa4f 	bl	8002acc <_fstat>
 801162e:	1c43      	adds	r3, r0, #1
 8011630:	d102      	bne.n	8011638 <_fstat_r+0x1c>
 8011632:	682b      	ldr	r3, [r5, #0]
 8011634:	b103      	cbz	r3, 8011638 <_fstat_r+0x1c>
 8011636:	6023      	str	r3, [r4, #0]
 8011638:	bd38      	pop	{r3, r4, r5, pc}
 801163a:	bf00      	nop
 801163c:	20000788 	.word	0x20000788

08011640 <_isatty_r>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	4d06      	ldr	r5, [pc, #24]	; (801165c <_isatty_r+0x1c>)
 8011644:	2300      	movs	r3, #0
 8011646:	4604      	mov	r4, r0
 8011648:	4608      	mov	r0, r1
 801164a:	602b      	str	r3, [r5, #0]
 801164c:	f7f1 f9ac 	bl	80029a8 <_isatty>
 8011650:	1c43      	adds	r3, r0, #1
 8011652:	d102      	bne.n	801165a <_isatty_r+0x1a>
 8011654:	682b      	ldr	r3, [r5, #0]
 8011656:	b103      	cbz	r3, 801165a <_isatty_r+0x1a>
 8011658:	6023      	str	r3, [r4, #0]
 801165a:	bd38      	pop	{r3, r4, r5, pc}
 801165c:	20000788 	.word	0x20000788

08011660 <_lseek_r>:
 8011660:	b538      	push	{r3, r4, r5, lr}
 8011662:	4d07      	ldr	r5, [pc, #28]	; (8011680 <_lseek_r+0x20>)
 8011664:	4604      	mov	r4, r0
 8011666:	4608      	mov	r0, r1
 8011668:	4611      	mov	r1, r2
 801166a:	2200      	movs	r2, #0
 801166c:	602a      	str	r2, [r5, #0]
 801166e:	461a      	mov	r2, r3
 8011670:	f7f1 f9f3 	bl	8002a5a <_lseek>
 8011674:	1c43      	adds	r3, r0, #1
 8011676:	d102      	bne.n	801167e <_lseek_r+0x1e>
 8011678:	682b      	ldr	r3, [r5, #0]
 801167a:	b103      	cbz	r3, 801167e <_lseek_r+0x1e>
 801167c:	6023      	str	r3, [r4, #0]
 801167e:	bd38      	pop	{r3, r4, r5, pc}
 8011680:	20000788 	.word	0x20000788

08011684 <memmove>:
 8011684:	4288      	cmp	r0, r1
 8011686:	b510      	push	{r4, lr}
 8011688:	eb01 0402 	add.w	r4, r1, r2
 801168c:	d902      	bls.n	8011694 <memmove+0x10>
 801168e:	4284      	cmp	r4, r0
 8011690:	4623      	mov	r3, r4
 8011692:	d807      	bhi.n	80116a4 <memmove+0x20>
 8011694:	1e43      	subs	r3, r0, #1
 8011696:	42a1      	cmp	r1, r4
 8011698:	d008      	beq.n	80116ac <memmove+0x28>
 801169a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801169e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116a2:	e7f8      	b.n	8011696 <memmove+0x12>
 80116a4:	4402      	add	r2, r0
 80116a6:	4601      	mov	r1, r0
 80116a8:	428a      	cmp	r2, r1
 80116aa:	d100      	bne.n	80116ae <memmove+0x2a>
 80116ac:	bd10      	pop	{r4, pc}
 80116ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116b6:	e7f7      	b.n	80116a8 <memmove+0x24>

080116b8 <_realloc_r>:
 80116b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116bc:	4680      	mov	r8, r0
 80116be:	4614      	mov	r4, r2
 80116c0:	460e      	mov	r6, r1
 80116c2:	b921      	cbnz	r1, 80116ce <_realloc_r+0x16>
 80116c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116c8:	4611      	mov	r1, r2
 80116ca:	f7fa bdc5 	b.w	800c258 <_malloc_r>
 80116ce:	b92a      	cbnz	r2, 80116dc <_realloc_r+0x24>
 80116d0:	f7fa fd56 	bl	800c180 <_free_r>
 80116d4:	4625      	mov	r5, r4
 80116d6:	4628      	mov	r0, r5
 80116d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116dc:	f000 f835 	bl	801174a <_malloc_usable_size_r>
 80116e0:	4284      	cmp	r4, r0
 80116e2:	4607      	mov	r7, r0
 80116e4:	d802      	bhi.n	80116ec <_realloc_r+0x34>
 80116e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80116ea:	d812      	bhi.n	8011712 <_realloc_r+0x5a>
 80116ec:	4621      	mov	r1, r4
 80116ee:	4640      	mov	r0, r8
 80116f0:	f7fa fdb2 	bl	800c258 <_malloc_r>
 80116f4:	4605      	mov	r5, r0
 80116f6:	2800      	cmp	r0, #0
 80116f8:	d0ed      	beq.n	80116d6 <_realloc_r+0x1e>
 80116fa:	42bc      	cmp	r4, r7
 80116fc:	4622      	mov	r2, r4
 80116fe:	4631      	mov	r1, r6
 8011700:	bf28      	it	cs
 8011702:	463a      	movcs	r2, r7
 8011704:	f7fe f9f2 	bl	800faec <memcpy>
 8011708:	4631      	mov	r1, r6
 801170a:	4640      	mov	r0, r8
 801170c:	f7fa fd38 	bl	800c180 <_free_r>
 8011710:	e7e1      	b.n	80116d6 <_realloc_r+0x1e>
 8011712:	4635      	mov	r5, r6
 8011714:	e7df      	b.n	80116d6 <_realloc_r+0x1e>
	...

08011718 <_read_r>:
 8011718:	b538      	push	{r3, r4, r5, lr}
 801171a:	4d07      	ldr	r5, [pc, #28]	; (8011738 <_read_r+0x20>)
 801171c:	4604      	mov	r4, r0
 801171e:	4608      	mov	r0, r1
 8011720:	4611      	mov	r1, r2
 8011722:	2200      	movs	r2, #0
 8011724:	602a      	str	r2, [r5, #0]
 8011726:	461a      	mov	r2, r3
 8011728:	f7f1 f9a8 	bl	8002a7c <_read>
 801172c:	1c43      	adds	r3, r0, #1
 801172e:	d102      	bne.n	8011736 <_read_r+0x1e>
 8011730:	682b      	ldr	r3, [r5, #0]
 8011732:	b103      	cbz	r3, 8011736 <_read_r+0x1e>
 8011734:	6023      	str	r3, [r4, #0]
 8011736:	bd38      	pop	{r3, r4, r5, pc}
 8011738:	20000788 	.word	0x20000788

0801173c <abort>:
 801173c:	b508      	push	{r3, lr}
 801173e:	2006      	movs	r0, #6
 8011740:	f000 f834 	bl	80117ac <raise>
 8011744:	2001      	movs	r0, #1
 8011746:	f000 f85d 	bl	8011804 <_exit>

0801174a <_malloc_usable_size_r>:
 801174a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801174e:	1f18      	subs	r0, r3, #4
 8011750:	2b00      	cmp	r3, #0
 8011752:	bfbc      	itt	lt
 8011754:	580b      	ldrlt	r3, [r1, r0]
 8011756:	18c0      	addlt	r0, r0, r3
 8011758:	4770      	bx	lr

0801175a <_raise_r>:
 801175a:	291f      	cmp	r1, #31
 801175c:	b538      	push	{r3, r4, r5, lr}
 801175e:	4604      	mov	r4, r0
 8011760:	460d      	mov	r5, r1
 8011762:	d904      	bls.n	801176e <_raise_r+0x14>
 8011764:	2316      	movs	r3, #22
 8011766:	6003      	str	r3, [r0, #0]
 8011768:	f04f 30ff 	mov.w	r0, #4294967295
 801176c:	bd38      	pop	{r3, r4, r5, pc}
 801176e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011770:	b112      	cbz	r2, 8011778 <_raise_r+0x1e>
 8011772:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011776:	b94b      	cbnz	r3, 801178c <_raise_r+0x32>
 8011778:	4620      	mov	r0, r4
 801177a:	f000 f831 	bl	80117e0 <_getpid_r>
 801177e:	462a      	mov	r2, r5
 8011780:	4601      	mov	r1, r0
 8011782:	4620      	mov	r0, r4
 8011784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011788:	f000 b818 	b.w	80117bc <_kill_r>
 801178c:	2b01      	cmp	r3, #1
 801178e:	d00a      	beq.n	80117a6 <_raise_r+0x4c>
 8011790:	1c59      	adds	r1, r3, #1
 8011792:	d103      	bne.n	801179c <_raise_r+0x42>
 8011794:	2316      	movs	r3, #22
 8011796:	6003      	str	r3, [r0, #0]
 8011798:	2001      	movs	r0, #1
 801179a:	e7e7      	b.n	801176c <_raise_r+0x12>
 801179c:	2400      	movs	r4, #0
 801179e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80117a2:	4628      	mov	r0, r5
 80117a4:	4798      	blx	r3
 80117a6:	2000      	movs	r0, #0
 80117a8:	e7e0      	b.n	801176c <_raise_r+0x12>
	...

080117ac <raise>:
 80117ac:	4b02      	ldr	r3, [pc, #8]	; (80117b8 <raise+0xc>)
 80117ae:	4601      	mov	r1, r0
 80117b0:	6818      	ldr	r0, [r3, #0]
 80117b2:	f7ff bfd2 	b.w	801175a <_raise_r>
 80117b6:	bf00      	nop
 80117b8:	2000002c 	.word	0x2000002c

080117bc <_kill_r>:
 80117bc:	b538      	push	{r3, r4, r5, lr}
 80117be:	4d07      	ldr	r5, [pc, #28]	; (80117dc <_kill_r+0x20>)
 80117c0:	2300      	movs	r3, #0
 80117c2:	4604      	mov	r4, r0
 80117c4:	4608      	mov	r0, r1
 80117c6:	4611      	mov	r1, r2
 80117c8:	602b      	str	r3, [r5, #0]
 80117ca:	f000 f813 	bl	80117f4 <_kill>
 80117ce:	1c43      	adds	r3, r0, #1
 80117d0:	d102      	bne.n	80117d8 <_kill_r+0x1c>
 80117d2:	682b      	ldr	r3, [r5, #0]
 80117d4:	b103      	cbz	r3, 80117d8 <_kill_r+0x1c>
 80117d6:	6023      	str	r3, [r4, #0]
 80117d8:	bd38      	pop	{r3, r4, r5, pc}
 80117da:	bf00      	nop
 80117dc:	20000788 	.word	0x20000788

080117e0 <_getpid_r>:
 80117e0:	f000 b800 	b.w	80117e4 <_getpid>

080117e4 <_getpid>:
 80117e4:	4b02      	ldr	r3, [pc, #8]	; (80117f0 <_getpid+0xc>)
 80117e6:	2258      	movs	r2, #88	; 0x58
 80117e8:	601a      	str	r2, [r3, #0]
 80117ea:	f04f 30ff 	mov.w	r0, #4294967295
 80117ee:	4770      	bx	lr
 80117f0:	20000788 	.word	0x20000788

080117f4 <_kill>:
 80117f4:	4b02      	ldr	r3, [pc, #8]	; (8011800 <_kill+0xc>)
 80117f6:	2258      	movs	r2, #88	; 0x58
 80117f8:	601a      	str	r2, [r3, #0]
 80117fa:	f04f 30ff 	mov.w	r0, #4294967295
 80117fe:	4770      	bx	lr
 8011800:	20000788 	.word	0x20000788

08011804 <_exit>:
 8011804:	e7fe      	b.n	8011804 <_exit>
	...

08011808 <_init>:
 8011808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801180a:	bf00      	nop
 801180c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801180e:	bc08      	pop	{r3}
 8011810:	469e      	mov	lr, r3
 8011812:	4770      	bx	lr

08011814 <_fini>:
 8011814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011816:	bf00      	nop
 8011818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801181a:	bc08      	pop	{r3}
 801181c:	469e      	mov	lr, r3
 801181e:	4770      	bx	lr
