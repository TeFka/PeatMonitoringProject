
stmMother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c8  08013bb8  08013bb8  00023bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c80  08014c80  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  08014c80  08014c80  00024c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c88  08014c88  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c88  08014c88  00024c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c8c  08014c8c  00024c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08014c90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  20000214  08014ea4  00030214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  08014ea4  00030934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020afe  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b58  00000000  00000000  00050d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  000558a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001820  00000000  00000000  000572d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221c8  00000000  00000000  00058af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027741  00000000  00000000  0007acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2767  00000000  00000000  000a2401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164b68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008274  00000000  00000000  00164bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0016ce2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0016ce68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ba0 	.word	0x08013ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	08013ba0 	.word	0x08013ba0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <decodeMeasurementData>:

	*dataSize = iterator;
}

//Function to decode measurement data from bytes
void decodeMeasurementData(struct measurementData* data, uint8_t dataArray[], uint8_t dataSize){
 8000eac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000eb0:	b089      	sub	sp, #36	; 0x24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71fb      	strb	r3, [r7, #7]

	uint64_t measurementValue = 0;
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//add all bytes from array in to the long word
	for(int i = 0;i<dataSize;i++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e022      	b.n	8000f14 <decodeMeasurementData+0x68>
		measurementValue = measurementValue | (((uint64_t)dataArray[i])<<i*8);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4698      	mov	r8, r3
 8000edc:	4691      	mov	r9, r2
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	f1a3 0120 	sub.w	r1, r3, #32
 8000ee6:	f1c3 0220 	rsb	r2, r3, #32
 8000eea:	fa09 f503 	lsl.w	r5, r9, r3
 8000eee:	fa08 f101 	lsl.w	r1, r8, r1
 8000ef2:	430d      	orrs	r5, r1
 8000ef4:	fa28 f202 	lsr.w	r2, r8, r2
 8000ef8:	4315      	orrs	r5, r2
 8000efa:	fa08 f403 	lsl.w	r4, r8, r3
 8000efe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f02:	ea42 0a04 	orr.w	sl, r2, r4
 8000f06:	ea43 0b05 	orr.w	fp, r3, r5
 8000f0a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(int i = 0;i<dataSize;i++){
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbd8      	blt.n	8000ece <decodeMeasurementData+0x22>
	}

	//decode the depth value
	uint8_t depthSign = ((uint8_t)(measurementValue>>depthValueSignShift))&depthValueSignMask;
 8000f1c:	7e3b      	ldrb	r3, [r7, #24]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	74fb      	strb	r3, [r7, #19]
	data->depthValue = ((uint16_t)(measurementValue>>depthValueShift))&depthValueMask;
 8000f24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	0842      	lsrs	r2, r0, #1
 8000f32:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8000f36:	084b      	lsrs	r3, r1, #1
 8000f38:	b293      	uxth	r3, r2
 8000f3a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]
	if(!depthSign) data->depthValue = data->depthValue * -1;
 8000f42:	7cfb      	ldrb	r3, [r7, #19]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d104      	bne.n	8000f52 <decodeMeasurementData+0xa6>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	425a      	negs	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]

	//decode the water pressure value
	data->waterPressureValue = ((uint32_t)(measurementValue>>waterPressureShift))&waterPressureMask;
 8000f52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	0b42      	lsrs	r2, r0, #13
 8000f60:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f64:	0b4b      	lsrs	r3, r1, #13
 8000f66:	4613      	mov	r3, r2
 8000f68:	f3c3 0210 	ubfx	r2, r3, #0, #17
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	605a      	str	r2, [r3, #4]

	//decode surface temperature value
	uint8_t surfaceTemperatureSign = ((uint8_t)(measurementValue>>surfaceTemperatureSignShift))&surfaceTemperatureSignMask;
 8000f70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	0f82      	lsrs	r2, r0, #30
 8000f7e:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8000f82:	0f8b      	lsrs	r3, r1, #30
 8000f84:	b2d3      	uxtb	r3, r2
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	74bb      	strb	r3, [r7, #18]
	data->surfaceTemperatureValue = ((uint16_t)(measurementValue>>surfaceTemperatureShift))&surfaceTemperatureMask;
 8000f8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	0fc2      	lsrs	r2, r0, #31
 8000f9a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000f9e:	0fcb      	lsrs	r3, r1, #31
 8000fa0:	b293      	uxth	r3, r2
 8000fa2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	609a      	str	r2, [r3, #8]
	if(!surfaceTemperatureSign)	data->surfaceTemperatureValue = data->surfaceTemperatureValue * -1;
 8000faa:	7cbb      	ldrb	r3, [r7, #18]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <decodeMeasurementData+0x10e>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	425a      	negs	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	609a      	str	r2, [r3, #8]

	//decode underground temperature value
	uint8_t undergroundTemperatureSign = ((uint8_t)(measurementValue>>undergroundTemperatureSignShift))&undergroundTemperatureSignMask;
 8000fba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	0aca      	lsrs	r2, r1, #11
 8000fc8:	2300      	movs	r3, #0
 8000fca:	b2d3      	uxtb	r3, r2
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	747b      	strb	r3, [r7, #17]
	data->undergroundTemperatureValue = ((uint16_t)(measurementValue>>undergroundTemperatureShift))&undergroundTemperatureMask;
 8000fd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	0b0a      	lsrs	r2, r1, #12
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	b293      	uxth	r3, r2
 8000fe4:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	60da      	str	r2, [r3, #12]
	if(!undergroundTemperatureSign)	data->undergroundTemperatureValue = data->undergroundTemperatureValue * -1;
 8000fec:	7c7b      	ldrb	r3, [r7, #17]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d104      	bne.n	8000ffc <decodeMeasurementData+0x150>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	425a      	negs	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	60da      	str	r2, [r3, #12]

	//decode battery state value
	data->batteryStatus = ((uint8_t)(measurementValue>>batteryStatusShift))&batteryStatusMask;
 8000ffc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	0e0a      	lsrs	r2, r1, #24
 800100a:	2300      	movs	r3, #0
 800100c:	b2d3      	uxtb	r3, r2
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	611a      	str	r2, [r3, #16]

}
 8001016:	bf00      	nop
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001020:	4770      	bx	lr

08001022 <deviceDataDecompression>:
	}

}

//Function to decompress data from long word array in to separate arrays
void deviceDataDecompression(uint64_t largeWords[], uint16_t numberOfValues, uint16_t deviceIds[], uint8_t deviceHops[]){
 8001022:	b480      	push	{r7}
 8001024:	b087      	sub	sp, #28
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	460b      	mov	r3, r1
 8001030:	817b      	strh	r3, [r7, #10]

	//iterate through large word array and retrieve separete values
	for(int i = 0;i<numberOfValues;i++){
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e026      	b.n	8001086 <deviceDataDecompression+0x64>

		//retrieve device ids
		deviceIds[i] = ((uint16_t)(largeWords[i]))&0xFF;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	b291      	uxth	r1, r2
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	b2ca      	uxtb	r2, r1
 8001050:	b292      	uxth	r2, r2
 8001052:	801a      	strh	r2, [r3, #0]
		//retrieve device hops
		deviceHops[i] = ((uint8_t)(largeWords[i]>>16))&0x0F;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	0c02      	lsrs	r2, r0, #16
 800106a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800106e:	0c0b      	lsrs	r3, r1, #16
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	6839      	ldr	r1, [r7, #0]
 8001076:	440b      	add	r3, r1
 8001078:	f002 020f 	and.w	r2, r2, #15
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<numberOfValues;i++){
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	897b      	ldrh	r3, [r7, #10]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	429a      	cmp	r2, r3
 800108c:	dbd4      	blt.n	8001038 <deviceDataDecompression+0x16>

	}

}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <Flash_Erase_Data>:
 */

#include "../Inc/FlashMemoryAccess.h"

//Function to erase data from defined pages
uint32_t Flash_Erase_Data (uint32_t startAddress, uint16_t pages){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;

	//Starting address holder
	uint32_t address = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
	address = startAddress;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	60fb      	str	r3, [r7, #12]

	/* Unlock the Flash to enable the flash control register access *************/
   HAL_FLASH_Unlock();
 80010b0:	f006 fc66 	bl	8007980 <HAL_FLASH_Unlock>
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <Flash_Erase_Data+0x8c>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <Flash_Erase_Data+0x8c>)
 80010ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <Flash_Erase_Data+0x8c>)
 80010c2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80010c6:	611a      	str	r2, [r3, #16]

   /* Erase the user Flash area*/
   if(address<FLASH_BASE || address>FLASH_END-FLASH_PAGE_SIZE) return 0;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80010ce:	d303      	bcc.n	80010d8 <Flash_Erase_Data+0x3c>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4a16      	ldr	r2, [pc, #88]	; (800112c <Flash_Erase_Data+0x90>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d301      	bcc.n	80010dc <Flash_Erase_Data+0x40>
 80010d8:	2300      	movs	r3, #0
 80010da:	e020      	b.n	800111e <Flash_Erase_Data+0x82>

   //uint32_t StartPage = (StartAddress-FLASH_BASE)/FLASH_PAGE_SIZE;
   /* Fill EraseInit structure*/
   EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; //tyep of erasure
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <Flash_Erase_Data+0x94>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
   EraseInitStruct.Page = (address-FLASH_BASE)/FLASH_PAGE_SIZE; //number of pages to erase
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80010e8:	0adb      	lsrs	r3, r3, #11
 80010ea:	4a11      	ldr	r2, [pc, #68]	; (8001130 <Flash_Erase_Data+0x94>)
 80010ec:	6093      	str	r3, [r2, #8]
   EraseInitStruct.NbPages = pages; //number of page to erase
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <Flash_Erase_Data+0x94>)
 80010f2:	60d3      	str	r3, [r2, #12]
   EraseInitStruct.Banks = FLASH_BANK_1; //active memory bank
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <Flash_Erase_Data+0x94>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	605a      	str	r2, [r3, #4]

   //erase the relevant pages that will be used
   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	4619      	mov	r1, r3
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <Flash_Erase_Data+0x94>)
 8001102:	f006 fd2f 	bl	8007b64 <HAL_FLASHEx_Erase>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <Flash_Erase_Data+0x7c>
   {
	 /*Error occurred while page erase.*/
	   HAL_FLASH_Lock();
 800110c:	f006 fc5a 	bl	80079c4 <HAL_FLASH_Lock>
	  return HAL_FLASH_GetError ();
 8001110:	f006 fc68 	bl	80079e4 <HAL_FLASH_GetError>
 8001114:	4603      	mov	r3, r0
 8001116:	e002      	b.n	800111e <Flash_Erase_Data+0x82>
   }
   /* Lock the Flash to disable the flash control register access (recommended
		  to protect the FLASH memory against possible unwanted operation) *********/
   HAL_FLASH_Lock();
 8001118:	f006 fc54 	bl	80079c4 <HAL_FLASH_Lock>

   return HAL_OK;
 800111c:	2300      	movs	r3, #0

}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40022000 	.word	0x40022000
 800112c:	0801f800 	.word	0x0801f800
 8001130:	20000230 	.word	0x20000230

08001134 <Flash_Write_Data>:

//Function to write data at specified address
uint32_t Flash_Write_Data (uint32_t startAddress, uint64_t *data, int numberOfWords)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]

	//Starting address holder
	uint32_t address = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
	address = startAddress;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	61bb      	str	r3, [r7, #24]


	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800114c:	f006 fc18 	bl	8007980 <HAL_FLASH_Unlock>
	   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <Flash_Write_Data+0xd0>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <Flash_Write_Data+0xd0>)
 8001156:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <Flash_Write_Data+0xd0>)
 800115e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001162:	611a      	str	r2, [r3, #16]

	   /* Erase the user Flash area*/
	   if(address<FLASH_BASE || address>FLASH_END-FLASH_PAGE_SIZE) return 0;
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800116a:	d303      	bcc.n	8001174 <Flash_Write_Data+0x40>
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	4a26      	ldr	r2, [pc, #152]	; (8001208 <Flash_Write_Data+0xd4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d301      	bcc.n	8001178 <Flash_Write_Data+0x44>
 8001174:	2300      	movs	r3, #0
 8001176:	e041      	b.n	80011fc <Flash_Write_Data+0xc8>

	   //uint32_t StartPage = (StartAddress-FLASH_BASE)/FLASH_PAGE_SIZE;
	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; //tyep of erasure
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <Flash_Write_Data+0xd8>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.Page = (address-FLASH_BASE)/FLASH_PAGE_SIZE; //number of pages to erase
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001184:	0adb      	lsrs	r3, r3, #11
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <Flash_Write_Data+0xd8>)
 8001188:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages = ((numberOfWords*8)/FLASH_PAGE_SIZE)+1; //number of page to erase
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	0adb      	lsrs	r3, r3, #11
 8001190:	3301      	adds	r3, #1
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <Flash_Write_Data+0xd8>)
 8001194:	60d3      	str	r3, [r2, #12]
	   EraseInitStruct.Banks = FLASH_BANK_1; //active memory bank
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <Flash_Write_Data+0xd8>)
 8001198:	2201      	movs	r2, #1
 800119a:	605a      	str	r2, [r3, #4]

	   //erase the relevant pages that will be used
	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	481a      	ldr	r0, [pc, #104]	; (800120c <Flash_Write_Data+0xd8>)
 80011a4:	f006 fcde 	bl	8007b64 <HAL_FLASHEx_Erase>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01f      	beq.n	80011ee <Flash_Write_Data+0xba>
	   {
		 /*Error occurred while page erase.*/
		   HAL_FLASH_Lock();
 80011ae:	f006 fc09 	bl	80079c4 <HAL_FLASH_Lock>
		  return HAL_FLASH_GetError ();
 80011b2:	f006 fc17 	bl	80079e4 <HAL_FLASH_GetError>
 80011b6:	4603      	mov	r3, r0
 80011b8:	e020      	b.n	80011fc <Flash_Write_Data+0xc8>

	   /* Program the user Flash area word by word*/
	 while (sofar<numberOfWords)
	 {
		 //program a double word to the page one at a time
		 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data[sofar]) == HAL_OK)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	4413      	add	r3, r2
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	2000      	movs	r0, #0
 80011ca:	f006 fb6d 	bl	80078a8 <HAL_FLASH_Program>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <Flash_Write_Data+0xae>
		 {
			 address += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	3308      	adds	r3, #8
 80011d8:	61bb      	str	r3, [r7, #24]
			 sofar++;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	e005      	b.n	80011ee <Flash_Write_Data+0xba>
		 }
		 else{
		     /* Error occurred while writing data in Flash memory*/
			 HAL_FLASH_Lock();
 80011e2:	f006 fbef 	bl	80079c4 <HAL_FLASH_Lock>
			 return HAL_FLASH_GetError ();
 80011e6:	f006 fbfd 	bl	80079e4 <HAL_FLASH_GetError>
 80011ea:	4603      	mov	r3, r0
 80011ec:	e006      	b.n	80011fc <Flash_Write_Data+0xc8>
	 while (sofar<numberOfWords)
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbe1      	blt.n	80011ba <Flash_Write_Data+0x86>
		 }
	 }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80011f6:	f006 fbe5 	bl	80079c4 <HAL_FLASH_Lock>

	   return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40022000 	.word	0x40022000
 8001208:	0801f800 	.word	0x0801f800
 800120c:	20000240 	.word	0x20000240

08001210 <Flash_Read_Data>:

//Function to read data from specified address
void Flash_Read_Data (uint32_t StartPageAddress, uint64_t *RxBuf, uint16_t numberofwords)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	80fb      	strh	r3, [r7, #6]
	//iterate over memory location
	while (1)
	{
		//add value from address to array
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	e9c1 2300 	strd	r2, r3, [r1]
		//increment active address
		StartPageAddress += 8;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3308      	adds	r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
		//increment active array element
		RxBuf++;
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3308      	adds	r3, #8
 8001234:	60bb      	str	r3, [r7, #8]
		//decrement number of words left to read
		numberofwords--;
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	3b01      	subs	r3, #1
 800123a:	80fb      	strh	r3, [r7, #6]
		//stop reading if no more words are needed
		if (!(numberofwords)) break;
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d000      	beq.n	8001244 <Flash_Read_Data+0x34>
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 8001242:	e7ec      	b.n	800121e <Flash_Read_Data+0xe>
		if (!(numberofwords)) break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <addDeviceDataToSD>:
#include <FlashMemoryAccess.h>
#include <retarget.h>
#include <ctype.h>

//Function to add latest device data to SD card
void addDeviceDataToSD(struct CommunicationHandles* handles, struct deviceData* devices, struct timeData* time, int numberOfDevices){
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	f5ad 5d05 	sub.w	sp, sp, #8512	; 0x2140
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af04      	add	r7, sp, #16
 800125e:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 8001262:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
 8001266:	6020      	str	r0, [r4, #0]
 8001268:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 800126c:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
 8001270:	6001      	str	r1, [r0, #0]
 8001272:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001276:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 800127a:	600a      	str	r2, [r1, #0]
 800127c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001280:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8001284:	6013      	str	r3, [r2, #0]

	FATFS fs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres;

	sdData.fs = &fs;
 8001286:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800128a:	f103 0310 	add.w	r3, r3, #16
 800128e:	3b08      	subs	r3, #8
 8001290:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8001294:	6013      	str	r3, [r2, #0]
	sdData.fil = &fil;
 8001296:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800129a:	3b38      	subs	r3, #56	; 0x38
 800129c:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80012a0:	f102 0204 	add.w	r2, r2, #4
 80012a4:	6013      	str	r3, [r2, #0]
	sdData.fres = &fres;
 80012a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012aa:	3b39      	subs	r3, #57	; 0x39
 80012ac:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80012b0:	f102 0208 	add.w	r2, r2, #8
 80012b4:	6013      	str	r3, [r2, #0]

	//Start SD card
	if(setupCard(&sdData)){
 80012b6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fb9e 	bl	80059fc <setupCard>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8215 	beq.w	80016f2 <addDeviceDataToSD+0x49e>

		//iterate through all device data
		for(int i = 0;i<numberOfDevices;i++){
 80012c8:	2300      	movs	r3, #0
 80012ca:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80012ce:	f102 020c 	add.w	r2, r2, #12
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e1f4      	b.n	80016c0 <addDeviceDataToSD+0x46c>

			//check if device was  available
			if(devices[i].deviceStatus){
 80012d6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80012da:	f103 030c 	add.w	r3, r3, #12
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	461a      	mov	r2, r3
 80012ea:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80012ee:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	885b      	ldrh	r3, [r3, #2]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 81bf 	beq.w	800167c <addDeviceDataToSD+0x428>

				char folderName[40];

				char fileName[100];

				sprintf(folderName, "Device_%d", devices[i].deviceID);
 80012fe:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8001302:	f103 030c 	add.w	r3, r3, #12
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	461a      	mov	r2, r3
 8001312:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001316:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4413      	add	r3, r2
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001326:	3b3c      	subs	r3, #60	; 0x3c
 8001328:	49c8      	ldr	r1, [pc, #800]	; (800164c <addDeviceDataToSD+0x3f8>)
 800132a:	4618      	mov	r0, r3
 800132c:	f00f fcce 	bl	8010ccc <siprintf>

				//Add time data
				sprintf(buf, "%d::%d::%d %d/%d/%d\n", time->hours, time->minutes, time->seconds, time->day, time->month, time->year);
 8001330:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001334:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689d      	ldr	r5, [r3, #8]
 800133c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001340:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685e      	ldr	r6, [r3, #4]
 8001348:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800134c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001358:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	68d2      	ldr	r2, [r2, #12]
 8001360:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001364:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8001368:	6809      	ldr	r1, [r1, #0]
 800136a:	6909      	ldr	r1, [r1, #16]
 800136c:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001370:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 8001374:	6800      	ldr	r0, [r0, #0]
 8001376:	6944      	ldr	r4, [r0, #20]
 8001378:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800137c:	3814      	subs	r0, #20
 800137e:	9403      	str	r4, [sp, #12]
 8001380:	9102      	str	r1, [sp, #8]
 8001382:	9201      	str	r2, [sp, #4]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	4633      	mov	r3, r6
 8001388:	462a      	mov	r2, r5
 800138a:	49b1      	ldr	r1, [pc, #708]	; (8001650 <addDeviceDataToSD+0x3fc>)
 800138c:	f00f fc9e 	bl	8010ccc <siprintf>
				sprintf(fileName, "%s/Time.txt", folderName);
 8001390:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001394:	3a3c      	subs	r2, #60	; 0x3c
 8001396:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800139a:	3b20      	subs	r3, #32
 800139c:	49ad      	ldr	r1, [pc, #692]	; (8001654 <addDeviceDataToSD+0x400>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f00f fc94 	bl	8010ccc <siprintf>
				sendSD(&sdData, fileName, buf);
 80013a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013a8:	3a14      	subs	r2, #20
 80013aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013ae:	3b20      	subs	r3, #32
 80013b0:	f507 5005 	add.w	r0, r7, #8512	; 0x2140
 80013b4:	4619      	mov	r1, r3
 80013b6:	f004 facd 	bl	8005954 <sendSD>

				//Add depth data
				sprintf(buf, "%f\n", ((float)devices[i].measurement.depthValue/10));
 80013ba:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80013be:	f103 030c 	add.w	r3, r3, #12
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	461a      	mov	r2, r3
 80013ce:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80013d2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013ec:	ee16 0a90 	vmov	r0, s13
 80013f0:	f7ff f8aa 	bl	8000548 <__aeabi_f2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80013fc:	3814      	subs	r0, #20
 80013fe:	4996      	ldr	r1, [pc, #600]	; (8001658 <addDeviceDataToSD+0x404>)
 8001400:	f00f fc64 	bl	8010ccc <siprintf>
				sprintf(fileName, "%s/DepthChange(mm).txt", folderName);
 8001404:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001408:	3a3c      	subs	r2, #60	; 0x3c
 800140a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800140e:	3b20      	subs	r3, #32
 8001410:	4992      	ldr	r1, [pc, #584]	; (800165c <addDeviceDataToSD+0x408>)
 8001412:	4618      	mov	r0, r3
 8001414:	f00f fc5a 	bl	8010ccc <siprintf>
				sendSD(&sdData, fileName, buf);
 8001418:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800141c:	3a14      	subs	r2, #20
 800141e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001422:	3b20      	subs	r3, #32
 8001424:	f507 5005 	add.w	r0, r7, #8512	; 0x2140
 8001428:	4619      	mov	r1, r3
 800142a:	f004 fa93 	bl	8005954 <sendSD>

				//Add pressure data
				sprintf(buf, "%d\n", devices[i].measurement.waterPressureValue);
 800142e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8001432:	f103 030c 	add.w	r3, r3, #12
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	1a9b      	subs	r3, r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	461a      	mov	r2, r3
 8001442:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001446:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4413      	add	r3, r2
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001454:	3b14      	subs	r3, #20
 8001456:	4982      	ldr	r1, [pc, #520]	; (8001660 <addDeviceDataToSD+0x40c>)
 8001458:	4618      	mov	r0, r3
 800145a:	f00f fc37 	bl	8010ccc <siprintf>
				sprintf(fileName, "%s/PressureValue(Pa).txt", folderName);
 800145e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001462:	3a3c      	subs	r2, #60	; 0x3c
 8001464:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001468:	3b20      	subs	r3, #32
 800146a:	497e      	ldr	r1, [pc, #504]	; (8001664 <addDeviceDataToSD+0x410>)
 800146c:	4618      	mov	r0, r3
 800146e:	f00f fc2d 	bl	8010ccc <siprintf>
				sendSD(&sdData, fileName, buf);
 8001472:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001476:	3a14      	subs	r2, #20
 8001478:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800147c:	3b20      	subs	r3, #32
 800147e:	f507 5005 	add.w	r0, r7, #8512	; 0x2140
 8001482:	4619      	mov	r1, r3
 8001484:	f004 fa66 	bl	8005954 <sendSD>

				//Add underground temperature data
				sprintf(buf, "%f\n", ((float)devices[i].measurement.undergroundTemperatureValue/100));
 8001488:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800148c:	f103 030c 	add.w	r3, r3, #12
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	1a9b      	subs	r3, r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	461a      	mov	r2, r3
 800149c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80014a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001668 <addDeviceDataToSD+0x414>
 80014b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014ba:	ee16 0a90 	vmov	r0, s13
 80014be:	f7ff f843 	bl	8000548 <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80014ca:	3814      	subs	r0, #20
 80014cc:	4962      	ldr	r1, [pc, #392]	; (8001658 <addDeviceDataToSD+0x404>)
 80014ce:	f00f fbfd 	bl	8010ccc <siprintf>
				sprintf(fileName, "%s/UndergroundTemperature(deg).txt", folderName);
 80014d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014d6:	3a3c      	subs	r2, #60	; 0x3c
 80014d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014dc:	3b20      	subs	r3, #32
 80014de:	4963      	ldr	r1, [pc, #396]	; (800166c <addDeviceDataToSD+0x418>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00f fbf3 	bl	8010ccc <siprintf>
				sendSD(&sdData, fileName, buf);
 80014e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014ea:	3a14      	subs	r2, #20
 80014ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014f0:	3b20      	subs	r3, #32
 80014f2:	f507 5005 	add.w	r0, r7, #8512	; 0x2140
 80014f6:	4619      	mov	r1, r3
 80014f8:	f004 fa2c 	bl	8005954 <sendSD>

				//Add surface temperature data
				sprintf(buf, "%f\n", ((float)devices[i].measurement.surfaceTemperatureValue/100));
 80014fc:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8001500:	f103 030c 	add.w	r3, r3, #12
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	461a      	mov	r2, r3
 8001510:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001514:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001668 <addDeviceDataToSD+0x414>
 800152a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800152e:	ee16 0a90 	vmov	r0, s13
 8001532:	f7ff f809 	bl	8000548 <__aeabi_f2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800153e:	3814      	subs	r0, #20
 8001540:	4945      	ldr	r1, [pc, #276]	; (8001658 <addDeviceDataToSD+0x404>)
 8001542:	f00f fbc3 	bl	8010ccc <siprintf>
				sprintf(fileName, "%s/SurfaceTemperature(deg).txt", folderName);
 8001546:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800154a:	3a3c      	subs	r2, #60	; 0x3c
 800154c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001550:	3b20      	subs	r3, #32
 8001552:	4947      	ldr	r1, [pc, #284]	; (8001670 <addDeviceDataToSD+0x41c>)
 8001554:	4618      	mov	r0, r3
 8001556:	f00f fbb9 	bl	8010ccc <siprintf>
				sendSD(&sdData, fileName, buf);
 800155a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800155e:	3a14      	subs	r2, #20
 8001560:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001564:	3b20      	subs	r3, #32
 8001566:	f507 5005 	add.w	r0, r7, #8512	; 0x2140
 800156a:	4619      	mov	r1, r3
 800156c:	f004 f9f2 	bl	8005954 <sendSD>

				//Check if battery of the device became depleted
				if(devices[i].measurement.batteryStatus == 2){
 8001570:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8001574:	f103 030c 	add.w	r3, r3, #12
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	461a      	mov	r2, r3
 8001584:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001588:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d12b      	bne.n	80015ee <addDeviceDataToSD+0x39a>
					printf("\r\nadding low battery Device");
 8001596:	4837      	ldr	r0, [pc, #220]	; (8001674 <addDeviceDataToSD+0x420>)
 8001598:	f00f fa92 	bl	8010ac0 <iprintf>

					//Add a low battery device to SD card
					addLowBatteryDeviceToSD(&sdData, devices[i].deviceID);
 800159c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80015a0:	f103 030c 	add.w	r3, r3, #12
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	461a      	mov	r2, r3
 80015b0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80015b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fe47 	bl	8003258 <addLowBatteryDeviceToSD>

					//Set batttery status to zero
					devices[i].measurement.batteryStatus = 0;
 80015ca:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80015ce:	f103 030c 	add.w	r3, r3, #12
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	461a      	mov	r2, r3
 80015de:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80015e2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
				}

				//Add battery status data
				sprintf(buf, "%d\n", devices[i].measurement.batteryStatus);
 80015ee:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80015f2:	f103 030c 	add.w	r3, r3, #12
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	461a      	mov	r2, r3
 8001602:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001606:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4413      	add	r3, r2
 800160e:	699a      	ldr	r2, [r3, #24]
 8001610:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001614:	3b14      	subs	r3, #20
 8001616:	4912      	ldr	r1, [pc, #72]	; (8001660 <addDeviceDataToSD+0x40c>)
 8001618:	4618      	mov	r0, r3
 800161a:	f00f fb57 	bl	8010ccc <siprintf>
				sprintf(fileName, "%s/BatteryStatus.txt", folderName);
 800161e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001622:	3a3c      	subs	r2, #60	; 0x3c
 8001624:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001628:	3b20      	subs	r3, #32
 800162a:	4913      	ldr	r1, [pc, #76]	; (8001678 <addDeviceDataToSD+0x424>)
 800162c:	4618      	mov	r0, r3
 800162e:	f00f fb4d 	bl	8010ccc <siprintf>
				sendSD(&sdData, fileName, buf);
 8001632:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001636:	3a14      	subs	r2, #20
 8001638:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800163c:	3b20      	subs	r3, #32
 800163e:	f507 5005 	add.w	r0, r7, #8512	; 0x2140
 8001642:	4619      	mov	r1, r3
 8001644:	f004 f986 	bl	8005954 <sendSD>
 8001648:	e02f      	b.n	80016aa <addDeviceDataToSD+0x456>
 800164a:	bf00      	nop
 800164c:	08013bb8 	.word	0x08013bb8
 8001650:	08013bc4 	.word	0x08013bc4
 8001654:	08013bdc 	.word	0x08013bdc
 8001658:	08013be8 	.word	0x08013be8
 800165c:	08013bec 	.word	0x08013bec
 8001660:	08013c04 	.word	0x08013c04
 8001664:	08013c08 	.word	0x08013c08
 8001668:	42c80000 	.word	0x42c80000
 800166c:	08013c24 	.word	0x08013c24
 8001670:	08013c48 	.word	0x08013c48
 8001674:	08013c68 	.word	0x08013c68
 8001678:	08013c84 	.word	0x08013c84
			}
			else{
				addBrokenDeviceToSD(&sdData, devices[i].deviceID);
 800167c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8001680:	f103 030c 	add.w	r3, r3, #12
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	461a      	mov	r2, r3
 8001690:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001694:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	881a      	ldrh	r2, [r3, #0]
 800169e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 fdb5 	bl	8003214 <addBrokenDeviceToSD>
		for(int i = 0;i<numberOfDevices;i++){
 80016aa:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80016ae:	f103 030c 	add.w	r3, r3, #12
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80016ba:	f102 020c 	add.w	r2, r2, #12
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80016c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016c8:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80016cc:	f102 020c 	add.w	r2, r2, #12
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f6ff adfe 	blt.w	80012d6 <addDeviceDataToSD+0x82>
			}
		}

		//Close SD card
		if(!stopCard(&sdData)){
 80016da:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80016de:	4618      	mov	r0, r3
 80016e0:	f004 f9a8 	bl	8005a34 <stopCard>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d106      	bne.n	80016f8 <addDeviceDataToSD+0x4a4>

			printf("\r\nSD stop error");
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <addDeviceDataToSD+0x4b0>)
 80016ec:	f00f f9e8 	bl	8010ac0 <iprintf>
	else{

		printf("\r\nSD start error");

	}
}
 80016f0:	e002      	b.n	80016f8 <addDeviceDataToSD+0x4a4>
		printf("\r\nSD start error");
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <addDeviceDataToSD+0x4b4>)
 80016f4:	f00f f9e4 	bl	8010ac0 <iprintf>
}
 80016f8:	bf00      	nop
 80016fa:	f507 5705 	add.w	r7, r7, #8512	; 0x2140
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001704:	08013c9c 	.word	0x08013c9c
 8001708:	08013cac 	.word	0x08013cac

0800170c <requestRFData>:

//Function request  measurement data of sepcified device over RF
void requestRFData(struct CommunicationHandles* handles, struct deviceData* device, struct rfDataStorage* rfData){
 800170c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001710:	b08e      	sub	sp, #56	; 0x38
 8001712:	af02      	add	r7, sp, #8
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]

	//Define message to send
	rfData->activeTxMessageSize = 0;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	22fe      	movs	r2, #254	; 0xfe
 8001726:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_GIVE_DATA;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2247      	movs	r2, #71	; 0x47
 800172e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_TO_ID_POS1] = device->deviceID&0xFF;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = (rfData->myDevice.device_id>>8)&0xFF;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	889b      	ldrh	r3, [r3, #4]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	b29b      	uxth	r3, r3
 8001746:	b2da      	uxtb	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0xFF;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = (rfData->myDevice.device_id>>8)&0xFF;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	889b      	ldrh	r3, [r3, #4]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = device->deviceHops;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	889b      	ldrh	r3, [r3, #4]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	int requestSuccessful = false;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Perform 3 attempts to request data
	for(int t = 0;t<3;t++){
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
 8001792:	e13a      	b.n	8001a0a <requestRFData+0x2fe>

		//Check if request was successful
		if(!requestSuccessful){
 8001794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 8134 	bne.w	8001a04 <requestRFData+0x2f8>

			int listeningCounter = 50;
 800179c:	2332      	movs	r3, #50	; 0x32
 800179e:	61bb      	str	r3, [r7, #24]

			//Send request for data from child device
			Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f103 0299 	add.w	r2, r3, #153	; 0x99
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017ac:	3309      	adds	r3, #9
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4619      	mov	r1, r3
 80017b2:	4610      	mov	r0, r2
 80017b4:	f003 ffc0 	bl	8005738 <Send>

			printf("\r\nScanning for %d", device->deviceID);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	489a      	ldr	r0, [pc, #616]	; (8001a28 <requestRFData+0x31c>)
 80017c0:	f00f f97e 	bl	8010ac0 <iprintf>

			//wait for specified amount of time
			for(int c = 0;c<listeningCounter;c++){
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
 80017c8:	e115      	b.n	80019f6 <requestRFData+0x2ea>

				//Handle received messages
				Comms_Handler(rfData);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f003 fb30 	bl	8004e30 <Comms_Handler>

				//iterate over potential messages list
				for(int i = 0; i<rfData->messageNum; i++){
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
 80017d4:	e0fe      	b.n	80019d4 <requestRFData+0x2c8>
					printf("\r\nmessage %d type: %x", i, rfData->activeRxMessage[i][MSG_TYPE_POS]);
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	6a3a      	ldr	r2, [r7, #32]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	33af      	adds	r3, #175	; 0xaf
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	6a39      	ldr	r1, [r7, #32]
 80017ec:	488f      	ldr	r0, [pc, #572]	; (8001a2c <requestRFData+0x320>)
 80017ee:	f00f f967 	bl	8010ac0 <iprintf>

					//Check if a "I am here" mesasge was received
					if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_IM_HERE){
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	6a3a      	ldr	r2, [r7, #32]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	33af      	adds	r3, #175	; 0xaf
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b43      	cmp	r3, #67	; 0x43
 8001806:	d145      	bne.n	8001894 <requestRFData+0x188>
						if(rfData->newDevices.currentNumOfDevices<DEVICE_LIMIT){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800180e:	2b63      	cmp	r3, #99	; 0x63
 8001810:	d840      	bhi.n	8001894 <requestRFData+0x188>
							printf("\r\nNew device found %d", rfData->fromID[i]);
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	3340      	adds	r3, #64	; 0x40
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	889b      	ldrh	r3, [r3, #4]
 800181e:	4619      	mov	r1, r3
 8001820:	4883      	ldr	r0, [pc, #524]	; (8001a30 <requestRFData+0x324>)
 8001822:	f00f f94d 	bl	8010ac0 <iprintf>

							//Send back acknowledgement of devices
							acknowledgeDevice(rfData->fromID[i], handles, rfData);
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	3340      	adds	r3, #64	; 0x40
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	889b      	ldrh	r3, [r3, #4]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68f9      	ldr	r1, [r7, #12]
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fe2e 	bl	8002498 <acknowledgeDevice>

							//Save new device data
							rfData->newDevices.newDevices[rfData->newDevices.numOfNewDevices] = rfData->fromID[i];
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001842:	4618      	mov	r0, r3
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	3340      	adds	r3, #64	; 0x40
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	8899      	ldrh	r1, [r3, #4]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	460a      	mov	r2, r1
 800185c:	811a      	strh	r2, [r3, #8]
							rfData->newDevices.newDevicesHops[rfData->newDevices.numOfNewDevices] = rfData->activeRxMessage[i][MSG_NUM_HOPS_POS]+1;
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	6a3a      	ldr	r2, [r7, #32]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	33b4      	adds	r3, #180	; 0xb4
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 8001876:	4611      	mov	r1, r2
 8001878:	3301      	adds	r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	440b      	add	r3, r1
 8001880:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
							rfData->newDevices.numOfNewDevices++;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800188a:	3301      	adds	r3, #1
 800188c:	b2da      	uxtb	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
						}
					}

					//Check if data message was provided
					if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_SEND_DATA){
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	6a3a      	ldr	r2, [r7, #32]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	33af      	adds	r3, #175	; 0xaf
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b46      	cmp	r3, #70	; 0x46
 80018a8:	f040 8091 	bne.w	80019ce <requestRFData+0x2c2>
						//Check if request came from scanned device
						if(rfData->fromID[i] == device->deviceID){
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	3340      	adds	r3, #64	; 0x40
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	889a      	ldrh	r2, [r3, #4]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	f040 8086 	bne.w	80019ce <requestRFData+0x2c2>
 80018c2:	466b      	mov	r3, sp
 80018c4:	469a      	mov	sl, r3
							printf("got scan reply from: %d", device->deviceID);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4859      	ldr	r0, [pc, #356]	; (8001a34 <requestRFData+0x328>)
 80018ce:	f00f f8f7 	bl	8010ac0 <iprintf>
							//Confirm that request was succeful
							requestSuccessful = true;
 80018d2:	2301      	movs	r3, #1
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
							device->deviceStatus = 1;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2201      	movs	r2, #1
 80018da:	805a      	strh	r2, [r3, #2]
							printf("\r\ndecoding data");
 80018dc:	4856      	ldr	r0, [pc, #344]	; (8001a38 <requestRFData+0x32c>)
 80018de:	f00f f8ef 	bl	8010ac0 <iprintf>

							//retrieve data from device
							uint8_t allData[rfData->activeRxMessage[i][MSG_SIZE_POS]];
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	6a3a      	ldr	r2, [r7, #32]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	33b6      	adds	r3, #182	; 0xb6
 80018f2:	7819      	ldrb	r1, [r3, #0]
 80018f4:	460b      	mov	r3, r1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	b2cb      	uxtb	r3, r1
 80018fc:	2200      	movs	r2, #0
 80018fe:	461c      	mov	r4, r3
 8001900:	4615      	mov	r5, r2
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	00eb      	lsls	r3, r5, #3
 800190c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001910:	00e2      	lsls	r2, r4, #3
 8001912:	b2cb      	uxtb	r3, r1
 8001914:	2200      	movs	r2, #0
 8001916:	4698      	mov	r8, r3
 8001918:	4691      	mov	r9, r2
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800192a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800192e:	460b      	mov	r3, r1
 8001930:	3307      	adds	r3, #7
 8001932:	08db      	lsrs	r3, r3, #3
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	ebad 0d03 	sub.w	sp, sp, r3
 800193a:	ab02      	add	r3, sp, #8
 800193c:	3300      	adds	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
							for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n++){
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	e014      	b.n	8001970 <requestRFData+0x264>

									allData[n] = rfData->activeRxMessage[i][n+MSG_BODY_START];
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f103 0109 	add.w	r1, r3, #9
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	6a3a      	ldr	r2, [r7, #32]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4403      	add	r3, r0
 800195a:	440b      	add	r3, r1
 800195c:	33ae      	adds	r3, #174	; 0xae
 800195e:	7819      	ldrb	r1, [r3, #0]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	460a      	mov	r2, r1
 8001968:	701a      	strb	r2, [r3, #0]
							for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n++){
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3301      	adds	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	6a3a      	ldr	r2, [r7, #32]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	33b6      	adds	r3, #182	; 0xb6
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4293      	cmp	r3, r2
 8001988:	dbdd      	blt.n	8001946 <requestRFData+0x23a>

							}

							//Decode the received data
							decodeMeasurementData(&(device->measurement), allData, rfData->activeRxMessage[i][MSG_SIZE_POS]);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f103 0008 	add.w	r0, r3, #8
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	6a3a      	ldr	r2, [r7, #32]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	33b6      	adds	r3, #182	; 0xb6
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	6939      	ldr	r1, [r7, #16]
 80019a6:	f7ff fa81 	bl	8000eac <decodeMeasurementData>

							//Print received data
							printf("\r\nResulting measurement data: %d, %d, %d, %d, %d",
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	6899      	ldr	r1, [r3, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	68d8      	ldr	r0, [r3, #12]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	691e      	ldr	r6, [r3, #16]
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	6992      	ldr	r2, [r2, #24]
 80019be:	9201      	str	r2, [sp, #4]
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	4633      	mov	r3, r6
 80019c4:	4602      	mov	r2, r0
 80019c6:	481d      	ldr	r0, [pc, #116]	; (8001a3c <requestRFData+0x330>)
 80019c8:	f00f f87a 	bl	8010ac0 <iprintf>
 80019cc:	46d5      	mov	sp, sl
				for(int i = 0; i<rfData->messageNum; i++){
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	3301      	adds	r3, #1
 80019d2:	623b      	str	r3, [r7, #32]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80019da:	461a      	mov	r2, r3
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	4293      	cmp	r3, r2
 80019e0:	f6ff aef9 	blt.w	80017d6 <requestRFData+0xca>
						}
					}
				}

				//Stop scanning for device if request successful
				if(requestSuccessful) break;
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10b      	bne.n	8001a02 <requestRFData+0x2f6>

				HAL_Delay(200);
 80019ea:	20c8      	movs	r0, #200	; 0xc8
 80019ec:	f004 fde2 	bl	80065b4 <HAL_Delay>
			for(int c = 0;c<listeningCounter;c++){
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3301      	adds	r3, #1
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	f6ff aee5 	blt.w	80017ca <requestRFData+0xbe>
 8001a00:	e000      	b.n	8001a04 <requestRFData+0x2f8>
				if(requestSuccessful) break;
 8001a02:	bf00      	nop
	for(int t = 0;t<3;t++){
 8001a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a06:	3301      	adds	r3, #1
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	f77f aec1 	ble.w	8001794 <requestRFData+0x88>
			}
		}
	}

	//Set device as lost if request was unsuccessful
	if(!requestSuccessful){
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <requestRFData+0x312>
		device->deviceStatus = 0;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	805a      	strh	r2, [r3, #2]
	}

}
 8001a1e:	bf00      	nop
 8001a20:	3730      	adds	r7, #48	; 0x30
 8001a22:	46bd      	mov	sp, r7
 8001a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a28:	08013cc0 	.word	0x08013cc0
 8001a2c:	08013cd4 	.word	0x08013cd4
 8001a30:	08013cec 	.word	0x08013cec
 8001a34:	08013d04 	.word	0x08013d04
 8001a38:	08013d1c 	.word	0x08013d1c
 8001a3c:	08013d2c 	.word	0x08013d2c

08001a40 <scanDeviceForData>:

//Function to perform a scan of all devices connected to mother device
void scanDeviceForData(struct rfDataStorage* rfData, struct CommunicationHandles* handles, struct timeData* time){
 8001a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a44:	b0cd      	sub	sp, #308	; 0x134
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8001a4c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8001a50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001a54:	466b      	mov	r3, sp
 8001a56:	461e      	mov	r6, r3

	printf("\r\nScanning devices");
 8001a58:	48ef      	ldr	r0, [pc, #956]	; (8001e18 <scanDeviceForData+0x3d8>)
 8001a5a:	f00f f831 	bl	8010ac0 <iprintf>

	//get device number
	uint64_t deviceNum[1];
	Flash_Read_Data(numberOfDevicesAddress, deviceNum, 1);
 8001a5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a62:	2201      	movs	r2, #1
 8001a64:	4619      	mov	r1, r3
 8001a66:	48ed      	ldr	r0, [pc, #948]	; (8001e1c <scanDeviceForData+0x3dc>)
 8001a68:	f7ff fbd2 	bl	8001210 <Flash_Read_Data>

	//get device data
	uint64_t deviceInfo[deviceNum[0]+1];
 8001a6c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001a70:	f112 0a01 	adds.w	sl, r2, #1
 8001a74:	f143 0b00 	adc.w	fp, r3, #0
 8001a78:	4653      	mov	r3, sl
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a80:	4652      	mov	r2, sl
 8001a82:	2300      	movs	r3, #0
 8001a84:	4614      	mov	r4, r2
 8001a86:	461d      	mov	r5, r3
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	01ab      	lsls	r3, r5, #6
 8001a92:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001a96:	01a2      	lsls	r2, r4, #6
 8001a98:	4652      	mov	r2, sl
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	4690      	mov	r8, r2
 8001a9e:	4699      	mov	r9, r3
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001aac:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ab0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ab4:	4653      	mov	r3, sl
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	3307      	adds	r3, #7
 8001aba:	08db      	lsrs	r3, r3, #3
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	ebad 0d03 	sub.w	sp, sp, r3
 8001ac2:	466b      	mov	r3, sp
 8001ac4:	3307      	adds	r3, #7
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	Flash_Read_Data(deviceIDListStartAddress, deviceInfo,  deviceNum[0]);
 8001ace:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001ad2:	b293      	uxth	r3, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001ada:	48d1      	ldr	r0, [pc, #836]	; (8001e20 <scanDeviceForData+0x3e0>)
 8001adc:	f7ff fb98 	bl	8001210 <Flash_Read_Data>

	//get device IDs
	uint16_t deviceIds[deviceNum[0]+1];
 8001ae0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001ae4:	1c51      	adds	r1, r2, #1
 8001ae6:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001aea:	f143 0300 	adc.w	r3, r3, #0
 8001aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001af2:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8001af6:	4623      	mov	r3, r4
 8001af8:	3b01      	subs	r3, #1
 8001afa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001afe:	4622      	mov	r2, r4
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8001b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8001b16:	4649      	mov	r1, r9
 8001b18:	010b      	lsls	r3, r1, #4
 8001b1a:	4641      	mov	r1, r8
 8001b1c:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8001b20:	4641      	mov	r1, r8
 8001b22:	010a      	lsls	r2, r1, #4
 8001b24:	4622      	mov	r2, r4
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	010b      	lsls	r3, r1, #4
 8001b40:	4641      	mov	r1, r8
 8001b42:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8001b46:	4641      	mov	r1, r8
 8001b48:	010a      	lsls	r2, r1, #4
 8001b4a:	4623      	mov	r3, r4
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	3307      	adds	r3, #7
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	ebad 0d03 	sub.w	sp, sp, r3
 8001b58:	466b      	mov	r3, sp
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	uint8_t deviceHops[deviceNum[0]+1];
 8001b64:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001b68:	1c51      	adds	r1, r2, #1
 8001b6a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001b6e:	f143 0300 	adc.w	r3, r3, #0
 8001b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b76:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b82:	4622      	mov	r2, r4
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001b9a:	4649      	mov	r1, r9
 8001b9c:	00cb      	lsls	r3, r1, #3
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ba4:	4641      	mov	r1, r8
 8001ba6:	00ca      	lsls	r2, r1, #3
 8001ba8:	4622      	mov	r2, r4
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001bb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001bc0:	4649      	mov	r1, r9
 8001bc2:	00cb      	lsls	r3, r1, #3
 8001bc4:	4641      	mov	r1, r8
 8001bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bca:	4641      	mov	r1, r8
 8001bcc:	00ca      	lsls	r2, r1, #3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	3307      	adds	r3, #7
 8001bd2:	08db      	lsrs	r3, r3, #3
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	ebad 0d03 	sub.w	sp, sp, r3
 8001bda:	466b      	mov	r3, sp
 8001bdc:	3300      	adds	r3, #0
 8001bde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	//Decompress device information
	deviceDataDecompression(deviceInfo, deviceNum[0], deviceIds, deviceHops);
 8001be2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001be6:	b291      	uxth	r1, r2
 8001be8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001bec:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001bf0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001bf4:	f7ff fa15 	bl	8001022 <deviceDataDecompression>

	//retrieve battery statuses
	uint64_t deviceLowBatteryStatuses[(deviceNum[0]/64)+1];
 8001bf8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001bfc:	f04f 0000 	mov.w	r0, #0
 8001c00:	f04f 0100 	mov.w	r1, #0
 8001c04:	0990      	lsrs	r0, r2, #6
 8001c06:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8001c0a:	0999      	lsrs	r1, r3, #6
 8001c0c:	1c43      	adds	r3, r0, #1
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	f141 0300 	adc.w	r3, r1, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c22:	4622      	mov	r2, r4
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	018b      	lsls	r3, r1, #6
 8001c3e:	4641      	mov	r1, r8
 8001c40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c44:	4641      	mov	r1, r8
 8001c46:	018a      	lsls	r2, r1, #6
 8001c48:	4622      	mov	r2, r4
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8001c60:	4649      	mov	r1, r9
 8001c62:	018b      	lsls	r3, r1, #6
 8001c64:	4641      	mov	r1, r8
 8001c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	018a      	lsls	r2, r1, #6
 8001c6e:	4623      	mov	r3, r4
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	3307      	adds	r3, #7
 8001c74:	08db      	lsrs	r3, r3, #3
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	ebad 0d03 	sub.w	sp, sp, r3
 8001c7c:	466b      	mov	r3, sp
 8001c7e:	3307      	adds	r3, #7
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	Flash_Read_Data(deviceLowBatteryStatusStartAddress, deviceLowBatteryStatuses, (deviceNum[0]/64)+1);
 8001c88:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001c8c:	f04f 0000 	mov.w	r0, #0
 8001c90:	f04f 0100 	mov.w	r1, #0
 8001c94:	0990      	lsrs	r0, r2, #6
 8001c96:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8001c9a:	0999      	lsrs	r1, r3, #6
 8001c9c:	b283      	uxth	r3, r0
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001ca8:	485e      	ldr	r0, [pc, #376]	; (8001e24 <scanDeviceForData+0x3e4>)
 8001caa:	f7ff fab1 	bl	8001210 <Flash_Read_Data>

	uint64_t deviceSeparateLowBatteryStatuses[deviceNum[0]+1];
 8001cae:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001cb2:	1c51      	adds	r1, r2, #1
 8001cb4:	6139      	str	r1, [r7, #16]
 8001cb6:	f143 0300 	adc.w	r3, r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001cc0:	4623      	mov	r3, r4
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001cc8:	4622      	mov	r2, r4
 8001cca:	2300      	movs	r3, #0
 8001ccc:	67ba      	str	r2, [r7, #120]	; 0x78
 8001cce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001cdc:	4649      	mov	r1, r9
 8001cde:	018b      	lsls	r3, r1, #6
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ce6:	4641      	mov	r1, r8
 8001ce8:	018a      	lsls	r2, r1, #6
 8001cea:	4622      	mov	r2, r4
 8001cec:	2300      	movs	r3, #0
 8001cee:	673a      	str	r2, [r7, #112]	; 0x70
 8001cf0:	677b      	str	r3, [r7, #116]	; 0x74
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001cfe:	4649      	mov	r1, r9
 8001d00:	018b      	lsls	r3, r1, #6
 8001d02:	4641      	mov	r1, r8
 8001d04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d08:	4641      	mov	r1, r8
 8001d0a:	018a      	lsls	r2, r1, #6
 8001d0c:	4623      	mov	r3, r4
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	3307      	adds	r3, #7
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	ebad 0d03 	sub.w	sp, sp, r3
 8001d1a:	466b      	mov	r3, sp
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	//Placeholders for devices to remove
	uint16_t lostDevices[deviceNum[0]];
 8001d26:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001d32:	4602      	mov	r2, r0
 8001d34:	2300      	movs	r3, #0
 8001d36:	66ba      	str	r2, [r7, #104]	; 0x68
 8001d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001d46:	464c      	mov	r4, r9
 8001d48:	0123      	lsls	r3, r4, #4
 8001d4a:	4644      	mov	r4, r8
 8001d4c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001d50:	4644      	mov	r4, r8
 8001d52:	0122      	lsls	r2, r4, #4
 8001d54:	4602      	mov	r2, r0
 8001d56:	2300      	movs	r3, #0
 8001d58:	663a      	str	r2, [r7, #96]	; 0x60
 8001d5a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001d68:	464c      	mov	r4, r9
 8001d6a:	0123      	lsls	r3, r4, #4
 8001d6c:	4644      	mov	r4, r8
 8001d6e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001d72:	4644      	mov	r4, r8
 8001d74:	0122      	lsls	r2, r4, #4
 8001d76:	4603      	mov	r3, r0
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	3307      	adds	r3, #7
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	ebad 0d03 	sub.w	sp, sp, r3
 8001d84:	466b      	mov	r3, sp
 8001d86:	3301      	adds	r3, #1
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    uint8_t lostDevicesNum = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	struct deviceData allDeviceData[deviceNum[0]];
 8001d96:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001da2:	4622      	mov	r2, r4
 8001da4:	2300      	movs	r3, #0
 8001da6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001daa:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8001dae:	4642      	mov	r2, r8
 8001db0:	464b      	mov	r3, r9
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	00d9      	lsls	r1, r3, #3
 8001dbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dc0:	00d0      	lsls	r0, r2, #3
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	1a51      	subs	r1, r2, r1
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	4649      	mov	r1, r9
 8001dce:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001de0:	4649      	mov	r1, r9
 8001de2:	014b      	lsls	r3, r1, #5
 8001de4:	4641      	mov	r1, r8
 8001de6:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001dea:	4641      	mov	r1, r8
 8001dec:	014a      	lsls	r2, r1, #5
 8001dee:	4622      	mov	r2, r4
 8001df0:	2300      	movs	r3, #0
 8001df2:	653a      	str	r2, [r7, #80]	; 0x50
 8001df4:	657b      	str	r3, [r7, #84]	; 0x54
 8001df6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001dfa:	4642      	mov	r2, r8
 8001dfc:	464b      	mov	r3, r9
 8001dfe:	f04f 0000 	mov.w	r0, #0
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	00d9      	lsls	r1, r3, #3
 8001e08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e0c:	00d0      	lsls	r0, r2, #3
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4641      	mov	r1, r8
 8001e14:	1a51      	subs	r1, r2, r1
 8001e16:	e007      	b.n	8001e28 <scanDeviceForData+0x3e8>
 8001e18:	08013d60 	.word	0x08013d60
 8001e1c:	0801b000 	.word	0x0801b000
 8001e20:	0801b008 	.word	0x0801b008
 8001e24:	0801a000 	.word	0x0801a000
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	4649      	mov	r1, r9
 8001e2c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001e3e:	4649      	mov	r1, r9
 8001e40:	014b      	lsls	r3, r1, #5
 8001e42:	4641      	mov	r1, r8
 8001e44:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001e48:	4641      	mov	r1, r8
 8001e4a:	014a      	lsls	r2, r1, #5
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	3307      	adds	r3, #7
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	ebad 0d03 	sub.w	sp, sp, r3
 8001e60:	466b      	mov	r3, sp
 8001e62:	3303      	adds	r3, #3
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	printf("Devices to scan: %d", (uint16_t)deviceNum[0]);
 8001e6c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001e70:	b293      	uxth	r3, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	48ab      	ldr	r0, [pc, #684]	; (8002124 <scanDeviceForData+0x6e4>)
 8001e76:	f00e fe23 	bl	8010ac0 <iprintf>
	//Retrieve separate battery statuses
	for(int i = 0;i< deviceNum[0];i++){
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001e80:	e078      	b.n	8001f74 <scanDeviceForData+0x534>

		//Add device IDs
		allDeviceData[i].deviceID = deviceIds[i];
 8001e82:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001e86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e8a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001e8e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001e92:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	18ca      	adds	r2, r1, r3
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	8013      	strh	r3, [r2, #0]
		//Add device hops
		allDeviceData[i].deviceHops = deviceHops[i];
 8001ea4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001ea8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b298      	uxth	r0, r3
 8001eb2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001eb6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	1d1a      	adds	r2, r3, #4
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	8013      	strh	r3, [r2, #0]
		//Add device battery statuses
		deviceSeparateLowBatteryStatuses[i] = (deviceLowBatteryStatuses[i/64]>>i)&(0x01);
 8001eca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da00      	bge.n	8001ed4 <scanDeviceForData+0x494>
 8001ed2:	333f      	adds	r3, #63	; 0x3f
 8001ed4:	119b      	asrs	r3, r3, #6
 8001ed6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8001ee6:	f1c4 0120 	rsb	r1, r4, #32
 8001eea:	f1a4 0020 	sub.w	r0, r4, #32
 8001eee:	fa22 f504 	lsr.w	r5, r2, r4
 8001ef2:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 8001ef6:	fa03 f101 	lsl.w	r1, r3, r1
 8001efa:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 8001efe:	430d      	orrs	r5, r1
 8001f00:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 8001f04:	fa23 f000 	lsr.w	r0, r3, r0
 8001f08:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001f0c:	4301      	orrs	r1, r0
 8001f0e:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001f12:	40e3      	lsrs	r3, r4
 8001f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f22:	2300      	movs	r3, #0
 8001f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f26:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001f2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001f36:	e9c3 1200 	strd	r1, r2, [r3]
		printf("\r\nDevice %ld low battery status: %ld", (uint32_t)allDeviceData[i].deviceID, (uint32_t)deviceSeparateLowBatteryStatuses[i]);
 8001f3a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001f3e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001f54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	4613      	mov	r3, r2
 8001f62:	461a      	mov	r2, r3
 8001f64:	4870      	ldr	r0, [pc, #448]	; (8002128 <scanDeviceForData+0x6e8>)
 8001f66:	f00e fdab 	bl	8010ac0 <iprintf>
	for(int i = 0;i< deviceNum[0];i++){
 8001f6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001f74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f78:	17da      	asrs	r2, r3, #31
 8001f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f7c:	647a      	str	r2, [r7, #68]	; 0x44
 8001f7e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001f82:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001f86:	4621      	mov	r1, r4
 8001f88:	4291      	cmp	r1, r2
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001f90:	f4ff af77 	bcc.w	8001e82 <scanDeviceForData+0x442>

	}

	//Power on communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9a:	4864      	ldr	r0, [pc, #400]	; (800212c <scanDeviceForData+0x6ec>)
 8001f9c:	f006 f890 	bl	80080c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001fa0:	2064      	movs	r0, #100	; 0x64
 8001fa2:	f004 fb07 	bl	80065b4 <HAL_Delay>

	//Iterate through all devices to scan
	for(int i = 0; i<deviceNum[0];i++){
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001fac:	e081      	b.n	80020b2 <scanDeviceForData+0x672>

		printf("\r\nrequesting from: %d", allDeviceData[i].deviceID);
 8001fae:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001fb2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	485a      	ldr	r0, [pc, #360]	; (8002130 <scanDeviceForData+0x6f0>)
 8001fc6:	f00e fd7b 	bl	8010ac0 <iprintf>

		//Request data from a device
		requestRFData(handles, &(allDeviceData[i]), rfData);
 8001fca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001fda:	4413      	add	r3, r2
 8001fdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001fe6:	f7ff fb91 	bl	800170c <requestRFData>

		//Check if device could not be reached
		if(!allDeviceData[i].deviceStatus){
 8001fea:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001fee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d122      	bne.n	800204a <scanDeviceForData+0x60a>
			printf("\r\ndevice %d not found", allDeviceData[i].deviceID);
 8002004:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002008:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	4846      	ldr	r0, [pc, #280]	; (8002134 <scanDeviceForData+0x6f4>)
 800201c:	f00e fd50 	bl	8010ac0 <iprintf>
			//Ste device as lost
			lostDevices[lostDevicesNum] = allDeviceData[i].deviceID;
 8002020:	f897 010f 	ldrb.w	r0, [r7, #271]	; 0x10f
 8002024:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002028:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800203c:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
			lostDevicesNum++;
 8002040:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002044:	3301      	adds	r3, #1
 8002046:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		}

		//Check if battery of device is depleted
		if(allDeviceData[i].measurement.batteryStatus == 0){
 800204a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800204e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3318      	adds	r3, #24
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d121      	bne.n	80020a8 <scanDeviceForData+0x668>
			//Is it
			if(!deviceSeparateLowBatteryStatuses[i]){
 8002064:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	4313      	orrs	r3, r2
 8002076:	d117      	bne.n	80020a8 <scanDeviceForData+0x668>

				allDeviceData[i].measurement.batteryStatus = 2;
 8002078:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800207c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3318      	adds	r3, #24
 800208c:	2202      	movs	r2, #2
 800208e:	601a      	str	r2, [r3, #0]
				deviceSeparateLowBatteryStatuses[i] = 0;
 8002090:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	18d1      	adds	r1, r2, r3
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i<deviceNum[0];i++){
 80020a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020ac:	3301      	adds	r3, #1
 80020ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80020b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020b6:	17da      	asrs	r2, r3, #31
 80020b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ba:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020bc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80020c0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80020c4:	4621      	mov	r1, r4
 80020c6:	4291      	cmp	r1, r2
 80020c8:	4629      	mov	r1, r5
 80020ca:	eb71 0303 	sbcs.w	r3, r1, r3
 80020ce:	f4ff af6e 	bcc.w	8001fae <scanDeviceForData+0x56e>
			}
		}
	}

	//Power off communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET); //rf activation pin
 80020d2:	2200      	movs	r2, #0
 80020d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d8:	4814      	ldr	r0, [pc, #80]	; (800212c <scanDeviceForData+0x6ec>)
 80020da:	f005 fff1 	bl	80080c0 <HAL_GPIO_WritePin>

	printf("Adding data to SD card");
 80020de:	4816      	ldr	r0, [pc, #88]	; (8002138 <scanDeviceForData+0x6f8>)
 80020e0:	f00e fcee 	bl	8010ac0 <iprintf>
	//Power on SD card
	HAL_GPIO_WritePin(SPIGPIO, SPIGPIOPin, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	4810      	ldr	r0, [pc, #64]	; (800212c <scanDeviceForData+0x6ec>)
 80020ea:	f005 ffe9 	bl	80080c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80020ee:	2064      	movs	r0, #100	; 0x64
 80020f0:	f004 fa60 	bl	80065b4 <HAL_Delay>

	//Add device data to SD card
	addDeviceDataToSD(handles, allDeviceData, time, deviceNum[0]);
 80020f4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80020f8:	4613      	mov	r3, r2
 80020fa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80020fe:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002102:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002106:	f7ff f8a5 	bl	8001254 <addDeviceDataToSD>

	//Power off SD card
	HAL_GPIO_WritePin(SPIGPIO, SPIGPIOPin, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	4807      	ldr	r0, [pc, #28]	; (800212c <scanDeviceForData+0x6ec>)
 8002110:	f005 ffd6 	bl	80080c0 <HAL_GPIO_WritePin>

	printf("Updating battery states");
 8002114:	4809      	ldr	r0, [pc, #36]	; (800213c <scanDeviceForData+0x6fc>)
 8002116:	f00e fcd3 	bl	8010ac0 <iprintf>
	//Iterate over all device battery states
	for(int i = 0;i<deviceNum[0];i++){
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002120:	e063      	b.n	80021ea <scanDeviceForData+0x7aa>
 8002122:	bf00      	nop
 8002124:	08013d74 	.word	0x08013d74
 8002128:	08013d88 	.word	0x08013d88
 800212c:	48000400 	.word	0x48000400
 8002130:	08013db0 	.word	0x08013db0
 8002134:	08013dc8 	.word	0x08013dc8
 8002138:	08013de0 	.word	0x08013de0
 800213c:	08013df8 	.word	0x08013df8
		deviceLowBatteryStatuses[i/64] = deviceLowBatteryStatuses[i/64] | ((deviceSeparateLowBatteryStatuses[i]&0x01)<<i);
 8002140:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002144:	2b00      	cmp	r3, #0
 8002146:	da00      	bge.n	800214a <scanDeviceForData+0x70a>
 8002148:	333f      	adds	r3, #63	; 0x3f
 800214a:	119b      	asrs	r3, r3, #6
 800214c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002158:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800215c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f002 0301 	and.w	r3, r2, #1
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
 800216e:	2300      	movs	r3, #0
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
 8002172:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002176:	f1a3 0420 	sub.w	r4, r3, #32
 800217a:	f1c3 0220 	rsb	r2, r3, #32
 800217e:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8002182:	464d      	mov	r5, r9
 8002184:	409d      	lsls	r5, r3
 8002186:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 800218a:	4645      	mov	r5, r8
 800218c:	fa05 f404 	lsl.w	r4, r5, r4
 8002190:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
 8002194:	4325      	orrs	r5, r4
 8002196:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 800219a:	4644      	mov	r4, r8
 800219c:	fa24 f202 	lsr.w	r2, r4, r2
 80021a0:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
 80021a4:	4314      	orrs	r4, r2
 80021a6:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 80021aa:	4642      	mov	r2, r8
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da00      	bge.n	80021be <scanDeviceForData+0x77e>
 80021bc:	333f      	adds	r3, #63	; 0x3f
 80021be:	119b      	asrs	r3, r3, #6
 80021c0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80021c4:	4622      	mov	r2, r4
 80021c6:	4302      	orrs	r2, r0
 80021c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80021ca:	462a      	mov	r2, r5
 80021cc:	430a      	orrs	r2, r1
 80021ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021d0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80021dc:	e9c3 1200 	strd	r1, r2, [r3]
	for(int i = 0;i<deviceNum[0];i++){
 80021e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80021e4:	3301      	adds	r3, #1
 80021e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80021ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80021ee:	17da      	asrs	r2, r3, #31
 80021f0:	623b      	str	r3, [r7, #32]
 80021f2:	627a      	str	r2, [r7, #36]	; 0x24
 80021f4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80021f8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021fc:	4621      	mov	r1, r4
 80021fe:	4291      	cmp	r1, r2
 8002200:	4629      	mov	r1, r5
 8002202:	eb71 0303 	sbcs.w	r3, r1, r3
 8002206:	d39b      	bcc.n	8002140 <scanDeviceForData+0x700>
	}
	//Write latest battery statuses
	Flash_Write_Data(changingDeviceDataStart, deviceLowBatteryStatuses, (deviceNum[0]/64)+1);
 8002208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	0982      	lsrs	r2, r0, #6
 8002216:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 800221a:	098b      	lsrs	r3, r1, #6
 800221c:	4613      	mov	r3, r2
 800221e:	3301      	adds	r3, #1
 8002220:	461a      	mov	r2, r3
 8002222:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8002226:	4816      	ldr	r0, [pc, #88]	; (8002280 <scanDeviceForData+0x840>)
 8002228:	f7fe ff84 	bl	8001134 <Flash_Write_Data>

	printf("Removing lsot devices");
 800222c:	4815      	ldr	r0, [pc, #84]	; (8002284 <scanDeviceForData+0x844>)
 800222e:	f00e fc47 	bl	8010ac0 <iprintf>
	//Remove lost devices from flash memory
	removeDevices(lostDevices, lostDevicesNum);
 8002232:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002236:	4619      	mov	r1, r3
 8002238:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800223c:	f000 f99c 	bl	8002578 <removeDevices>

	//Power on communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 8002240:	2201      	movs	r2, #1
 8002242:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002246:	4810      	ldr	r0, [pc, #64]	; (8002288 <scanDeviceForData+0x848>)
 8002248:	f005 ff3a 	bl	80080c0 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 800224c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002250:	f004 f9b0 	bl	80065b4 <HAL_Delay>

	printf("Confirming Scan");
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <scanDeviceForData+0x84c>)
 8002256:	f00e fc33 	bl	8010ac0 <iprintf>
	//Send Scan confirmation to childe devices
	scanConfirmation(handles, rfData);
 800225a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800225e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002262:	f000 f815 	bl	8002290 <scanConfirmation>

	//Power off communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET); //rf activation pin
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800226c:	4806      	ldr	r0, [pc, #24]	; (8002288 <scanDeviceForData+0x848>)
 800226e:	f005 ff27 	bl	80080c0 <HAL_GPIO_WritePin>
 8002272:	46b5      	mov	sp, r6

}
 8002274:	bf00      	nop
 8002276:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800227a:	46bd      	mov	sp, r7
 800227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002280:	0801a000 	.word	0x0801a000
 8002284:	08013e10 	.word	0x08013e10
 8002288:	48000400 	.word	0x48000400
 800228c:	08013e28 	.word	0x08013e28

08002290 <scanConfirmation>:

//Function to confirm end of scan for all devices connected to mother device
void scanConfirmation(struct CommunicationHandles* handles, struct rfDataStorage* rfData){
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]

	//MEssage to send as confirmation
	rfData->activeTxMessageSize = 3;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2203      	movs	r2, #3
 800229e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	22fe      	movs	r2, #254	; 0xfe
 80022a6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_DONE;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2248      	movs	r2, #72	; 0x48
 80022ae:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0xFF;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	889b      	ldrh	r3, [r3, #4]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = (rfData->myDevice.device_id>>8)&0xFF;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	889b      	ldrh	r3, [r3, #4]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = 10;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	220a      	movs	r2, #10
 80022da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	//Retrive latest system time
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f107 010c 	add.w	r1, r7, #12
 80022f2:	2200      	movs	r2, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f007 f96a 	bl	80095ce <HAL_RTC_GetTime>
	HAL_RTC_GetDate(handles->RTChandle, &sDate, RTC_FORMAT_BIN);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f107 0108 	add.w	r1, r7, #8
 8002302:	2200      	movs	r2, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f007 fa45 	bl	8009794 <HAL_RTC_GetDate>

	//Add system time to message content
	rfData->activeTxMessage[MSG_BODY_START] = sTime.Hours;
 800230a:	7b3a      	ldrb	r2, [r7, #12]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	rfData->activeTxMessage[MSG_BODY_START+1] = sTime.Minutes;
 8002312:	7b7a      	ldrb	r2, [r7, #13]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	rfData->activeTxMessage[MSG_BODY_START+2] = sTime.Seconds;
 800231a:	7bba      	ldrb	r2, [r7, #14]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	//Set destination as zero to forward so that child device forward the message
	rfData->activeTxMessage[MSG_TO_ID_POS1] = 0;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = 0;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

	//Send confirmation message
	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800233e:	3309      	adds	r3, #9
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f003 f9f7 	bl	8005738 <Send>
	HAL_Delay(2000);
 800234a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800234e:	f004 f931 	bl	80065b4 <HAL_Delay>
	//Send confirmation message again in case previous could not be received
	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800235e:	3309      	adds	r3, #9
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f003 f9e7 	bl	8005738 <Send>
}
 800236a:	bf00      	nop
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <checkForNewDevices>:

//Function to check for new devices to discover
void checkForNewDevices(struct CommunicationHandles* handles, struct rfDataStorage* rfData){
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]

	//Power on communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 800237e:	2201      	movs	r2, #1
 8002380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002384:	4840      	ldr	r0, [pc, #256]	; (8002488 <checkForNewDevices+0x114>)
 8002386:	f005 fe9b 	bl	80080c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800238a:	2064      	movs	r0, #100	; 0x64
 800238c:	f004 f912 	bl	80065b4 <HAL_Delay>

	//Define how long to listen fro devices
	int listeningCounter = 50;
 8002390:	2332      	movs	r3, #50	; 0x32
 8002392:	60fb      	str	r3, [r7, #12]

	printf("\r\nChecking for new devices");
 8002394:	483d      	ldr	r0, [pc, #244]	; (800248c <checkForNewDevices+0x118>)
 8002396:	f00e fb93 	bl	8010ac0 <iprintf>

	//Listeing for device
	for(int i = 0;i<listeningCounter;i++){
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e061      	b.n	8002464 <checkForNewDevices+0xf0>

		//handling incoming messages
		Comms_Handler(rfData);
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f002 fd45 	bl	8004e30 <Comms_Handler>

		//iterate over potential messages list
		for(int i = 0; i<rfData->messageNum; i++){
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e04e      	b.n	800244a <checkForNewDevices+0xd6>

			//Check if "I am here" message was received
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_IM_HERE){
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	33af      	adds	r3, #175	; 0xaf
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b43      	cmp	r3, #67	; 0x43
 80023c0:	d140      	bne.n	8002444 <checkForNewDevices+0xd0>
				printf("\r\nNew device found: %d", rfData->fromID[i]);
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	3340      	adds	r3, #64	; 0x40
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	889b      	ldrh	r3, [r3, #4]
 80023ce:	4619      	mov	r1, r3
 80023d0:	482f      	ldr	r0, [pc, #188]	; (8002490 <checkForNewDevices+0x11c>)
 80023d2:	f00e fb75 	bl	8010ac0 <iprintf>

				//Send back aknoeledgemtn of devices
				acknowledgeDevice(rfData->fromID[i], handles, rfData);
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3340      	adds	r3, #64	; 0x40
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	889b      	ldrh	r3, [r3, #4]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f856 	bl	8002498 <acknowledgeDevice>

				//Save new device data
				rfData->newDevices.newDevices[rfData->newDevices.numOfNewDevices] = rfData->fromID[i];
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80023f2:	4618      	mov	r0, r3
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3340      	adds	r3, #64	; 0x40
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	8899      	ldrh	r1, [r3, #4]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	460a      	mov	r2, r1
 800240c:	811a      	strh	r2, [r3, #8]
				rfData->newDevices.newDevicesHops[rfData->newDevices.numOfNewDevices] = rfData->activeRxMessage[i][MSG_NUM_HOPS_POS]+1;
 800240e:	6839      	ldr	r1, [r7, #0]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	33b4      	adds	r3, #180	; 0xb4
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 8002426:	4611      	mov	r1, r2
 8002428:	3301      	adds	r3, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	440b      	add	r3, r1
 8002430:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
				rfData->newDevices.numOfNewDevices++;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800243a:	3301      	adds	r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		for(int i = 0; i<rfData->messageNum; i++){
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	3301      	adds	r3, #1
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002450:	461a      	mov	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4293      	cmp	r3, r2
 8002456:	dba9      	blt.n	80023ac <checkForNewDevices+0x38>

			}
		}
		HAL_Delay(100);
 8002458:	2064      	movs	r0, #100	; 0x64
 800245a:	f004 f8ab 	bl	80065b4 <HAL_Delay>
	for(int i = 0;i<listeningCounter;i++){
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	db99      	blt.n	80023a0 <checkForNewDevices+0x2c>

	}
	printf("\r\nCheck done");
 800246c:	4809      	ldr	r0, [pc, #36]	; (8002494 <checkForNewDevices+0x120>)
 800246e:	f00e fb27 	bl	8010ac0 <iprintf>
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET); //rf activation pin
 8002472:	2200      	movs	r2, #0
 8002474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002478:	4803      	ldr	r0, [pc, #12]	; (8002488 <checkForNewDevices+0x114>)
 800247a:	f005 fe21 	bl	80080c0 <HAL_GPIO_WritePin>

}
 800247e:	bf00      	nop
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	48000400 	.word	0x48000400
 800248c:	08013e38 	.word	0x08013e38
 8002490:	08013e54 	.word	0x08013e54
 8002494:	08013e6c 	.word	0x08013e6c

08002498 <acknowledgeDevice>:

//Function to acknowledgment newly discoverred device
void acknowledgeDevice(int deviceNumber, struct CommunicationHandles* handles, struct rfDataStorage* rfData){
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]

	//Create message for child device acknowledgment
	rfData->activeTxMessageSize = 3;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2203      	movs	r2, #3
 80024a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	22fe      	movs	r2, #254	; 0xfe
 80024b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_YOUR_THERE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2245      	movs	r2, #69	; 0x45
 80024b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0xFF;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	889b      	ldrh	r3, [r3, #4]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = (rfData->myDevice.device_id>>8)&0xFF;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	889b      	ldrh	r3, [r3, #4]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	printf("Acknowledging: %d->%d and %d", deviceNumber, deviceNumber&0xFF, (deviceNumber>>8)&0xFF);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	121b      	asrs	r3, r3, #8
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	68f9      	ldr	r1, [r7, #12]
 80024e4:	4823      	ldr	r0, [pc, #140]	; (8002574 <acknowledgeDevice+0xdc>)
 80024e6:	f00e faeb 	bl	8010ac0 <iprintf>
	rfData->activeTxMessage[MSG_TO_ID_POS1] = deviceNumber&0xFF;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = (deviceNumber>>8)&0xFF;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	121b      	asrs	r3, r3, #8
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = 10;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	220a      	movs	r2, #10
 800250c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	//retrieve current system time
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f107 0114 	add.w	r1, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f007 f851 	bl	80095ce <HAL_RTC_GetTime>
	HAL_RTC_GetDate(handles->RTChandle, &sDate, RTC_FORMAT_BIN);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f107 0110 	add.w	r1, r7, #16
 8002534:	2200      	movs	r2, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f007 f92c 	bl	8009794 <HAL_RTC_GetDate>

	//add time in message content
	rfData->activeTxMessage[MSG_BODY_START] = sTime.Hours;
 800253c:	7d3a      	ldrb	r2, [r7, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	rfData->activeTxMessage[MSG_BODY_START+1] = sTime.Minutes;
 8002544:	7d7a      	ldrb	r2, [r7, #21]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	rfData->activeTxMessage[MSG_BODY_START+2] = sTime.Seconds;
 800254c:	7dba      	ldrb	r2, [r7, #22]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

	//send acknowledgment to child device
	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f103 0299 	add.w	r2, r3, #153	; 0x99
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002560:	3309      	adds	r3, #9
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f003 f8e6 	bl	8005738 <Send>

}
 800256c:	bf00      	nop
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	08013e7c 	.word	0x08013e7c

08002578 <removeDevices>:

//Function to remove devices from storage
void removeDevices(uint16_t deviceToRemove[], uint8_t numOfDeviceToRemove){
 8002578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800257c:	b0b9      	sub	sp, #228	; 0xe4
 800257e:	af00      	add	r7, sp, #0
 8002580:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8002584:	460b      	mov	r3, r1
 8002586:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	//Check if any devices need to be removed
	if(numOfDeviceToRemove>0){
 800258a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8252 	beq.w	8002a38 <removeDevices+0x4c0>
 8002594:	466b      	mov	r3, sp
 8002596:	461e      	mov	r6, r3

		//Retrive number of devices
		uint64_t deviceNum[1];
		Flash_Read_Data(numberOfDevicesAddress, deviceNum, 1);
 8002598:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800259c:	2201      	movs	r2, #1
 800259e:	4619      	mov	r1, r3
 80025a0:	488d      	ldr	r0, [pc, #564]	; (80027d8 <removeDevices+0x260>)
 80025a2:	f7fe fe35 	bl	8001210 <Flash_Read_Data>

		//create new array for device data
		uint64_t allDeviceData[deviceNum[0]+2];
 80025a6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80025aa:	f112 0a02 	adds.w	sl, r2, #2
 80025ae:	f143 0b00 	adc.w	fp, r3, #0
 80025b2:	4653      	mov	r3, sl
 80025b4:	3b01      	subs	r3, #1
 80025b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80025ba:	4652      	mov	r2, sl
 80025bc:	2300      	movs	r3, #0
 80025be:	4614      	mov	r4, r2
 80025c0:	461d      	mov	r5, r3
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	01ab      	lsls	r3, r5, #6
 80025cc:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80025d0:	01a2      	lsls	r2, r4, #6
 80025d2:	4652      	mov	r2, sl
 80025d4:	2300      	movs	r3, #0
 80025d6:	4690      	mov	r8, r2
 80025d8:	4699      	mov	r9, r3
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025ee:	4653      	mov	r3, sl
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	3307      	adds	r3, #7
 80025f4:	08db      	lsrs	r3, r3, #3
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	ebad 0d03 	sub.w	sp, sp, r3
 80025fc:	466b      	mov	r3, sp
 80025fe:	3307      	adds	r3, #7
 8002600:	08db      	lsrs	r3, r3, #3
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		//Retrieve current devices in flash
		uint64_t deviceIds[deviceNum[0]+1];
 8002608:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800260c:	1c51      	adds	r1, r2, #1
 800260e:	6139      	str	r1, [r7, #16]
 8002610:	f143 0300 	adc.w	r3, r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800261a:	4623      	mov	r3, r4
 800261c:	3b01      	subs	r3, #1
 800261e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002622:	4622      	mov	r2, r4
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800262a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800263a:	4649      	mov	r1, r9
 800263c:	018b      	lsls	r3, r1, #6
 800263e:	4641      	mov	r1, r8
 8002640:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002644:	4641      	mov	r1, r8
 8002646:	018a      	lsls	r2, r1, #6
 8002648:	4622      	mov	r2, r4
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002660:	4649      	mov	r1, r9
 8002662:	018b      	lsls	r3, r1, #6
 8002664:	4641      	mov	r1, r8
 8002666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800266a:	4641      	mov	r1, r8
 800266c:	018a      	lsls	r2, r1, #6
 800266e:	4623      	mov	r3, r4
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	3307      	adds	r3, #7
 8002674:	08db      	lsrs	r3, r3, #3
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	ebad 0d03 	sub.w	sp, sp, r3
 800267c:	466b      	mov	r3, sp
 800267e:	3307      	adds	r3, #7
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		Flash_Read_Data(deviceIDListStartAddress, deviceIds, deviceNum[0]);
 8002688:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800268c:	b293      	uxth	r3, r2
 800268e:	461a      	mov	r2, r3
 8002690:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8002694:	4851      	ldr	r0, [pc, #324]	; (80027dc <removeDevices+0x264>)
 8002696:	f7fe fdbb 	bl	8001210 <Flash_Read_Data>

		//battery statuses
		uint64_t deviceLowBatteryStatuses[(deviceNum[0]/64)+1];
 800269a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800269e:	f04f 0000 	mov.w	r0, #0
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	0990      	lsrs	r0, r2, #6
 80026a8:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 80026ac:	0999      	lsrs	r1, r3, #6
 80026ae:	1c43      	adds	r3, r0, #1
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	f141 0300 	adc.w	r3, r1, #0
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026bc:	4623      	mov	r3, r4
 80026be:	3b01      	subs	r3, #1
 80026c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80026c4:	4622      	mov	r2, r4
 80026c6:	2300      	movs	r3, #0
 80026c8:	67ba      	str	r2, [r7, #120]	; 0x78
 80026ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026d8:	4649      	mov	r1, r9
 80026da:	018b      	lsls	r3, r1, #6
 80026dc:	4641      	mov	r1, r8
 80026de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e2:	4641      	mov	r1, r8
 80026e4:	018a      	lsls	r2, r1, #6
 80026e6:	4622      	mov	r2, r4
 80026e8:	2300      	movs	r3, #0
 80026ea:	673a      	str	r2, [r7, #112]	; 0x70
 80026ec:	677b      	str	r3, [r7, #116]	; 0x74
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026fa:	4649      	mov	r1, r9
 80026fc:	018b      	lsls	r3, r1, #6
 80026fe:	4641      	mov	r1, r8
 8002700:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002704:	4641      	mov	r1, r8
 8002706:	018a      	lsls	r2, r1, #6
 8002708:	4623      	mov	r3, r4
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	3307      	adds	r3, #7
 800270e:	08db      	lsrs	r3, r3, #3
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	ebad 0d03 	sub.w	sp, sp, r3
 8002716:	466b      	mov	r3, sp
 8002718:	3307      	adds	r3, #7
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		Flash_Read_Data(deviceLowBatteryStatusStartAddress, deviceLowBatteryStatuses, (deviceNum[0]/64)+1);
 8002722:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002726:	f04f 0000 	mov.w	r0, #0
 800272a:	f04f 0100 	mov.w	r1, #0
 800272e:	0990      	lsrs	r0, r2, #6
 8002730:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8002734:	0999      	lsrs	r1, r3, #6
 8002736:	b283      	uxth	r3, r0
 8002738:	3301      	adds	r3, #1
 800273a:	b29b      	uxth	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8002742:	4827      	ldr	r0, [pc, #156]	; (80027e0 <removeDevices+0x268>)
 8002744:	f7fe fd64 	bl	8001210 <Flash_Read_Data>

		uint64_t deviceSeparateLowBatteryStatuses[deviceNum[0]+1];
 8002748:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800274c:	1c51      	adds	r1, r2, #1
 800274e:	6039      	str	r1, [r7, #0]
 8002750:	f143 0300 	adc.w	r3, r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800275a:	4623      	mov	r3, r4
 800275c:	3b01      	subs	r3, #1
 800275e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002762:	4622      	mov	r2, r4
 8002764:	2300      	movs	r3, #0
 8002766:	66ba      	str	r2, [r7, #104]	; 0x68
 8002768:	66fb      	str	r3, [r7, #108]	; 0x6c
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002776:	4649      	mov	r1, r9
 8002778:	018b      	lsls	r3, r1, #6
 800277a:	4641      	mov	r1, r8
 800277c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002780:	4641      	mov	r1, r8
 8002782:	018a      	lsls	r2, r1, #6
 8002784:	4622      	mov	r2, r4
 8002786:	2300      	movs	r3, #0
 8002788:	663a      	str	r2, [r7, #96]	; 0x60
 800278a:	667b      	str	r3, [r7, #100]	; 0x64
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002798:	4649      	mov	r1, r9
 800279a:	018b      	lsls	r3, r1, #6
 800279c:	4641      	mov	r1, r8
 800279e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027a2:	4641      	mov	r1, r8
 80027a4:	018a      	lsls	r2, r1, #6
 80027a6:	4623      	mov	r3, r4
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	3307      	adds	r3, #7
 80027ac:	08db      	lsrs	r3, r3, #3
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	ebad 0d03 	sub.w	sp, sp, r3
 80027b4:	466b      	mov	r3, sp
 80027b6:	3307      	adds	r3, #7
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		//Iterate through stored devices
		for(int i = 0;i<deviceNum[0]; i++){
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027c6:	e090      	b.n	80028ea <removeDevices+0x372>
			int deviceCanBeKept = 1;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

			//Iterate through removable device
			for(int n = 0;n<numOfDeviceToRemove;n++){
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80027d4:	e031      	b.n	800283a <removeDevices+0x2c2>
 80027d6:	bf00      	nop
 80027d8:	0801b000 	.word	0x0801b000
 80027dc:	0801b008 	.word	0x0801b008
 80027e0:	0801a000 	.word	0x0801a000

				//Check if device IDs match
				if((deviceIds[i]&0xFF) == deviceToRemove[n]){
 80027e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80027f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80027fa:	2300      	movs	r3, #0
 80027fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002802:	005a      	lsls	r2, r3, #1
 8002804:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002808:	4413      	add	r3, r2
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	2200      	movs	r2, #0
 8002810:	653b      	str	r3, [r7, #80]	; 0x50
 8002812:	657a      	str	r2, [r7, #84]	; 0x54
 8002814:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002818:	4603      	mov	r3, r0
 800281a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800281e:	4622      	mov	r2, r4
 8002820:	4628      	mov	r0, r5
 8002822:	4281      	cmp	r1, r0
 8002824:	bf08      	it	eq
 8002826:	4293      	cmpeq	r3, r2
 8002828:	d102      	bne.n	8002830 <removeDevices+0x2b8>

					deviceCanBeKept = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			for(int n = 0;n<numOfDeviceToRemove;n++){
 8002830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002834:	3301      	adds	r3, #1
 8002836:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800283a:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 800283e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002842:	4293      	cmp	r3, r2
 8002844:	dbce      	blt.n	80027e4 <removeDevices+0x26c>
				}

			}

			//check if device should be kept
			if(deviceCanBeKept){
 8002846:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d048      	beq.n	80028e0 <removeDevices+0x368>

				allDeviceData[i+1] = deviceIds[i];
 800284e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002852:	1c5c      	adds	r4, r3, #1
 8002854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002864:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002868:	00e3      	lsls	r3, r4, #3
 800286a:	4413      	add	r3, r2
 800286c:	e9c3 0100 	strd	r0, r1, [r3]
				deviceSeparateLowBatteryStatuses[i] = (deviceLowBatteryStatuses[i/64]>>i)&(0x01);
 8002870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002874:	2b00      	cmp	r3, #0
 8002876:	da00      	bge.n	800287a <removeDevices+0x302>
 8002878:	333f      	adds	r3, #63	; 0x3f
 800287a:	119b      	asrs	r3, r3, #6
 800287c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800288c:	f1c4 0120 	rsb	r1, r4, #32
 8002890:	f1a4 0020 	sub.w	r0, r4, #32
 8002894:	fa22 f504 	lsr.w	r5, r2, r4
 8002898:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800289c:	fa03 f101 	lsl.w	r1, r3, r1
 80028a0:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 80028a4:	430d      	orrs	r5, r1
 80028a6:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 80028aa:	fa23 f000 	lsr.w	r0, r3, r0
 80028ae:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80028b2:	4301      	orrs	r1, r0
 80028b4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80028b8:	40e3      	lsrs	r3, r4
 80028ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80028c8:	2300      	movs	r3, #0
 80028ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80028dc:	e9c3 1200 	strd	r1, r2, [r3]
		for(int i = 0;i<deviceNum[0]; i++){
 80028e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028e4:	3301      	adds	r3, #1
 80028e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028ee:	17da      	asrs	r2, r3, #31
 80028f0:	643b      	str	r3, [r7, #64]	; 0x40
 80028f2:	647a      	str	r2, [r7, #68]	; 0x44
 80028f4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80028f8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80028fc:	4621      	mov	r1, r4
 80028fe:	4291      	cmp	r1, r2
 8002900:	4629      	mov	r1, r5
 8002902:	eb71 0303 	sbcs.w	r3, r1, r3
 8002906:	f4ff af5f 	bcc.w	80027c8 <removeDevices+0x250>
			}
		}

		//Update new number of devices
		deviceNum[0]-=numOfDeviceToRemove;
 800290a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800290e:	f897 10a3 	ldrb.w	r1, [r7, #163]	; 0xa3
 8002912:	2000      	movs	r0, #0
 8002914:	63b9      	str	r1, [r7, #56]	; 0x38
 8002916:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002918:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800291c:	4621      	mov	r1, r4
 800291e:	1a51      	subs	r1, r2, r1
 8002920:	6339      	str	r1, [r7, #48]	; 0x30
 8002922:	4629      	mov	r1, r5
 8002924:	eb63 0301 	sbc.w	r3, r3, r1
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
 800292a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800292e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

		//Add number of devices to main array
		allDeviceData[0] = deviceNum[0];
 8002932:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002936:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800293a:	e9c1 2300 	strd	r2, r3, [r1]

		//Write new data to flash memory
		Flash_Write_Data(deviceDataStartAddr, allDeviceData, deviceNum[0]+1);
 800293e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002942:	4613      	mov	r3, r2
 8002944:	3301      	adds	r3, #1
 8002946:	461a      	mov	r2, r3
 8002948:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800294c:	483d      	ldr	r0, [pc, #244]	; (8002a44 <removeDevices+0x4cc>)
 800294e:	f7fe fbf1 	bl	8001134 <Flash_Write_Data>

		for(int i = 0;i<deviceNum[0];i++){
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002958:	e04c      	b.n	80029f4 <removeDevices+0x47c>
			deviceLowBatteryStatuses[i/64] = deviceLowBatteryStatuses[0] | ((deviceSeparateLowBatteryStatuses[i]&0x01)<<i);
 800295a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800295e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f002 0301 	and.w	r3, r2, #1
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002980:	f1a3 0420 	sub.w	r4, r3, #32
 8002984:	f1c3 0220 	rsb	r2, r3, #32
 8002988:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800298c:	464d      	mov	r5, r9
 800298e:	409d      	lsls	r5, r3
 8002990:	f8c7 5094 	str.w	r5, [r7, #148]	; 0x94
 8002994:	4645      	mov	r5, r8
 8002996:	fa05 f404 	lsl.w	r4, r5, r4
 800299a:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 800299e:	4325      	orrs	r5, r4
 80029a0:	f8c7 5094 	str.w	r5, [r7, #148]	; 0x94
 80029a4:	4644      	mov	r4, r8
 80029a6:	fa24 f202 	lsr.w	r2, r4, r2
 80029aa:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 80029ae:	4314      	orrs	r4, r2
 80029b0:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80029b4:	4642      	mov	r2, r8
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da00      	bge.n	80029c8 <removeDevices+0x450>
 80029c6:	333f      	adds	r3, #63	; 0x3f
 80029c8:	119b      	asrs	r3, r3, #6
 80029ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029ce:	4622      	mov	r2, r4
 80029d0:	4302      	orrs	r2, r0
 80029d2:	623a      	str	r2, [r7, #32]
 80029d4:	462a      	mov	r2, r5
 80029d6:	430a      	orrs	r2, r1
 80029d8:	627a      	str	r2, [r7, #36]	; 0x24
 80029da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80029e6:	e9c3 1200 	strd	r1, r2, [r3]
		for(int i = 0;i<deviceNum[0];i++){
 80029ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029f8:	17da      	asrs	r2, r3, #31
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	61fa      	str	r2, [r7, #28]
 80029fe:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002a02:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002a06:	4621      	mov	r1, r4
 8002a08:	4291      	cmp	r1, r2
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	eb71 0303 	sbcs.w	r3, r1, r3
 8002a10:	d3a3      	bcc.n	800295a <removeDevices+0x3e2>
		}
		Flash_Write_Data(changingDeviceDataStart, deviceLowBatteryStatuses, (deviceNum[0]/64)+1);
 8002a12:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	0982      	lsrs	r2, r0, #6
 8002a20:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8002a24:	098b      	lsrs	r3, r1, #6
 8002a26:	4613      	mov	r3, r2
 8002a28:	3301      	adds	r3, #1
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8002a30:	4805      	ldr	r0, [pc, #20]	; (8002a48 <removeDevices+0x4d0>)
 8002a32:	f7fe fb7f 	bl	8001134 <Flash_Write_Data>
 8002a36:	46b5      	mov	sp, r6

	}

}
 8002a38:	bf00      	nop
 8002a3a:	37e4      	adds	r7, #228	; 0xe4
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a42:	bf00      	nop
 8002a44:	0801b000 	.word	0x0801b000
 8002a48:	0801a000 	.word	0x0801a000

08002a4c <addNewDevices>:

//Function to add new device to the storage
void addNewDevices(struct rfDataStorage* rfData){
 8002a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a50:	f5ad 5d05 	sub.w	sp, sp, #8512	; 0x2140
 8002a54:	b08d      	sub	sp, #52	; 0x34
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002a5c:	f843 0cdc 	str.w	r0, [r3, #-220]

	printf("\r\nnew devices to add: %d", rfData->newDevices.numOfNewDevices);
 8002a60:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002a64:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002a68:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	48cf      	ldr	r0, [pc, #828]	; (8002dac <addNewDevices+0x360>)
 8002a70:	f00e f826 	bl	8010ac0 <iprintf>
	//Check if device need to be added
	if(rfData->newDevices.numOfNewDevices>0){
 8002a74:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002a78:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002a7c:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 82d6 	beq.w	8003032 <addNewDevices+0x5e6>
 8002a86:	466b      	mov	r3, sp
 8002a88:	461e      	mov	r6, r3

		printf("\r\nAdding new devices");
 8002a8a:	48c9      	ldr	r0, [pc, #804]	; (8002db0 <addNewDevices+0x364>)
 8002a8c:	f00e f818 	bl	8010ac0 <iprintf>

		//Add new device to flash memory

		//Retrieve number of devices
		uint64_t deviceNum[1];
		Flash_Read_Data(numberOfDevicesAddress, deviceNum, 1);
 8002a90:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002a94:	f103 0308 	add.w	r3, r3, #8
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	48c5      	ldr	r0, [pc, #788]	; (8002db4 <addNewDevices+0x368>)
 8002a9e:	f7fe fbb7 	bl	8001210 <Flash_Read_Data>
		printf("old number of devices: %d", (uint16_t)deviceNum[0]);
 8002aa2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002aa6:	f103 0308 	add.w	r3, r3, #8
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	b293      	uxth	r3, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	48c1      	ldr	r0, [pc, #772]	; (8002db8 <addNewDevices+0x36c>)
 8002ab4:	f00e f804 	bl	8010ac0 <iprintf>

		//Create array for all devices
		uint64_t allDeviceData[deviceNum[0]+rfData->newDevices.numOfNewDevices+1];
 8002ab8:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002abc:	f103 0308 	add.w	r3, r3, #8
 8002ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002ac8:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002acc:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	469a      	mov	sl, r3
 8002ad6:	4693      	mov	fp, r2
 8002ad8:	eb10 040a 	adds.w	r4, r0, sl
 8002adc:	eb41 050b 	adc.w	r5, r1, fp
 8002ae0:	1c63      	adds	r3, r4, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	f145 0300 	adc.w	r3, r5, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aee:	4623      	mov	r3, r4
 8002af0:	3b01      	subs	r3, #1
 8002af2:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002af6:	f102 0220 	add.w	r2, r2, #32
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4622      	mov	r2, r4
 8002afe:	2300      	movs	r3, #0
 8002b00:	4690      	mov	r8, r2
 8002b02:	4699      	mov	r9, r3
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b10:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b14:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b18:	4622      	mov	r2, r4
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b30:	4649      	mov	r1, r9
 8002b32:	018b      	lsls	r3, r1, #6
 8002b34:	4641      	mov	r1, r8
 8002b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b3a:	4641      	mov	r1, r8
 8002b3c:	018a      	lsls	r2, r1, #6
 8002b3e:	4623      	mov	r3, r4
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	3307      	adds	r3, #7
 8002b44:	08db      	lsrs	r3, r3, #3
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	ebad 0d03 	sub.w	sp, sp, r3
 8002b4c:	466b      	mov	r3, sp
 8002b4e:	3307      	adds	r3, #7
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002b58:	f102 021c 	add.w	r2, r2, #28
 8002b5c:	6013      	str	r3, [r2, #0]

		//Get device info from flash memory
		uint64_t deviceInfo[deviceNum[0]+rfData->newDevices.numOfNewDevices];
 8002b5e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002b62:	f103 0308 	add.w	r3, r3, #8
 8002b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b6a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002b6e:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002b72:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b7e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b82:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002b86:	4623      	mov	r3, r4
 8002b88:	18c3      	adds	r3, r0, r3
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	462b      	mov	r3, r5
 8002b8e:	eb41 0303 	adc.w	r3, r1, r3
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b98:	4623      	mov	r3, r4
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002ba0:	f102 0218 	add.w	r2, r2, #24
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	2300      	movs	r3, #0
 8002baa:	67ba      	str	r2, [r7, #120]	; 0x78
 8002bac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bba:	4649      	mov	r1, r9
 8002bbc:	018b      	lsls	r3, r1, #6
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	018a      	lsls	r2, r1, #6
 8002bc8:	4622      	mov	r2, r4
 8002bca:	2300      	movs	r3, #0
 8002bcc:	673a      	str	r2, [r7, #112]	; 0x70
 8002bce:	677b      	str	r3, [r7, #116]	; 0x74
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bdc:	4649      	mov	r1, r9
 8002bde:	018b      	lsls	r3, r1, #6
 8002be0:	4641      	mov	r1, r8
 8002be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002be6:	4641      	mov	r1, r8
 8002be8:	018a      	lsls	r2, r1, #6
 8002bea:	4623      	mov	r3, r4
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	3307      	adds	r3, #7
 8002bf0:	08db      	lsrs	r3, r3, #3
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	ebad 0d03 	sub.w	sp, sp, r3
 8002bf8:	466b      	mov	r3, sp
 8002bfa:	3307      	adds	r3, #7
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002c04:	f102 0214 	add.w	r2, r2, #20
 8002c08:	6013      	str	r3, [r2, #0]
		Flash_Read_Data(deviceIDListStartAddress, deviceInfo, deviceNum[0]);
 8002c0a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002c0e:	f103 0308 	add.w	r3, r3, #8
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	b293      	uxth	r3, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002c1e:	f103 0314 	add.w	r3, r3, #20
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	4865      	ldr	r0, [pc, #404]	; (8002dbc <addNewDevices+0x370>)
 8002c26:	f7fe faf3 	bl	8001210 <Flash_Read_Data>

		//Add new device data to the
		for(int i = 0;i<rfData->newDevices.numOfNewDevices; i++){
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002c30:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e0a3      	b.n	8002d80 <addNewDevices+0x334>
			//Add device ID
			deviceInfo[deviceNum[0]+i] = rfData->newDevices.newDevices[i];
 8002c38:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c3c:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8002c40:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002c44:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	33a0      	adds	r3, #160	; 0xa0
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	891c      	ldrh	r4, [r3, #8]
 8002c52:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002c56:	f103 0308 	add.w	r3, r3, #8
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8002c62:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8002c66:	6809      	ldr	r1, [r1, #0]
 8002c68:	17c8      	asrs	r0, r1, #31
 8002c6a:	66b9      	str	r1, [r7, #104]	; 0x68
 8002c6c:	66f8      	str	r0, [r7, #108]	; 0x6c
 8002c6e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002c72:	4641      	mov	r1, r8
 8002c74:	1851      	adds	r1, r2, r1
 8002c76:	6639      	str	r1, [r7, #96]	; 0x60
 8002c78:	4649      	mov	r1, r9
 8002c7a:	414b      	adcs	r3, r1
 8002c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8002c7e:	b2a3      	uxth	r3, r4
 8002c80:	2200      	movs	r2, #0
 8002c82:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c84:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002c86:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002c8a:	f103 0314 	add.w	r3, r3, #20
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002c9a:	e9c3 1200 	strd	r1, r2, [r3]

			//Add device hops
			deviceInfo[deviceNum[0]+i] = deviceInfo[deviceNum[0]+i]|((uint64_t)rfData->newDevices.newDevicesHops[i]<<16);
 8002c9e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002ca2:	f103 0308 	add.w	r3, r3, #8
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8002cae:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8002cb2:	6809      	ldr	r1, [r1, #0]
 8002cb4:	17c8      	asrs	r0, r1, #31
 8002cb6:	6539      	str	r1, [r7, #80]	; 0x50
 8002cb8:	6578      	str	r0, [r7, #84]	; 0x54
 8002cba:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	1851      	adds	r1, r2, r1
 8002cc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	414b      	adcs	r3, r1
 8002cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cca:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002cce:	f103 0314 	add.w	r3, r3, #20
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002cde:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002ce2:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8002ce6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002cea:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002cfe:	647a      	str	r2, [r7, #68]	; 0x44
 8002d00:	f04f 0400 	mov.w	r4, #0
 8002d04:	f04f 0500 	mov.w	r5, #0
 8002d08:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	041d      	lsls	r5, r3, #16
 8002d10:	460b      	mov	r3, r1
 8002d12:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 8002d16:	460b      	mov	r3, r1
 8002d18:	041c      	lsls	r4, r3, #16
 8002d1a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002d1e:	f103 0308 	add.w	r3, r3, #8
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8002d2a:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8002d2e:	6809      	ldr	r1, [r1, #0]
 8002d30:	17c8      	asrs	r0, r1, #31
 8002d32:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d34:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002d36:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	1851      	adds	r1, r2, r1
 8002d3e:	6339      	str	r1, [r7, #48]	; 0x30
 8002d40:	4659      	mov	r1, fp
 8002d42:	414b      	adcs	r3, r1
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
 8002d46:	ea48 0304 	orr.w	r3, r8, r4
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4c:	ea49 0305 	orr.w	r3, r9, r5
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d52:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002d56:	f103 0314 	add.w	r3, r3, #20
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002d66:	e9c3 1200 	strd	r1, r2, [r3]
		for(int i = 0;i<rfData->newDevices.numOfNewDevices; i++){
 8002d6a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002d6e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002d7a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002d84:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002d88:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002d92:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	f6ff af4d 	blt.w	8002c38 <addNewDevices+0x1ec>

		}

		//Add data device data to main array
		for(int i = 0;i<deviceNum[0];i++){
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002da4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e031      	b.n	8002e10 <addNewDevices+0x3c4>
 8002dac:	08013e9c 	.word	0x08013e9c
 8002db0:	08013eb8 	.word	0x08013eb8
 8002db4:	0801b000 	.word	0x0801b000
 8002db8:	08013ed0 	.word	0x08013ed0
 8002dbc:	0801b008 	.word	0x0801b008

			allDeviceData[i+1] = deviceInfo[i];
 8002dc0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002dc4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	1c59      	adds	r1, r3, #1
 8002dcc:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002dd0:	f103 0314 	add.w	r3, r3, #20
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002dda:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4413      	add	r3, r2
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f507 5005 	add.w	r0, r7, #8512	; 0x2140
 8002dec:	f100 001c 	add.w	r0, r0, #28
 8002df0:	6800      	ldr	r0, [r0, #0]
 8002df2:	00c9      	lsls	r1, r1, #3
 8002df4:	4401      	add	r1, r0
 8002df6:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0;i<deviceNum[0];i++){
 8002dfa:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002dfe:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002e0a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002e14:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	17da      	asrs	r2, r3, #31
 8002e1c:	623b      	str	r3, [r7, #32]
 8002e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8002e20:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002e24:	f103 0308 	add.w	r3, r3, #8
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e30:	4621      	mov	r1, r4
 8002e32:	4291      	cmp	r1, r2
 8002e34:	4629      	mov	r1, r5
 8002e36:	eb71 0303 	sbcs.w	r3, r1, r3
 8002e3a:	d3c1      	bcc.n	8002dc0 <addNewDevices+0x374>
			printf("\r\nAdding device %d to flash", rfData->newDevices.newDevices[i]);
			allDeviceData[deviceNum[0]+i+1] = rfData->newDevices.newDevices[i];
		}*/

		//Update overall device num
		deviceNum[0]+=rfData->newDevices.numOfNewDevices;
 8002e3c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002e40:	f103 0308 	add.w	r3, r3, #8
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8002e4c:	f851 1cdc 	ldr.w	r1, [r1, #-220]
 8002e50:	f891 1115 	ldrb.w	r1, [r1, #277]	; 0x115
 8002e54:	b2c9      	uxtb	r1, r1
 8002e56:	2000      	movs	r0, #0
 8002e58:	61b9      	str	r1, [r7, #24]
 8002e5a:	61f8      	str	r0, [r7, #28]
 8002e5c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002e60:	4621      	mov	r1, r4
 8002e62:	1851      	adds	r1, r2, r1
 8002e64:	6139      	str	r1, [r7, #16]
 8002e66:	4629      	mov	r1, r5
 8002e68:	eb43 0101 	adc.w	r1, r3, r1
 8002e6c:	6179      	str	r1, [r7, #20]
 8002e6e:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002e72:	f102 0208 	add.w	r2, r2, #8
 8002e76:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e7a:	e9c2 3400 	strd	r3, r4, [r2]

		printf("new number of devices: %d", (uint16_t)deviceNum[0]);
 8002e7e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002e82:	f103 0308 	add.w	r3, r3, #8
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	b293      	uxth	r3, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	486c      	ldr	r0, [pc, #432]	; (8003040 <addNewDevices+0x5f4>)
 8002e90:	f00d fe16 	bl	8010ac0 <iprintf>
		//add new device number to flash array
		allDeviceData[0] = deviceNum[0];
 8002e94:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002e98:	f103 0308 	add.w	r3, r3, #8
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8002ea4:	f101 011c 	add.w	r1, r1, #28
 8002ea8:	6809      	ldr	r1, [r1, #0]
 8002eaa:	e9c1 2300 	strd	r2, r3, [r1]

		//write latest data to flash
		Flash_Write_Data(deviceDataStartAddr, allDeviceData, deviceNum[0]+1);
 8002eae:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002eb2:	f103 0308 	add.w	r3, r3, #8
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002ec4:	f103 031c 	add.w	r3, r3, #28
 8002ec8:	6819      	ldr	r1, [r3, #0]
 8002eca:	485e      	ldr	r0, [pc, #376]	; (8003044 <addNewDevices+0x5f8>)
 8002ecc:	f7fe f932 	bl	8001134 <Flash_Write_Data>

		//Power on SD card
		HAL_GPIO_WritePin(SPIGPIO, SPIGPIOPin, GPIO_PIN_SET);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	2180      	movs	r1, #128	; 0x80
 8002ed4:	485c      	ldr	r0, [pc, #368]	; (8003048 <addNewDevices+0x5fc>)
 8002ed6:	f005 f8f3 	bl	80080c0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002eda:	2064      	movs	r0, #100	; 0x64
 8002edc:	f003 fb6a 	bl	80065b4 <HAL_Delay>

		FATFS fs; 	//Fatfs handle
		FIL fil; 		//File handle
		FRESULT fres;

		config.fs = &fs;
 8002ee0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8002ee4:	f103 0310 	add.w	r3, r3, #16
 8002ee8:	3b10      	subs	r3, #16
 8002eea:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8002eee:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002ef2:	6013      	str	r3, [r2, #0]
		config.fil = &fil;
 8002ef4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ef8:	3b20      	subs	r3, #32
 8002efa:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002efe:	6013      	str	r3, [r2, #0]
		config.fres = &fres;
 8002f00:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002f04:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 8002f08:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002f0c:	f102 0204 	add.w	r2, r2, #4
 8002f10:	6013      	str	r3, [r2, #0]

		//Reset SD card
		if(stopCard(&config)){
 8002f12:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002f16:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 fd8a 	bl	8005a34 <stopCard>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <addNewDevices+0x4e2>
			printf("\r\ncard unmounted");
 8002f26:	4849      	ldr	r0, [pc, #292]	; (800304c <addNewDevices+0x600>)
 8002f28:	f00d fdca 	bl	8010ac0 <iprintf>
 8002f2c:	e002      	b.n	8002f34 <addNewDevices+0x4e8>
		}
		else{

			printf("\r\nfail to unmount card");
 8002f2e:	4848      	ldr	r0, [pc, #288]	; (8003050 <addNewDevices+0x604>)
 8002f30:	f00d fdc6 	bl	8010ac0 <iprintf>
		}

		//Start SD card
		if(setupCard(&config)){
 8002f34:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002f38:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 fd5d 	bl	80059fc <setupCard>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d06b      	beq.n	8003020 <addNewDevices+0x5d4>
			printf("\r\ncard mounted");
 8002f48:	4842      	ldr	r0, [pc, #264]	; (8003054 <addNewDevices+0x608>)
 8002f4a:	f00d fdb9 	bl	8010ac0 <iprintf>

			char buffer[50];

			//Add new storage for each device
			for(int i = 0;i<rfData->newDevices.numOfNewDevices; i++){
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002f54:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e041      	b.n	8002fe0 <addNewDevices+0x594>
				printf("saving initial data for %d device", rfData->newDevices.newDevices[i]);
 8002f5c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002f60:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8002f64:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002f68:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	33a0      	adds	r3, #160	; 0xa0
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	891b      	ldrh	r3, [r3, #8]
 8002f76:	4619      	mov	r1, r3
 8002f78:	4837      	ldr	r0, [pc, #220]	; (8003058 <addNewDevices+0x60c>)
 8002f7a:	f00d fda1 	bl	8010ac0 <iprintf>
				sprintf(buffer, "Device_%d\n", (uint16_t)rfData->newDevices.newDevices[i]);
 8002f7e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002f82:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8002f86:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002f8a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	33a0      	adds	r3, #160	; 0xa0
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	891b      	ldrh	r3, [r3, #8]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f9e:	3b14      	subs	r3, #20
 8002fa0:	492e      	ldr	r1, [pc, #184]	; (800305c <addNewDevices+0x610>)
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f00d fe92 	bl	8010ccc <siprintf>

				//Add device to device list
				sendSD(&config, "AllDeviceInfo.txt", buffer);
 8002fa8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fac:	3b14      	subs	r3, #20
 8002fae:	f507 5004 	add.w	r0, r7, #8448	; 0x2100
 8002fb2:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4929      	ldr	r1, [pc, #164]	; (8003060 <addNewDevices+0x614>)
 8002fba:	f002 fccb 	bl	8005954 <sendSD>

				//Create a separate folder for device measurement data
				f_mkdir(buffer);
 8002fbe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fc2:	3b14      	subs	r3, #20
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f00c fd1e 	bl	800fa06 <f_mkdir>
			for(int i = 0;i<rfData->newDevices.numOfNewDevices; i++){
 8002fca:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002fce:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002fda:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002fe4:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002fe8:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8002fec:	461a      	mov	r2, r3
 8002fee:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002ff2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	dbaf      	blt.n	8002f5c <addNewDevices+0x510>
			}

			//Close SD card
			if(stopCard(&config)){
 8002ffc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8003000:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8003004:	4618      	mov	r0, r3
 8003006:	f002 fd15 	bl	8005a34 <stopCard>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <addNewDevices+0x5cc>
				printf("\r\ncard unmounted");
 8003010:	480e      	ldr	r0, [pc, #56]	; (800304c <addNewDevices+0x600>)
 8003012:	f00d fd55 	bl	8010ac0 <iprintf>
 8003016:	e006      	b.n	8003026 <addNewDevices+0x5da>
			}
			else{

				printf("\r\nfail to unmount card");
 8003018:	480d      	ldr	r0, [pc, #52]	; (8003050 <addNewDevices+0x604>)
 800301a:	f00d fd51 	bl	8010ac0 <iprintf>
 800301e:	e002      	b.n	8003026 <addNewDevices+0x5da>
			}
		}
		else{

			printf("\r\nfail to mount card");
 8003020:	4810      	ldr	r0, [pc, #64]	; (8003064 <addNewDevices+0x618>)
 8003022:	f00d fd4d 	bl	8010ac0 <iprintf>
		}

		//Power off SD card
		HAL_GPIO_WritePin(SPIGPIO, SPIGPIOPin, GPIO_PIN_RESET);
 8003026:	2200      	movs	r2, #0
 8003028:	2180      	movs	r1, #128	; 0x80
 800302a:	4807      	ldr	r0, [pc, #28]	; (8003048 <addNewDevices+0x5fc>)
 800302c:	f005 f848 	bl	80080c0 <HAL_GPIO_WritePin>
 8003030:	46b5      	mov	sp, r6
	}
}
 8003032:	bf00      	nop
 8003034:	f507 5705 	add.w	r7, r7, #8512	; 0x2140
 8003038:	3734      	adds	r7, #52	; 0x34
 800303a:	46bd      	mov	sp, r7
 800303c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003040:	08013eec 	.word	0x08013eec
 8003044:	0801b000 	.word	0x0801b000
 8003048:	48000400 	.word	0x48000400
 800304c:	08013f08 	.word	0x08013f08
 8003050:	08013f1c 	.word	0x08013f1c
 8003054:	08013f34 	.word	0x08013f34
 8003058:	08013f44 	.word	0x08013f44
 800305c:	08013f68 	.word	0x08013f68
 8003060:	08013f74 	.word	0x08013f74
 8003064:	08013f88 	.word	0x08013f88

08003068 <setupSDcard>:

//Setup the initial SDcard structure
void setupSDcard(){
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 800306e:	b08f      	sub	sp, #60	; 0x3c
 8003070:	af00      	add	r7, sp, #0

	//Power on SD card
	HAL_GPIO_WritePin(SPIGPIO, SPIGPIOPin, GPIO_PIN_SET);
 8003072:	2201      	movs	r2, #1
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	485f      	ldr	r0, [pc, #380]	; (80031f4 <setupSDcard+0x18c>)
 8003078:	f005 f822 	bl	80080c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800307c:	2064      	movs	r0, #100	; 0x64
 800307e:	f003 fa99 	bl	80065b4 <HAL_Delay>

	FATFS fs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres;

	config.fs = &fs;
 8003082:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003086:	f103 0318 	add.w	r3, r3, #24
 800308a:	3b04      	subs	r3, #4
 800308c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003090:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8003094:	6013      	str	r3, [r2, #0]
	config.fil = &fil;
 8003096:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800309a:	3b34      	subs	r3, #52	; 0x34
 800309c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80030a0:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80030a4:	6013      	str	r3, [r2, #0]
	config.fres = &fres;
 80030a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030aa:	3b35      	subs	r3, #53	; 0x35
 80030ac:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80030b0:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80030b4:	6013      	str	r3, [r2, #0]

	//Reser SD card
	if(stopCard(&config)){
 80030b6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80030ba:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fcb8 	bl	8005a34 <stopCard>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <setupSDcard+0x6a>
		printf("\r\ncard unmounted");
 80030ca:	484b      	ldr	r0, [pc, #300]	; (80031f8 <setupSDcard+0x190>)
 80030cc:	f00d fcf8 	bl	8010ac0 <iprintf>
 80030d0:	e002      	b.n	80030d8 <setupSDcard+0x70>
	}
	else{

		printf("\r\nfail to unmount card");
 80030d2:	484a      	ldr	r0, [pc, #296]	; (80031fc <setupSDcard+0x194>)
 80030d4:	f00d fcf4 	bl	8010ac0 <iprintf>
	}

	//Open SDcard
	if(setupCard(&config)){
 80030d8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80030dc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80030e0:	4618      	mov	r0, r3
 80030e2:	f002 fc8b 	bl	80059fc <setupCard>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d074      	beq.n	80031d6 <setupSDcard+0x16e>
		printf("\r\ncard mounted");
 80030ec:	4844      	ldr	r0, [pc, #272]	; (8003200 <setupSDcard+0x198>)
 80030ee:	f00d fce7 	bl	8010ac0 <iprintf>

		//Create initial files for device information storage
		*config.fres = f_open(config.fil, "AllDeviceInfo.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80030f2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80030f6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003100:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8003104:	6814      	ldr	r4, [r2, #0]
 8003106:	2213      	movs	r2, #19
 8003108:	493e      	ldr	r1, [pc, #248]	; (8003204 <setupSDcard+0x19c>)
 800310a:	4618      	mov	r0, r3
 800310c:	f00b fcf0 	bl	800eaf0 <f_open>
 8003110:	4603      	mov	r3, r0
 8003112:	7023      	strb	r3, [r4, #0]
		*config.fres = f_close(config.fil);
 8003114:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003118:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003122:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8003126:	6814      	ldr	r4, [r2, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f00c fa1e 	bl	800f56a <f_close>
 800312e:	4603      	mov	r3, r0
 8003130:	7023      	strb	r3, [r4, #0]

		*config.fres = f_open(config.fil, "BrokenDevices.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8003132:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003136:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003140:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8003144:	6814      	ldr	r4, [r2, #0]
 8003146:	2213      	movs	r2, #19
 8003148:	492f      	ldr	r1, [pc, #188]	; (8003208 <setupSDcard+0x1a0>)
 800314a:	4618      	mov	r0, r3
 800314c:	f00b fcd0 	bl	800eaf0 <f_open>
 8003150:	4603      	mov	r3, r0
 8003152:	7023      	strb	r3, [r4, #0]
		*config.fres = f_close(config.fil);
 8003154:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003158:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003162:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8003166:	6814      	ldr	r4, [r2, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f00c f9fe 	bl	800f56a <f_close>
 800316e:	4603      	mov	r3, r0
 8003170:	7023      	strb	r3, [r4, #0]

		*config.fres = f_open(config.fil, "LowBatteryDevices.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8003172:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003176:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003180:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8003184:	6814      	ldr	r4, [r2, #0]
 8003186:	2213      	movs	r2, #19
 8003188:	4920      	ldr	r1, [pc, #128]	; (800320c <setupSDcard+0x1a4>)
 800318a:	4618      	mov	r0, r3
 800318c:	f00b fcb0 	bl	800eaf0 <f_open>
 8003190:	4603      	mov	r3, r0
 8003192:	7023      	strb	r3, [r4, #0]
		*config.fres = f_close(config.fil);
 8003194:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003198:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80031a2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80031a6:	6814      	ldr	r4, [r2, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f00c f9de 	bl	800f56a <f_close>
 80031ae:	4603      	mov	r3, r0
 80031b0:	7023      	strb	r3, [r4, #0]

		//Close SD card
		if(stopCard(&config)){
 80031b2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80031b6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fc3a 	bl	8005a34 <stopCard>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <setupSDcard+0x166>
			printf("\r\ncard unmounted");
 80031c6:	480c      	ldr	r0, [pc, #48]	; (80031f8 <setupSDcard+0x190>)
 80031c8:	f00d fc7a 	bl	8010ac0 <iprintf>
 80031cc:	e006      	b.n	80031dc <setupSDcard+0x174>
		}
		else{

			printf("\r\nfail to unmount card");
 80031ce:	480b      	ldr	r0, [pc, #44]	; (80031fc <setupSDcard+0x194>)
 80031d0:	f00d fc76 	bl	8010ac0 <iprintf>
 80031d4:	e002      	b.n	80031dc <setupSDcard+0x174>
		}
	}
	else{

		printf("\r\nfail to mount card");
 80031d6:	480e      	ldr	r0, [pc, #56]	; (8003210 <setupSDcard+0x1a8>)
 80031d8:	f00d fc72 	bl	8010ac0 <iprintf>
	}

	//Power off SD card
	HAL_GPIO_WritePin(SPIGPIO, SPIGPIOPin, GPIO_PIN_RESET);
 80031dc:	2200      	movs	r2, #0
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	4804      	ldr	r0, [pc, #16]	; (80031f4 <setupSDcard+0x18c>)
 80031e2:	f004 ff6d 	bl	80080c0 <HAL_GPIO_WritePin>
}
 80031e6:	bf00      	nop
 80031e8:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 80031ec:	373c      	adds	r7, #60	; 0x3c
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd90      	pop	{r4, r7, pc}
 80031f2:	bf00      	nop
 80031f4:	48000400 	.word	0x48000400
 80031f8:	08013f08 	.word	0x08013f08
 80031fc:	08013f1c 	.word	0x08013f1c
 8003200:	08013f34 	.word	0x08013f34
 8003204:	08013f74 	.word	0x08013f74
 8003208:	08013fa0 	.word	0x08013fa0
 800320c:	08013fb4 	.word	0x08013fb4
 8003210:	08013f88 	.word	0x08013f88

08003214 <addBrokenDeviceToSD>:

//Function to add broken device information to SD card
void addBrokenDeviceToSD(struct SDinfo* config, uint16_t deviceID){
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]

	char buf[10];
	printf("\r\nAddign broken device");
 8003220:	480a      	ldr	r0, [pc, #40]	; (800324c <addBrokenDeviceToSD+0x38>)
 8003222:	f00d fc4d 	bl	8010ac0 <iprintf>

	//Send specified broken device ID to SD card
	sprintf(buf, "Device_%d\n", deviceID);
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	4908      	ldr	r1, [pc, #32]	; (8003250 <addBrokenDeviceToSD+0x3c>)
 800322e:	4618      	mov	r0, r3
 8003230:	f00d fd4c 	bl	8010ccc <siprintf>
	sendSD(config, "BrokenDevices.txt", buf);
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	461a      	mov	r2, r3
 800323a:	4906      	ldr	r1, [pc, #24]	; (8003254 <addBrokenDeviceToSD+0x40>)
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f002 fb89 	bl	8005954 <sendSD>

}
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	08013fcc 	.word	0x08013fcc
 8003250:	08013f68 	.word	0x08013f68
 8003254:	08013fa0 	.word	0x08013fa0

08003258 <addLowBatteryDeviceToSD>:

//function to add low battery device information to SD card
void addLowBatteryDeviceToSD(struct SDinfo* config, uint16_t deviceID){
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]

	char buf[10];
	printf("\r\nAdding low battery device");
 8003264:	480a      	ldr	r0, [pc, #40]	; (8003290 <addLowBatteryDeviceToSD+0x38>)
 8003266:	f00d fc2b 	bl	8010ac0 <iprintf>

	//Send specified low battery device ID to SD card
	sprintf(buf, "Device_%d\n", deviceID);
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	4908      	ldr	r1, [pc, #32]	; (8003294 <addLowBatteryDeviceToSD+0x3c>)
 8003272:	4618      	mov	r0, r3
 8003274:	f00d fd2a 	bl	8010ccc <siprintf>
	sendSD(config, "LowBatteryDevices.txt", buf);
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	461a      	mov	r2, r3
 800327e:	4906      	ldr	r1, [pc, #24]	; (8003298 <addLowBatteryDeviceToSD+0x40>)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f002 fb67 	bl	8005954 <sendSD>

}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	08013fe4 	.word	0x08013fe4
 8003294:	08013f68 	.word	0x08013f68
 8003298:	08013fb4 	.word	0x08013fb4

0800329c <getDevices>:

//Function to get devices from file in SD card
void getDevices(struct SDinfo* config, char* listFile, uint16_t* data, uint8_t* num){
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	f507 6482 	add.w	r4, r7, #1040	; 0x410
 80032a8:	f2a4 4404 	subw	r4, r4, #1028	; 0x404
 80032ac:	6020      	str	r0, [r4, #0]
 80032ae:	f507 6082 	add.w	r0, r7, #1040	; 0x410
 80032b2:	f5a0 6081 	sub.w	r0, r0, #1032	; 0x408
 80032b6:	6001      	str	r1, [r0, #0]
 80032b8:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80032bc:	f2a1 410c 	subw	r1, r1, #1036	; 0x40c
 80032c0:	600a      	str	r2, [r1, #0]
 80032c2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80032c6:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 80032ca:	6013      	str	r3, [r2, #0]

	char buf[1000];
	//printf("\r\ngetting SD data");
	getSD(config, listFile, buf);
 80032cc:	f107 0214 	add.w	r2, r7, #20
 80032d0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80032d4:	f5a3 6181 	sub.w	r1, r3, #1032	; 0x408
 80032d8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80032dc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80032e0:	6809      	ldr	r1, [r1, #0]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	f002 fbbe 	bl	8005a64 <getSD>
	//printf("\r\nretrieved data: %s", buf);
	int iterator = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	for(int i = 0; i<strlen(buf);i++){
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80032f4:	e05d      	b.n	80033b2 <getDevices+0x116>
		//printf("\r\nCurrent data: %c", buf[i]);
		if(buf[i]=='_'){
 80032f6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80032fa:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 80032fe:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003302:	4413      	add	r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b5f      	cmp	r3, #95	; 0x5f
 8003308:	d14e      	bne.n	80033a8 <getDevices+0x10c>
			int numberIterator = i+1;
 800330a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800330e:	3301      	adds	r3, #1
 8003310:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

			uint16_t gatheredNum = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
			//printf("\r\nnumber started");
			int gettingNumber = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
			while(gettingNumber){
 8003320:	e02d      	b.n	800337e <getDevices+0xe2>
				//printf("\r\nchecking data: %c", buf[numberIterator]);
				if(isdigit(buf[numberIterator])){
 8003322:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8003326:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 800332a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800332e:	4413      	add	r3, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	4a2b      	ldr	r2, [pc, #172]	; (80033e4 <getDevices+0x148>)
 8003336:	4413      	add	r3, r2
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d015      	beq.n	800336e <getDevices+0xd2>
					//printf("\r\nadding number %c to %d", buf[i], gatheredNum);
					gatheredNum = gatheredNum*10 + (buf[numberIterator] - '0');
 8003342:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8003346:	461a      	mov	r2, r3
 8003348:	0092      	lsls	r2, r2, #2
 800334a:	4413      	add	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8003354:	f5a3 717f 	sub.w	r1, r3, #1020	; 0x3fc
 8003358:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800335c:	440b      	add	r3, r1
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b29b      	uxth	r3, r3
 8003362:	4413      	add	r3, r2
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b30      	subs	r3, #48	; 0x30
 8003368:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
 800336c:	e002      	b.n	8003374 <getDevices+0xd8>

				}
				else{
					gettingNumber = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
				}
				numberIterator++;
 8003374:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8003378:	3301      	adds	r3, #1
 800337a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
			while(gettingNumber){
 800337e:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1cd      	bne.n	8003322 <getDevices+0x86>
			}

			data[iterator] = gatheredNum;
 8003386:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8003390:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	4413      	add	r3, r2
 8003398:	f8b7 2402 	ldrh.w	r2, [r7, #1026]	; 0x402
 800339c:	801a      	strh	r2, [r3, #0]
			iterator++;
 800339e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80033a2:	3301      	adds	r3, #1
 80033a4:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	for(int i = 0; i<strlen(buf);i++){
 80033a8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80033ac:	3301      	adds	r3, #1
 80033ae:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fc ff0a 	bl	80001d0 <strlen>
 80033bc:	4602      	mov	r2, r0
 80033be:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d897      	bhi.n	80032f6 <getDevices+0x5a>
		}

	}

	*num = iterator;
 80033c6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80033d0:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	701a      	strb	r2, [r3, #0]

}
 80033d8:	bf00      	nop
 80033da:	f207 4714 	addw	r7, r7, #1044	; 0x414
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	bf00      	nop
 80033e4:	08014884 	.word	0x08014884

080033e8 <checkForRemote>:

//Function to check for presence of a remote
void checkForRemote(struct rfDataStorage* rfData){
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

	//retrieve mother ID
	uint64_t managementBuf[managementDataNum];
	Flash_Read_Data(managementDataAddr, managementBuf, managementDataNum);
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	2202      	movs	r2, #2
 80033f6:	4619      	mov	r1, r3
 80033f8:	4831      	ldr	r0, [pc, #196]	; (80034c0 <checkForRemote+0xd8>)
 80033fa:	f7fd ff09 	bl	8001210 <Flash_Read_Data>

	//Initialize comms
	init_comms(rfData, DEVICE_PARENT, managementBuf[0], 0);
 80033fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003402:	2300      	movs	r3, #0
 8003404:	2100      	movs	r1, #0
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f001 fcc4 	bl	8004d94 <init_comms>

	//Power on communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 800340c:	2201      	movs	r2, #1
 800340e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003412:	482c      	ldr	r0, [pc, #176]	; (80034c4 <checkForRemote+0xdc>)
 8003414:	f004 fe54 	bl	80080c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003418:	2064      	movs	r0, #100	; 0x64
 800341a:	f003 f8cb 	bl	80065b4 <HAL_Delay>

	//Check ofr remote for 10s
	for(int i = 0;i<10;i++){
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e03f      	b.n	80034a4 <checkForRemote+0xbc>
		printf("\r\nchecking for remote");
 8003424:	4828      	ldr	r0, [pc, #160]	; (80034c8 <checkForRemote+0xe0>)
 8003426:	f00d fb4b 	bl	8010ac0 <iprintf>
		//Handle incoming messages
		Comms_Handler(rfData);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f001 fd00 	bl	8004e30 <Comms_Handler>

		//iterate over potential messages list
		for(int i = 0; i<rfData->messageNum; i++){
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	e028      	b.n	8003488 <checkForRemote+0xa0>
			//add device
			printf("\r\nReceived message type: %x", rfData->activeRxMessage[i][MSG_TYPE_POS]);
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	33af      	adds	r3, #175	; 0xaf
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	4619      	mov	r1, r3
 800344a:	4820      	ldr	r0, [pc, #128]	; (80034cc <checkForRemote+0xe4>)
 800344c:	f00d fb38 	bl	8010ac0 <iprintf>

			//Check if data was requested by remote
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_GIVE_STATUS_DATA){
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	33af      	adds	r3, #175	; 0xaf
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b51      	cmp	r3, #81	; 0x51
 8003464:	d10d      	bne.n	8003482 <checkForRemote+0x9a>
				printf("\r\nsending data to remote");
 8003466:	481a      	ldr	r0, [pc, #104]	; (80034d0 <checkForRemote+0xe8>)
 8003468:	f00d fb2a 	bl	8010ac0 <iprintf>

				//Send data to remote
				sentDataToRemote(rfData, rfData->fromID[i]);
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3340      	adds	r3, #64	; 0x40
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	889b      	ldrh	r3, [r3, #4]
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f82a 	bl	80034d4 <sentDataToRemote>
				break;
 8003480:	e009      	b.n	8003496 <checkForRemote+0xae>
		for(int i = 0; i<rfData->messageNum; i++){
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	3301      	adds	r3, #1
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800348e:	461a      	mov	r2, r3
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	4293      	cmp	r3, r2
 8003494:	dbcf      	blt.n	8003436 <checkForRemote+0x4e>
			}
		}
		HAL_Delay(1000);
 8003496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800349a:	f003 f88b 	bl	80065b4 <HAL_Delay>
	for(int i = 0;i<10;i++){
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	ddbc      	ble.n	8003424 <checkForRemote+0x3c>
	}

	//Power off communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);
 80034aa:	2200      	movs	r2, #0
 80034ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034b0:	4804      	ldr	r0, [pc, #16]	; (80034c4 <checkForRemote+0xdc>)
 80034b2:	f004 fe05 	bl	80080c0 <HAL_GPIO_WritePin>

}
 80034b6:	bf00      	nop
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	08019000 	.word	0x08019000
 80034c4:	48000400 	.word	0x48000400
 80034c8:	08014000 	.word	0x08014000
 80034cc:	08014018 	.word	0x08014018
 80034d0:	08014034 	.word	0x08014034

080034d4 <sentDataToRemote>:

//Function to send data to an an active remote
void sentDataToRemote(struct rfDataStorage* rfData, int remoteId){
 80034d4:	b580      	push	{r7, lr}
 80034d6:	f5ad 5d08 	sub.w	sp, sp, #8704	; 0x2200
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80034e2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80034e6:	6018      	str	r0, [r3, #0]
 80034e8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80034ec:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80034f0:	6019      	str	r1, [r3, #0]

	FATFS fs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres;

	sdData.fs = &fs;
 80034f2:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80034f6:	3b10      	subs	r3, #16
 80034f8:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80034fc:	f102 0208 	add.w	r2, r2, #8
 8003500:	6013      	str	r3, [r2, #0]
	sdData.fil = &fil;
 8003502:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003506:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800350a:	f102 020c 	add.w	r2, r2, #12
 800350e:	6013      	str	r3, [r2, #0]
	sdData.fres = &fres;
 8003510:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003514:	3b01      	subs	r3, #1
 8003516:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800351a:	f102 0210 	add.w	r2, r2, #16
 800351e:	6013      	str	r3, [r2, #0]

	uint16_t lowBatteryDevices[100];
	uint16_t brokenDevices[100];

	uint8_t lowBatteryNum = 0;
 8003520:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003524:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
	uint8_t brokenNum = 0;
 800352c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003530:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]

	//Power on SD card
	HAL_GPIO_WritePin(SPIGPIO, SPIGPIOPin, GPIO_PIN_SET);
 8003538:	2201      	movs	r2, #1
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	48a0      	ldr	r0, [pc, #640]	; (80037c0 <sentDataToRemote+0x2ec>)
 800353e:	f004 fdbf 	bl	80080c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003542:	2064      	movs	r0, #100	; 0x64
 8003544:	f003 f836 	bl	80065b4 <HAL_Delay>

	//Open SD cardd
	if(setupCard(&sdData)){
 8003548:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800354c:	f103 0308 	add.w	r3, r3, #8
 8003550:	4618      	mov	r0, r3
 8003552:	f002 fa53 	bl	80059fc <setupCard>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d027      	beq.n	80035ac <sentDataToRemote+0xd8>

		//Retrierve broken devices from SD card
		getDevices(&sdData, "BrokenDevices.txt",  brokenDevices, &brokenNum);
 800355c:	f107 0320 	add.w	r3, r7, #32
 8003560:	3b16      	subs	r3, #22
 8003562:	f107 0220 	add.w	r2, r7, #32
 8003566:	3a14      	subs	r2, #20
 8003568:	f507 5008 	add.w	r0, r7, #8704	; 0x2200
 800356c:	f100 0008 	add.w	r0, r0, #8
 8003570:	4994      	ldr	r1, [pc, #592]	; (80037c4 <sentDataToRemote+0x2f0>)
 8003572:	f7ff fe93 	bl	800329c <getDevices>

		//Retrieve low battery devices from SD card
		getDevices(&sdData, "LowBatteryDevices.txt",  lowBatteryDevices, &lowBatteryNum);
 8003576:	f107 0320 	add.w	r3, r7, #32
 800357a:	3b15      	subs	r3, #21
 800357c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003580:	3a0c      	subs	r2, #12
 8003582:	f507 5008 	add.w	r0, r7, #8704	; 0x2200
 8003586:	f100 0008 	add.w	r0, r0, #8
 800358a:	498f      	ldr	r1, [pc, #572]	; (80037c8 <sentDataToRemote+0x2f4>)
 800358c:	f7ff fe86 	bl	800329c <getDevices>

		//Stop SD card
		if(!stopCard(&sdData)){
 8003590:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003594:	f103 0308 	add.w	r3, r3, #8
 8003598:	4618      	mov	r0, r3
 800359a:	f002 fa4b 	bl	8005a34 <stopCard>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <sentDataToRemote+0xde>

			printf("\r\nSD stop error");
 80035a4:	4889      	ldr	r0, [pc, #548]	; (80037cc <sentDataToRemote+0x2f8>)
 80035a6:	f00d fa8b 	bl	8010ac0 <iprintf>
 80035aa:	e002      	b.n	80035b2 <sentDataToRemote+0xde>
		}

	}
	else{

		printf("\r\nSD start error");
 80035ac:	4888      	ldr	r0, [pc, #544]	; (80037d0 <sentDataToRemote+0x2fc>)
 80035ae:	f00d fa87 	bl	8010ac0 <iprintf>

	}

	//Power off SD card
	HAL_GPIO_WritePin(SPIGPIO, SPIGPIOPin, GPIO_PIN_RESET);
 80035b2:	2200      	movs	r2, #0
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	4882      	ldr	r0, [pc, #520]	; (80037c0 <sentDataToRemote+0x2ec>)
 80035b8:	f004 fd82 	bl	80080c0 <HAL_GPIO_WritePin>
		printf("\r\n%d", lowBatteryDevices[i]);

	}*/

	//Message to send broken devices
	rfData->activeTxMessageSize = brokenNum;
 80035bc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80035c0:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80035ca:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 80035d4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80035d8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	22fe      	movs	r2, #254	; 0xfe
 80035e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_GIVE_BROKEN_DATA;
 80035e4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80035e8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2250      	movs	r2, #80	; 0x50
 80035f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_TO_ID_POS1] = remoteId&0xFF;
 80035f4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80035f8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003604:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = (remoteId>>8)&0xFF;
 800360e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003612:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	121b      	asrs	r3, r3, #8
 800361a:	b2da      	uxtb	r2, r3
 800361c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003620:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0xFF;
 800362a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800362e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	889b      	ldrh	r3, [r3, #4]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800363c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = (rfData->myDevice.device_id>>8)&0xFF;
 8003646:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800364a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	889b      	ldrh	r3, [r3, #4]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	b29b      	uxth	r3, r3
 8003656:	b2da      	uxtb	r2, r3
 8003658:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800365c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8003666:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800366a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = 0;
 8003676:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800367a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8003686:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800368a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8003694:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003698:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	int iterator = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036a8:	f102 021c 	add.w	r2, r2, #28
 80036ac:	6013      	str	r3, [r2, #0]

	//Power on communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 80036ae:	2201      	movs	r2, #1
 80036b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036b4:	4842      	ldr	r0, [pc, #264]	; (80037c0 <sentDataToRemote+0x2ec>)
 80036b6:	f004 fd03 	bl	80080c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80036ba:	2064      	movs	r0, #100	; 0x64
 80036bc:	f002 ff7a 	bl	80065b4 <HAL_Delay>

	//Send all broken device in waves
	for(int i = 0;i<brokenNum;i++){
 80036c0:	2300      	movs	r3, #0
 80036c2:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036c6:	f102 0218 	add.w	r2, r2, #24
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	e098      	b.n	8003800 <sentDataToRemote+0x32c>

		rfData->activeTxMessage[iterator+MSG_BODY_START] = brokenDevices[i]&0xFF;
 80036ce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80036d2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80036d6:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036da:	f102 0218 	add.w	r2, r2, #24
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80036e4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80036e8:	f103 031c 	add.w	r3, r3, #28
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3309      	adds	r3, #9
 80036f0:	b2d1      	uxtb	r1, r2
 80036f2:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80036f6:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	4413      	add	r3, r2
 80036fe:	460a      	mov	r2, r1
 8003700:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		rfData->activeTxMessage[iterator+1+MSG_BODY_START] = (brokenDevices[i]>>8)&0xFF;
 8003704:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003708:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800370c:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8003710:	f102 0218 	add.w	r2, r2, #24
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	b29a      	uxth	r2, r3
 800371e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003722:	f103 031c 	add.w	r3, r3, #28
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330a      	adds	r3, #10
 800372a:	b2d1      	uxtb	r1, r2
 800372c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003730:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	4413      	add	r3, r2
 8003738:	460a      	mov	r2, r1
 800373a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		//Send data if 8 bytes of data were gathered
		if(iterator==8){
 800373e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003742:	f103 031c 	add.w	r3, r3, #28
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d143      	bne.n	80037d4 <sentDataToRemote+0x300>
			rfData->activeTxMessageSize = iterator;
 800374c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003750:	f103 031c 	add.w	r3, r3, #28
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	b2da      	uxtb	r2, r3
 8003758:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800375c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8003766:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800376a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8003774:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003778:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8003782:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003786:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8003790:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003794:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800379e:	3309      	adds	r3, #9
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f001 ffc7 	bl	8005738 <Send>
			iterator = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80037b0:	f102 021c 	add.w	r2, r2, #28
 80037b4:	6013      	str	r3, [r2, #0]
			HAL_Delay(300);
 80037b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037ba:	f002 fefb 	bl	80065b4 <HAL_Delay>
 80037be:	e014      	b.n	80037ea <sentDataToRemote+0x316>
 80037c0:	48000400 	.word	0x48000400
 80037c4:	08013fa0 	.word	0x08013fa0
 80037c8:	08013fb4 	.word	0x08013fb4
 80037cc:	08013c9c 	.word	0x08013c9c
 80037d0:	08013cac 	.word	0x08013cac
		}
		else{
			iterator+=2;
 80037d4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80037d8:	f103 031c 	add.w	r3, r3, #28
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3302      	adds	r3, #2
 80037e0:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80037e4:	f102 021c 	add.w	r2, r2, #28
 80037e8:	6013      	str	r3, [r2, #0]
	for(int i = 0;i<brokenNum;i++){
 80037ea:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80037ee:	f103 0318 	add.w	r3, r3, #24
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80037fa:	f102 0218 	add.w	r2, r2, #24
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003804:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003810:	f103 0318 	add.w	r3, r3, #24
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4293      	cmp	r3, r2
 8003818:	f6ff af59 	blt.w	80036ce <sentDataToRemote+0x1fa>
		}
	}

	if(iterator>0){
 800381c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003820:	f103 031c 	add.w	r3, r3, #28
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	dd32      	ble.n	8003890 <sentDataToRemote+0x3bc>
		rfData->activeTxMessageSize = iterator;
 800382a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800382e:	f103 031c 	add.w	r3, r3, #28
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800383a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8003844:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003848:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8003852:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003856:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8003860:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003864:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f103 0299 	add.w	r2, r3, #153	; 0x99
 800386e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003872:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800387c:	3309      	adds	r3, #9
 800387e:	b2db      	uxtb	r3, r3
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f001 ff58 	bl	8005738 <Send>
		HAL_Delay(300);
 8003888:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800388c:	f002 fe92 	bl	80065b4 <HAL_Delay>
	}

	//low battery devices
	rfData->activeTxMessageSize = lowBatteryNum;
 8003890:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003894:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800389e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 80038a8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80038ac:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	22fe      	movs	r2, #254	; 0xfe
 80038b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_GIVE_LOW_BATTERY_DATA;
 80038b8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80038bc:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2252      	movs	r2, #82	; 0x52
 80038c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_TO_ID_POS1] = remoteId&0xFF;
 80038c8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80038cc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80038d8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = (remoteId>>8)&0xFF;
 80038e2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80038e6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	121b      	asrs	r3, r3, #8
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80038f4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0xFF;
 80038fe:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003902:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	889b      	ldrh	r3, [r3, #4]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003910:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = (rfData->myDevice.device_id>>8)&0xFF;
 800391a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800391e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	889b      	ldrh	r3, [r3, #4]
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	b29b      	uxth	r3, r3
 800392a:	b2da      	uxtb	r2, r3
 800392c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003930:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 800393a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800393e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = 0;
 800394a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800394e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 800395a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800395e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8003968:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800396c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	iterator = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800397c:	f102 021c 	add.w	r2, r2, #28
 8003980:	6013      	str	r3, [r2, #0]
	for(int i = 0;i<lowBatteryNum;i++){
 8003982:	2300      	movs	r3, #0
 8003984:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8003988:	f102 0214 	add.w	r2, r2, #20
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e088      	b.n	8003aa2 <sentDataToRemote+0x5ce>

		rfData->activeTxMessage[iterator+MSG_BODY_START] = lowBatteryDevices[i]&0xFF;
 8003990:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003994:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003998:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800399c:	f102 0214 	add.w	r2, r2, #20
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80039a6:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80039aa:	f103 031c 	add.w	r3, r3, #28
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3309      	adds	r3, #9
 80039b2:	b2d1      	uxtb	r1, r2
 80039b4:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80039b8:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	4413      	add	r3, r2
 80039c0:	460a      	mov	r2, r1
 80039c2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		rfData->activeTxMessage[iterator+1+MSG_BODY_START] = (lowBatteryDevices[i]>>8)&0xFF;
 80039c6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80039ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039ce:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80039d2:	f102 0214 	add.w	r2, r2, #20
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	b29a      	uxth	r2, r3
 80039e0:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80039e4:	f103 031c 	add.w	r3, r3, #28
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	330a      	adds	r3, #10
 80039ec:	b2d1      	uxtb	r1, r2
 80039ee:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80039f2:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	460a      	mov	r2, r1
 80039fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		if(iterator==8){
 8003a00:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003a04:	f103 031c 	add.w	r3, r3, #28
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d133      	bne.n	8003a76 <sentDataToRemote+0x5a2>
			rfData->activeTxMessageSize = iterator;
 8003a0e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003a12:	f103 031c 	add.w	r3, r3, #28
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003a1e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8003a28:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003a2c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8003a36:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003a3a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8003a44:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003a48:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8003a52:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003a56:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003a60:	3309      	adds	r3, #9
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f001 fe66 	bl	8005738 <Send>
			HAL_Delay(300);
 8003a6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a70:	f002 fda0 	bl	80065b4 <HAL_Delay>
 8003a74:	e00a      	b.n	8003a8c <sentDataToRemote+0x5b8>
		}
		else{
		    iterator+=2;
 8003a76:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003a7a:	f103 031c 	add.w	r3, r3, #28
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3302      	adds	r3, #2
 8003a82:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8003a86:	f102 021c 	add.w	r2, r2, #28
 8003a8a:	6013      	str	r3, [r2, #0]
	for(int i = 0;i<lowBatteryNum;i++){
 8003a8c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003a90:	f103 0314 	add.w	r3, r3, #20
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8003a9c:	f102 0214 	add.w	r2, r2, #20
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003aa6:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003ab2:	f103 0314 	add.w	r3, r3, #20
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	f6ff af69 	blt.w	8003990 <sentDataToRemote+0x4bc>
		}
	}
	if(iterator>0){
 8003abe:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003ac2:	f103 031c 	add.w	r3, r3, #28
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	dd32      	ble.n	8003b32 <sentDataToRemote+0x65e>
		rfData->activeTxMessageSize = iterator;
 8003acc:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003ad0:	f103 031c 	add.w	r3, r3, #28
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003adc:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8003ae6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003aea:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8003af4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003af8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8003b02:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b06:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8003b10:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b14:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003b1e:	3309      	adds	r3, #9
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4619      	mov	r1, r3
 8003b24:	4610      	mov	r0, r2
 8003b26:	f001 fe07 	bl	8005738 <Send>
		HAL_Delay(300);
 8003b2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003b2e:	f002 fd41 	bl	80065b4 <HAL_Delay>
	}
	HAL_Delay(3000);
 8003b32:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003b36:	f002 fd3d 	bl	80065b4 <HAL_Delay>
	printf("\r\nSending DONE message");
 8003b3a:	484a      	ldr	r0, [pc, #296]	; (8003c64 <sentDataToRemote+0x790>)
 8003b3c:	f00c ffc0 	bl	8010ac0 <iprintf>
	rfData->activeTxMessageSize = 0;
 8003b40:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b44:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	//rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_REMOTE_DONE;
 8003b50:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b54:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2254      	movs	r2, #84	; 0x54
 8003b5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_TO_ID_POS1] = remoteId&0xFF;
 8003b60:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b64:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b70:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = (remoteId>>8)&0xFF;
 8003b7a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b7e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	121b      	asrs	r3, r3, #8
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b8c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0xFF;
 8003b96:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b9a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	889b      	ldrh	r3, [r3, #4]
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003ba8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = (rfData->myDevice.device_id>>8)&0xFF;
 8003bb2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003bb6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	889b      	ldrh	r3, [r3, #4]
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003bc8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8003bd2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003bd6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = 0;
 8003be2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003be6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8003bf2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003bf6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8003c00:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003c04:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003c0e:	3309      	adds	r3, #9
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f001 fd8f 	bl	8005738 <Send>
	HAL_Delay(3000);
 8003c1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003c1e:	f002 fcc9 	bl	80065b4 <HAL_Delay>
	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8003c22:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003c26:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8003c30:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003c34:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003c3e:	3309      	adds	r3, #9
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f001 fd77 	bl	8005738 <Send>

	//Power off communication device
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c50:	4805      	ldr	r0, [pc, #20]	; (8003c68 <sentDataToRemote+0x794>)
 8003c52:	f004 fa35 	bl	80080c0 <HAL_GPIO_WritePin>
}
 8003c56:	bf00      	nop
 8003c58:	f507 5708 	add.w	r7, r7, #8704	; 0x2200
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	08014050 	.word	0x08014050
 8003c68:	48000400 	.word	0x48000400

08003c6c <memorySetup>:

//Function to setup memory for operation
void memorySetup(){
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0

	//printf("setting up memory");
	uint64_t setupData[managementDataNum];
	Flash_Read_Data(managementDataAddr, setupData, managementDataNum);
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	2202      	movs	r2, #2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4812      	ldr	r0, [pc, #72]	; (8003cc4 <memorySetup+0x58>)
 8003c7c:	f7fd fac8 	bl	8001210 <Flash_Read_Data>
	setupData[1] = 1;
 8003c80:	f04f 0201 	mov.w	r2, #1
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9c7 2304 	strd	r2, r3, [r7, #16]

	//printf("writting memory");
	Flash_Write_Data(managementDataAddr, setupData, managementDataNum);
 8003c8c:	f107 0308 	add.w	r3, r7, #8
 8003c90:	2202      	movs	r2, #2
 8003c92:	4619      	mov	r1, r3
 8003c94:	480b      	ldr	r0, [pc, #44]	; (8003cc4 <memorySetup+0x58>)
 8003c96:	f7fd fa4d 	bl	8001134 <Flash_Write_Data>

	//Refersh number of devices
	uint64_t deviceNum[] = {0};
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9c7 2300 	strd	r2, r3, [r7]
	Flash_Write_Data(numberOfDevicesAddress, deviceNum, 1);
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4619      	mov	r1, r3
 8003cac:	4806      	ldr	r0, [pc, #24]	; (8003cc8 <memorySetup+0x5c>)
 8003cae:	f7fd fa41 	bl	8001134 <Flash_Write_Data>

	//Refresh all changing data
	Flash_Erase_Data(changingDeviceDataStart, 1);
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4805      	ldr	r0, [pc, #20]	; (8003ccc <memorySetup+0x60>)
 8003cb6:	f7fd f9f1 	bl	800109c <Flash_Erase_Data>
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	08019000 	.word	0x08019000
 8003cc8:	0801b000 	.word	0x0801b000
 8003ccc:	0801a000 	.word	0x0801a000

08003cd0 <mainSetup>:

//Function to setup device for operation
int mainSetup(struct rfDataStorage* rfData, struct CommunicationHandles* handles){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]

	printf("\r\nSetting up");
 8003cda:	481a      	ldr	r0, [pc, #104]	; (8003d44 <mainSetup+0x74>)
 8003cdc:	f00c fef0 	bl	8010ac0 <iprintf>
	//Check if user wants to reset device IDs
	if(IDhandling()){
 8003ce0:	f000 f86c 	bl	8003dbc <IDhandling>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <mainSetup+0x1e>
		return 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e026      	b.n	8003d3c <mainSetup+0x6c>
	}

	//Check if user wants to use remote
	if(remoteAccessHandling(rfData)){
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f832 	bl	8003d58 <remoteAccessHandling>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d004      	beq.n	8003d04 <mainSetup+0x34>
		printf("\r\nHandling remote");
 8003cfa:	4813      	ldr	r0, [pc, #76]	; (8003d48 <mainSetup+0x78>)
 8003cfc:	f00c fee0 	bl	8010ac0 <iprintf>
		//go to shutdown mode
		setShutdownMode();
 8003d00:	f000 f8de 	bl	8003ec0 <setShutdownMode>

	}

	//Retrieve setup bit from flash memory
	uint64_t setupBit[1];
	Flash_Read_Data(setupAddr, setupBit, 1);
 8003d04:	f107 0308 	add.w	r3, r7, #8
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	480f      	ldr	r0, [pc, #60]	; (8003d4c <mainSetup+0x7c>)
 8003d0e:	f7fd fa7f 	bl	8001210 <Flash_Read_Data>

	//Check if setup should be performed
	if(setupBit[0]!=1){
 8003d12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d16:	1e51      	subs	r1, r2, #1
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	d00e      	beq.n	8003d3a <mainSetup+0x6a>
		printf("\r\nperforming setup");
 8003d1c:	480c      	ldr	r0, [pc, #48]	; (8003d50 <mainSetup+0x80>)
 8003d1e:	f00c fecf 	bl	8010ac0 <iprintf>

		//Add initila data to SD card
		setupSDcard();
 8003d22:	f7ff f9a1 	bl	8003068 <setupSDcard>

		//Set memory values for setup
		memorySetup();
 8003d26:	f7ff ffa1 	bl	8003c6c <memorySetup>
		printf("\r\nSetup done");
 8003d2a:	480a      	ldr	r0, [pc, #40]	; (8003d54 <mainSetup+0x84>)
 8003d2c:	f00c fec8 	bl	8010ac0 <iprintf>
		setShutdownMode(handles->RTChandle);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f8c3 	bl	8003ec0 <setShutdownMode>

	}

	return 1;
 8003d3a:	2301      	movs	r3, #1

}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	08014068 	.word	0x08014068
 8003d48:	08014078 	.word	0x08014078
 8003d4c:	08019008 	.word	0x08019008
 8003d50:	0801408c 	.word	0x0801408c
 8003d54:	080140a0 	.word	0x080140a0

08003d58 <remoteAccessHandling>:

//Function to handle communication with a remote
int remoteAccessHandling(struct rfDataStorage* rfData){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

	int remoteListening = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003d64:	2201      	movs	r2, #1
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	4812      	ldr	r0, [pc, #72]	; (8003db4 <remoteAccessHandling+0x5c>)
 8003d6a:	f004 f9a9 	bl	80080c0 <HAL_GPIO_WritePin>

	//Check if user wants to lsiten for remote
	if(HAL_GPIO_ReadPin(remoteGPIO, remoteGPIOPin)== GPIO_PIN_SET)
 8003d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d72:	4811      	ldr	r0, [pc, #68]	; (8003db8 <remoteAccessHandling+0x60>)
 8003d74:	f004 f98c 	bl	8008090 <HAL_GPIO_ReadPin>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d110      	bne.n	8003da0 <remoteAccessHandling+0x48>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d84:	480b      	ldr	r0, [pc, #44]	; (8003db4 <remoteAccessHandling+0x5c>)
 8003d86:	f004 f99b 	bl	80080c0 <HAL_GPIO_WritePin>
		remoteListening = 1;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]

		//Check for remote signals
		checkForRemote(rfData);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fb2a 	bl	80033e8 <checkForRemote>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003d94:	2200      	movs	r2, #0
 8003d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d9a:	4806      	ldr	r0, [pc, #24]	; (8003db4 <remoteAccessHandling+0x5c>)
 8003d9c:	f004 f990 	bl	80080c0 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003da0:	2200      	movs	r2, #0
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	4803      	ldr	r0, [pc, #12]	; (8003db4 <remoteAccessHandling+0x5c>)
 8003da6:	f004 f98b 	bl	80080c0 <HAL_GPIO_WritePin>
	return remoteListening;
 8003daa:	68fb      	ldr	r3, [r7, #12]

}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	48000800 	.word	0x48000800
 8003db8:	48000400 	.word	0x48000400

08003dbc <IDhandling>:

//Function to handle device ID changes
int IDhandling(){
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08c      	sub	sp, #48	; 0x30
 8003dc0:	af00      	add	r7, sp, #0

	printf("\r\nChecking ID set pin : %d ", HAL_GPIO_ReadPin(idSetGPIO, idSetGPIOPin));
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	4834      	ldr	r0, [pc, #208]	; (8003e98 <IDhandling+0xdc>)
 8003dc6:	f004 f963 	bl	8008090 <HAL_GPIO_ReadPin>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4833      	ldr	r0, [pc, #204]	; (8003e9c <IDhandling+0xe0>)
 8003dd0:	f00c fe76 	bl	8010ac0 <iprintf>

	if(HAL_GPIO_ReadPin(idSetGPIO, idSetGPIOPin)== GPIO_PIN_SET)
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	4830      	ldr	r0, [pc, #192]	; (8003e98 <IDhandling+0xdc>)
 8003dd8:	f004 f95a 	bl	8008090 <HAL_GPIO_ReadPin>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d154      	bne.n	8003e8c <IDhandling+0xd0>
		uint64_t managementBuf[managementDataNum];
		uint64_t rxBuf[2];
		uint32_t buf;

		//Request user to set mother device ID
		printf("\r\nSet device ID");
 8003de2:	482f      	ldr	r0, [pc, #188]	; (8003ea0 <IDhandling+0xe4>)
 8003de4:	f00c fe6c 	bl	8010ac0 <iprintf>
		scanf("%ld", &buf);
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	4619      	mov	r1, r3
 8003dee:	482d      	ldr	r0, [pc, #180]	; (8003ea4 <IDhandling+0xe8>)
 8003df0:	f00c fe8e 	bl	8010b10 <iscanf>
		printf("\r\nData to write: %ld", (uint32_t)buf);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4619      	mov	r1, r3
 8003df8:	482b      	ldr	r0, [pc, #172]	; (8003ea8 <IDhandling+0xec>)
 8003dfa:	f00c fe61 	bl	8010ac0 <iprintf>
		managementBuf[0] = 70;
 8003dfe:	f04f 0246 	mov.w	r2, #70	; 0x46
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	e9c7 2308 	strd	r2, r3, [r7, #32]

		//Set other configuration flags
		managementBuf[1] = 0;
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		//Write configuration data to flash memory
		if(Flash_Write_Data(managementDataAddr, managementBuf, managementDataNum) == HAL_OK){
 8003e16:	f107 0320 	add.w	r3, r7, #32
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4823      	ldr	r0, [pc, #140]	; (8003eac <IDhandling+0xf0>)
 8003e20:	f7fd f988 	bl	8001134 <Flash_Write_Data>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d114      	bne.n	8003e54 <IDhandling+0x98>

			Flash_Read_Data(managementDataAddr, rxBuf, managementDataNum);
 8003e2a:	f107 0310 	add.w	r3, r7, #16
 8003e2e:	2202      	movs	r2, #2
 8003e30:	4619      	mov	r1, r3
 8003e32:	481e      	ldr	r0, [pc, #120]	; (8003eac <IDhandling+0xf0>)
 8003e34:	f7fd f9ec 	bl	8001210 <Flash_Read_Data>
			printf("\r\nID set to %ld", (uint32_t)rxBuf[0]);
 8003e38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	481b      	ldr	r0, [pc, #108]	; (8003eb0 <IDhandling+0xf4>)
 8003e42:	f00c fe3d 	bl	8010ac0 <iprintf>
			printf("\r\nSetup bit set to: %ld", (uint32_t)rxBuf[1]);
 8003e46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4819      	ldr	r0, [pc, #100]	; (8003eb4 <IDhandling+0xf8>)
 8003e50:	f00c fe36 	bl	8010ac0 <iprintf>
		}

		//Refresh number of active devices
		uint64_t deviceBuf[1] = {0};
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	e9c7 2300 	strd	r2, r3, [r7]
		Flash_Write_Data(numberOfDevicesAddress, deviceBuf, 1);
 8003e60:	463b      	mov	r3, r7
 8003e62:	2201      	movs	r2, #1
 8003e64:	4619      	mov	r1, r3
 8003e66:	4814      	ldr	r0, [pc, #80]	; (8003eb8 <IDhandling+0xfc>)
 8003e68:	f7fd f964 	bl	8001134 <Flash_Write_Data>
		Flash_Read_Data(numberOfDevicesAddress, rxBuf, 1);
 8003e6c:	f107 0310 	add.w	r3, r7, #16
 8003e70:	2201      	movs	r2, #1
 8003e72:	4619      	mov	r1, r3
 8003e74:	4810      	ldr	r0, [pc, #64]	; (8003eb8 <IDhandling+0xfc>)
 8003e76:	f7fd f9cb 	bl	8001210 <Flash_Read_Data>
		printf("\r\nSet device num to %ld", (uint32_t)rxBuf[0]);
 8003e7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	480e      	ldr	r0, [pc, #56]	; (8003ebc <IDhandling+0x100>)
 8003e84:	f00c fe1c 	bl	8010ac0 <iprintf>
		return 1;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <IDhandling+0xd2>
	}

	return 0;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3730      	adds	r7, #48	; 0x30
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	48000400 	.word	0x48000400
 8003e9c:	080140b0 	.word	0x080140b0
 8003ea0:	080140cc 	.word	0x080140cc
 8003ea4:	080140dc 	.word	0x080140dc
 8003ea8:	080140e0 	.word	0x080140e0
 8003eac:	08019000 	.word	0x08019000
 8003eb0:	080140f8 	.word	0x080140f8
 8003eb4:	08014108 	.word	0x08014108
 8003eb8:	0801b000 	.word	0x0801b000
 8003ebc:	08014120 	.word	0x08014120

08003ec0 <setShutdownMode>:

//Function to to let device go into shutdown mode
void setShutdownMode(){
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0

	//Suspend system tick to prevent device from waking up beforehand
	printf("\r\nEntering Shutdown Mode");
 8003ec4:	4804      	ldr	r0, [pc, #16]	; (8003ed8 <setShutdownMode+0x18>)
 8003ec6:	f00c fdfb 	bl	8010ac0 <iprintf>
	HAL_SuspendTick();
 8003eca:	f002 fb97 	bl	80065fc <HAL_SuspendTick>
	HAL_PWREx_EnterSHUTDOWNMode();
 8003ece:	f004 f983 	bl	80081d8 <HAL_PWREx_EnterSHUTDOWNMode>

}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	08014138 	.word	0x08014138

08003edc <mainOperation>:

//Function to perform main device operation
void mainOperation(struct rfDataStorage* rfData, struct CommunicationHandles* handles)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b0b8      	sub	sp, #224	; 0xe0
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	//Retrieve current system time
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8003eee:	2200      	movs	r2, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f005 fb6c 	bl	80095ce <HAL_RTC_GetTime>
	HAL_RTC_GetDate(handles->RTChandle, &sDate, RTC_FORMAT_BIN);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003efe:	2200      	movs	r2, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f005 fc47 	bl	8009794 <HAL_RTC_GetDate>
	printf("\r\nOperating at %02d::%02d::%02d",  sTime.Hours, sTime.Minutes, sTime.Seconds);
 8003f06:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003f10:	461a      	mov	r2, r3
 8003f12:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003f16:	482d      	ldr	r0, [pc, #180]	; (8003fcc <mainOperation+0xf0>)
 8003f18:	f00c fdd2 	bl	8010ac0 <iprintf>

	//Save system time of when mother device woke up
	struct timeData timeInfo;
	timeInfo.seconds = sTime.Seconds;
 8003f1c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	timeInfo.minutes = sTime.Minutes;
 8003f24:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	timeInfo.hours = sTime.Hours;
 8003f2c:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	timeInfo.day = sDate.Date;
 8003f34:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8003f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	timeInfo.month = sDate.Month;
 8003f3c:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8003f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	timeInfo.year = sDate.Year;
 8003f44:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003f48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	//Create new device holders
	struct newDevicesStorage newDevices;
	newDevices.numOfNewDevices = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	767b      	strb	r3, [r7, #25]
	rfData->newDevices = newDevices;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003f56:	f107 0118 	add.w	r1, r7, #24
 8003f5a:	2298      	movs	r2, #152	; 0x98
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f00c f84f 	bl	8010000 <memcpy>

	//get device number
	uint64_t deviceNum[1];
	Flash_Read_Data(numberOfDevicesAddress, deviceNum, 1);
 8003f62:	f107 0310 	add.w	r3, r7, #16
 8003f66:	2201      	movs	r2, #1
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4819      	ldr	r0, [pc, #100]	; (8003fd0 <mainOperation+0xf4>)
 8003f6c:	f7fd f950 	bl	8001210 <Flash_Read_Data>
	newDevices.currentNumOfDevices =  deviceNum[0];
 8003f70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f74:	b2d3      	uxtb	r3, r2
 8003f76:	763b      	strb	r3, [r7, #24]

	//Wait for child devices to wake up
	HAL_Delay(5000);
 8003f78:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f7c:	f002 fb1a 	bl	80065b4 <HAL_Delay>

	//Retrieve dedvice ID
	uint64_t idBuf[1];
	Flash_Read_Data(IDaddressAddr, idBuf, 1);
 8003f80:	f107 0308 	add.w	r3, r7, #8
 8003f84:	2201      	movs	r2, #1
 8003f86:	4619      	mov	r1, r3
 8003f88:	4812      	ldr	r0, [pc, #72]	; (8003fd4 <mainOperation+0xf8>)
 8003f8a:	f7fd f941 	bl	8001210 <Flash_Read_Data>

	//Initialize comms
	init_comms(rfData, DEVICE_PARENT, idBuf[0], 0);
 8003f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f92:	2300      	movs	r3, #0
 8003f94:	2100      	movs	r1, #0
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fefc 	bl	8004d94 <init_comms>

	//Check for new devices
	if(newDevices.currentNumOfDevices<DEVICE_LIMIT){
 8003f9c:	7e3b      	ldrb	r3, [r7, #24]
 8003f9e:	2b63      	cmp	r3, #99	; 0x63
 8003fa0:	d803      	bhi.n	8003faa <mainOperation+0xce>
		checkForNewDevices(handles, rfData);
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	6838      	ldr	r0, [r7, #0]
 8003fa6:	f7fe f9e5 	bl	8002374 <checkForNewDevices>
	}

	//Scan for measurement data in aknowledged devices
	scanDeviceForData(rfData, handles, &timeInfo);
 8003faa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6839      	ldr	r1, [r7, #0]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd fd44 	bl	8001a40 <scanDeviceForData>

	//Add newly discovered devices to storage
	addNewDevices(rfData);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fe fd47 	bl	8002a4c <addNewDevices>

	//Go to shutdown mode
	setShutdownMode();
 8003fbe:	f7ff ff7f 	bl	8003ec0 <setShutdownMode>
}
 8003fc2:	bf00      	nop
 8003fc4:	37e0      	adds	r7, #224	; 0xe0
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	08014154 	.word	0x08014154
 8003fd0:	0801b000 	.word	0x0801b000
 8003fd4:	08019000 	.word	0x08019000

08003fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buf[100];

	struct CommunicationHandles handles;
    handles.SPIhandle = &hspi2;
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <main+0xb8>)
 8003fe2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	handles.RTChandle = &hrtc;
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <main+0xbc>)
 8003fe8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fec:	f002 fa6d 	bl	80064ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ff0:	f000 f85e 	bl	80040b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ff4:	f000 faac 	bl	8004550 <MX_GPIO_Init>
  MX_FATFS_Init();
 8003ff8:	f008 faea 	bl	800c5d0 <MX_FATFS_Init>
  MX_RTC_Init();
 8003ffc:	f000 f99a 	bl	8004334 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8004000:	f000 f928 	bl	8004254 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8004004:	f000 f952 	bl	80042ac <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8004008:	f000 fa64 	bl	80044d4 <MX_SPI2_Init>
  MX_RNG_Init();
 800400c:	f000 f97e 	bl	800430c <MX_RNG_Init>
  MX_ADC1_Init();
 8004010:	f000 f8aa 	bl	8004168 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8004014:	4820      	ldr	r0, [pc, #128]	; (8004098 <main+0xc0>)
 8004016:	f000 fb6b 	bl	80046f0 <RetargetInit>

struct rfDataStorage rfData;
rfData.RXFIFO = &RXFIFO;
 800401a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800401e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8004022:	4a1e      	ldr	r2, [pc, #120]	; (800409c <main+0xc4>)
 8004024:	601a      	str	r2, [r3, #0]

HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 8004026:	2214      	movs	r2, #20
 8004028:	491d      	ldr	r1, [pc, #116]	; (80040a0 <main+0xc8>)
 800402a:	481e      	ldr	r0, [pc, #120]	; (80040a4 <main+0xcc>)
 800402c:	f006 fe34 	bl	800ac98 <HAL_UART_Receive_IT>

if(mainSetup(&rfData, &handles)){
 8004030:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8004034:	463b      	mov	r3, r7
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fe49 	bl	8003cd0 <mainSetup>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <main+0x7a>
   mainOperation(&rfData, &handles);
 8004044:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8004048:	463b      	mov	r3, r7
 800404a:	4611      	mov	r1, r2
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff45 	bl	8003edc <mainOperation>
}

HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8004052:	2201      	movs	r2, #1
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	4814      	ldr	r0, [pc, #80]	; (80040a8 <main+0xd0>)
 8004058:	f004 f832 	bl	80080c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800405c:	2201      	movs	r2, #1
 800405e:	2180      	movs	r1, #128	; 0x80
 8004060:	4811      	ldr	r0, [pc, #68]	; (80040a8 <main+0xd0>)
 8004062:	f004 f82d 	bl	80080c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8004066:	2201      	movs	r2, #1
 8004068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800406c:	480e      	ldr	r0, [pc, #56]	; (80040a8 <main+0xd0>)
 800406e:	f004 f827 	bl	80080c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8004072:	2201      	movs	r2, #1
 8004074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004078:	480b      	ldr	r0, [pc, #44]	; (80040a8 <main+0xd0>)
 800407a:	f004 f821 	bl	80080c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_SET);
	  HAL_Delay(100);
	  SDcardTest();
	  HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_RESET);
*/
	  printf("Loop");
 800407e:	480b      	ldr	r0, [pc, #44]	; (80040ac <main+0xd4>)
 8004080:	f00c fd1e 	bl	8010ac0 <iprintf>
	  HAL_Delay(1000);
 8004084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004088:	f002 fa94 	bl	80065b4 <HAL_Delay>
	  printf("Loop");
 800408c:	e7f7      	b.n	800407e <main+0xa6>
 800408e:	bf00      	nop
 8004090:	200003f8 	.word	0x200003f8
 8004094:	200003cc 	.word	0x200003cc
 8004098:	20000338 	.word	0x20000338
 800409c:	2000045c 	.word	0x2000045c
 80040a0:	200006c0 	.word	0x200006c0
 80040a4:	200002b4 	.word	0x200002b4
 80040a8:	48000800 	.word	0x48000800
 80040ac:	08014174 	.word	0x08014174

080040b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b096      	sub	sp, #88	; 0x58
 80040b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	2244      	movs	r2, #68	; 0x44
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f00b ffac 	bl	801001c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040c4:	463b      	mov	r3, r7
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	609a      	str	r2, [r3, #8]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80040d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040d6:	f004 f829 	bl	800812c <HAL_PWREx_ControlVoltageScaling>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80040e0:	f000 fb00 	bl	80046e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80040e4:	f004 f804 	bl	80080f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80040e8:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <SystemClock_Config+0xb4>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <SystemClock_Config+0xb4>)
 80040f0:	f023 0318 	bic.w	r3, r3, #24
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80040f8:	2316      	movs	r3, #22
 80040fa:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80040fc:	2301      	movs	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004104:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004106:	2340      	movs	r3, #64	; 0x40
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800410a:	2301      	movs	r3, #1
 800410c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004112:	2360      	movs	r3, #96	; 0x60
 8004114:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004116:	2300      	movs	r3, #0
 8004118:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800411a:	f107 0314 	add.w	r3, r7, #20
 800411e:	4618      	mov	r0, r3
 8004120:	f004 f874 	bl	800820c <HAL_RCC_OscConfig>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800412a:	f000 fadb 	bl	80046e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800412e:	230f      	movs	r3, #15
 8004130:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004132:	2301      	movs	r3, #1
 8004134:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004142:	463b      	mov	r3, r7
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f004 fcc2 	bl	8008ad0 <HAL_RCC_ClockConfig>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004152:	f000 fac7 	bl	80046e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004156:	f005 f865 	bl	8009224 <HAL_RCCEx_EnableMSIPLLMode>
}
 800415a:	bf00      	nop
 800415c:	3758      	adds	r7, #88	; 0x58
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000

08004168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800416e:	f107 031c 	add.w	r3, r7, #28
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
 8004188:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800418a:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <MX_ADC1_Init+0xe0>)
 800418c:	4a2f      	ldr	r2, [pc, #188]	; (800424c <MX_ADC1_Init+0xe4>)
 800418e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004190:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <MX_ADC1_Init+0xe0>)
 8004192:	2200      	movs	r2, #0
 8004194:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004196:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <MX_ADC1_Init+0xe0>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800419c:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <MX_ADC1_Init+0xe0>)
 800419e:	2200      	movs	r2, #0
 80041a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80041a2:	4b29      	ldr	r3, [pc, #164]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041aa:	2204      	movs	r2, #4
 80041ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80041ae:	4b26      	ldr	r3, [pc, #152]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80041b4:	4b24      	ldr	r3, [pc, #144]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80041ba:	4b23      	ldr	r3, [pc, #140]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041bc:	2201      	movs	r2, #1
 80041be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041c0:	4b21      	ldr	r3, [pc, #132]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041c8:	4b1f      	ldr	r3, [pc, #124]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80041d4:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041de:	2200      	movs	r2, #0
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80041e2:	4b19      	ldr	r3, [pc, #100]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041ea:	4817      	ldr	r0, [pc, #92]	; (8004248 <MX_ADC1_Init+0xe0>)
 80041ec:	f002 fbb6 	bl	800695c <HAL_ADC_Init>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80041f6:	f000 fa75 	bl	80046e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80041fe:	f107 031c 	add.w	r3, r7, #28
 8004202:	4619      	mov	r1, r3
 8004204:	4810      	ldr	r0, [pc, #64]	; (8004248 <MX_ADC1_Init+0xe0>)
 8004206:	f003 f91b 	bl	8007440 <HAL_ADCEx_MultiModeConfigChannel>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004210:	f000 fa68 	bl	80046e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <MX_ADC1_Init+0xe8>)
 8004216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004218:	2306      	movs	r3, #6
 800421a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004220:	237f      	movs	r3, #127	; 0x7f
 8004222:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004224:	2304      	movs	r3, #4
 8004226:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	4619      	mov	r1, r3
 8004230:	4805      	ldr	r0, [pc, #20]	; (8004248 <MX_ADC1_Init+0xe0>)
 8004232:	f002 fce3 	bl	8006bfc <HAL_ADC_ConfigChannel>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800423c:	f000 fa52 	bl	80046e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004240:	bf00      	nop
 8004242:	3728      	adds	r7, #40	; 0x28
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000250 	.word	0x20000250
 800424c:	50040000 	.word	0x50040000
 8004250:	19200040 	.word	0x19200040

08004254 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <MX_LPUART1_UART_Init+0x50>)
 800425a:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <MX_LPUART1_UART_Init+0x54>)
 800425c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <MX_LPUART1_UART_Init+0x50>)
 8004260:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004264:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <MX_LPUART1_UART_Init+0x50>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800426c:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <MX_LPUART1_UART_Init+0x50>)
 800426e:	2200      	movs	r2, #0
 8004270:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004272:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <MX_LPUART1_UART_Init+0x50>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <MX_LPUART1_UART_Init+0x50>)
 800427a:	220c      	movs	r2, #12
 800427c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <MX_LPUART1_UART_Init+0x50>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <MX_LPUART1_UART_Init+0x50>)
 8004286:	2200      	movs	r2, #0
 8004288:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <MX_LPUART1_UART_Init+0x50>)
 800428c:	2200      	movs	r2, #0
 800428e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004290:	4804      	ldr	r0, [pc, #16]	; (80042a4 <MX_LPUART1_UART_Init+0x50>)
 8004292:	f006 fadf 	bl	800a854 <HAL_UART_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800429c:	f000 fa22 	bl	80046e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80042a0:	bf00      	nop
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	200002b4 	.word	0x200002b4
 80042a8:	40008000 	.word	0x40008000

080042ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042b0:	4b14      	ldr	r3, [pc, #80]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042b2:	4a15      	ldr	r2, [pc, #84]	; (8004308 <MX_USART3_UART_Init+0x5c>)
 80042b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80042b6:	4b13      	ldr	r3, [pc, #76]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042d2:	220c      	movs	r2, #12
 80042d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042d8:	2200      	movs	r2, #0
 80042da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042ee:	4805      	ldr	r0, [pc, #20]	; (8004304 <MX_USART3_UART_Init+0x58>)
 80042f0:	f006 fab0 	bl	800a854 <HAL_UART_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80042fa:	f000 f9f3 	bl	80046e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000338 	.word	0x20000338
 8004308:	40004800 	.word	0x40004800

0800430c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <MX_RNG_Init+0x20>)
 8004312:	4a07      	ldr	r2, [pc, #28]	; (8004330 <MX_RNG_Init+0x24>)
 8004314:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004316:	4805      	ldr	r0, [pc, #20]	; (800432c <MX_RNG_Init+0x20>)
 8004318:	f004 ff94 	bl	8009244 <HAL_RNG_Init>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8004322:	f000 f9df 	bl	80046e4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200003bc 	.word	0x200003bc
 8004330:	50060800 	.word	0x50060800

08004334 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b092      	sub	sp, #72	; 0x48
 8004338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800433a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	60da      	str	r2, [r3, #12]
 8004348:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800434a:	2300      	movs	r3, #0
 800434c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800434e:	1d3b      	adds	r3, r7, #4
 8004350:	222c      	movs	r2, #44	; 0x2c
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f00b fe61 	bl	801001c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800435a:	4b5b      	ldr	r3, [pc, #364]	; (80044c8 <MX_RTC_Init+0x194>)
 800435c:	4a5b      	ldr	r2, [pc, #364]	; (80044cc <MX_RTC_Init+0x198>)
 800435e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004360:	4b59      	ldr	r3, [pc, #356]	; (80044c8 <MX_RTC_Init+0x194>)
 8004362:	2200      	movs	r2, #0
 8004364:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8004366:	4b58      	ldr	r3, [pc, #352]	; (80044c8 <MX_RTC_Init+0x194>)
 8004368:	227f      	movs	r2, #127	; 0x7f
 800436a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800436c:	4b56      	ldr	r3, [pc, #344]	; (80044c8 <MX_RTC_Init+0x194>)
 800436e:	22ff      	movs	r2, #255	; 0xff
 8004370:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004372:	4b55      	ldr	r3, [pc, #340]	; (80044c8 <MX_RTC_Init+0x194>)
 8004374:	2200      	movs	r2, #0
 8004376:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004378:	4b53      	ldr	r3, [pc, #332]	; (80044c8 <MX_RTC_Init+0x194>)
 800437a:	2200      	movs	r2, #0
 800437c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800437e:	4b52      	ldr	r3, [pc, #328]	; (80044c8 <MX_RTC_Init+0x194>)
 8004380:	2200      	movs	r2, #0
 8004382:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004384:	4b50      	ldr	r3, [pc, #320]	; (80044c8 <MX_RTC_Init+0x194>)
 8004386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800438a:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800438c:	4b4e      	ldr	r3, [pc, #312]	; (80044c8 <MX_RTC_Init+0x194>)
 800438e:	2200      	movs	r2, #0
 8004390:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004392:	484d      	ldr	r0, [pc, #308]	; (80044c8 <MX_RTC_Init+0x194>)
 8004394:	f004 fffc 	bl	8009390 <HAL_RTC_Init>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 800439e:	f000 f9a1 	bl	80046e4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != RTC_BKUP_DEFINE_CODE)
 80043a2:	2100      	movs	r1, #0
 80043a4:	4848      	ldr	r0, [pc, #288]	; (80044c8 <MX_RTC_Init+0x194>)
 80043a6:	f005 fcb0 	bl	8009d0a <HAL_RTCEx_BKUPRead>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f240 3227 	movw	r2, #807	; 0x327
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d037      	beq.n	8004424 <MX_RTC_Init+0xf0>
  	// Clear Backup registor : recover to current RTC information

  	// Set to Time/Date from current Time/Date

  	// Write a data in ad RTC Backup data register
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, RTC_BKUP_DEFINE_CODE);
 80043b4:	f240 3227 	movw	r2, #807	; 0x327
 80043b8:	2100      	movs	r1, #0
 80043ba:	4843      	ldr	r0, [pc, #268]	; (80044c8 <MX_RTC_Init+0x194>)
 80043bc:	f005 fc85 	bl	8009cca <HAL_RTCEx_BKUPWrite>

  	  sTime.Hours = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  	  sTime.Minutes = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  	  sTime.Seconds = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	643b      	str	r3, [r7, #64]	; 0x40
  	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80043d6:	2300      	movs	r3, #0
 80043d8:	647b      	str	r3, [r7, #68]	; 0x44
  	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80043da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043de:	2200      	movs	r2, #0
 80043e0:	4619      	mov	r1, r3
 80043e2:	4839      	ldr	r0, [pc, #228]	; (80044c8 <MX_RTC_Init+0x194>)
 80043e4:	f005 f856 	bl	8009494 <HAL_RTC_SetTime>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_RTC_Init+0xbe>
  	  {
  		Error_Handler();
 80043ee:	f000 f979 	bl	80046e4 <Error_Handler>
  	  }
  	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  	  sDate.Month = RTC_MONTH_JANUARY;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  	  sDate.Date = 1;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  	  sDate.Year = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800440a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800440e:	2200      	movs	r2, #0
 8004410:	4619      	mov	r1, r3
 8004412:	482d      	ldr	r0, [pc, #180]	; (80044c8 <MX_RTC_Init+0x194>)
 8004414:	f005 f937 	bl	8009686 <HAL_RTC_SetDate>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d010      	beq.n	8004440 <MX_RTC_Init+0x10c>
  	  {
  		Error_Handler();
 800441e:	f000 f961 	bl	80046e4 <Error_Handler>
 8004422:	e00d      	b.n	8004440 <MX_RTC_Init+0x10c>
  	  }

    } else
    {
  	// Only read time and date
  	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004424:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004428:	2200      	movs	r2, #0
 800442a:	4619      	mov	r1, r3
 800442c:	4826      	ldr	r0, [pc, #152]	; (80044c8 <MX_RTC_Init+0x194>)
 800442e:	f005 f8ce 	bl	80095ce <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004436:	2200      	movs	r2, #0
 8004438:	4619      	mov	r1, r3
 800443a:	4823      	ldr	r0, [pc, #140]	; (80044c8 <MX_RTC_Init+0x194>)
 800443c:	f005 f9aa 	bl	8009794 <HAL_RTC_GetDate>
  /** Initialize RTC and set the Time and Date
  */

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8004458:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <MX_RTC_Init+0x19c>)
 800445a:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800445c:	2300      	movs	r3, #0
 800445e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8004460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800446c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004472:	1d3b      	adds	r3, r7, #4
 8004474:	2200      	movs	r2, #0
 8004476:	4619      	mov	r1, r3
 8004478:	4813      	ldr	r0, [pc, #76]	; (80044c8 <MX_RTC_Init+0x194>)
 800447a:	f005 f9d9 	bl	8009830 <HAL_RTC_SetAlarm_IT>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8004484:	f000 f92e 	bl	80046e4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Seconds = 30;
 8004488:	231e      	movs	r3, #30
 800448a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800448c:	2300      	movs	r3, #0
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8004490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004496:	1d3b      	adds	r3, r7, #4
 8004498:	2200      	movs	r2, #0
 800449a:	4619      	mov	r1, r3
 800449c:	480a      	ldr	r0, [pc, #40]	; (80044c8 <MX_RTC_Init+0x194>)
 800449e:	f005 f9c7 	bl	8009830 <HAL_RTC_SetAlarm_IT>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <MX_RTC_Init+0x178>
  {
    Error_Handler();
 80044a8:	f000 f91c 	bl	80046e4 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 80044ac:	2100      	movs	r1, #0
 80044ae:	4806      	ldr	r0, [pc, #24]	; (80044c8 <MX_RTC_Init+0x194>)
 80044b0:	f005 fbba 	bl	8009c28 <HAL_RTCEx_SetCalibrationOutPut>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <MX_RTC_Init+0x18a>
  {
    Error_Handler();
 80044ba:	f000 f913 	bl	80046e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80044be:	bf00      	nop
 80044c0:	3748      	adds	r7, #72	; 0x48
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200003cc 	.word	0x200003cc
 80044cc:	40002800 	.word	0x40002800
 80044d0:	80808000 	.word	0x80808000

080044d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <MX_SPI2_Init+0x74>)
 80044da:	4a1c      	ldr	r2, [pc, #112]	; (800454c <MX_SPI2_Init+0x78>)
 80044dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80044de:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <MX_SPI2_Init+0x74>)
 80044e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80044e6:	4b18      	ldr	r3, [pc, #96]	; (8004548 <MX_SPI2_Init+0x74>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80044ec:	4b16      	ldr	r3, [pc, #88]	; (8004548 <MX_SPI2_Init+0x74>)
 80044ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f4:	4b14      	ldr	r3, [pc, #80]	; (8004548 <MX_SPI2_Init+0x74>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044fa:	4b13      	ldr	r3, [pc, #76]	; (8004548 <MX_SPI2_Init+0x74>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004500:	4b11      	ldr	r3, [pc, #68]	; (8004548 <MX_SPI2_Init+0x74>)
 8004502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004506:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <MX_SPI2_Init+0x74>)
 800450a:	2200      	movs	r2, #0
 800450c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800450e:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <MX_SPI2_Init+0x74>)
 8004510:	2200      	movs	r2, #0
 8004512:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <MX_SPI2_Init+0x74>)
 8004516:	2200      	movs	r2, #0
 8004518:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <MX_SPI2_Init+0x74>)
 800451c:	2200      	movs	r2, #0
 800451e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <MX_SPI2_Init+0x74>)
 8004522:	2207      	movs	r2, #7
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <MX_SPI2_Init+0x74>)
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <MX_SPI2_Init+0x74>)
 800452e:	2208      	movs	r2, #8
 8004530:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004532:	4805      	ldr	r0, [pc, #20]	; (8004548 <MX_SPI2_Init+0x74>)
 8004534:	f005 fc06 	bl	8009d44 <HAL_SPI_Init>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800453e:	f000 f8d1 	bl	80046e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	200003f8 	.word	0x200003f8
 800454c:	40003800 	.word	0x40003800

08004550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004556:	f107 0314 	add.w	r3, r7, #20
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	609a      	str	r2, [r3, #8]
 8004562:	60da      	str	r2, [r3, #12]
 8004564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004566:	4b41      	ldr	r3, [pc, #260]	; (800466c <MX_GPIO_Init+0x11c>)
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	4a40      	ldr	r2, [pc, #256]	; (800466c <MX_GPIO_Init+0x11c>)
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004572:	4b3e      	ldr	r3, [pc, #248]	; (800466c <MX_GPIO_Init+0x11c>)
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800457e:	4b3b      	ldr	r3, [pc, #236]	; (800466c <MX_GPIO_Init+0x11c>)
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	4a3a      	ldr	r2, [pc, #232]	; (800466c <MX_GPIO_Init+0x11c>)
 8004584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800458a:	4b38      	ldr	r3, [pc, #224]	; (800466c <MX_GPIO_Init+0x11c>)
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004596:	4b35      	ldr	r3, [pc, #212]	; (800466c <MX_GPIO_Init+0x11c>)
 8004598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459a:	4a34      	ldr	r2, [pc, #208]	; (800466c <MX_GPIO_Init+0x11c>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045a2:	4b32      	ldr	r3, [pc, #200]	; (800466c <MX_GPIO_Init+0x11c>)
 80045a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ae:	4b2f      	ldr	r3, [pc, #188]	; (800466c <MX_GPIO_Init+0x11c>)
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	4a2e      	ldr	r2, [pc, #184]	; (800466c <MX_GPIO_Init+0x11c>)
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ba:	4b2c      	ldr	r3, [pc, #176]	; (800466c <MX_GPIO_Init+0x11c>)
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80045c6:	2200      	movs	r2, #0
 80045c8:	f44f 519e 	mov.w	r1, #5056	; 0x13c0
 80045cc:	4828      	ldr	r0, [pc, #160]	; (8004670 <MX_GPIO_Init+0x120>)
 80045ce:	f003 fd77 	bl	80080c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80045d2:	2200      	movs	r2, #0
 80045d4:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80045d8:	4826      	ldr	r0, [pc, #152]	; (8004674 <MX_GPIO_Init+0x124>)
 80045da:	f003 fd71 	bl	80080c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80045de:	2200      	movs	r2, #0
 80045e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045e8:	f003 fd6a 	bl	80080c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80045ec:	f240 4304 	movw	r3, #1028	; 0x404
 80045f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fa:	f107 0314 	add.w	r3, r7, #20
 80045fe:	4619      	mov	r1, r3
 8004600:	481b      	ldr	r0, [pc, #108]	; (8004670 <MX_GPIO_Init+0x120>)
 8004602:	f003 fbd3 	bl	8007dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8004606:	f44f 539e 	mov.w	r3, #5056	; 0x13c0
 800460a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800460c:	2301      	movs	r3, #1
 800460e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004614:	2300      	movs	r3, #0
 8004616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004618:	f107 0314 	add.w	r3, r7, #20
 800461c:	4619      	mov	r1, r3
 800461e:	4814      	ldr	r0, [pc, #80]	; (8004670 <MX_GPIO_Init+0x120>)
 8004620:	f003 fbc4 	bl	8007dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004624:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800462a:	2301      	movs	r3, #1
 800462c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004632:	2300      	movs	r3, #0
 8004634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004636:	f107 0314 	add.w	r3, r7, #20
 800463a:	4619      	mov	r1, r3
 800463c:	480d      	ldr	r0, [pc, #52]	; (8004674 <MX_GPIO_Init+0x124>)
 800463e:	f003 fbb5 	bl	8007dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004648:	2301      	movs	r3, #1
 800464a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004650:	2300      	movs	r3, #0
 8004652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004654:	f107 0314 	add.w	r3, r7, #20
 8004658:	4619      	mov	r1, r3
 800465a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800465e:	f003 fba5 	bl	8007dac <HAL_GPIO_Init>

}
 8004662:	bf00      	nop
 8004664:	3728      	adds	r7, #40	; 0x28
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
 8004670:	48000400 	.word	0x48000400
 8004674:	48000800 	.word	0x48000800

08004678 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	//printf("\r\nreceived uart message");
	for (int i = 0; i < MSG_SIZE_TRANSFER; i++)
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e012      	b.n	80046ac <HAL_UART_RxCpltCallback+0x34>
	{
			printf("\r\nreceived uart message: %x", UART2_rxBuffer[i]);
 8004686:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <HAL_UART_RxCpltCallback+0x5c>)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	4811      	ldr	r0, [pc, #68]	; (80046d8 <HAL_UART_RxCpltCallback+0x60>)
 8004692:	f00c fa15 	bl	8010ac0 <iprintf>
			enqueue(&RXFIFO, UART2_rxBuffer[i]);
 8004696:	4a0f      	ldr	r2, [pc, #60]	; (80046d4 <HAL_UART_RxCpltCallback+0x5c>)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	480e      	ldr	r0, [pc, #56]	; (80046dc <HAL_UART_RxCpltCallback+0x64>)
 80046a2:	f001 f8f1 	bl	8005888 <enqueue>
	for (int i = 0; i < MSG_SIZE_TRANSFER; i++)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3301      	adds	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b13      	cmp	r3, #19
 80046b0:	dde9      	ble.n	8004686 <HAL_UART_RxCpltCallback+0xe>
	}
	//Setup new receive interrupt
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 80046b2:	2214      	movs	r2, #20
 80046b4:	4907      	ldr	r1, [pc, #28]	; (80046d4 <HAL_UART_RxCpltCallback+0x5c>)
 80046b6:	480a      	ldr	r0, [pc, #40]	; (80046e0 <HAL_UART_RxCpltCallback+0x68>)
 80046b8:	f006 faee 	bl	800ac98 <HAL_UART_Receive_IT>

	//Abort new interrupt to clear the buffer
	HAL_UART_Abort_IT(&hlpuart1);
 80046bc:	4808      	ldr	r0, [pc, #32]	; (80046e0 <HAL_UART_RxCpltCallback+0x68>)
 80046be:	f006 fb41 	bl	800ad44 <HAL_UART_Abort_IT>

	//Setup new clean receive interrupt
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 80046c2:	2214      	movs	r2, #20
 80046c4:	4903      	ldr	r1, [pc, #12]	; (80046d4 <HAL_UART_RxCpltCallback+0x5c>)
 80046c6:	4806      	ldr	r0, [pc, #24]	; (80046e0 <HAL_UART_RxCpltCallback+0x68>)
 80046c8:	f006 fae6 	bl	800ac98 <HAL_UART_Receive_IT>
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	200006c0 	.word	0x200006c0
 80046d8:	0801417c 	.word	0x0801417c
 80046dc:	2000045c 	.word	0x2000045c
 80046e0:	200002b4 	.word	0x200002b4

080046e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046e8:	b672      	cpsid	i
}
 80046ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046ec:	e7fe      	b.n	80046ec <Error_Handler+0x8>
	...

080046f0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80046f8:	4a07      	ldr	r2, [pc, #28]	; (8004718 <RetargetInit+0x28>)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <RetargetInit+0x2c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6898      	ldr	r0, [r3, #8]
 8004704:	2300      	movs	r3, #0
 8004706:	2202      	movs	r2, #2
 8004708:	2100      	movs	r1, #0
 800470a:	f00c fa19 	bl	8010b40 <setvbuf>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200006d4 	.word	0x200006d4
 800471c:	20000044 	.word	0x20000044

08004720 <_isatty>:

int _isatty(int fd) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	db04      	blt.n	8004738 <_isatty+0x18>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b02      	cmp	r3, #2
 8004732:	dc01      	bgt.n	8004738 <_isatty+0x18>
    return 1;
 8004734:	2301      	movs	r3, #1
 8004736:	e005      	b.n	8004744 <_isatty+0x24>

  errno = EBADF;
 8004738:	f00b fc30 	bl	800ff9c <__errno>
 800473c:	4603      	mov	r3, r0
 800473e:	2209      	movs	r2, #9
 8004740:	601a      	str	r2, [r3, #0]
  return 0;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <_write>:

int _write(int fd, char* ptr, int len) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d002      	beq.n	8004764 <_write+0x18>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d111      	bne.n	8004788 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <_write+0x54>)
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	b29a      	uxth	r2, r3
 800476c:	f04f 33ff 	mov.w	r3, #4294967295
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	f006 f8bd 	bl	800a8f0 <HAL_UART_Transmit>
 8004776:	4603      	mov	r3, r0
 8004778:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <_write+0x38>
      return len;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	e008      	b.n	8004796 <_write+0x4a>
    else
      return EIO;
 8004784:	2305      	movs	r3, #5
 8004786:	e006      	b.n	8004796 <_write+0x4a>
  }
  errno = EBADF;
 8004788:	f00b fc08 	bl	800ff9c <__errno>
 800478c:	4603      	mov	r3, r0
 800478e:	2209      	movs	r2, #9
 8004790:	601a      	str	r2, [r3, #0]
  return -1;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	200006d4 	.word	0x200006d4

080047a4 <_close>:

int _close(int fd) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	db04      	blt.n	80047bc <_close+0x18>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	dc01      	bgt.n	80047bc <_close+0x18>
    return 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e006      	b.n	80047ca <_close+0x26>

  errno = EBADF;
 80047bc:	f00b fbee 	bl	800ff9c <__errno>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2209      	movs	r2, #9
 80047c4:	601a      	str	r2, [r3, #0]
  return -1;
 80047c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80047de:	f00b fbdd 	bl	800ff9c <__errno>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2209      	movs	r2, #9
 80047e6:	601a      	str	r2, [r3, #0]
  return -1;
 80047e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <_read>:

int _read(int fd, char* ptr, int len) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d110      	bne.n	8004828 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <_read+0x4c>)
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	f04f 33ff 	mov.w	r3, #4294967295
 800480e:	2201      	movs	r2, #1
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	f006 f901 	bl	800aa18 <HAL_UART_Receive>
 8004816:	4603      	mov	r3, r0
 8004818:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800481a:	7dfb      	ldrb	r3, [r7, #23]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <_read+0x30>
      return 1;
 8004820:	2301      	movs	r3, #1
 8004822:	e008      	b.n	8004836 <_read+0x42>
    else
      return EIO;
 8004824:	2305      	movs	r3, #5
 8004826:	e006      	b.n	8004836 <_read+0x42>
  }
  errno = EBADF;
 8004828:	f00b fbb8 	bl	800ff9c <__errno>
 800482c:	4603      	mov	r3, r0
 800482e:	2209      	movs	r2, #9
 8004830:	601a      	str	r2, [r3, #0]
  return -1;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	200006d4 	.word	0x200006d4

08004844 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	db08      	blt.n	8004866 <_fstat+0x22>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	dc05      	bgt.n	8004866 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004860:	605a      	str	r2, [r3, #4]
    return 0;
 8004862:	2300      	movs	r3, #0
 8004864:	e005      	b.n	8004872 <_fstat+0x2e>
  }

  errno = EBADF;
 8004866:	f00b fb99 	bl	800ff9c <__errno>
 800486a:	4603      	mov	r3, r0
 800486c:	2209      	movs	r2, #9
 800486e:	601a      	str	r2, [r3, #0]
  return 0;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004882:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <HAL_MspInit+0x44>)
 8004884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004886:	4a0e      	ldr	r2, [pc, #56]	; (80048c0 <HAL_MspInit+0x44>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6613      	str	r3, [r2, #96]	; 0x60
 800488e:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <HAL_MspInit+0x44>)
 8004890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	607b      	str	r3, [r7, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_MspInit+0x44>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <HAL_MspInit+0x44>)
 80048a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a4:	6593      	str	r3, [r2, #88]	; 0x58
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <HAL_MspInit+0x44>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000

080048c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048cc:	f107 0314 	add.w	r3, r7, #20
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	609a      	str	r2, [r3, #8]
 80048d8:	60da      	str	r2, [r3, #12]
 80048da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a15      	ldr	r2, [pc, #84]	; (8004938 <HAL_ADC_MspInit+0x74>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d124      	bne.n	8004930 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <HAL_ADC_MspInit+0x78>)
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ea:	4a14      	ldr	r2, [pc, #80]	; (800493c <HAL_ADC_MspInit+0x78>)
 80048ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048f2:	4b12      	ldr	r3, [pc, #72]	; (800493c <HAL_ADC_MspInit+0x78>)
 80048f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <HAL_ADC_MspInit+0x78>)
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	4a0e      	ldr	r2, [pc, #56]	; (800493c <HAL_ADC_MspInit+0x78>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <HAL_ADC_MspInit+0x78>)
 800490c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004916:	2302      	movs	r3, #2
 8004918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800491a:	230b      	movs	r3, #11
 800491c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004922:	f107 0314 	add.w	r3, r7, #20
 8004926:	4619      	mov	r1, r3
 8004928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800492c:	f003 fa3e 	bl	8007dac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004930:	bf00      	nop
 8004932:	3728      	adds	r7, #40	; 0x28
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	50040000 	.word	0x50040000
 800493c:	40021000 	.word	0x40021000

08004940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b098      	sub	sp, #96	; 0x60
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004948:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	60da      	str	r2, [r3, #12]
 8004956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004958:	f107 0318 	add.w	r3, r7, #24
 800495c:	2234      	movs	r2, #52	; 0x34
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f00b fb5b 	bl	801001c <memset>
  if(huart->Instance==LPUART1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a41      	ldr	r2, [pc, #260]	; (8004a70 <HAL_UART_MspInit+0x130>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d13f      	bne.n	80049f0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004970:	2320      	movs	r3, #32
 8004972:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004974:	2300      	movs	r3, #0
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004978:	f107 0318 	add.w	r3, r7, #24
 800497c:	4618      	mov	r0, r3
 800497e:	f004 facb 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004988:	f7ff feac 	bl	80046e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800498c:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <HAL_UART_MspInit+0x134>)
 800498e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004990:	4a38      	ldr	r2, [pc, #224]	; (8004a74 <HAL_UART_MspInit+0x134>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004998:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <HAL_UART_MspInit+0x134>)
 800499a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a4:	4b33      	ldr	r3, [pc, #204]	; (8004a74 <HAL_UART_MspInit+0x134>)
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	4a32      	ldr	r2, [pc, #200]	; (8004a74 <HAL_UART_MspInit+0x134>)
 80049aa:	f043 0301 	orr.w	r3, r3, #1
 80049ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049b0:	4b30      	ldr	r3, [pc, #192]	; (8004a74 <HAL_UART_MspInit+0x134>)
 80049b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049bc:	230c      	movs	r3, #12
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c0:	2302      	movs	r3, #2
 80049c2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c8:	2303      	movs	r3, #3
 80049ca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80049cc:	2308      	movs	r3, #8
 80049ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80049d4:	4619      	mov	r1, r3
 80049d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049da:	f003 f9e7 	bl	8007dac <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80049de:	2200      	movs	r2, #0
 80049e0:	2100      	movs	r1, #0
 80049e2:	2046      	movs	r0, #70	; 0x46
 80049e4:	f002 feab 	bl	800773e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80049e8:	2046      	movs	r0, #70	; 0x46
 80049ea:	f002 fec4 	bl	8007776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049ee:	e03b      	b.n	8004a68 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_UART_MspInit+0x138>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d136      	bne.n	8004a68 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80049fa:	2304      	movs	r3, #4
 80049fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a02:	f107 0318 	add.w	r3, r7, #24
 8004a06:	4618      	mov	r0, r3
 8004a08:	f004 fa86 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8004a12:	f7ff fe67 	bl	80046e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a16:	4b17      	ldr	r3, [pc, #92]	; (8004a74 <HAL_UART_MspInit+0x134>)
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <HAL_UART_MspInit+0x134>)
 8004a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a20:	6593      	str	r3, [r2, #88]	; 0x58
 8004a22:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <HAL_UART_MspInit+0x134>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a2e:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <HAL_UART_MspInit+0x134>)
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <HAL_UART_MspInit+0x134>)
 8004a34:	f043 0304 	orr.w	r3, r3, #4
 8004a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a3a:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <HAL_UART_MspInit+0x134>)
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8004a46:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a54:	2303      	movs	r3, #3
 8004a56:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a58:	2307      	movs	r3, #7
 8004a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a60:	4619      	mov	r1, r3
 8004a62:	4806      	ldr	r0, [pc, #24]	; (8004a7c <HAL_UART_MspInit+0x13c>)
 8004a64:	f003 f9a2 	bl	8007dac <HAL_GPIO_Init>
}
 8004a68:	bf00      	nop
 8004a6a:	3760      	adds	r7, #96	; 0x60
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40008000 	.word	0x40008000
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40004800 	.word	0x40004800
 8004a7c:	48000800 	.word	0x48000800

08004a80 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b090      	sub	sp, #64	; 0x40
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a88:	f107 030c 	add.w	r3, r7, #12
 8004a8c:	2234      	movs	r2, #52	; 0x34
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f00b fac3 	bl	801001c <memset>
  if(hrng->Instance==RNG)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <HAL_RNG_MspInit+0x60>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8004aa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004aa4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8004aa6:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8004aaa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aac:	f107 030c 	add.w	r3, r7, #12
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f004 fa31 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8004abc:	f7ff fe12 	bl	80046e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <HAL_RNG_MspInit+0x64>)
 8004ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac4:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <HAL_RNG_MspInit+0x64>)
 8004ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_RNG_MspInit+0x64>)
 8004ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004ad8:	bf00      	nop
 8004ada:	3740      	adds	r7, #64	; 0x40
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	50060800 	.word	0x50060800
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b096      	sub	sp, #88	; 0x58
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	60da      	str	r2, [r3, #12]
 8004afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b00:	f107 0310 	add.w	r3, r7, #16
 8004b04:	2234      	movs	r2, #52	; 0x34
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f00b fa87 	bl	801001c <memset>
  if(hrtc->Instance==RTC)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <HAL_RTC_MspInit+0x9c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d131      	bne.n	8004b7c <HAL_RTC_MspInit+0x94>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b22:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b24:	f107 0310 	add.w	r3, r7, #16
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f004 f9f5 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8004b34:	f7ff fdd6 	bl	80046e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004b38:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <HAL_RTC_MspInit+0xa0>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <HAL_RTC_MspInit+0xa0>)
 8004b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <HAL_RTC_MspInit+0xa0>)
 8004b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4c:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <HAL_RTC_MspInit+0xa0>)
 8004b4e:	f043 0304 	orr.w	r3, r3, #4
 8004b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <HAL_RTC_MspInit+0xa0>)
 8004b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT_CALIB
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b64:	4619      	mov	r1, r3
 8004b66:	4809      	ldr	r0, [pc, #36]	; (8004b8c <HAL_RTC_MspInit+0xa4>)
 8004b68:	f003 f920 	bl	8007dac <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2100      	movs	r1, #0
 8004b70:	2029      	movs	r0, #41	; 0x29
 8004b72:	f002 fde4 	bl	800773e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004b76:	2029      	movs	r0, #41	; 0x29
 8004b78:	f002 fdfd 	bl	8007776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004b7c:	bf00      	nop
 8004b7e:	3758      	adds	r7, #88	; 0x58
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40002800 	.word	0x40002800
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	48000800 	.word	0x48000800

08004b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b98:	f107 0314 	add.w	r3, r7, #20
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	60da      	str	r2, [r3, #12]
 8004ba6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <HAL_SPI_MspInit+0x7c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d128      	bne.n	8004c04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bb2:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	4a16      	ldr	r2, [pc, #88]	; (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bce:	4a10      	ldr	r2, [pc, #64]	; (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_SPI_MspInit+0x80>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004be2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	2302      	movs	r3, #2
 8004bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bf4:	2305      	movs	r3, #5
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4805      	ldr	r0, [pc, #20]	; (8004c14 <HAL_SPI_MspInit+0x84>)
 8004c00:	f003 f8d4 	bl	8007dac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004c04:	bf00      	nop
 8004c06:	3728      	adds	r7, #40	; 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40003800 	.word	0x40003800
 8004c10:	40021000 	.word	0x40021000
 8004c14:	48000400 	.word	0x48000400

08004c18 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <SDTimer_Handler+0x40>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <SDTimer_Handler+0x1c>
    Timer1--;
 8004c26:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <SDTimer_Handler+0x40>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <SDTimer_Handler+0x40>)
 8004c32:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <SDTimer_Handler+0x44>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <SDTimer_Handler+0x34>
    Timer2--;
 8004c3e:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <SDTimer_Handler+0x44>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <SDTimer_Handler+0x44>)
 8004c4a:	701a      	strb	r2, [r3, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	200006d9 	.word	0x200006d9
 8004c5c:	200006da 	.word	0x200006da

08004c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c64:	e7fe      	b.n	8004c64 <NMI_Handler+0x4>

08004c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c6a:	e7fe      	b.n	8004c6a <HardFault_Handler+0x4>

08004c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c70:	e7fe      	b.n	8004c70 <MemManage_Handler+0x4>

08004c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c72:	b480      	push	{r7}
 8004c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c76:	e7fe      	b.n	8004c76 <BusFault_Handler+0x4>

08004c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c7c:	e7fe      	b.n	8004c7c <UsageFault_Handler+0x4>

08004c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c82:	bf00      	nop
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <SysTick_Handler+0x30>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <SysTick_Handler+0x30>)
 8004cb8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8004cba:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <SysTick_Handler+0x30>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b09      	cmp	r3, #9
 8004cc2:	d904      	bls.n	8004cce <SysTick_Handler+0x26>
	  {
		FatFsCnt = 0;
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <SysTick_Handler+0x30>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8004cca:	f7ff ffa5 	bl	8004c18 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cce:	f001 fc51 	bl	8006574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200006d8 	.word	0x200006d8

08004cdc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004ce0:	4802      	ldr	r0, [pc, #8]	; (8004cec <RTC_Alarm_IRQHandler+0x10>)
 8004ce2:	f004 fe95 	bl	8009a10 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	200003cc 	.word	0x200003cc

08004cf0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004cf4:	4802      	ldr	r0, [pc, #8]	; (8004d00 <LPUART1_IRQHandler+0x10>)
 8004cf6:	f006 f94d 	bl	800af94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	200002b4 	.word	0x200002b4

08004d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d0c:	4a14      	ldr	r2, [pc, #80]	; (8004d60 <_sbrk+0x5c>)
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <_sbrk+0x60>)
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d18:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <_sbrk+0x64>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d102      	bne.n	8004d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d20:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <_sbrk+0x64>)
 8004d22:	4a12      	ldr	r2, [pc, #72]	; (8004d6c <_sbrk+0x68>)
 8004d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <_sbrk+0x64>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d207      	bcs.n	8004d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d34:	f00b f932 	bl	800ff9c <__errno>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	220c      	movs	r2, #12
 8004d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d42:	e009      	b.n	8004d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d44:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <_sbrk+0x64>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d4a:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <_sbrk+0x64>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4413      	add	r3, r2
 8004d52:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <_sbrk+0x64>)
 8004d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d56:	68fb      	ldr	r3, [r7, #12]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	2000a000 	.word	0x2000a000
 8004d64:	00000400 	.word	0x00000400
 8004d68:	200006dc 	.word	0x200006dc
 8004d6c:	20000938 	.word	0x20000938

08004d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <SystemInit+0x20>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <SystemInit+0x20>)
 8004d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004d84:	bf00      	nop
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	e000ed00 	.word	0xe000ed00

08004d94 <init_comms>:
//uint8_t devices;
//device rfData->myDevice;

//Initialization of communications
void init_comms(struct rfDataStorage* rfData, uint8_t deviceType, int id, int discovered)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	460b      	mov	r3, r1
 8004da2:	72fb      	strb	r3, [r7, #11]
	//Create a fifo queuq
	create_queue(rfData->RXFIFO);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fd33 	bl	8005814 <create_queue>

	//Set device data
	rfData->myDevice.device_id = id;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	809a      	strh	r2, [r3, #4]
	rfData->myDevice.device_type = deviceType;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	7afa      	ldrb	r2, [r7, #11]
 8004dba:	719a      	strb	r2, [r3, #6]
	rfData->myDevice.device_is_discovered = discovered;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bf14      	ite	ne
 8004dc2:	2301      	movne	r3, #1
 8004dc4:	2300      	moveq	r3, #0
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	721a      	strb	r2, [r3, #8]

	//Set initila forwarding data
	rfData->count = 0;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	729a      	strb	r2, [r3, #10]
	rfData->num_fwds = 0;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	72da      	strb	r2, [r3, #11]

	//Set initial fifo data
	for(int i = 0;i<MAX_NUM_FWDS;i++){
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e020      	b.n	8004e20 <init_comms+0x8c>

		rfData->FWDFIFO[i].from_id = 0;
 8004dde:	68f9      	ldr	r1, [r7, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	440b      	add	r3, r1
 8004dec:	330c      	adds	r3, #12
 8004dee:	2200      	movs	r2, #0
 8004df0:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[i].to_id = 0;
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4613      	mov	r3, r2
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	4413      	add	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	440b      	add	r3, r1
 8004e00:	330e      	adds	r3, #14
 8004e02:	2200      	movs	r2, #0
 8004e04:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[i].type = 0;
 8004e06:	68f9      	ldr	r1, [r7, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	440b      	add	r3, r1
 8004e14:	3310      	adds	r3, #16
 8004e16:	2200      	movs	r2, #0
 8004e18:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<MAX_NUM_FWDS;i++){
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b13      	cmp	r3, #19
 8004e24:	dddb      	ble.n	8004dde <init_comms+0x4a>

	}

}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <Comms_Handler>:

//The function to handle all communication traffic
void Comms_Handler(struct rfDataStorage* rfData)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08c      	sub	sp, #48	; 0x30
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	//If device is child
	if (rfData->myDevice.device_type == DEVICE_CHILD)					//Child Handler
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	799b      	ldrb	r3, [r3, #6]
 8004e3c:	2b99      	cmp	r3, #153	; 0x99
 8004e3e:	f040 813c 	bne.w	80050ba <Comms_Handler+0x28a>
	{
		//data holder
		uint8_t data = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73bb      	strb	r3, [r7, #14]

		//Refresh number of active messages
		rfData->messageNum = 0;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112

		//Iterate through fifo
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8004e4e:	e11c      	b.n	800508a <Comms_Handler+0x25a>
		{
			//Dequeue first data point
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fd49 	bl	80058ec <dequeue>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73bb      	strb	r3, [r7, #14]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 8004e5e:	7bbb      	ldrb	r3, [r7, #14]
 8004e60:	2bfe      	cmp	r3, #254	; 0xfe
 8004e62:	f040 8112 	bne.w	800508a <Comms_Handler+0x25a>
			{

				//Set preamble message
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	33ae      	adds	r3, #174	; 0xae
 8004e7c:	22fe      	movs	r2, #254	; 0xfe
 8004e7e:	701a      	strb	r2, [r3, #0]
				for(int i = 1;i<MSG_BODY_START;i++)
 8004e80:	2301      	movs	r3, #1
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e84:	e018      	b.n	8004eb8 <Comms_Handler+0x88>
				{
					//Add control data to rx message
					rfData->activeRxMessage[rfData->messageNum][i] = dequeue(rfData->RXFIFO);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fd2e 	bl	80058ec <dequeue>
 8004e90:	4602      	mov	r2, r0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004e98:	4619      	mov	r1, r3
 8004e9a:	b2d0      	uxtb	r0, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	441a      	add	r2, r3
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	4413      	add	r3, r2
 8004eac:	33ae      	adds	r3, #174	; 0xae
 8004eae:	4602      	mov	r2, r0
 8004eb0:	701a      	strb	r2, [r3, #0]
				for(int i = 1;i<MSG_BODY_START;i++)
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	dde3      	ble.n	8004e86 <Comms_Handler+0x56>

				}

				//assign destination ID
				rfData->toID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS2]);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	33b1      	adds	r3, #177	; 0xb1
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	b21a      	sxth	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4403      	add	r3, r0
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	33b0      	adds	r3, #176	; 0xb0
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	b21b      	sxth	r3, r3
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	b21a      	sxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004efe:	b291      	uxth	r1, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	3344      	adds	r3, #68	; 0x44
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	4413      	add	r3, r2
 8004f08:	460a      	mov	r2, r1
 8004f0a:	80da      	strh	r2, [r3, #6]

				//assign sender ID
				rfData->fromID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS2]);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004f12:	4619      	mov	r1, r3
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	33b3      	adds	r3, #179	; 0xb3
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	b21a      	sxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004f2e:	4618      	mov	r0, r3
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4603      	mov	r3, r0
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4403      	add	r3, r0
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	33b2      	adds	r3, #178	; 0xb2
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	b21b      	sxth	r3, r3
 8004f42:	4313      	orrs	r3, r2
 8004f44:	b21a      	sxth	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004f4c:	b291      	uxth	r1, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	3340      	adds	r3, #64	; 0x40
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	460a      	mov	r2, r1
 8004f58:	809a      	strh	r2, [r3, #4]

				//Retrieve message based on specified size
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5e:	e01a      	b.n	8004f96 <Comms_Handler+0x166>
				{
					data = dequeue(rfData->RXFIFO);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fcc1 	bl	80058ec <dequeue>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	73bb      	strb	r3, [r7, #14]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004f74:	4618      	mov	r0, r3
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	f103 0209 	add.w	r2, r3, #9
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4603      	mov	r3, r0
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4403      	add	r3, r0
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	4413      	add	r3, r2
 8004f8a:	33ae      	adds	r3, #174	; 0xae
 8004f8c:	7bba      	ldrb	r2, [r7, #14]
 8004f8e:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	3301      	adds	r3, #1
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	33b6      	adds	r3, #182	; 0xb6
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	dbd4      	blt.n	8004f60 <Comms_Handler+0x130>

				}

				//Handle message
				Message_Handler(rfData);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f9d1 	bl	800535e <Message_Handler>

				int newMessage = 1;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
				//Check if the received message was not received before during this fifo handling
				if(rfData->messageNum>0){
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d054      	beq.n	8005074 <Comms_Handler+0x244>
					for(int i = 1;i<=rfData->messageNum;i++){
 8004fca:	2301      	movs	r3, #1
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	e04a      	b.n	8005066 <Comms_Handler+0x236>
						//check message type, destination ID and sender ID for comparison
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	33af      	adds	r3, #175	; 0xaf
 8004fe6:	7819      	ldrb	r1, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4403      	add	r3, r0
 8005000:	33af      	adds	r3, #175	; 0xaf
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	4299      	cmp	r1, r3
 8005006:	d12b      	bne.n	8005060 <Comms_Handler+0x230>
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	3340      	adds	r3, #64	; 0x40
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	4413      	add	r3, r2
 8005016:	889a      	ldrh	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800501e:	4619      	mov	r1, r3
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	1acb      	subs	r3, r1, r3
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	3340      	adds	r3, #64	; 0x40
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	440b      	add	r3, r1
 800502c:	889b      	ldrh	r3, [r3, #4]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 800502e:	429a      	cmp	r2, r3
 8005030:	d116      	bne.n	8005060 <Comms_Handler+0x230>
						   rfData->toID[rfData->messageNum] == rfData->toID[rfData->messageNum-i]){
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	3344      	adds	r3, #68	; 0x44
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4413      	add	r3, r2
 8005040:	88da      	ldrh	r2, [r3, #6]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005048:	4619      	mov	r1, r3
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	1acb      	subs	r3, r1, r3
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	3344      	adds	r3, #68	; 0x44
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	440b      	add	r3, r1
 8005056:	88db      	ldrh	r3, [r3, #6]
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 8005058:	429a      	cmp	r2, r3
 800505a:	d101      	bne.n	8005060 <Comms_Handler+0x230>
								newMessage = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
					for(int i = 1;i<=rfData->messageNum;i++){
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	3301      	adds	r3, #1
 8005064:	623b      	str	r3, [r7, #32]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800506c:	461a      	mov	r2, r3
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	4293      	cmp	r3, r2
 8005072:	ddad      	ble.n	8004fd0 <Comms_Handler+0x1a0>
							}
					}
				}
				//Increment number of messages if new message was received
				if(newMessage){
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <Comms_Handler+0x25a>

					rfData->messageNum++;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005080:	3301      	adds	r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fbe8 	bl	8005864 <is_empty>
 8005094:	4603      	mov	r3, r0
 8005096:	f083 0301 	eor.w	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	f47f aed7 	bne.w	8004e50 <Comms_Handler+0x20>

			}
		}

		//Perform discovery
		if(rfData->myDevice.device_is_discovered == false)			//if not discovered and theres no rfData->activeMessages
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	7a1b      	ldrb	r3, [r3, #8]
 80050a6:	f083 0301 	eor.w	r3, r3, #1
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8136 	beq.w	800531e <Comms_Handler+0x4ee>
		{
			//Im_Here(rfData);
			Discovery_Handler(rfData);						//go to discovery handler
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f937 	bl	8005326 <Discovery_Handler>
			}
		}

	}

}
 80050b8:	e131      	b.n	800531e <Comms_Handler+0x4ee>
	else if (rfData->myDevice.device_type == DEVICE_PARENT)			//Parent Handler
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	799b      	ldrb	r3, [r3, #6]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f040 812d 	bne.w	800531e <Comms_Handler+0x4ee>
		uint8_t data = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
		rfData->messageNum = 0;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 80050d0:	e119      	b.n	8005306 <Comms_Handler+0x4d6>
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fc08 	bl	80058ec <dequeue>
 80050dc:	4603      	mov	r3, r0
 80050de:	73fb      	strb	r3, [r7, #15]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2bfe      	cmp	r3, #254	; 0xfe
 80050e4:	f040 810f 	bne.w	8005306 <Comms_Handler+0x4d6>
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80050ee:	4619      	mov	r1, r3
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	460b      	mov	r3, r1
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	33ae      	adds	r3, #174	; 0xae
 80050fe:	22fe      	movs	r2, #254	; 0xfe
 8005100:	701a      	strb	r2, [r3, #0]
				for(int i = 1;i<MSG_BODY_START;i++)
 8005102:	2301      	movs	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e018      	b.n	800513a <Comms_Handler+0x30a>
					rfData->activeRxMessage[rfData->messageNum][i] = dequeue(rfData->RXFIFO);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fbed 	bl	80058ec <dequeue>
 8005112:	4602      	mov	r2, r0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800511a:	4619      	mov	r1, r3
 800511c:	b2d0      	uxtb	r0, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	441a      	add	r2, r3
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	33ae      	adds	r3, #174	; 0xae
 8005130:	4602      	mov	r2, r0
 8005132:	701a      	strb	r2, [r3, #0]
				for(int i = 1;i<MSG_BODY_START;i++)
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	3301      	adds	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	2b08      	cmp	r3, #8
 800513e:	dde3      	ble.n	8005108 <Comms_Handler+0x2d8>
				rfData->toID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS2]);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005146:	4619      	mov	r1, r3
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	33b1      	adds	r3, #177	; 0xb1
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	b21a      	sxth	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005162:	4618      	mov	r0, r3
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	4603      	mov	r3, r0
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4403      	add	r3, r0
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	33b0      	adds	r3, #176	; 0xb0
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	b21b      	sxth	r3, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	b21a      	sxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005180:	b291      	uxth	r1, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	3344      	adds	r3, #68	; 0x44
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4413      	add	r3, r2
 800518a:	460a      	mov	r2, r1
 800518c:	80da      	strh	r2, [r3, #6]
				rfData->fromID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS2]);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005194:	4619      	mov	r1, r3
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	33b3      	adds	r3, #179	; 0xb3
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	b21a      	sxth	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80051b0:	4618      	mov	r0, r3
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4603      	mov	r3, r0
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4403      	add	r3, r0
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	33b2      	adds	r3, #178	; 0xb2
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	b21b      	sxth	r3, r3
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b21a      	sxth	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80051ce:	b291      	uxth	r1, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	3340      	adds	r3, #64	; 0x40
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	460a      	mov	r2, r1
 80051da:	809a      	strh	r2, [r3, #4]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	e01a      	b.n	8005218 <Comms_Handler+0x3e8>
					data = dequeue(rfData->RXFIFO);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fb80 	bl	80058ec <dequeue>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80051f6:	4618      	mov	r0, r3
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f103 0209 	add.w	r2, r3, #9
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4603      	mov	r3, r0
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4403      	add	r3, r0
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	4413      	add	r3, r2
 800520c:	33ae      	adds	r3, #174	; 0xae
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	3301      	adds	r3, #1
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800521e:	4619      	mov	r1, r3
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	33b6      	adds	r3, #182	; 0xb6
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	4293      	cmp	r3, r2
 8005236:	dbd4      	blt.n	80051e2 <Comms_Handler+0x3b2>
				int newMessage = 1;
 8005238:	2301      	movs	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
				if(rfData->messageNum>0){
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005242:	2b00      	cmp	r3, #0
 8005244:	d054      	beq.n	80052f0 <Comms_Handler+0x4c0>
					for(int i = 1;i<=rfData->messageNum;i++){
 8005246:	2301      	movs	r3, #1
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	e04a      	b.n	80052e2 <Comms_Handler+0x4b2>
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005252:	4619      	mov	r1, r3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	460b      	mov	r3, r1
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	33af      	adds	r3, #175	; 0xaf
 8005262:	7819      	ldrb	r1, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800526a:	461a      	mov	r2, r3
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad2      	subs	r2, r2, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4403      	add	r3, r0
 800527c:	33af      	adds	r3, #175	; 0xaf
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	4299      	cmp	r1, r3
 8005282:	d12b      	bne.n	80052dc <Comms_Handler+0x4ac>
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	3340      	adds	r3, #64	; 0x40
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	4413      	add	r3, r2
 8005292:	889a      	ldrh	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800529a:	4619      	mov	r1, r3
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1acb      	subs	r3, r1, r3
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	3340      	adds	r3, #64	; 0x40
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	440b      	add	r3, r1
 80052a8:	889b      	ldrh	r3, [r3, #4]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d116      	bne.n	80052dc <Comms_Handler+0x4ac>
						   rfData->toID[rfData->messageNum] == rfData->toID[rfData->messageNum-i]){
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	3344      	adds	r3, #68	; 0x44
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	4413      	add	r3, r2
 80052bc:	88da      	ldrh	r2, [r3, #6]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80052c4:	4619      	mov	r1, r3
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1acb      	subs	r3, r1, r3
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	3344      	adds	r3, #68	; 0x44
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	440b      	add	r3, r1
 80052d2:	88db      	ldrh	r3, [r3, #6]
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d101      	bne.n	80052dc <Comms_Handler+0x4ac>
								newMessage = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
					for(int i = 1;i<=rfData->messageNum;i++){
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	3301      	adds	r3, #1
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80052e8:	461a      	mov	r2, r3
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4293      	cmp	r3, r2
 80052ee:	ddad      	ble.n	800524c <Comms_Handler+0x41c>
				if(newMessage){
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <Comms_Handler+0x4d6>
					rfData->messageNum++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80052fc:	3301      	adds	r3, #1
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 faaa 	bl	8005864 <is_empty>
 8005310:	4603      	mov	r3, r0
 8005312:	f083 0301 	eor.w	r3, r3, #1
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	f47f aeda 	bne.w	80050d2 <Comms_Handler+0x2a2>
}
 800531e:	bf00      	nop
 8005320:	3730      	adds	r7, #48	; 0x30
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <Discovery_Handler>:

//Function to handle device discovery
void Discovery_Handler(struct rfDataStorage* rfData)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);
 800532e:	20c8      	movs	r0, #200	; 0xc8
 8005330:	f001 f940 	bl	80065b4 <HAL_Delay>
	if(rfData->count == 0)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	7a9b      	ldrb	r3, [r3, #10]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d106      	bne.n	800534a <Discovery_Handler+0x24>
	{
		Im_Here(rfData);								//send i'm here rfData->activeMessage
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f9b3 	bl	80056a8 <Im_Here>
		rfData->count = 10;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	220a      	movs	r2, #10
 8005346:	729a      	strb	r2, [r3, #10]
	else
	{
		rfData->count--;
	}

}
 8005348:	e005      	b.n	8005356 <Discovery_Handler+0x30>
		rfData->count--;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7a9b      	ldrb	r3, [r3, #10]
 800534e:	3b01      	subs	r3, #1
 8005350:	b2da      	uxtb	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	729a      	strb	r2, [r3, #10]
}
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <Message_Handler>:

//Function to perform any unique message handling
void Message_Handler(struct rfDataStorage* rfData)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
	//Check if the device is the destination of the message
	if (rfData->toID[rfData->messageNum] != rfData->myDevice.device_id)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	3344      	adds	r3, #68	; 0x44
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	4413      	add	r3, r2
 8005374:	88da      	ldrh	r2, [r3, #6]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	889b      	ldrh	r3, [r3, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d002      	beq.n	8005384 <Message_Handler+0x26>
	{
		//perform message forwarding
			Message_Forwarder(rfData);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f804 	bl	800538c <Message_Forwarder>
	}

}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <Message_Forwarder>:

void Message_Forwarder(struct rfDataStorage* rfData)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	printf("\r\nForwarding message");
 8005394:	487b      	ldr	r0, [pc, #492]	; (8005584 <Message_Forwarder+0x1f8>)
 8005396:	f00b fb93 	bl	8010ac0 <iprintf>
	//Check if message should be forwarded
	if( (rfData->num_fwds == 0) && (rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] < rfData->activeRxMessage[rfData->messageNum][MSG_MAX_HOPS_POS]) )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7adb      	ldrb	r3, [r3, #11]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f040 8099 	bne.w	80054d6 <Message_Forwarder+0x14a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80053aa:	4619      	mov	r1, r3
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	460b      	mov	r3, r1
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	33b4      	adds	r3, #180	; 0xb4
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80053c2:	4618      	mov	r0, r3
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4603      	mov	r3, r0
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4403      	add	r3, r0
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	33b5      	adds	r3, #181	; 0xb5
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d27e      	bcs.n	80054d6 <Message_Forwarder+0x14a>
	{
		//increment number of hops
		rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80053de:	461a      	mov	r2, r3
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	33b4      	adds	r3, #180	; 0xb4
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	b2d8      	uxtb	r0, r3
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	33b4      	adds	r3, #180	; 0xb4
 8005402:	4602      	mov	r2, r0
 8005404:	701a      	strb	r2, [r3, #0]
		//Send tehe forwarded data
		Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800540c:	461a      	mov	r2, r3
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	33a8      	adds	r3, #168	; 0xa8
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	4413      	add	r3, r2
 800541c:	1d98      	adds	r0, r3, #6
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005424:	4619      	mov	r1, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	33b6      	adds	r3, #182	; 0xb6
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	3309      	adds	r3, #9
 8005438:	b2db      	uxtb	r3, r3
 800543a:	4619      	mov	r1, r3
 800543c:	f000 f97c 	bl	8005738 <Send>
		//Add data to fifo FWD
		rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->fromID[rfData->messageNum];
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005446:	4618      	mov	r0, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	7adb      	ldrb	r3, [r3, #11]
 800544c:	4619      	mov	r1, r3
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	4413      	add	r3, r2
 8005458:	8898      	ldrh	r0, [r3, #4]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	440b      	add	r3, r1
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	330c      	adds	r3, #12
 8005468:	4602      	mov	r2, r0
 800546a:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->toID[rfData->messageNum];
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005472:	4618      	mov	r0, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	7adb      	ldrb	r3, [r3, #11]
 8005478:	4619      	mov	r1, r3
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	4413      	add	r3, r2
 8005484:	88d8      	ldrh	r0, [r3, #6]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	440b      	add	r3, r1
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	330e      	adds	r3, #14
 8005494:	4602      	mov	r2, r0
 8005496:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800549e:	4618      	mov	r0, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	7adb      	ldrb	r3, [r3, #11]
 80054a4:	4619      	mov	r1, r3
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4603      	mov	r3, r0
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4403      	add	r3, r0
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	33af      	adds	r3, #175	; 0xaf
 80054b4:	7818      	ldrb	r0, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	440b      	add	r3, r1
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	4413      	add	r3, r2
 80054c2:	3310      	adds	r3, #16
 80054c4:	4602      	mov	r2, r0
 80054c6:	701a      	strb	r2, [r3, #0]
		//Increment numbe rof FWDs
		rfData->num_fwds++;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7adb      	ldrb	r3, [r3, #11]
 80054cc:	3301      	adds	r3, #1
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	72da      	strb	r2, [r3, #11]
			//Send tehe forwarded data
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
		}

	}
}
 80054d4:	e0e3      	b.n	800569e <Message_Forwarder+0x312>
	else if ( rfData->activeRxMessage[MSG_NUM_HOPS_POS] < rfData->activeRxMessage[rfData->messageNum][MSG_MAX_HOPS_POS] )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f503 7293 	add.w	r2, r3, #294	; 0x126
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80054e2:	4618      	mov	r0, r3
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4603      	mov	r3, r0
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4403      	add	r3, r0
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	33b5      	adds	r3, #181	; 0xb5
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	f080 80d2 	bcs.w	800569e <Message_Forwarder+0x312>
		int dupe = false;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rfData->num_fwds; i++)
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	e044      	b.n	800558e <Message_Forwarder+0x202>
			if ( rfData->fromID[rfData->messageNum] == rfData->FWDFIFO[i].from_id )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	3340      	adds	r3, #64	; 0x40
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	4413      	add	r3, r2
 8005512:	8899      	ldrh	r1, [r3, #4]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4613      	mov	r3, r2
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	4413      	add	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4403      	add	r3, r0
 8005522:	330c      	adds	r3, #12
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	4299      	cmp	r1, r3
 8005528:	d12e      	bne.n	8005588 <Message_Forwarder+0x1fc>
				if ( rfData->toID[rfData->messageNum] == rfData->FWDFIFO[i].to_id)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	3344      	adds	r3, #68	; 0x44
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	4413      	add	r3, r2
 8005538:	88d9      	ldrh	r1, [r3, #6]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	4403      	add	r3, r0
 8005548:	330e      	adds	r3, #14
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	4299      	cmp	r1, r3
 800554e:	d11b      	bne.n	8005588 <Message_Forwarder+0x1fc>
					if ( rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->FWDFIFO[i].type )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005556:	4619      	mov	r1, r3
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	33af      	adds	r3, #175	; 0xaf
 8005566:	7819      	ldrb	r1, [r3, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	4613      	mov	r3, r2
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	4413      	add	r3, r2
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	4403      	add	r3, r0
 8005576:	3310      	adds	r3, #16
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	4299      	cmp	r1, r3
 800557c:	d104      	bne.n	8005588 <Message_Forwarder+0x1fc>
						dupe = true;
 800557e:	2301      	movs	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
						break;
 8005582:	e00a      	b.n	800559a <Message_Forwarder+0x20e>
 8005584:	08014198 	.word	0x08014198
		for (int i = 0; i < rfData->num_fwds; i++)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	3301      	adds	r3, #1
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	7adb      	ldrb	r3, [r3, #11]
 8005592:	461a      	mov	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4293      	cmp	r3, r2
 8005598:	dbb4      	blt.n	8005504 <Message_Forwarder+0x178>
		if (dupe == false)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d17e      	bne.n	800569e <Message_Forwarder+0x312>
			if ( rfData->num_fwds == MAX_NUM_FWDS ){rfData->num_fwds = 0;}
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	7adb      	ldrb	r3, [r3, #11]
 80055a4:	2b14      	cmp	r3, #20
 80055a6:	d102      	bne.n	80055ae <Message_Forwarder+0x222>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	72da      	strb	r2, [r3, #11]
			rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->fromID[rfData->messageNum];
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80055b4:	4618      	mov	r0, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	7adb      	ldrb	r3, [r3, #11]
 80055ba:	4619      	mov	r1, r3
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	f100 0340 	add.w	r3, r0, #64	; 0x40
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	4413      	add	r3, r2
 80055c6:	8898      	ldrh	r0, [r3, #4]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	460b      	mov	r3, r1
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	440b      	add	r3, r1
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	4413      	add	r3, r2
 80055d4:	330c      	adds	r3, #12
 80055d6:	4602      	mov	r2, r0
 80055d8:	801a      	strh	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->toID[rfData->messageNum];
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80055e0:	4618      	mov	r0, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	7adb      	ldrb	r3, [r3, #11]
 80055e6:	4619      	mov	r1, r3
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	f100 0344 	add.w	r3, r0, #68	; 0x44
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	4413      	add	r3, r2
 80055f2:	88d8      	ldrh	r0, [r3, #6]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	460b      	mov	r3, r1
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	440b      	add	r3, r1
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	4413      	add	r3, r2
 8005600:	330e      	adds	r3, #14
 8005602:	4602      	mov	r2, r0
 8005604:	801a      	strh	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800560c:	4618      	mov	r0, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	7adb      	ldrb	r3, [r3, #11]
 8005612:	4619      	mov	r1, r3
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	4603      	mov	r3, r0
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4403      	add	r3, r0
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	33af      	adds	r3, #175	; 0xaf
 8005622:	7818      	ldrb	r0, [r3, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	440b      	add	r3, r1
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	4413      	add	r3, r2
 8005630:	3310      	adds	r3, #16
 8005632:	4602      	mov	r2, r0
 8005634:	701a      	strb	r2, [r3, #0]
			rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800563c:	461a      	mov	r2, r3
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	33b4      	adds	r3, #180	; 0xb4
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	b2d8      	uxtb	r0, r3
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	33b4      	adds	r3, #180	; 0xb4
 8005660:	4602      	mov	r2, r0
 8005662:	701a      	strb	r2, [r3, #0]
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800566a:	461a      	mov	r2, r3
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	33a8      	adds	r3, #168	; 0xa8
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	1d98      	adds	r0, r3, #6
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005682:	4619      	mov	r1, r3
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	460b      	mov	r3, r1
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	33b6      	adds	r3, #182	; 0xb6
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	3309      	adds	r3, #9
 8005696:	b2db      	uxtb	r3, r3
 8005698:	4619      	mov	r1, r3
 800569a:	f000 f84d 	bl	8005738 <Send>
}
 800569e:	bf00      	nop
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop

080056a8 <Im_Here>:

//Function to send "I am here" message
void Im_Here(struct rfDataStorage* rfData)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	22fe      	movs	r2, #254	; 0xfe
 80056b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_IM_HERE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2243      	movs	r2, #67	; 0x43
 80056bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0x0F;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	889b      	ldrh	r3, [r3, #4]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = rfData->myDevice.device_id&0xF0;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	889b      	ldrh	r3, [r3, #4]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f023 030f 	bic.w	r3, r3, #15
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	rfData->activeTxMessage[MSG_TO_ID_POS1] = 0;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = 0;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = 10;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	220a      	movs	r2, #10
 8005700:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rfData->activeTxMessageSize = 0;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f103 0299 	add.w	r2, r3, #153	; 0x99
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005724:	3309      	adds	r3, #9
 8005726:	b2db      	uxtb	r3, r3
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f000 f804 	bl	8005738 <Send>

}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <Send>:

//Function to send data through RF
void Send(uint8_t message[], uint8_t size)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
	//printf("Send comamnd");
	uint8_t fullMessage[MSG_SIZE_TRANSFER];

	for(int i = 0;i<size;i++){
 8005744:	2300      	movs	r3, #0
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
 8005748:	e00c      	b.n	8005764 <Send+0x2c>
		fullMessage[i] = message[i];
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4413      	add	r3, r2
 8005750:	7819      	ldrb	r1, [r3, #0]
 8005752:	f107 0208 	add.w	r2, r7, #8
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	4413      	add	r3, r2
 800575a:	460a      	mov	r2, r1
 800575c:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<size;i++){
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	3301      	adds	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005768:	429a      	cmp	r2, r3
 800576a:	dbee      	blt.n	800574a <Send+0x12>
	}
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	623b      	str	r3, [r7, #32]
 8005770:	e008      	b.n	8005784 <Send+0x4c>
		fullMessage[i] = 0;
 8005772:	f107 0208 	add.w	r2, r7, #8
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	4413      	add	r3, r2
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	3301      	adds	r3, #1
 8005782:	623b      	str	r3, [r7, #32]
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	2b13      	cmp	r3, #19
 8005788:	ddf3      	ble.n	8005772 <Send+0x3a>
	}
	for(int i = 0 ;i<MSG_SIZE_TRANSFER;i++){
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	e00b      	b.n	80057a8 <Send+0x70>

		printf("\r\nsending rf: %x", fullMessage[i]);
 8005790:	f107 0208 	add.w	r2, r7, #8
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	4619      	mov	r1, r3
 800579c:	480c      	ldr	r0, [pc, #48]	; (80057d0 <Send+0x98>)
 800579e:	f00b f98f 	bl	8010ac0 <iprintf>
	for(int i = 0 ;i<MSG_SIZE_TRANSFER;i++){
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	3301      	adds	r3, #1
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2b13      	cmp	r3, #19
 80057ac:	ddf0      	ble.n	8005790 <Send+0x58>

	}
	random_delay();
 80057ae:	f000 f813 	bl	80057d8 <random_delay>
	HAL_UART_Transmit_IT(&hlpuart1, fullMessage, MSG_SIZE_TRANSFER);
 80057b2:	f107 0308 	add.w	r3, r7, #8
 80057b6:	2214      	movs	r2, #20
 80057b8:	4619      	mov	r1, r3
 80057ba:	4806      	ldr	r0, [pc, #24]	; (80057d4 <Send+0x9c>)
 80057bc:	f005 f9fe 	bl	800abbc <HAL_UART_Transmit_IT>
	HAL_Delay(20);
 80057c0:	2014      	movs	r0, #20
 80057c2:	f000 fef7 	bl	80065b4 <HAL_Delay>

}
 80057c6:	bf00      	nop
 80057c8:	3728      	adds	r7, #40	; 0x28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	080141b0 	.word	0x080141b0
 80057d4:	200002b4 	.word	0x200002b4

080057d8 <random_delay>:

//Function to add random delay
void random_delay()	//delays between 0 - 9999 (ms)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
	uint32_t randomNumber;
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 80057de:	463b      	mov	r3, r7
 80057e0:	4619      	mov	r1, r3
 80057e2:	480a      	ldr	r0, [pc, #40]	; (800580c <random_delay+0x34>)
 80057e4:	f003 fd85 	bl	80092f2 <HAL_RNG_GenerateRandomNumber>
	uint32_t delay = randomNumber % 1000;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	4a09      	ldr	r2, [pc, #36]	; (8005810 <random_delay+0x38>)
 80057ec:	fba2 1203 	umull	r1, r2, r2, r3
 80057f0:	0992      	lsrs	r2, r2, #6
 80057f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80057f6:	fb01 f202 	mul.w	r2, r1, r2
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	607b      	str	r3, [r7, #4]
	HAL_Delay(delay);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fed8 	bl	80065b4 <HAL_Delay>
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	200003bc 	.word	0x200003bc
 8005810:	10624dd3 	.word	0x10624dd3

08005814 <create_queue>:

//Function to create a new queue for operation
void create_queue(struct Queue* queue) {
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  queue->head = 0;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
  queue->tail = 0;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
  queue->size = 0;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <is_full>:
void destroy_queue(struct Queue* queue) {
  free(queue);
}

//Function check if queue is full
bool is_full(struct Queue* queue) {
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  return (queue->size == MAX_SIZE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800584e:	2b96      	cmp	r3, #150	; 0x96
 8005850:	bf0c      	ite	eq
 8005852:	2301      	moveq	r3, #1
 8005854:	2300      	movne	r3, #0
 8005856:	b2db      	uxtb	r3, r3
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <is_empty>:

//Function to check if queue is empty
bool is_empty(struct Queue* queue) {
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  return (queue->size == 0);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005872:	2b00      	cmp	r3, #0
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <enqueue>:

//Function to add a value to queue
void enqueue(struct Queue* queue, uint8_t value) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  if (is_full(queue)) {
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff ffd3 	bl	8005840 <is_full>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11f      	bne.n	80058e0 <enqueue+0x58>
    //printf("Queue is full\n");
    return;
  }
  queue->data[queue->tail] = value;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 80058a6:	78f9      	ldrb	r1, [r7, #3]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  queue->tail = (queue->tail + 1) % MAX_SIZE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <enqueue+0x60>)
 80058b8:	fb83 1302 	smull	r1, r3, r3, r2
 80058bc:	1119      	asrs	r1, r3, #4
 80058be:	17d3      	asrs	r3, r2, #31
 80058c0:	1acb      	subs	r3, r1, r3
 80058c2:	2196      	movs	r1, #150	; 0x96
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
  queue->size++;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 80058de:	e000      	b.n	80058e2 <enqueue+0x5a>
    return;
 80058e0:	bf00      	nop
}
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	1b4e81b5 	.word	0x1b4e81b5

080058ec <dequeue>:

//Function to dequeue latest value from the queue
int dequeue(struct Queue* queue) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  if (is_empty(queue)) {
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff ffb5 	bl	8005864 <is_empty>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <dequeue+0x1a>
    //printf("Queue is empty\n");
    return -1;
 8005900:	f04f 33ff 	mov.w	r3, #4294967295
 8005904:	e01f      	b.n	8005946 <dequeue+0x5a>
  }
  int value = queue->data[queue->head];
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005912:	60fb      	str	r3, [r7, #12]
  queue->head = (queue->head + 1) % MAX_SIZE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <dequeue+0x64>)
 800591e:	fb83 1302 	smull	r1, r3, r3, r2
 8005922:	1119      	asrs	r1, r3, #4
 8005924:	17d3      	asrs	r3, r2, #31
 8005926:	1acb      	subs	r3, r1, r3
 8005928:	2196      	movs	r1, #150	; 0x96
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
  queue->size--;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
  return value;
 8005944:	68fb      	ldr	r3, [r7, #12]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	1b4e81b5 	.word	0x1b4e81b5

08005954 <sendSD>:
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
  printf("SD Card Unmounted Successfully!!!\r\n");
}

void sendSD(struct SDinfo* config, char* file, char* data){
 8005954:	b590      	push	{r4, r7, lr}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]

	  HAL_Delay(50);
 8005960:	2032      	movs	r0, #50	; 0x32
 8005962:	f000 fe27 	bl	80065b4 <HAL_Delay>
	  *config->fres = f_open(config->fil, file, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6858      	ldr	r0, [r3, #4]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689c      	ldr	r4, [r3, #8]
 800596e:	2213      	movs	r2, #19
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	f009 f8bd 	bl	800eaf0 <f_open>
 8005976:	4603      	mov	r3, r0
 8005978:	7023      	strb	r3, [r4, #0]
	  if(*config->fres == FR_OK){
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <sendSD+0x3a>

		  printf("\r\nFile %s opened", file);
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	4819      	ldr	r0, [pc, #100]	; (80059ec <sendSD+0x98>)
 8005988:	f00b f89a 	bl	8010ac0 <iprintf>
 800598c:	e003      	b.n	8005996 <sendSD+0x42>

	  }
	  else{

		  printf("\r\ncould not open %s file", file);
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	4817      	ldr	r0, [pc, #92]	; (80059f0 <sendSD+0x9c>)
 8005992:	f00b f895 	bl	8010ac0 <iprintf>

	  }
	  *config->fres = f_lseek(config->fil, f_size(config->fil));
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68d9      	ldr	r1, [r3, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689c      	ldr	r4, [r3, #8]
 80059a4:	4610      	mov	r0, r2
 80059a6:	f009 fe0a 	bl	800f5be <f_lseek>
 80059aa:	4603      	mov	r3, r0
 80059ac:	7023      	strb	r3, [r4, #0]
	  f_puts(data, config->fil);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f00a f9aa 	bl	800fd0e <f_puts>
	  *config->fres = f_close(config->fil);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689c      	ldr	r4, [r3, #8]
 80059c2:	4610      	mov	r0, r2
 80059c4:	f009 fdd1 	bl	800f56a <f_close>
 80059c8:	4603      	mov	r3, r0
 80059ca:	7023      	strb	r3, [r4, #0]
	  if(*config->fres == FR_OK){
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <sendSD+0x8a>

		  printf("\r\nFile closed");
 80059d6:	4807      	ldr	r0, [pc, #28]	; (80059f4 <sendSD+0xa0>)
 80059d8:	f00b f872 	bl	8010ac0 <iprintf>
	  else{

		  printf("\r\ncould not close file");

	  }
}
 80059dc:	e002      	b.n	80059e4 <sendSD+0x90>
		  printf("\r\ncould not close file");
 80059de:	4806      	ldr	r0, [pc, #24]	; (80059f8 <sendSD+0xa4>)
 80059e0:	f00b f86e 	bl	8010ac0 <iprintf>
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd90      	pop	{r4, r7, pc}
 80059ec:	080142f8 	.word	0x080142f8
 80059f0:	0801430c 	.word	0x0801430c
 80059f4:	08014328 	.word	0x08014328
 80059f8:	08014338 	.word	0x08014338

080059fc <setupCard>:

int setupCard(struct SDinfo* sdData){
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]


	FRESULT fresult = f_mount(sdData->fs, "/", 1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	4909      	ldr	r1, [pc, #36]	; (8005a30 <setupCard+0x34>)
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f009 f829 	bl	800ea64 <f_mount>
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8005a16:	2064      	movs	r0, #100	; 0x64
 8005a18:	f000 fdcc 	bl	80065b4 <HAL_Delay>
	return (fresult == FR_OK);
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	bf0c      	ite	eq
 8005a22:	2301      	moveq	r3, #1
 8005a24:	2300      	movne	r3, #0
 8005a26:	b2db      	uxtb	r3, r3

}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	08014350 	.word	0x08014350

08005a34 <stopCard>:

int stopCard(struct SDinfo* sdData){
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

	FRESULT fresult = f_mount(NULL, "/", 1);
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	4908      	ldr	r1, [pc, #32]	; (8005a60 <stopCard+0x2c>)
 8005a40:	2000      	movs	r0, #0
 8005a42:	f009 f80f 	bl	800ea64 <f_mount>
 8005a46:	4603      	mov	r3, r0
 8005a48:	73fb      	strb	r3, [r7, #15]

	return (fresult == FR_OK);
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3

}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	08014350 	.word	0x08014350

08005a64 <getSD>:

void getSD(struct SDinfo* config, char* file, char* buffer){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]

	UINT br;
	  if(f_open(config->fil, file, FA_READ) != FR_OK){
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f009 f839 	bl	800eaf0 <f_open>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <getSD+0x28>

		  printf("\r\ncould not open %s file for reading", file);
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	4810      	ldr	r0, [pc, #64]	; (8005ac8 <getSD+0x64>)
 8005a88:	f00b f81a 	bl	8010ac0 <iprintf>
	  }
	  // Reads line by line until the end
	  if(f_read (config->fil, buffer, f_size(config->fil), &br) != FR_OK){
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6858      	ldr	r0, [r3, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	f107 0314 	add.w	r3, r7, #20
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	f009 f9f4 	bl	800ee88 <f_read>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <getSD+0x4a>

		  printf("\r\ncould not read %s file", file);
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	4808      	ldr	r0, [pc, #32]	; (8005acc <getSD+0x68>)
 8005aaa:	f00b f809 	bl	8010ac0 <iprintf>
	  }

	  printf("\r\nread dat: %s", buffer);
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4807      	ldr	r0, [pc, #28]	; (8005ad0 <getSD+0x6c>)
 8005ab2:	f00b f805 	bl	8010ac0 <iprintf>

	  f_close(config->fil);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f009 fd55 	bl	800f56a <f_close>

}
 8005ac0:	bf00      	nop
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	08014354 	.word	0x08014354
 8005acc:	0801437c 	.word	0x0801437c
 8005ad0:	08014398 	.word	0x08014398

08005ad4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ae2:	f002 faed 	bl	80080c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	f000 fd64 	bl	80065b4 <HAL_Delay>
}
 8005aec:	bf00      	nop
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8005af4:	2201      	movs	r2, #1
 8005af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005afe:	f002 fadf 	bl	80080c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005b02:	2001      	movs	r0, #1
 8005b04:	f000 fd56 	bl	80065b4 <HAL_Delay>
}
 8005b08:	bf00      	nop
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005b16:	bf00      	nop
 8005b18:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <SPI_TxByte+0x30>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d1f8      	bne.n	8005b18 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005b26:	1df9      	adds	r1, r7, #7
 8005b28:	2364      	movs	r3, #100	; 0x64
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	4803      	ldr	r0, [pc, #12]	; (8005b3c <SPI_TxByte+0x30>)
 8005b2e:	f004 f9ac 	bl	8009e8a <HAL_SPI_Transmit>
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	200003f8 	.word	0x200003f8

08005b40 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005b4c:	bf00      	nop
 8005b4e:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <SPI_TxBuffer+0x30>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d1f8      	bne.n	8005b4e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8005b5c:	887a      	ldrh	r2, [r7, #2]
 8005b5e:	2364      	movs	r3, #100	; 0x64
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4803      	ldr	r0, [pc, #12]	; (8005b70 <SPI_TxBuffer+0x30>)
 8005b64:	f004 f991 	bl	8009e8a <HAL_SPI_Transmit>
}
 8005b68:	bf00      	nop
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200003f8 	.word	0x200003f8

08005b74 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8005b7a:	23ff      	movs	r3, #255	; 0xff
 8005b7c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005b7e:	bf00      	nop
 8005b80:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <SPI_RxByte+0x34>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d1f8      	bne.n	8005b80 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005b8e:	1dba      	adds	r2, r7, #6
 8005b90:	1df9      	adds	r1, r7, #7
 8005b92:	2364      	movs	r3, #100	; 0x64
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	2301      	movs	r3, #1
 8005b98:	4803      	ldr	r0, [pc, #12]	; (8005ba8 <SPI_RxByte+0x34>)
 8005b9a:	f004 fae4 	bl	800a166 <HAL_SPI_TransmitReceive>

	return data;
 8005b9e:	79bb      	ldrb	r3, [r7, #6]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	200003f8 	.word	0x200003f8

08005bac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8005bb4:	f7ff ffde 	bl	8005b74 <SPI_RxByte>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	461a      	mov	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	701a      	strb	r2, [r3, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <SD_ReadyWait+0x30>)
 8005bd0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005bd4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8005bd6:	f7ff ffcd 	bl	8005b74 <SPI_RxByte>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	2bff      	cmp	r3, #255	; 0xff
 8005be2:	d004      	beq.n	8005bee <SD_ReadyWait+0x26>
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <SD_ReadyWait+0x30>)
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f3      	bne.n	8005bd6 <SD_ReadyWait+0xe>

	return res;
 8005bee:	79fb      	ldrb	r3, [r7, #7]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	200006da 	.word	0x200006da

08005bfc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8005c02:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005c06:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8005c08:	f7ff ff72 	bl	8005af0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	e005      	b.n	8005c1e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8005c12:	20ff      	movs	r0, #255	; 0xff
 8005c14:	f7ff ff7a 	bl	8005b0c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b09      	cmp	r3, #9
 8005c22:	ddf6      	ble.n	8005c12 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8005c24:	f7ff ff56 	bl	8005ad4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8005c28:	2340      	movs	r3, #64	; 0x40
 8005c2a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8005c3c:	2395      	movs	r3, #149	; 0x95
 8005c3e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8005c40:	463b      	mov	r3, r7
 8005c42:	2106      	movs	r1, #6
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff ff7b 	bl	8005b40 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8005c4a:	e002      	b.n	8005c52 <SD_PowerOn+0x56>
	{
		cnt--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8005c52:	f7ff ff8f 	bl	8005b74 <SPI_RxByte>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d002      	beq.n	8005c62 <SD_PowerOn+0x66>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f4      	bne.n	8005c4c <SD_PowerOn+0x50>
	}

	DESELECT();
 8005c62:	f7ff ff45 	bl	8005af0 <DESELECT>
	SPI_TxByte(0XFF);
 8005c66:	20ff      	movs	r0, #255	; 0xff
 8005c68:	f7ff ff50 	bl	8005b0c <SPI_TxByte>

	PowerFlag = 1;
 8005c6c:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <SD_PowerOn+0x80>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	200006e1 	.word	0x200006e1

08005c80 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8005c84:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <SD_PowerOff+0x14>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	701a      	strb	r2, [r3, #0]
}
 8005c8a:	bf00      	nop
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	200006e1 	.word	0x200006e1

08005c98 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8005c9c:	4b03      	ldr	r3, [pc, #12]	; (8005cac <SD_CheckPower+0x14>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	200006e1 	.word	0x200006e1

08005cb0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8005cba:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <SD_RxDataBlock+0x5c>)
 8005cbc:	22c8      	movs	r2, #200	; 0xc8
 8005cbe:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8005cc0:	f7ff ff58 	bl	8005b74 <SPI_RxByte>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2bff      	cmp	r3, #255	; 0xff
 8005ccc:	d104      	bne.n	8005cd8 <SD_RxDataBlock+0x28>
 8005cce:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <SD_RxDataBlock+0x5c>)
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f3      	bne.n	8005cc0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	2bfe      	cmp	r3, #254	; 0xfe
 8005cdc:	d001      	beq.n	8005ce2 <SD_RxDataBlock+0x32>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e00f      	b.n	8005d02 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff ff5f 	bl	8005bac <SPI_RxBytePtr>
	} while(len--);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	1e5a      	subs	r2, r3, #1
 8005cf2:	603a      	str	r2, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f4      	bne.n	8005ce2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8005cf8:	f7ff ff3c 	bl	8005b74 <SPI_RxByte>
	SPI_RxByte();
 8005cfc:	f7ff ff3a 	bl	8005b74 <SPI_RxByte>

	return TRUE;
 8005d00:	2301      	movs	r3, #1
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200006d9 	.word	0x200006d9

08005d10 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8005d20:	f7ff ff52 	bl	8005bc8 <SD_ReadyWait>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2bff      	cmp	r3, #255	; 0xff
 8005d28:	d001      	beq.n	8005d2e <SD_TxDataBlock+0x1e>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e02f      	b.n	8005d8e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff feeb 	bl	8005b0c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8005d36:	78fb      	ldrb	r3, [r7, #3]
 8005d38:	2bfd      	cmp	r3, #253	; 0xfd
 8005d3a:	d020      	beq.n	8005d7e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8005d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff fefd 	bl	8005b40 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8005d46:	f7ff ff15 	bl	8005b74 <SPI_RxByte>
		SPI_RxByte();
 8005d4a:	f7ff ff13 	bl	8005b74 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8005d4e:	e00b      	b.n	8005d68 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8005d50:	f7ff ff10 	bl	8005b74 <SPI_RxByte>
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	2b05      	cmp	r3, #5
 8005d60:	d006      	beq.n	8005d70 <SD_TxDataBlock+0x60>
			i++;
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	3301      	adds	r3, #1
 8005d66:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	d9f0      	bls.n	8005d50 <SD_TxDataBlock+0x40>
 8005d6e:	e000      	b.n	8005d72 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8005d70:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8005d72:	bf00      	nop
 8005d74:	f7ff fefe 	bl	8005b74 <SPI_RxByte>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0fa      	beq.n	8005d74 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	f003 031f 	and.w	r3, r3, #31
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	d101      	bne.n	8005d8c <SD_TxDataBlock+0x7c>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <SD_TxDataBlock+0x7e>

	return FALSE;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	6039      	str	r1, [r7, #0]
 8005da0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8005da2:	f7ff ff11 	bl	8005bc8 <SD_ReadyWait>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2bff      	cmp	r3, #255	; 0xff
 8005daa:	d001      	beq.n	8005db0 <SD_SendCmd+0x1a>
 8005dac:	23ff      	movs	r3, #255	; 0xff
 8005dae:	e042      	b.n	8005e36 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff feaa 	bl	8005b0c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	0e1b      	lsrs	r3, r3, #24
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fea4 	bl	8005b0c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	0c1b      	lsrs	r3, r3, #16
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fe9e 	bl	8005b0c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fe98 	bl	8005b0c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fe93 	bl	8005b0c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d102      	bne.n	8005df2 <SD_SendCmd+0x5c>
 8005dec:	2395      	movs	r3, #149	; 0x95
 8005dee:	73fb      	strb	r3, [r7, #15]
 8005df0:	e007      	b.n	8005e02 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	2b48      	cmp	r3, #72	; 0x48
 8005df6:	d102      	bne.n	8005dfe <SD_SendCmd+0x68>
 8005df8:	2387      	movs	r3, #135	; 0x87
 8005dfa:	73fb      	strb	r3, [r7, #15]
 8005dfc:	e001      	b.n	8005e02 <SD_SendCmd+0x6c>
	else crc = 1;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fe81 	bl	8005b0c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8005e0a:	79fb      	ldrb	r3, [r7, #7]
 8005e0c:	2b4c      	cmp	r3, #76	; 0x4c
 8005e0e:	d101      	bne.n	8005e14 <SD_SendCmd+0x7e>
 8005e10:	f7ff feb0 	bl	8005b74 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8005e14:	230a      	movs	r3, #10
 8005e16:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8005e18:	f7ff feac 	bl	8005b74 <SPI_RxByte>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8005e20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	da05      	bge.n	8005e34 <SD_SendCmd+0x9e>
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	73bb      	strb	r3, [r7, #14]
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f1      	bne.n	8005e18 <SD_SendCmd+0x82>

	return res;
 8005e34:	7b7b      	ldrb	r3, [r7, #13]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8005e40:	b590      	push	{r4, r7, lr}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];
	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <SD_disk_initialize+0x14>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0d6      	b.n	8006002 <SD_disk_initialize+0x1c2>
	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8005e54:	4b6d      	ldr	r3, [pc, #436]	; (800600c <SD_disk_initialize+0x1cc>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <SD_disk_initialize+0x2a>
 8005e62:	4b6a      	ldr	r3, [pc, #424]	; (800600c <SD_disk_initialize+0x1cc>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	e0cb      	b.n	8006002 <SD_disk_initialize+0x1c2>
	/* power on */
	SD_PowerOn();
 8005e6a:	f7ff fec7 	bl	8005bfc <SD_PowerOn>
	/* slave select */
	SELECT();
 8005e6e:	f7ff fe31 	bl	8005ad4 <SELECT>
	/* check disk type */
	type = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73bb      	strb	r3, [r7, #14]
	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8005e76:	2100      	movs	r1, #0
 8005e78:	2040      	movs	r0, #64	; 0x40
 8005e7a:	f7ff ff8c 	bl	8005d96 <SD_SendCmd>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	f040 80a6 	bne.w	8005fd2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8005e86:	4b62      	ldr	r3, [pc, #392]	; (8006010 <SD_disk_initialize+0x1d0>)
 8005e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e8c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005e8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005e92:	2048      	movs	r0, #72	; 0x48
 8005e94:	f7ff ff7f 	bl	8005d96 <SD_SendCmd>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d158      	bne.n	8005f50 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
 8005ea2:	e00c      	b.n	8005ebe <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8005ea4:	7bfc      	ldrb	r4, [r7, #15]
 8005ea6:	f7ff fe65 	bl	8005b74 <SPI_RxByte>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	461a      	mov	r2, r3
 8005eae:	f104 0310 	add.w	r3, r4, #16
 8005eb2:	443b      	add	r3, r7
 8005eb4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d9ef      	bls.n	8005ea4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8005ec4:	7abb      	ldrb	r3, [r7, #10]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	f040 8083 	bne.w	8005fd2 <SD_disk_initialize+0x192>
 8005ecc:	7afb      	ldrb	r3, [r7, #11]
 8005ece:	2baa      	cmp	r3, #170	; 0xaa
 8005ed0:	d17f      	bne.n	8005fd2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	2077      	movs	r0, #119	; 0x77
 8005ed6:	f7ff ff5e 	bl	8005d96 <SD_SendCmd>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d807      	bhi.n	8005ef0 <SD_disk_initialize+0xb0>
 8005ee0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005ee4:	2069      	movs	r0, #105	; 0x69
 8005ee6:	f7ff ff56 	bl	8005d96 <SD_SendCmd>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <SD_disk_initialize+0xbc>
				} while (Timer1);
 8005ef0:	4b47      	ldr	r3, [pc, #284]	; (8006010 <SD_disk_initialize+0x1d0>)
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1eb      	bne.n	8005ed2 <SD_disk_initialize+0x92>
 8005efa:	e000      	b.n	8005efe <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005efc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8005efe:	4b44      	ldr	r3, [pc, #272]	; (8006010 <SD_disk_initialize+0x1d0>)
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d064      	beq.n	8005fd2 <SD_disk_initialize+0x192>
 8005f08:	2100      	movs	r1, #0
 8005f0a:	207a      	movs	r0, #122	; 0x7a
 8005f0c:	f7ff ff43 	bl	8005d96 <SD_SendCmd>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d15d      	bne.n	8005fd2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
 8005f1a:	e00c      	b.n	8005f36 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8005f1c:	7bfc      	ldrb	r4, [r7, #15]
 8005f1e:	f7ff fe29 	bl	8005b74 <SPI_RxByte>
 8005f22:	4603      	mov	r3, r0
 8005f24:	461a      	mov	r2, r3
 8005f26:	f104 0310 	add.w	r3, r4, #16
 8005f2a:	443b      	add	r3, r7
 8005f2c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	3301      	adds	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d9ef      	bls.n	8005f1c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8005f3c:	7a3b      	ldrb	r3, [r7, #8]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <SD_disk_initialize+0x10a>
 8005f46:	230c      	movs	r3, #12
 8005f48:	e000      	b.n	8005f4c <SD_disk_initialize+0x10c>
 8005f4a:	2304      	movs	r3, #4
 8005f4c:	73bb      	strb	r3, [r7, #14]
 8005f4e:	e040      	b.n	8005fd2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005f50:	2100      	movs	r1, #0
 8005f52:	2077      	movs	r0, #119	; 0x77
 8005f54:	f7ff ff1f 	bl	8005d96 <SD_SendCmd>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d808      	bhi.n	8005f70 <SD_disk_initialize+0x130>
 8005f5e:	2100      	movs	r1, #0
 8005f60:	2069      	movs	r0, #105	; 0x69
 8005f62:	f7ff ff18 	bl	8005d96 <SD_SendCmd>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d801      	bhi.n	8005f70 <SD_disk_initialize+0x130>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e000      	b.n	8005f72 <SD_disk_initialize+0x132>
 8005f70:	2301      	movs	r3, #1
 8005f72:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d10e      	bne.n	8005f98 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	2077      	movs	r0, #119	; 0x77
 8005f7e:	f7ff ff0a 	bl	8005d96 <SD_SendCmd>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d80e      	bhi.n	8005fa6 <SD_disk_initialize+0x166>
 8005f88:	2100      	movs	r1, #0
 8005f8a:	2069      	movs	r0, #105	; 0x69
 8005f8c:	f7ff ff03 	bl	8005d96 <SD_SendCmd>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d107      	bne.n	8005fa6 <SD_disk_initialize+0x166>
 8005f96:	e00d      	b.n	8005fb4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005f98:	2100      	movs	r1, #0
 8005f9a:	2041      	movs	r0, #65	; 0x41
 8005f9c:	f7ff fefb 	bl	8005d96 <SD_SendCmd>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8005fa6:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <SD_disk_initialize+0x1d0>)
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e1      	bne.n	8005f74 <SD_disk_initialize+0x134>
 8005fb0:	e000      	b.n	8005fb4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005fb2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8005fb4:	4b16      	ldr	r3, [pc, #88]	; (8006010 <SD_disk_initialize+0x1d0>)
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <SD_disk_initialize+0x18e>
 8005fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fc2:	2050      	movs	r0, #80	; 0x50
 8005fc4:	f7ff fee7 	bl	8005d96 <SD_SendCmd>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <SD_disk_initialize+0x192>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8005fd2:	4a10      	ldr	r2, [pc, #64]	; (8006014 <SD_disk_initialize+0x1d4>)
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8005fd8:	f7ff fd8a 	bl	8005af0 <DESELECT>
	SPI_RxByte();
 8005fdc:	f7ff fdca 	bl	8005b74 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <SD_disk_initialize+0x1cc>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <SD_disk_initialize+0x1cc>)
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	e001      	b.n	8005ffc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8005ff8:	f7ff fe42 	bl	8005c80 <SD_PowerOff>
	}

	return Stat;
 8005ffc:	4b03      	ldr	r3, [pc, #12]	; (800600c <SD_disk_initialize+0x1cc>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	b2db      	uxtb	r3, r3
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	bd90      	pop	{r4, r7, pc}
 800600a:	bf00      	nop
 800600c:	20000004 	.word	0x20000004
 8006010:	200006d9 	.word	0x200006d9
 8006014:	200006e0 	.word	0x200006e0

08006018 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <SD_disk_status+0x14>
 8006028:	2301      	movs	r3, #1
 800602a:	e002      	b.n	8006032 <SD_disk_status+0x1a>
	return Stat;
 800602c:	4b04      	ldr	r3, [pc, #16]	; (8006040 <SD_disk_status+0x28>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	b2db      	uxtb	r3, r3
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000004 	.word	0x20000004

08006044 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d102      	bne.n	8006060 <SD_disk_read+0x1c>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <SD_disk_read+0x20>
 8006060:	2304      	movs	r3, #4
 8006062:	e051      	b.n	8006108 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006064:	4b2a      	ldr	r3, [pc, #168]	; (8006110 <SD_disk_read+0xcc>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <SD_disk_read+0x32>
 8006072:	2303      	movs	r3, #3
 8006074:	e048      	b.n	8006108 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8006076:	4b27      	ldr	r3, [pc, #156]	; (8006114 <SD_disk_read+0xd0>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <SD_disk_read+0x44>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	025b      	lsls	r3, r3, #9
 8006086:	607b      	str	r3, [r7, #4]

	SELECT();
 8006088:	f7ff fd24 	bl	8005ad4 <SELECT>

	if (count == 1)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d111      	bne.n	80060b6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	2051      	movs	r0, #81	; 0x51
 8006096:	f7ff fe7e 	bl	8005d96 <SD_SendCmd>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d129      	bne.n	80060f4 <SD_disk_read+0xb0>
 80060a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060a4:	68b8      	ldr	r0, [r7, #8]
 80060a6:	f7ff fe03 	bl	8005cb0 <SD_RxDataBlock>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d021      	beq.n	80060f4 <SD_disk_read+0xb0>
 80060b0:	2300      	movs	r3, #0
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	e01e      	b.n	80060f4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	2052      	movs	r0, #82	; 0x52
 80060ba:	f7ff fe6c 	bl	8005d96 <SD_SendCmd>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d117      	bne.n	80060f4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80060c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060c8:	68b8      	ldr	r0, [r7, #8]
 80060ca:	f7ff fdf1 	bl	8005cb0 <SD_RxDataBlock>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <SD_disk_read+0xa6>
				buff += 512;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80060da:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	3b01      	subs	r3, #1
 80060e0:	603b      	str	r3, [r7, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1ed      	bne.n	80060c4 <SD_disk_read+0x80>
 80060e8:	e000      	b.n	80060ec <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80060ea:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80060ec:	2100      	movs	r1, #0
 80060ee:	204c      	movs	r0, #76	; 0x4c
 80060f0:	f7ff fe51 	bl	8005d96 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80060f4:	f7ff fcfc 	bl	8005af0 <DESELECT>
	SPI_RxByte();
 80060f8:	f7ff fd3c 	bl	8005b74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bf14      	ite	ne
 8006102:	2301      	movne	r3, #1
 8006104:	2300      	moveq	r3, #0
 8006106:	b2db      	uxtb	r3, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000004 	.word	0x20000004
 8006114:	200006e0 	.word	0x200006e0

08006118 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d102      	bne.n	8006134 <SD_disk_write+0x1c>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <SD_disk_write+0x20>
 8006134:	2304      	movs	r3, #4
 8006136:	e06b      	b.n	8006210 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006138:	4b37      	ldr	r3, [pc, #220]	; (8006218 <SD_disk_write+0x100>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <SD_disk_write+0x32>
 8006146:	2303      	movs	r3, #3
 8006148:	e062      	b.n	8006210 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800614a:	4b33      	ldr	r3, [pc, #204]	; (8006218 <SD_disk_write+0x100>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <SD_disk_write+0x44>
 8006158:	2302      	movs	r3, #2
 800615a:	e059      	b.n	8006210 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800615c:	4b2f      	ldr	r3, [pc, #188]	; (800621c <SD_disk_write+0x104>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <SD_disk_write+0x56>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	025b      	lsls	r3, r3, #9
 800616c:	607b      	str	r3, [r7, #4]

	SELECT();
 800616e:	f7ff fcb1 	bl	8005ad4 <SELECT>

	if (count == 1)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d110      	bne.n	800619a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	2058      	movs	r0, #88	; 0x58
 800617c:	f7ff fe0b 	bl	8005d96 <SD_SendCmd>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d13a      	bne.n	80061fc <SD_disk_write+0xe4>
 8006186:	21fe      	movs	r1, #254	; 0xfe
 8006188:	68b8      	ldr	r0, [r7, #8]
 800618a:	f7ff fdc1 	bl	8005d10 <SD_TxDataBlock>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d033      	beq.n	80061fc <SD_disk_write+0xe4>
			count = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	e030      	b.n	80061fc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800619a:	4b20      	ldr	r3, [pc, #128]	; (800621c <SD_disk_write+0x104>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80061a6:	2100      	movs	r1, #0
 80061a8:	2077      	movs	r0, #119	; 0x77
 80061aa:	f7ff fdf4 	bl	8005d96 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	2057      	movs	r0, #87	; 0x57
 80061b2:	f7ff fdf0 	bl	8005d96 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	2059      	movs	r0, #89	; 0x59
 80061ba:	f7ff fdec 	bl	8005d96 <SD_SendCmd>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11b      	bne.n	80061fc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80061c4:	21fc      	movs	r1, #252	; 0xfc
 80061c6:	68b8      	ldr	r0, [r7, #8]
 80061c8:	f7ff fda2 	bl	8005d10 <SD_TxDataBlock>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <SD_disk_write+0xd0>
				buff += 512;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80061d8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	3b01      	subs	r3, #1
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1ee      	bne.n	80061c4 <SD_disk_write+0xac>
 80061e6:	e000      	b.n	80061ea <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80061e8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80061ea:	21fd      	movs	r1, #253	; 0xfd
 80061ec:	2000      	movs	r0, #0
 80061ee:	f7ff fd8f 	bl	8005d10 <SD_TxDataBlock>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <SD_disk_write+0xe4>
			{
				count = 1;
 80061f8:	2301      	movs	r3, #1
 80061fa:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80061fc:	f7ff fc78 	bl	8005af0 <DESELECT>
	SPI_RxByte();
 8006200:	f7ff fcb8 	bl	8005b74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20000004 	.word	0x20000004
 800621c:	200006e0 	.word	0x200006e0

08006220 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8006220:	b590      	push	{r4, r7, lr}
 8006222:	b08b      	sub	sp, #44	; 0x2c
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	603a      	str	r2, [r7, #0]
 800622a:	71fb      	strb	r3, [r7, #7]
 800622c:	460b      	mov	r3, r1
 800622e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <SD_disk_ioctl+0x1e>
 800623a:	2304      	movs	r3, #4
 800623c:	e115      	b.n	800646a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8006244:	79bb      	ldrb	r3, [r7, #6]
 8006246:	2b05      	cmp	r3, #5
 8006248:	d124      	bne.n	8006294 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d012      	beq.n	8006278 <SD_disk_ioctl+0x58>
 8006252:	2b02      	cmp	r3, #2
 8006254:	dc1a      	bgt.n	800628c <SD_disk_ioctl+0x6c>
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <SD_disk_ioctl+0x40>
 800625a:	2b01      	cmp	r3, #1
 800625c:	d006      	beq.n	800626c <SD_disk_ioctl+0x4c>
 800625e:	e015      	b.n	800628c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8006260:	f7ff fd0e 	bl	8005c80 <SD_PowerOff>
			res = RES_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800626a:	e0fc      	b.n	8006466 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800626c:	f7ff fcc6 	bl	8005bfc <SD_PowerOn>
			res = RES_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006276:	e0f6      	b.n	8006466 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	1c5c      	adds	r4, r3, #1
 800627c:	f7ff fd0c 	bl	8005c98 <SD_CheckPower>
 8006280:	4603      	mov	r3, r0
 8006282:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8006284:	2300      	movs	r3, #0
 8006286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800628a:	e0ec      	b.n	8006466 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800628c:	2304      	movs	r3, #4
 800628e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006292:	e0e8      	b.n	8006466 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006294:	4b77      	ldr	r3, [pc, #476]	; (8006474 <SD_disk_ioctl+0x254>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <SD_disk_ioctl+0x86>
 80062a2:	2303      	movs	r3, #3
 80062a4:	e0e1      	b.n	800646a <SD_disk_ioctl+0x24a>

		SELECT();
 80062a6:	f7ff fc15 	bl	8005ad4 <SELECT>

		switch (ctrl)
 80062aa:	79bb      	ldrb	r3, [r7, #6]
 80062ac:	2b0d      	cmp	r3, #13
 80062ae:	f200 80cb 	bhi.w	8006448 <SD_disk_ioctl+0x228>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <SD_disk_ioctl+0x98>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080063b3 	.word	0x080063b3
 80062bc:	080062f1 	.word	0x080062f1
 80062c0:	080063a3 	.word	0x080063a3
 80062c4:	08006449 	.word	0x08006449
 80062c8:	08006449 	.word	0x08006449
 80062cc:	08006449 	.word	0x08006449
 80062d0:	08006449 	.word	0x08006449
 80062d4:	08006449 	.word	0x08006449
 80062d8:	08006449 	.word	0x08006449
 80062dc:	08006449 	.word	0x08006449
 80062e0:	08006449 	.word	0x08006449
 80062e4:	080063c5 	.word	0x080063c5
 80062e8:	080063e9 	.word	0x080063e9
 80062ec:	0800640d 	.word	0x0800640d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80062f0:	2100      	movs	r1, #0
 80062f2:	2049      	movs	r0, #73	; 0x49
 80062f4:	f7ff fd4f 	bl	8005d96 <SD_SendCmd>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f040 80a8 	bne.w	8006450 <SD_disk_ioctl+0x230>
 8006300:	f107 030c 	add.w	r3, r7, #12
 8006304:	2110      	movs	r1, #16
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff fcd2 	bl	8005cb0 <SD_RxDataBlock>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 809e 	beq.w	8006450 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8006314:	7b3b      	ldrb	r3, [r7, #12]
 8006316:	099b      	lsrs	r3, r3, #6
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d10e      	bne.n	800633c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800631e:	7d7b      	ldrb	r3, [r7, #21]
 8006320:	b29a      	uxth	r2, r3
 8006322:	7d3b      	ldrb	r3, [r7, #20]
 8006324:	b29b      	uxth	r3, r3
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	b29b      	uxth	r3, r3
 800632a:	4413      	add	r3, r2
 800632c:	b29b      	uxth	r3, r3
 800632e:	3301      	adds	r3, #1
 8006330:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8006332:	8bfb      	ldrh	r3, [r7, #30]
 8006334:	029a      	lsls	r2, r3, #10
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e02e      	b.n	800639a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800633c:	7c7b      	ldrb	r3, [r7, #17]
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	b2da      	uxtb	r2, r3
 8006344:	7dbb      	ldrb	r3, [r7, #22]
 8006346:	09db      	lsrs	r3, r3, #7
 8006348:	b2db      	uxtb	r3, r3
 800634a:	4413      	add	r3, r2
 800634c:	b2da      	uxtb	r2, r3
 800634e:	7d7b      	ldrb	r3, [r7, #21]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0306 	and.w	r3, r3, #6
 8006358:	b2db      	uxtb	r3, r3
 800635a:	4413      	add	r3, r2
 800635c:	b2db      	uxtb	r3, r3
 800635e:	3302      	adds	r3, #2
 8006360:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8006364:	7d3b      	ldrb	r3, [r7, #20]
 8006366:	099b      	lsrs	r3, r3, #6
 8006368:	b2db      	uxtb	r3, r3
 800636a:	b29a      	uxth	r2, r3
 800636c:	7cfb      	ldrb	r3, [r7, #19]
 800636e:	b29b      	uxth	r3, r3
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	b29b      	uxth	r3, r3
 8006374:	4413      	add	r3, r2
 8006376:	b29a      	uxth	r2, r3
 8006378:	7cbb      	ldrb	r3, [r7, #18]
 800637a:	029b      	lsls	r3, r3, #10
 800637c:	b29b      	uxth	r3, r3
 800637e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006382:	b29b      	uxth	r3, r3
 8006384:	4413      	add	r3, r2
 8006386:	b29b      	uxth	r3, r3
 8006388:	3301      	adds	r3, #1
 800638a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800638c:	8bfa      	ldrh	r2, [r7, #30]
 800638e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006392:	3b09      	subs	r3, #9
 8006394:	409a      	lsls	r2, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80063a0:	e056      	b.n	8006450 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80063b0:	e055      	b.n	800645e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80063b2:	f7ff fc09 	bl	8005bc8 <SD_ReadyWait>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2bff      	cmp	r3, #255	; 0xff
 80063ba:	d14b      	bne.n	8006454 <SD_disk_ioctl+0x234>
 80063bc:	2300      	movs	r3, #0
 80063be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80063c2:	e047      	b.n	8006454 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80063c4:	2100      	movs	r1, #0
 80063c6:	2049      	movs	r0, #73	; 0x49
 80063c8:	f7ff fce5 	bl	8005d96 <SD_SendCmd>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d142      	bne.n	8006458 <SD_disk_ioctl+0x238>
 80063d2:	2110      	movs	r1, #16
 80063d4:	6a38      	ldr	r0, [r7, #32]
 80063d6:	f7ff fc6b 	bl	8005cb0 <SD_RxDataBlock>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d03b      	beq.n	8006458 <SD_disk_ioctl+0x238>
 80063e0:	2300      	movs	r3, #0
 80063e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80063e6:	e037      	b.n	8006458 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80063e8:	2100      	movs	r1, #0
 80063ea:	204a      	movs	r0, #74	; 0x4a
 80063ec:	f7ff fcd3 	bl	8005d96 <SD_SendCmd>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d132      	bne.n	800645c <SD_disk_ioctl+0x23c>
 80063f6:	2110      	movs	r1, #16
 80063f8:	6a38      	ldr	r0, [r7, #32]
 80063fa:	f7ff fc59 	bl	8005cb0 <SD_RxDataBlock>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d02b      	beq.n	800645c <SD_disk_ioctl+0x23c>
 8006404:	2300      	movs	r3, #0
 8006406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800640a:	e027      	b.n	800645c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800640c:	2100      	movs	r1, #0
 800640e:	207a      	movs	r0, #122	; 0x7a
 8006410:	f7ff fcc1 	bl	8005d96 <SD_SendCmd>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d116      	bne.n	8006448 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800641a:	2300      	movs	r3, #0
 800641c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006420:	e00b      	b.n	800643a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8006422:	6a3c      	ldr	r4, [r7, #32]
 8006424:	1c63      	adds	r3, r4, #1
 8006426:	623b      	str	r3, [r7, #32]
 8006428:	f7ff fba4 	bl	8005b74 <SPI_RxByte>
 800642c:	4603      	mov	r3, r0
 800642e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8006430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006434:	3301      	adds	r3, #1
 8006436:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800643a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800643e:	2b03      	cmp	r3, #3
 8006440:	d9ef      	bls.n	8006422 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8006448:	2304      	movs	r3, #4
 800644a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800644e:	e006      	b.n	800645e <SD_disk_ioctl+0x23e>
			break;
 8006450:	bf00      	nop
 8006452:	e004      	b.n	800645e <SD_disk_ioctl+0x23e>
			break;
 8006454:	bf00      	nop
 8006456:	e002      	b.n	800645e <SD_disk_ioctl+0x23e>
			break;
 8006458:	bf00      	nop
 800645a:	e000      	b.n	800645e <SD_disk_ioctl+0x23e>
			break;
 800645c:	bf00      	nop
		}

		DESELECT();
 800645e:	f7ff fb47 	bl	8005af0 <DESELECT>
		SPI_RxByte();
 8006462:	f7ff fb87 	bl	8005b74 <SPI_RxByte>
	}

	return res;
 8006466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800646a:	4618      	mov	r0, r3
 800646c:	372c      	adds	r7, #44	; 0x2c
 800646e:	46bd      	mov	sp, r7
 8006470:	bd90      	pop	{r4, r7, pc}
 8006472:	bf00      	nop
 8006474:	20000004 	.word	0x20000004

08006478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800647c:	f7fe fc78 	bl	8004d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006480:	480c      	ldr	r0, [pc, #48]	; (80064b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8006482:	490d      	ldr	r1, [pc, #52]	; (80064b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006484:	4a0d      	ldr	r2, [pc, #52]	; (80064bc <LoopForever+0xe>)
  movs r3, #0
 8006486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006488:	e002      	b.n	8006490 <LoopCopyDataInit>

0800648a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800648a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800648c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800648e:	3304      	adds	r3, #4

08006490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006494:	d3f9      	bcc.n	800648a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006496:	4a0a      	ldr	r2, [pc, #40]	; (80064c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006498:	4c0a      	ldr	r4, [pc, #40]	; (80064c4 <LoopForever+0x16>)
  movs r3, #0
 800649a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800649c:	e001      	b.n	80064a2 <LoopFillZerobss>

0800649e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800649e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064a0:	3204      	adds	r2, #4

080064a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064a4:	d3fb      	bcc.n	800649e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80064a6:	f009 fd7f 	bl	800ffa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80064aa:	f7fd fd95 	bl	8003fd8 <main>

080064ae <LoopForever>:

LoopForever:
    b LoopForever
 80064ae:	e7fe      	b.n	80064ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80064b0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80064b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064b8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80064bc:	08014c90 	.word	0x08014c90
  ldr r2, =_sbss
 80064c0:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80064c4:	20000934 	.word	0x20000934

080064c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80064c8:	e7fe      	b.n	80064c8 <ADC1_2_IRQHandler>

080064ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064d4:	2003      	movs	r0, #3
 80064d6:	f001 f927 	bl	8007728 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064da:	200f      	movs	r0, #15
 80064dc:	f000 f80e 	bl	80064fc <HAL_InitTick>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	71fb      	strb	r3, [r7, #7]
 80064ea:	e001      	b.n	80064f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80064ec:	f7fe f9c6 	bl	800487c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80064f0:	79fb      	ldrb	r3, [r7, #7]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006508:	4b17      	ldr	r3, [pc, #92]	; (8006568 <HAL_InitTick+0x6c>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d023      	beq.n	8006558 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006510:	4b16      	ldr	r3, [pc, #88]	; (800656c <HAL_InitTick+0x70>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	4b14      	ldr	r3, [pc, #80]	; (8006568 <HAL_InitTick+0x6c>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	4619      	mov	r1, r3
 800651a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800651e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006522:	fbb2 f3f3 	udiv	r3, r2, r3
 8006526:	4618      	mov	r0, r3
 8006528:	f001 f933 	bl	8007792 <HAL_SYSTICK_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10f      	bne.n	8006552 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b0f      	cmp	r3, #15
 8006536:	d809      	bhi.n	800654c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006538:	2200      	movs	r2, #0
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	f001 f8fd 	bl	800773e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006544:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <HAL_InitTick+0x74>)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	e007      	b.n	800655c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]
 8006550:	e004      	b.n	800655c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
 8006556:	e001      	b.n	800655c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	2000000c 	.word	0x2000000c
 800656c:	20000000 	.word	0x20000000
 8006570:	20000008 	.word	0x20000008

08006574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <HAL_IncTick+0x20>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	4b06      	ldr	r3, [pc, #24]	; (8006598 <HAL_IncTick+0x24>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4413      	add	r3, r2
 8006584:	4a04      	ldr	r2, [pc, #16]	; (8006598 <HAL_IncTick+0x24>)
 8006586:	6013      	str	r3, [r2, #0]
}
 8006588:	bf00      	nop
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	2000000c 	.word	0x2000000c
 8006598:	200006e4 	.word	0x200006e4

0800659c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  return uwTick;
 80065a0:	4b03      	ldr	r3, [pc, #12]	; (80065b0 <HAL_GetTick+0x14>)
 80065a2:	681b      	ldr	r3, [r3, #0]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	200006e4 	.word	0x200006e4

080065b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065bc:	f7ff ffee 	bl	800659c <HAL_GetTick>
 80065c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065cc:	d005      	beq.n	80065da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80065ce:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <HAL_Delay+0x44>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80065da:	bf00      	nop
 80065dc:	f7ff ffde 	bl	800659c <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d8f7      	bhi.n	80065dc <HAL_Delay+0x28>
  {
  }
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	2000000c 	.word	0x2000000c

080065fc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <HAL_SuspendTick+0x1c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a04      	ldr	r2, [pc, #16]	; (8006618 <HAL_SuspendTick+0x1c>)
 8006606:	f023 0302 	bic.w	r3, r3, #2
 800660a:	6013      	str	r3, [r2, #0]
}
 800660c:	bf00      	nop
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	e000e010 	.word	0xe000e010

0800661c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	609a      	str	r2, [r3, #8]
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	609a      	str	r2, [r3, #8]
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3360      	adds	r3, #96	; 0x60
 8006696:	461a      	mov	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	4b08      	ldr	r3, [pc, #32]	; (80066c8 <LL_ADC_SetOffset+0x44>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80066bc:	bf00      	nop
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	03fff000 	.word	0x03fff000

080066cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3360      	adds	r3, #96	; 0x60
 80066da:	461a      	mov	r2, r3
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3360      	adds	r3, #96	; 0x60
 8006708:	461a      	mov	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	431a      	orrs	r2, r3
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	615a      	str	r2, [r3, #20]
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3330      	adds	r3, #48	; 0x30
 8006764:	461a      	mov	r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	0a1b      	lsrs	r3, r3, #8
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	f003 030c 	and.w	r3, r3, #12
 8006770:	4413      	add	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	211f      	movs	r1, #31
 8006780:	fa01 f303 	lsl.w	r3, r1, r3
 8006784:	43db      	mvns	r3, r3
 8006786:	401a      	ands	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	0e9b      	lsrs	r3, r3, #26
 800678c:	f003 011f 	and.w	r1, r3, #31
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f003 031f 	and.w	r3, r3, #31
 8006796:	fa01 f303 	lsl.w	r3, r1, r3
 800679a:	431a      	orrs	r2, r3
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80067a0:	bf00      	nop
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3314      	adds	r3, #20
 80067bc:	461a      	mov	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	0e5b      	lsrs	r3, r3, #25
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	4413      	add	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	0d1b      	lsrs	r3, r3, #20
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2107      	movs	r1, #7
 80067da:	fa01 f303 	lsl.w	r3, r1, r3
 80067de:	43db      	mvns	r3, r3
 80067e0:	401a      	ands	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	0d1b      	lsrs	r3, r3, #20
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	fa01 f303 	lsl.w	r3, r1, r3
 80067f0:	431a      	orrs	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
	...

08006804 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800681c:	43db      	mvns	r3, r3
 800681e:	401a      	ands	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f003 0318 	and.w	r3, r3, #24
 8006826:	4908      	ldr	r1, [pc, #32]	; (8006848 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006828:	40d9      	lsrs	r1, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	400b      	ands	r3, r1
 800682e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006832:	431a      	orrs	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800683a:	bf00      	nop
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	0007ffff 	.word	0x0007ffff

0800684c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800685c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6093      	str	r3, [r2, #8]
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006884:	d101      	bne.n	800688a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80068a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80068ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068d4:	d101      	bne.n	80068da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <LL_ADC_IsEnabled+0x18>
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <LL_ADC_IsEnabled+0x1a>
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b04      	cmp	r3, #4
 8006920:	d101      	bne.n	8006926 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b08      	cmp	r3, #8
 8006946:	d101      	bne.n	800694c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006948:	2301      	movs	r3, #1
 800694a:	e000      	b.n	800694e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800695c:	b590      	push	{r4, r7, lr}
 800695e:	b089      	sub	sp, #36	; 0x24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006968:	2300      	movs	r3, #0
 800696a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e131      	b.n	8006bda <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fd ff9d 	bl	80048c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ff67 	bl	8006870 <LL_ADC_IsDeepPowerDownEnabled>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff ff4d 	bl	800684c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff ff82 	bl	80068c0 <LL_ADC_IsInternalRegulatorEnabled>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d115      	bne.n	80069ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff ff66 	bl	8006898 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069cc:	4b85      	ldr	r3, [pc, #532]	; (8006be4 <HAL_ADC_Init+0x288>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	099b      	lsrs	r3, r3, #6
 80069d2:	4a85      	ldr	r2, [pc, #532]	; (8006be8 <HAL_ADC_Init+0x28c>)
 80069d4:	fba2 2303 	umull	r2, r3, r2, r3
 80069d8:	099b      	lsrs	r3, r3, #6
 80069da:	3301      	adds	r3, #1
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80069e0:	e002      	b.n	80069e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f9      	bne.n	80069e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff ff64 	bl	80068c0 <LL_ADC_IsInternalRegulatorEnabled>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10d      	bne.n	8006a1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a02:	f043 0210 	orr.w	r2, r3, #16
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0e:	f043 0201 	orr.w	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff ff75 	bl	800690e <LL_ADC_REG_IsConversionOngoing>
 8006a24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f040 80ca 	bne.w	8006bc8 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 80c6 	bne.w	8006bc8 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006a44:	f043 0202 	orr.w	r2, r3, #2
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff ff49 	bl	80068e8 <LL_ADC_IsEnabled>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d110      	bne.n	8006a7e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a5c:	4863      	ldr	r0, [pc, #396]	; (8006bec <HAL_ADC_Init+0x290>)
 8006a5e:	f7ff ff43 	bl	80068e8 <LL_ADC_IsEnabled>
 8006a62:	4604      	mov	r4, r0
 8006a64:	4862      	ldr	r0, [pc, #392]	; (8006bf0 <HAL_ADC_Init+0x294>)
 8006a66:	f7ff ff3f 	bl	80068e8 <LL_ADC_IsEnabled>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4323      	orrs	r3, r4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d105      	bne.n	8006a7e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	4619      	mov	r1, r3
 8006a78:	485e      	ldr	r0, [pc, #376]	; (8006bf4 <HAL_ADC_Init+0x298>)
 8006a7a:	f7ff fdcf 	bl	800661c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	7e5b      	ldrb	r3, [r3, #25]
 8006a82:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a88:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006a8e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006a94:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a9c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d106      	bne.n	8006aba <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	045b      	lsls	r3, r3, #17
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d009      	beq.n	8006ad6 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	4b46      	ldr	r3, [pc, #280]	; (8006bf8 <HAL_ADC_Init+0x29c>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	69b9      	ldr	r1, [r7, #24]
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff ff0d 	bl	800690e <LL_ADC_REG_IsConversionOngoing>
 8006af4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff ff1a 	bl	8006934 <LL_ADC_INJ_IsConversionOngoing>
 8006b00:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d13d      	bne.n	8006b84 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d13a      	bne.n	8006b84 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006b12:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b1a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b2a:	f023 0302 	bic.w	r3, r3, #2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6812      	ldr	r2, [r2, #0]
 8006b32:	69b9      	ldr	r1, [r7, #24]
 8006b34:	430b      	orrs	r3, r1
 8006b36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d118      	bne.n	8006b74 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b4c:	f023 0304 	bic.w	r3, r3, #4
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b58:	4311      	orrs	r1, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006b5e:	4311      	orrs	r1, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b64:	430a      	orrs	r2, r1
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0201 	orr.w	r2, r2, #1
 8006b70:	611a      	str	r2, [r3, #16]
 8006b72:	e007      	b.n	8006b84 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0201 	bic.w	r2, r2, #1
 8006b82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d10c      	bne.n	8006ba6 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	f023 010f 	bic.w	r1, r3, #15
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	1e5a      	subs	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ba4:	e007      	b.n	8006bb6 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 020f 	bic.w	r2, r2, #15
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	f023 0303 	bic.w	r3, r3, #3
 8006bbe:	f043 0201 	orr.w	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	655a      	str	r2, [r3, #84]	; 0x54
 8006bc6:	e007      	b.n	8006bd8 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bcc:	f043 0210 	orr.w	r2, r3, #16
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006bd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3724      	adds	r7, #36	; 0x24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd90      	pop	{r4, r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000000 	.word	0x20000000
 8006be8:	053e2d63 	.word	0x053e2d63
 8006bec:	50040000 	.word	0x50040000
 8006bf0:	50040100 	.word	0x50040100
 8006bf4:	50040300 	.word	0x50040300
 8006bf8:	fff0c007 	.word	0xfff0c007

08006bfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b0b6      	sub	sp, #216	; 0xd8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <HAL_ADC_ConfigChannel+0x22>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e3d5      	b.n	80073ca <HAL_ADC_ConfigChannel+0x7ce>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff fe6f 	bl	800690e <LL_ADC_REG_IsConversionOngoing>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f040 83ba 	bne.w	80073ac <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	d824      	bhi.n	8006c8a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	3b02      	subs	r3, #2
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d81b      	bhi.n	8006c82 <HAL_ADC_ConfigChannel+0x86>
 8006c4a:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <HAL_ADC_ConfigChannel+0x54>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c69 	.word	0x08006c69
 8006c58:	08006c71 	.word	0x08006c71
 8006c5c:	08006c79 	.word	0x08006c79
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	220c      	movs	r2, #12
 8006c64:	605a      	str	r2, [r3, #4]
          break;
 8006c66:	e011      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2212      	movs	r2, #18
 8006c6c:	605a      	str	r2, [r3, #4]
          break;
 8006c6e:	e00d      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2218      	movs	r2, #24
 8006c74:	605a      	str	r2, [r3, #4]
          break;
 8006c76:	e009      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c7e:	605a      	str	r2, [r3, #4]
          break;
 8006c80:	e004      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2206      	movs	r2, #6
 8006c86:	605a      	str	r2, [r3, #4]
          break;
 8006c88:	e000      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8006c8a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	6859      	ldr	r1, [r3, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	f7ff fd5b 	bl	8006754 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff fe33 	bl	800690e <LL_ADC_REG_IsConversionOngoing>
 8006ca8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fe3f 	bl	8006934 <LL_ADC_INJ_IsConversionOngoing>
 8006cb6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006cba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 81c1 	bne.w	8007046 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006cc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f040 81bc 	bne.w	8007046 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd6:	d10f      	bne.n	8006cf8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	f7ff fd62 	bl	80067ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fd1c 	bl	800672e <LL_ADC_SetSamplingTimeCommonConfig>
 8006cf6:	e00e      	b.n	8006d16 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	6819      	ldr	r1, [r3, #0]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	461a      	mov	r2, r3
 8006d06:	f7ff fd51 	bl	80067ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2100      	movs	r1, #0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fd0c 	bl	800672e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695a      	ldr	r2, [r3, #20]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	08db      	lsrs	r3, r3, #3
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d00a      	beq.n	8006d4e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	6919      	ldr	r1, [r3, #16]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d48:	f7ff fc9c 	bl	8006684 <LL_ADC_SetOffset>
 8006d4c:	e17b      	b.n	8007046 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fcb9 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <HAL_ADC_ConfigChannel+0x17e>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff fcae 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006d70:	4603      	mov	r3, r0
 8006d72:	0e9b      	lsrs	r3, r3, #26
 8006d74:	f003 021f 	and.w	r2, r3, #31
 8006d78:	e01e      	b.n	8006db8 <HAL_ADC_ConfigChannel+0x1bc>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff fca3 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d90:	fa93 f3a3 	rbit	r3, r3
 8006d94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006d98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006da0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8006da8:	2320      	movs	r3, #32
 8006daa:	e004      	b.n	8006db6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8006dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006db0:	fab3 f383 	clz	r3, r3
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d105      	bne.n	8006dd0 <HAL_ADC_ConfigChannel+0x1d4>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	0e9b      	lsrs	r3, r3, #26
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	e018      	b.n	8006e02 <HAL_ADC_ConfigChannel+0x206>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ddc:	fa93 f3a3 	rbit	r3, r3
 8006de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006dec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8006df4:	2320      	movs	r3, #32
 8006df6:	e004      	b.n	8006e02 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8006df8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dfc:	fab3 f383 	clz	r3, r3
 8006e00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d106      	bne.n	8006e14 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff fc72 	bl	80066f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2101      	movs	r1, #1
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fc56 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <HAL_ADC_ConfigChannel+0x244>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2101      	movs	r1, #1
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff fc4b 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006e36:	4603      	mov	r3, r0
 8006e38:	0e9b      	lsrs	r3, r3, #26
 8006e3a:	f003 021f 	and.w	r2, r3, #31
 8006e3e:	e01e      	b.n	8006e7e <HAL_ADC_ConfigChannel+0x282>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2101      	movs	r1, #1
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff fc40 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e56:	fa93 f3a3 	rbit	r3, r3
 8006e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006e66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8006e6e:	2320      	movs	r3, #32
 8006e70:	e004      	b.n	8006e7c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8006e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e76:	fab3 f383 	clz	r3, r3
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d105      	bne.n	8006e96 <HAL_ADC_ConfigChannel+0x29a>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	0e9b      	lsrs	r3, r3, #26
 8006e90:	f003 031f 	and.w	r3, r3, #31
 8006e94:	e018      	b.n	8006ec8 <HAL_ADC_ConfigChannel+0x2cc>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ea2:	fa93 f3a3 	rbit	r3, r3
 8006ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006eaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006eae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006eb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8006eba:	2320      	movs	r3, #32
 8006ebc:	e004      	b.n	8006ec8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8006ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ec2:	fab3 f383 	clz	r3, r3
 8006ec6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d106      	bne.n	8006eda <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7ff fc0f 	bl	80066f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2102      	movs	r1, #2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fbf3 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <HAL_ADC_ConfigChannel+0x30a>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2102      	movs	r1, #2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff fbe8 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006efc:	4603      	mov	r3, r0
 8006efe:	0e9b      	lsrs	r3, r3, #26
 8006f00:	f003 021f 	and.w	r2, r3, #31
 8006f04:	e01e      	b.n	8006f44 <HAL_ADC_ConfigChannel+0x348>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2102      	movs	r1, #2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fbdd 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f1c:	fa93 f3a3 	rbit	r3, r3
 8006f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006f2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8006f34:	2320      	movs	r3, #32
 8006f36:	e004      	b.n	8006f42 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8006f38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f3c:	fab3 f383 	clz	r3, r3
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <HAL_ADC_ConfigChannel+0x360>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	0e9b      	lsrs	r3, r3, #26
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	e016      	b.n	8006f8a <HAL_ADC_ConfigChannel+0x38e>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f68:	fa93 f3a3 	rbit	r3, r3
 8006f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006f6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8006f7c:	2320      	movs	r3, #32
 8006f7e:	e004      	b.n	8006f8a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8006f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f84:	fab3 f383 	clz	r3, r3
 8006f88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d106      	bne.n	8006f9c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2200      	movs	r2, #0
 8006f94:	2102      	movs	r1, #2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff fbae 	bl	80066f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2103      	movs	r1, #3
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff fb92 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <HAL_ADC_ConfigChannel+0x3cc>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2103      	movs	r1, #3
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fb87 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	0e9b      	lsrs	r3, r3, #26
 8006fc2:	f003 021f 	and.w	r2, r3, #31
 8006fc6:	e017      	b.n	8006ff8 <HAL_ADC_ConfigChannel+0x3fc>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2103      	movs	r1, #3
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fb7c 	bl	80066cc <LL_ADC_GetOffsetChannel>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fda:	fa93 f3a3 	rbit	r3, r3
 8006fde:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fe2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8006fea:	2320      	movs	r3, #32
 8006fec:	e003      	b.n	8006ff6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8006fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff0:	fab3 f383 	clz	r3, r3
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007000:	2b00      	cmp	r3, #0
 8007002:	d105      	bne.n	8007010 <HAL_ADC_ConfigChannel+0x414>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	0e9b      	lsrs	r3, r3, #26
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	e011      	b.n	8007034 <HAL_ADC_ConfigChannel+0x438>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007018:	fa93 f3a3 	rbit	r3, r3
 800701c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800701e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007020:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8007028:	2320      	movs	r3, #32
 800702a:	e003      	b.n	8007034 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800702c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702e:	fab3 f383 	clz	r3, r3
 8007032:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007034:	429a      	cmp	r2, r3
 8007036:	d106      	bne.n	8007046 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2200      	movs	r2, #0
 800703e:	2103      	movs	r1, #3
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff fb59 	bl	80066f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fc4c 	bl	80068e8 <LL_ADC_IsEnabled>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 8140 	bne.w	80072d8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6819      	ldr	r1, [r3, #0]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	461a      	mov	r2, r3
 8007066:	f7ff fbcd 	bl	8006804 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	4a8f      	ldr	r2, [pc, #572]	; (80072ac <HAL_ADC_ConfigChannel+0x6b0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	f040 8131 	bne.w	80072d8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10b      	bne.n	800709e <HAL_ADC_ConfigChannel+0x4a2>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	0e9b      	lsrs	r3, r3, #26
 800708c:	3301      	adds	r3, #1
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	2b09      	cmp	r3, #9
 8007094:	bf94      	ite	ls
 8007096:	2301      	movls	r3, #1
 8007098:	2300      	movhi	r3, #0
 800709a:	b2db      	uxtb	r3, r3
 800709c:	e019      	b.n	80070d2 <HAL_ADC_ConfigChannel+0x4d6>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a6:	fa93 f3a3 	rbit	r3, r3
 80070aa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80070ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070ae:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80070b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80070b6:	2320      	movs	r3, #32
 80070b8:	e003      	b.n	80070c2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80070ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070bc:	fab3 f383 	clz	r3, r3
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	3301      	adds	r3, #1
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	2b09      	cmp	r3, #9
 80070ca:	bf94      	ite	ls
 80070cc:	2301      	movls	r3, #1
 80070ce:	2300      	movhi	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d079      	beq.n	80071ca <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d107      	bne.n	80070f2 <HAL_ADC_ConfigChannel+0x4f6>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	0e9b      	lsrs	r3, r3, #26
 80070e8:	3301      	adds	r3, #1
 80070ea:	069b      	lsls	r3, r3, #26
 80070ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070f0:	e015      	b.n	800711e <HAL_ADC_ConfigChannel+0x522>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fa:	fa93 f3a3 	rbit	r3, r3
 80070fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007102:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800710a:	2320      	movs	r3, #32
 800710c:	e003      	b.n	8007116 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800710e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007110:	fab3 f383 	clz	r3, r3
 8007114:	b2db      	uxtb	r3, r3
 8007116:	3301      	adds	r3, #1
 8007118:	069b      	lsls	r3, r3, #26
 800711a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <HAL_ADC_ConfigChannel+0x542>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	0e9b      	lsrs	r3, r3, #26
 8007130:	3301      	adds	r3, #1
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2101      	movs	r1, #1
 8007138:	fa01 f303 	lsl.w	r3, r1, r3
 800713c:	e017      	b.n	800716e <HAL_ADC_ConfigChannel+0x572>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007146:	fa93 f3a3 	rbit	r3, r3
 800714a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800714c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800714e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8007156:	2320      	movs	r3, #32
 8007158:	e003      	b.n	8007162 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800715a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715c:	fab3 f383 	clz	r3, r3
 8007160:	b2db      	uxtb	r3, r3
 8007162:	3301      	adds	r3, #1
 8007164:	f003 031f 	and.w	r3, r3, #31
 8007168:	2101      	movs	r1, #1
 800716a:	fa01 f303 	lsl.w	r3, r1, r3
 800716e:	ea42 0103 	orr.w	r1, r2, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <HAL_ADC_ConfigChannel+0x598>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	0e9b      	lsrs	r3, r3, #26
 8007184:	3301      	adds	r3, #1
 8007186:	f003 021f 	and.w	r2, r3, #31
 800718a:	4613      	mov	r3, r2
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	4413      	add	r3, r2
 8007190:	051b      	lsls	r3, r3, #20
 8007192:	e018      	b.n	80071c6 <HAL_ADC_ConfigChannel+0x5ca>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	fa93 f3a3 	rbit	r3, r3
 80071a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80071a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80071a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80071ac:	2320      	movs	r3, #32
 80071ae:	e003      	b.n	80071b8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80071b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b2:	fab3 f383 	clz	r3, r3
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	3301      	adds	r3, #1
 80071ba:	f003 021f 	and.w	r2, r3, #31
 80071be:	4613      	mov	r3, r2
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	4413      	add	r3, r2
 80071c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071c6:	430b      	orrs	r3, r1
 80071c8:	e081      	b.n	80072ce <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d107      	bne.n	80071e6 <HAL_ADC_ConfigChannel+0x5ea>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	0e9b      	lsrs	r3, r3, #26
 80071dc:	3301      	adds	r3, #1
 80071de:	069b      	lsls	r3, r3, #26
 80071e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80071e4:	e015      	b.n	8007212 <HAL_ADC_ConfigChannel+0x616>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ee:	fa93 f3a3 	rbit	r3, r3
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80071fe:	2320      	movs	r3, #32
 8007200:	e003      	b.n	800720a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	fab3 f383 	clz	r3, r3
 8007208:	b2db      	uxtb	r3, r3
 800720a:	3301      	adds	r3, #1
 800720c:	069b      	lsls	r3, r3, #26
 800720e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <HAL_ADC_ConfigChannel+0x636>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	0e9b      	lsrs	r3, r3, #26
 8007224:	3301      	adds	r3, #1
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2101      	movs	r1, #1
 800722c:	fa01 f303 	lsl.w	r3, r1, r3
 8007230:	e017      	b.n	8007262 <HAL_ADC_ConfigChannel+0x666>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	fa93 f3a3 	rbit	r3, r3
 800723e:	61fb      	str	r3, [r7, #28]
  return result;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800724a:	2320      	movs	r3, #32
 800724c:	e003      	b.n	8007256 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	fab3 f383 	clz	r3, r3
 8007254:	b2db      	uxtb	r3, r3
 8007256:	3301      	adds	r3, #1
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	2101      	movs	r1, #1
 800725e:	fa01 f303 	lsl.w	r3, r1, r3
 8007262:	ea42 0103 	orr.w	r1, r2, r3
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10d      	bne.n	800728e <HAL_ADC_ConfigChannel+0x692>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	0e9b      	lsrs	r3, r3, #26
 8007278:	3301      	adds	r3, #1
 800727a:	f003 021f 	and.w	r2, r3, #31
 800727e:	4613      	mov	r3, r2
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	4413      	add	r3, r2
 8007284:	3b1e      	subs	r3, #30
 8007286:	051b      	lsls	r3, r3, #20
 8007288:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800728c:	e01e      	b.n	80072cc <HAL_ADC_ConfigChannel+0x6d0>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	fa93 f3a3 	rbit	r3, r3
 800729a:	613b      	str	r3, [r7, #16]
  return result;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d104      	bne.n	80072b0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80072a6:	2320      	movs	r3, #32
 80072a8:	e006      	b.n	80072b8 <HAL_ADC_ConfigChannel+0x6bc>
 80072aa:	bf00      	nop
 80072ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	fab3 f383 	clz	r3, r3
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	3301      	adds	r3, #1
 80072ba:	f003 021f 	and.w	r2, r3, #31
 80072be:	4613      	mov	r3, r2
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	4413      	add	r3, r2
 80072c4:	3b1e      	subs	r3, #30
 80072c6:	051b      	lsls	r3, r3, #20
 80072c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072cc:	430b      	orrs	r3, r1
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	6892      	ldr	r2, [r2, #8]
 80072d2:	4619      	mov	r1, r3
 80072d4:	f7ff fa6a 	bl	80067ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	4b3d      	ldr	r3, [pc, #244]	; (80073d4 <HAL_ADC_ConfigChannel+0x7d8>)
 80072de:	4013      	ands	r3, r2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d06c      	beq.n	80073be <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80072e4:	483c      	ldr	r0, [pc, #240]	; (80073d8 <HAL_ADC_ConfigChannel+0x7dc>)
 80072e6:	f7ff f9bf 	bl	8006668 <LL_ADC_GetCommonPathInternalCh>
 80072ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a3a      	ldr	r2, [pc, #232]	; (80073dc <HAL_ADC_ConfigChannel+0x7e0>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d127      	bne.n	8007348 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80072f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d121      	bne.n	8007348 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a35      	ldr	r2, [pc, #212]	; (80073e0 <HAL_ADC_ConfigChannel+0x7e4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d157      	bne.n	80073be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800730e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007316:	4619      	mov	r1, r3
 8007318:	482f      	ldr	r0, [pc, #188]	; (80073d8 <HAL_ADC_ConfigChannel+0x7dc>)
 800731a:	f7ff f992 	bl	8006642 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800731e:	4b31      	ldr	r3, [pc, #196]	; (80073e4 <HAL_ADC_ConfigChannel+0x7e8>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	099b      	lsrs	r3, r3, #6
 8007324:	4a30      	ldr	r2, [pc, #192]	; (80073e8 <HAL_ADC_ConfigChannel+0x7ec>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	099b      	lsrs	r3, r3, #6
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	4613      	mov	r3, r2
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007338:	e002      	b.n	8007340 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3b01      	subs	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f9      	bne.n	800733a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007346:	e03a      	b.n	80073be <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a27      	ldr	r2, [pc, #156]	; (80073ec <HAL_ADC_ConfigChannel+0x7f0>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d113      	bne.n	800737a <HAL_ADC_ConfigChannel+0x77e>
 8007352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10d      	bne.n	800737a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1f      	ldr	r2, [pc, #124]	; (80073e0 <HAL_ADC_ConfigChannel+0x7e4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d12a      	bne.n	80073be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800736c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007370:	4619      	mov	r1, r3
 8007372:	4819      	ldr	r0, [pc, #100]	; (80073d8 <HAL_ADC_ConfigChannel+0x7dc>)
 8007374:	f7ff f965 	bl	8006642 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007378:	e021      	b.n	80073be <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1c      	ldr	r2, [pc, #112]	; (80073f0 <HAL_ADC_ConfigChannel+0x7f4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d11c      	bne.n	80073be <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d116      	bne.n	80073be <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a12      	ldr	r2, [pc, #72]	; (80073e0 <HAL_ADC_ConfigChannel+0x7e4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d111      	bne.n	80073be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800739a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800739e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80073a2:	4619      	mov	r1, r3
 80073a4:	480c      	ldr	r0, [pc, #48]	; (80073d8 <HAL_ADC_ConfigChannel+0x7dc>)
 80073a6:	f7ff f94c 	bl	8006642 <LL_ADC_SetCommonPathInternalCh>
 80073aa:	e008      	b.n	80073be <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b0:	f043 0220 	orr.w	r2, r3, #32
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80073c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	37d8      	adds	r7, #216	; 0xd8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	80080000 	.word	0x80080000
 80073d8:	50040300 	.word	0x50040300
 80073dc:	c7520000 	.word	0xc7520000
 80073e0:	50040000 	.word	0x50040000
 80073e4:	20000000 	.word	0x20000000
 80073e8:	053e2d63 	.word	0x053e2d63
 80073ec:	cb840000 	.word	0xcb840000
 80073f0:	80000001 	.word	0x80000001

080073f4 <LL_ADC_IsEnabled>:
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <LL_ADC_IsEnabled+0x18>
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <LL_ADC_IsEnabled+0x1a>
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <LL_ADC_REG_IsConversionOngoing>:
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b04      	cmp	r3, #4
 800742c:	d101      	bne.n	8007432 <LL_ADC_REG_IsConversionOngoing+0x18>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b09f      	sub	sp, #124	; 0x7c
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800745a:	2302      	movs	r3, #2
 800745c:	e089      	b.n	8007572 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007466:	2300      	movs	r3, #0
 8007468:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800746a:	2300      	movs	r3, #0
 800746c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a42      	ldr	r2, [pc, #264]	; (800757c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d102      	bne.n	800747e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007478:	4b41      	ldr	r3, [pc, #260]	; (8007580 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800747a:	60bb      	str	r3, [r7, #8]
 800747c:	e001      	b.n	8007482 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800747e:	2300      	movs	r3, #0
 8007480:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748c:	f043 0220 	orr.w	r2, r3, #32
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e068      	b.n	8007572 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff ffb9 	bl	800741a <LL_ADC_REG_IsConversionOngoing>
 80074a8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff ffb3 	bl	800741a <LL_ADC_REG_IsConversionOngoing>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d14a      	bne.n	8007550 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80074ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d147      	bne.n	8007550 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80074c0:	4b30      	ldr	r3, [pc, #192]	; (8007584 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80074c2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d027      	beq.n	800751c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80074cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	6859      	ldr	r1, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074de:	035b      	lsls	r3, r3, #13
 80074e0:	430b      	orrs	r3, r1
 80074e2:	431a      	orrs	r2, r3
 80074e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80074e8:	4824      	ldr	r0, [pc, #144]	; (800757c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80074ea:	f7ff ff83 	bl	80073f4 <LL_ADC_IsEnabled>
 80074ee:	4604      	mov	r4, r0
 80074f0:	4823      	ldr	r0, [pc, #140]	; (8007580 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80074f2:	f7ff ff7f 	bl	80073f4 <LL_ADC_IsEnabled>
 80074f6:	4603      	mov	r3, r0
 80074f8:	4323      	orrs	r3, r4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d132      	bne.n	8007564 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80074fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007506:	f023 030f 	bic.w	r3, r3, #15
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	6811      	ldr	r1, [r2, #0]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	6892      	ldr	r2, [r2, #8]
 8007512:	430a      	orrs	r2, r1
 8007514:	431a      	orrs	r2, r3
 8007516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007518:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800751a:	e023      	b.n	8007564 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800751c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007526:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007528:	4814      	ldr	r0, [pc, #80]	; (800757c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800752a:	f7ff ff63 	bl	80073f4 <LL_ADC_IsEnabled>
 800752e:	4604      	mov	r4, r0
 8007530:	4813      	ldr	r0, [pc, #76]	; (8007580 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007532:	f7ff ff5f 	bl	80073f4 <LL_ADC_IsEnabled>
 8007536:	4603      	mov	r3, r0
 8007538:	4323      	orrs	r3, r4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d112      	bne.n	8007564 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800753e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007546:	f023 030f 	bic.w	r3, r3, #15
 800754a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800754c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800754e:	e009      	b.n	8007564 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007554:	f043 0220 	orr.w	r2, r3, #32
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007562:	e000      	b.n	8007566 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007564:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800756e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007572:	4618      	mov	r0, r3
 8007574:	377c      	adds	r7, #124	; 0x7c
 8007576:	46bd      	mov	sp, r7
 8007578:	bd90      	pop	{r4, r7, pc}
 800757a:	bf00      	nop
 800757c:	50040000 	.word	0x50040000
 8007580:	50040100 	.word	0x50040100
 8007584:	50040300 	.word	0x50040300

08007588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007598:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <__NVIC_SetPriorityGrouping+0x44>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075a4:	4013      	ands	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075ba:	4a04      	ldr	r2, [pc, #16]	; (80075cc <__NVIC_SetPriorityGrouping+0x44>)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	60d3      	str	r3, [r2, #12]
}
 80075c0:	bf00      	nop
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	e000ed00 	.word	0xe000ed00

080075d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <__NVIC_GetPriorityGrouping+0x18>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	0a1b      	lsrs	r3, r3, #8
 80075da:	f003 0307 	and.w	r3, r3, #7
}
 80075de:	4618      	mov	r0, r3
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	e000ed00 	.word	0xe000ed00

080075ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	db0b      	blt.n	8007616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	f003 021f 	and.w	r2, r3, #31
 8007604:	4907      	ldr	r1, [pc, #28]	; (8007624 <__NVIC_EnableIRQ+0x38>)
 8007606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	2001      	movs	r0, #1
 800760e:	fa00 f202 	lsl.w	r2, r0, r2
 8007612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	e000e100 	.word	0xe000e100

08007628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007638:	2b00      	cmp	r3, #0
 800763a:	db0a      	blt.n	8007652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	b2da      	uxtb	r2, r3
 8007640:	490c      	ldr	r1, [pc, #48]	; (8007674 <__NVIC_SetPriority+0x4c>)
 8007642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007646:	0112      	lsls	r2, r2, #4
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	440b      	add	r3, r1
 800764c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007650:	e00a      	b.n	8007668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	b2da      	uxtb	r2, r3
 8007656:	4908      	ldr	r1, [pc, #32]	; (8007678 <__NVIC_SetPriority+0x50>)
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	3b04      	subs	r3, #4
 8007660:	0112      	lsls	r2, r2, #4
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	440b      	add	r3, r1
 8007666:	761a      	strb	r2, [r3, #24]
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	e000e100 	.word	0xe000e100
 8007678:	e000ed00 	.word	0xe000ed00

0800767c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800767c:	b480      	push	{r7}
 800767e:	b089      	sub	sp, #36	; 0x24
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f003 0307 	and.w	r3, r3, #7
 800768e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	f1c3 0307 	rsb	r3, r3, #7
 8007696:	2b04      	cmp	r3, #4
 8007698:	bf28      	it	cs
 800769a:	2304      	movcs	r3, #4
 800769c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	3304      	adds	r3, #4
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	d902      	bls.n	80076ac <NVIC_EncodePriority+0x30>
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	3b03      	subs	r3, #3
 80076aa:	e000      	b.n	80076ae <NVIC_EncodePriority+0x32>
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076b0:	f04f 32ff 	mov.w	r2, #4294967295
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	43da      	mvns	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	401a      	ands	r2, r3
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076c4:	f04f 31ff 	mov.w	r1, #4294967295
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	fa01 f303 	lsl.w	r3, r1, r3
 80076ce:	43d9      	mvns	r1, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076d4:	4313      	orrs	r3, r2
         );
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3724      	adds	r7, #36	; 0x24
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
	...

080076e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076f4:	d301      	bcc.n	80076fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076f6:	2301      	movs	r3, #1
 80076f8:	e00f      	b.n	800771a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076fa:	4a0a      	ldr	r2, [pc, #40]	; (8007724 <SysTick_Config+0x40>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3b01      	subs	r3, #1
 8007700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007702:	210f      	movs	r1, #15
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	f7ff ff8e 	bl	8007628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <SysTick_Config+0x40>)
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007712:	4b04      	ldr	r3, [pc, #16]	; (8007724 <SysTick_Config+0x40>)
 8007714:	2207      	movs	r2, #7
 8007716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	e000e010 	.word	0xe000e010

08007728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff ff29 	bl	8007588 <__NVIC_SetPriorityGrouping>
}
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b086      	sub	sp, #24
 8007742:	af00      	add	r7, sp, #0
 8007744:	4603      	mov	r3, r0
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607a      	str	r2, [r7, #4]
 800774a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007750:	f7ff ff3e 	bl	80075d0 <__NVIC_GetPriorityGrouping>
 8007754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	68b9      	ldr	r1, [r7, #8]
 800775a:	6978      	ldr	r0, [r7, #20]
 800775c:	f7ff ff8e 	bl	800767c <NVIC_EncodePriority>
 8007760:	4602      	mov	r2, r0
 8007762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff ff5d 	bl	8007628 <__NVIC_SetPriority>
}
 800776e:	bf00      	nop
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	4603      	mov	r3, r0
 800777e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff ff31 	bl	80075ec <__NVIC_EnableIRQ>
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff ffa2 	bl	80076e4 <SysTick_Config>
 80077a0:	4603      	mov	r3, r0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d008      	beq.n	80077d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2204      	movs	r2, #4
 80077c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e022      	b.n	800781a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 020e 	bic.w	r2, r2, #14
 80077e2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f8:	f003 021c 	and.w	r2, r3, #28
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	2101      	movs	r1, #1
 8007802:	fa01 f202 	lsl.w	r2, r1, r2
 8007806:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d005      	beq.n	800784a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2204      	movs	r2, #4
 8007842:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	73fb      	strb	r3, [r7, #15]
 8007848:	e029      	b.n	800789e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 020e 	bic.w	r2, r2, #14
 8007858:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0201 	bic.w	r2, r2, #1
 8007868:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786e:	f003 021c 	and.w	r2, r3, #28
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007876:	2101      	movs	r1, #1
 8007878:	fa01 f202 	lsl.w	r2, r1, r2
 800787c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
    }
  }
  return status;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80078ba:	4b2f      	ldr	r3, [pc, #188]	; (8007978 <HAL_FLASH_Program+0xd0>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_FLASH_Program+0x1e>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e053      	b.n	800796e <HAL_FLASH_Program+0xc6>
 80078c6:	4b2c      	ldr	r3, [pc, #176]	; (8007978 <HAL_FLASH_Program+0xd0>)
 80078c8:	2201      	movs	r2, #1
 80078ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80078cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80078d0:	f000 f894 	bl	80079fc <FLASH_WaitForLastOperation>
 80078d4:	4603      	mov	r3, r0
 80078d6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d143      	bne.n	8007966 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80078de:	4b26      	ldr	r3, [pc, #152]	; (8007978 <HAL_FLASH_Program+0xd0>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80078e4:	4b25      	ldr	r3, [pc, #148]	; (800797c <HAL_FLASH_Program+0xd4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d009      	beq.n	8007904 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80078f0:	4b22      	ldr	r3, [pc, #136]	; (800797c <HAL_FLASH_Program+0xd4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a21      	ldr	r2, [pc, #132]	; (800797c <HAL_FLASH_Program+0xd4>)
 80078f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078fa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80078fc:	4b1e      	ldr	r3, [pc, #120]	; (8007978 <HAL_FLASH_Program+0xd0>)
 80078fe:	2202      	movs	r2, #2
 8007900:	771a      	strb	r2, [r3, #28]
 8007902:	e002      	b.n	800790a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007904:	4b1c      	ldr	r3, [pc, #112]	; (8007978 <HAL_FLASH_Program+0xd0>)
 8007906:	2200      	movs	r2, #0
 8007908:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d107      	bne.n	8007920 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007914:	68b8      	ldr	r0, [r7, #8]
 8007916:	f000 f8c9 	bl	8007aac <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800791a:	2301      	movs	r3, #1
 800791c:	613b      	str	r3, [r7, #16]
 800791e:	e010      	b.n	8007942 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d002      	beq.n	800792c <HAL_FLASH_Program+0x84>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b02      	cmp	r3, #2
 800792a:	d10a      	bne.n	8007942 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	4619      	mov	r1, r3
 8007930:	68b8      	ldr	r0, [r7, #8]
 8007932:	f000 f8e1 	bl	8007af8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d102      	bne.n	8007942 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800793c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007940:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007942:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007946:	f000 f859 	bl	80079fc <FLASH_WaitForLastOperation>
 800794a:	4603      	mov	r3, r0
 800794c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d006      	beq.n	8007962 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007954:	4b09      	ldr	r3, [pc, #36]	; (800797c <HAL_FLASH_Program+0xd4>)
 8007956:	695a      	ldr	r2, [r3, #20]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	43db      	mvns	r3, r3
 800795c:	4907      	ldr	r1, [pc, #28]	; (800797c <HAL_FLASH_Program+0xd4>)
 800795e:	4013      	ands	r3, r2
 8007960:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007962:	f000 f9d9 	bl	8007d18 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007966:	4b04      	ldr	r3, [pc, #16]	; (8007978 <HAL_FLASH_Program+0xd0>)
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]

  return status;
 800796c:	7dfb      	ldrb	r3, [r7, #23]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20000010 	.word	0x20000010
 800797c:	40022000 	.word	0x40022000

08007980 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800798a:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <HAL_FLASH_Unlock+0x38>)
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	2b00      	cmp	r3, #0
 8007990:	da0b      	bge.n	80079aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007992:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <HAL_FLASH_Unlock+0x38>)
 8007994:	4a09      	ldr	r2, [pc, #36]	; (80079bc <HAL_FLASH_Unlock+0x3c>)
 8007996:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007998:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <HAL_FLASH_Unlock+0x38>)
 800799a:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <HAL_FLASH_Unlock+0x40>)
 800799c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800799e:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <HAL_FLASH_Unlock+0x38>)
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	da01      	bge.n	80079aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80079aa:	79fb      	ldrb	r3, [r7, #7]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40022000 	.word	0x40022000
 80079bc:	45670123 	.word	0x45670123
 80079c0:	cdef89ab 	.word	0xcdef89ab

080079c4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80079c8:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <HAL_FLASH_Lock+0x1c>)
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	4a04      	ldr	r2, [pc, #16]	; (80079e0 <HAL_FLASH_Lock+0x1c>)
 80079ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079d2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	40022000 	.word	0x40022000

080079e4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80079e8:	4b03      	ldr	r3, [pc, #12]	; (80079f8 <HAL_FLASH_GetError+0x14>)
 80079ea:	685b      	ldr	r3, [r3, #4]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	20000010 	.word	0x20000010

080079fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007a04:	f7fe fdca 	bl	800659c <HAL_GetTick>
 8007a08:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007a0a:	e00d      	b.n	8007a28 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a12:	d009      	beq.n	8007a28 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8007a14:	f7fe fdc2 	bl	800659c <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d801      	bhi.n	8007a28 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e036      	b.n	8007a96 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <FLASH_WaitForLastOperation+0xa4>)
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1eb      	bne.n	8007a0c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007a34:	4b1a      	ldr	r3, [pc, #104]	; (8007aa0 <FLASH_WaitForLastOperation+0xa4>)
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <FLASH_WaitForLastOperation+0xa8>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01e      	beq.n	8007a82 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8007a44:	4b18      	ldr	r3, [pc, #96]	; (8007aa8 <FLASH_WaitForLastOperation+0xac>)
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	4a16      	ldr	r2, [pc, #88]	; (8007aa8 <FLASH_WaitForLastOperation+0xac>)
 8007a4e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d007      	beq.n	8007a6a <FLASH_WaitForLastOperation+0x6e>
 8007a5a:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <FLASH_WaitForLastOperation+0xa4>)
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007a64:	490e      	ldr	r1, [pc, #56]	; (8007aa0 <FLASH_WaitForLastOperation+0xa4>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	618b      	str	r3, [r1, #24]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <FLASH_WaitForLastOperation+0x82>
 8007a74:	4a0a      	ldr	r2, [pc, #40]	; (8007aa0 <FLASH_WaitForLastOperation+0xa4>)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007a7c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e009      	b.n	8007a96 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007a82:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <FLASH_WaitForLastOperation+0xa4>)
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007a8e:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <FLASH_WaitForLastOperation+0xa4>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	40022000 	.word	0x40022000
 8007aa4:	0002c3fa 	.word	0x0002c3fa
 8007aa8:	20000010 	.word	0x20000010

08007aac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007ab8:	4b0e      	ldr	r3, [pc, #56]	; (8007af4 <FLASH_Program_DoubleWord+0x48>)
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	4a0d      	ldr	r2, [pc, #52]	; (8007af4 <FLASH_Program_DoubleWord+0x48>)
 8007abe:	f043 0301 	orr.w	r3, r3, #1
 8007ac2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007aca:	f3bf 8f6f 	isb	sy
}
 8007ace:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8007ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ad4:	f04f 0200 	mov.w	r2, #0
 8007ad8:	f04f 0300 	mov.w	r3, #0
 8007adc:	000a      	movs	r2, r1
 8007ade:	2300      	movs	r3, #0
 8007ae0:	68f9      	ldr	r1, [r7, #12]
 8007ae2:	3104      	adds	r1, #4
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	600b      	str	r3, [r1, #0]
}
 8007ae8:	bf00      	nop
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	40022000 	.word	0x40022000

08007af8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b089      	sub	sp, #36	; 0x24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007b02:	2340      	movs	r3, #64	; 0x40
 8007b04:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007b0e:	4b14      	ldr	r3, [pc, #80]	; (8007b60 <FLASH_Program_Fast+0x68>)
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	4a13      	ldr	r2, [pc, #76]	; (8007b60 <FLASH_Program_Fast+0x68>)
 8007b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b18:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b20:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b24:	b672      	cpsid	i
}
 8007b26:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	3304      	adds	r3, #4
 8007b34:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	617b      	str	r3, [r7, #20]
    row_index--;
 8007b3c:	7ffb      	ldrb	r3, [r7, #31]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8007b42:	7ffb      	ldrb	r3, [r7, #31]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1ef      	bne.n	8007b28 <FLASH_Program_Fast+0x30>
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f383 8810 	msr	PRIMASK, r3
}
 8007b52:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8007b54:	bf00      	nop
 8007b56:	3724      	adds	r7, #36	; 0x24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	40022000 	.word	0x40022000

08007b64 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007b6e:	4b47      	ldr	r3, [pc, #284]	; (8007c8c <HAL_FLASHEx_Erase+0x128>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_FLASHEx_Erase+0x16>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e083      	b.n	8007c82 <HAL_FLASHEx_Erase+0x11e>
 8007b7a:	4b44      	ldr	r3, [pc, #272]	; (8007c8c <HAL_FLASHEx_Erase+0x128>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b84:	f7ff ff3a 	bl	80079fc <FLASH_WaitForLastOperation>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d173      	bne.n	8007c7a <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b92:	4b3e      	ldr	r3, [pc, #248]	; (8007c8c <HAL_FLASHEx_Erase+0x128>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007b98:	4b3d      	ldr	r3, [pc, #244]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d013      	beq.n	8007bcc <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007ba4:	4b3a      	ldr	r3, [pc, #232]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d009      	beq.n	8007bc4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007bb0:	4b37      	ldr	r3, [pc, #220]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a36      	ldr	r2, [pc, #216]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007bb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bba:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007bbc:	4b33      	ldr	r3, [pc, #204]	; (8007c8c <HAL_FLASHEx_Erase+0x128>)
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	771a      	strb	r2, [r3, #28]
 8007bc2:	e016      	b.n	8007bf2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007bc4:	4b31      	ldr	r3, [pc, #196]	; (8007c8c <HAL_FLASHEx_Erase+0x128>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	771a      	strb	r2, [r3, #28]
 8007bca:	e012      	b.n	8007bf2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007bcc:	4b30      	ldr	r3, [pc, #192]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d009      	beq.n	8007bec <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007bd8:	4b2d      	ldr	r3, [pc, #180]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a2c      	ldr	r2, [pc, #176]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007bde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007be2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007be4:	4b29      	ldr	r3, [pc, #164]	; (8007c8c <HAL_FLASHEx_Erase+0x128>)
 8007be6:	2202      	movs	r2, #2
 8007be8:	771a      	strb	r2, [r3, #28]
 8007bea:	e002      	b.n	8007bf2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007bec:	4b27      	ldr	r3, [pc, #156]	; (8007c8c <HAL_FLASHEx_Erase+0x128>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d111      	bne.n	8007c1e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f848 	bl	8007c94 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007c08:	f7ff fef8 	bl	80079fc <FLASH_WaitForLastOperation>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007c10:	4b1f      	ldr	r3, [pc, #124]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	4a1e      	ldr	r2, [pc, #120]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007c16:	f023 0304 	bic.w	r3, r3, #4
 8007c1a:	6153      	str	r3, [r2, #20]
 8007c1c:	e02b      	b.n	8007c76 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	f04f 32ff 	mov.w	r2, #4294967295
 8007c24:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	60bb      	str	r3, [r7, #8]
 8007c2c:	e01b      	b.n	8007c66 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	4619      	mov	r1, r3
 8007c34:	68b8      	ldr	r0, [r7, #8]
 8007c36:	f000 f84b 	bl	8007cd0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007c3e:	f7ff fedd 	bl	80079fc <FLASH_WaitForLastOperation>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007c46:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	4a11      	ldr	r2, [pc, #68]	; (8007c90 <HAL_FLASHEx_Erase+0x12c>)
 8007c4c:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007c50:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	601a      	str	r2, [r3, #0]
          break;
 8007c5e:	e00a      	b.n	8007c76 <HAL_FLASHEx_Erase+0x112>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60bb      	str	r3, [r7, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689a      	ldr	r2, [r3, #8]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	4413      	add	r3, r2
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d3db      	bcc.n	8007c2e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007c76:	f000 f84f 	bl	8007d18 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007c7a:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <HAL_FLASHEx_Erase+0x128>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]

  return status;
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000010 	.word	0x20000010
 8007c90:	40022000 	.word	0x40022000

08007c94 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <FLASH_MassErase+0x38>)
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	4a08      	ldr	r2, [pc, #32]	; (8007ccc <FLASH_MassErase+0x38>)
 8007cac:	f043 0304 	orr.w	r3, r3, #4
 8007cb0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007cb2:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <FLASH_MassErase+0x38>)
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	4a05      	ldr	r2, [pc, #20]	; (8007ccc <FLASH_MassErase+0x38>)
 8007cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cbc:	6153      	str	r3, [r2, #20]
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40022000 	.word	0x40022000

08007cd0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007cda:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <FLASH_PageErase+0x44>)
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007cea:	490a      	ldr	r1, [pc, #40]	; (8007d14 <FLASH_PageErase+0x44>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007cf0:	4b08      	ldr	r3, [pc, #32]	; (8007d14 <FLASH_PageErase+0x44>)
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	4a07      	ldr	r2, [pc, #28]	; (8007d14 <FLASH_PageErase+0x44>)
 8007cf6:	f043 0302 	orr.w	r3, r3, #2
 8007cfa:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <FLASH_PageErase+0x44>)
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	4a04      	ldr	r2, [pc, #16]	; (8007d14 <FLASH_PageErase+0x44>)
 8007d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d06:	6153      	str	r3, [r2, #20]
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	40022000 	.word	0x40022000

08007d18 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007d1e:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <FLASH_FlushCaches+0x8c>)
 8007d20:	7f1b      	ldrb	r3, [r3, #28]
 8007d22:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007d24:	79fb      	ldrb	r3, [r7, #7]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d002      	beq.n	8007d30 <FLASH_FlushCaches+0x18>
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d117      	bne.n	8007d60 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007d30:	4b1d      	ldr	r3, [pc, #116]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1c      	ldr	r2, [pc, #112]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d3a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007d3c:	4b1a      	ldr	r3, [pc, #104]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a19      	ldr	r2, [pc, #100]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	4b17      	ldr	r3, [pc, #92]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a16      	ldr	r2, [pc, #88]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d52:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d54:	4b14      	ldr	r3, [pc, #80]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a13      	ldr	r2, [pc, #76]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d5e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007d60:	79fb      	ldrb	r3, [r7, #7]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d002      	beq.n	8007d6c <FLASH_FlushCaches+0x54>
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d111      	bne.n	8007d90 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0d      	ldr	r2, [pc, #52]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a0a      	ldr	r2, [pc, #40]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d84:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a07      	ldr	r2, [pc, #28]	; (8007da8 <FLASH_FlushCaches+0x90>)
 8007d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d8e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <FLASH_FlushCaches+0x8c>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	771a      	strb	r2, [r3, #28]
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20000010 	.word	0x20000010
 8007da8:	40022000 	.word	0x40022000

08007dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007db6:	2300      	movs	r3, #0
 8007db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007dba:	e14e      	b.n	800805a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc8:	4013      	ands	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8140 	beq.w	8008054 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d005      	beq.n	8007dec <HAL_GPIO_Init+0x40>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d130      	bne.n	8007e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	2203      	movs	r2, #3
 8007df8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4013      	ands	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e22:	2201      	movs	r2, #1
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2a:	43db      	mvns	r3, r3
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	091b      	lsrs	r3, r3, #4
 8007e38:	f003 0201 	and.w	r2, r3, #1
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d017      	beq.n	8007e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	2203      	movs	r2, #3
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	43db      	mvns	r3, r3
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d123      	bne.n	8007ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	08da      	lsrs	r2, r3, #3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3208      	adds	r2, #8
 8007e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	220f      	movs	r2, #15
 8007eae:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb2:	43db      	mvns	r3, r3
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	08da      	lsrs	r2, r3, #3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3208      	adds	r2, #8
 8007ed8:	6939      	ldr	r1, [r7, #16]
 8007eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	2203      	movs	r2, #3
 8007eea:	fa02 f303 	lsl.w	r3, r2, r3
 8007eee:	43db      	mvns	r3, r3
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f003 0203 	and.w	r2, r3, #3
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	fa02 f303 	lsl.w	r3, r2, r3
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 809a 	beq.w	8008054 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f20:	4b55      	ldr	r3, [pc, #340]	; (8008078 <HAL_GPIO_Init+0x2cc>)
 8007f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f24:	4a54      	ldr	r2, [pc, #336]	; (8008078 <HAL_GPIO_Init+0x2cc>)
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	6613      	str	r3, [r2, #96]	; 0x60
 8007f2c:	4b52      	ldr	r3, [pc, #328]	; (8008078 <HAL_GPIO_Init+0x2cc>)
 8007f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	60bb      	str	r3, [r7, #8]
 8007f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007f38:	4a50      	ldr	r2, [pc, #320]	; (800807c <HAL_GPIO_Init+0x2d0>)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	089b      	lsrs	r3, r3, #2
 8007f3e:	3302      	adds	r3, #2
 8007f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	220f      	movs	r2, #15
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	43db      	mvns	r3, r3
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007f62:	d013      	beq.n	8007f8c <HAL_GPIO_Init+0x1e0>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a46      	ldr	r2, [pc, #280]	; (8008080 <HAL_GPIO_Init+0x2d4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00d      	beq.n	8007f88 <HAL_GPIO_Init+0x1dc>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a45      	ldr	r2, [pc, #276]	; (8008084 <HAL_GPIO_Init+0x2d8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <HAL_GPIO_Init+0x1d8>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a44      	ldr	r2, [pc, #272]	; (8008088 <HAL_GPIO_Init+0x2dc>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d101      	bne.n	8007f80 <HAL_GPIO_Init+0x1d4>
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e006      	b.n	8007f8e <HAL_GPIO_Init+0x1e2>
 8007f80:	2307      	movs	r3, #7
 8007f82:	e004      	b.n	8007f8e <HAL_GPIO_Init+0x1e2>
 8007f84:	2302      	movs	r3, #2
 8007f86:	e002      	b.n	8007f8e <HAL_GPIO_Init+0x1e2>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e000      	b.n	8007f8e <HAL_GPIO_Init+0x1e2>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	f002 0203 	and.w	r2, r2, #3
 8007f94:	0092      	lsls	r2, r2, #2
 8007f96:	4093      	lsls	r3, r2
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007f9e:	4937      	ldr	r1, [pc, #220]	; (800807c <HAL_GPIO_Init+0x2d0>)
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	089b      	lsrs	r3, r3, #2
 8007fa4:	3302      	adds	r3, #2
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fac:	4b37      	ldr	r3, [pc, #220]	; (800808c <HAL_GPIO_Init+0x2e0>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007fd0:	4a2e      	ldr	r2, [pc, #184]	; (800808c <HAL_GPIO_Init+0x2e0>)
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007fd6:	4b2d      	ldr	r3, [pc, #180]	; (800808c <HAL_GPIO_Init+0x2e0>)
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007ffa:	4a24      	ldr	r2, [pc, #144]	; (800808c <HAL_GPIO_Init+0x2e0>)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008000:	4b22      	ldr	r3, [pc, #136]	; (800808c <HAL_GPIO_Init+0x2e0>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	43db      	mvns	r3, r3
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4013      	ands	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4313      	orrs	r3, r2
 8008022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008024:	4a19      	ldr	r2, [pc, #100]	; (800808c <HAL_GPIO_Init+0x2e0>)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800802a:	4b18      	ldr	r3, [pc, #96]	; (800808c <HAL_GPIO_Init+0x2e0>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	43db      	mvns	r3, r3
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4013      	ands	r3, r2
 8008038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800804e:	4a0f      	ldr	r2, [pc, #60]	; (800808c <HAL_GPIO_Init+0x2e0>)
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	3301      	adds	r3, #1
 8008058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	fa22 f303 	lsr.w	r3, r2, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	f47f aea9 	bne.w	8007dbc <HAL_GPIO_Init+0x10>
  }
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	40021000 	.word	0x40021000
 800807c:	40010000 	.word	0x40010000
 8008080:	48000400 	.word	0x48000400
 8008084:	48000800 	.word	0x48000800
 8008088:	48000c00 	.word	0x48000c00
 800808c:	40010400 	.word	0x40010400

08008090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691a      	ldr	r2, [r3, #16]
 80080a0:	887b      	ldrh	r3, [r7, #2]
 80080a2:	4013      	ands	r3, r2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080a8:	2301      	movs	r3, #1
 80080aa:	73fb      	strb	r3, [r7, #15]
 80080ac:	e001      	b.n	80080b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	807b      	strh	r3, [r7, #2]
 80080cc:	4613      	mov	r3, r2
 80080ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080d0:	787b      	ldrb	r3, [r7, #1]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80080d6:	887a      	ldrh	r2, [r7, #2]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80080dc:	e002      	b.n	80080e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80080de:	887a      	ldrh	r2, [r7, #2]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080f4:	4b05      	ldr	r3, [pc, #20]	; (800810c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a04      	ldr	r2, [pc, #16]	; (800810c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080fe:	6013      	str	r3, [r2, #0]
}
 8008100:	bf00      	nop
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	40007000 	.word	0x40007000

08008110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <HAL_PWREx_GetVoltageRange+0x18>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800811c:	4618      	mov	r0, r3
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40007000 	.word	0x40007000

0800812c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800813a:	d130      	bne.n	800819e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800813c:	4b23      	ldr	r3, [pc, #140]	; (80081cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008148:	d038      	beq.n	80081bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800814a:	4b20      	ldr	r3, [pc, #128]	; (80081cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008152:	4a1e      	ldr	r2, [pc, #120]	; (80081cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008158:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800815a:	4b1d      	ldr	r3, [pc, #116]	; (80081d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2232      	movs	r2, #50	; 0x32
 8008160:	fb02 f303 	mul.w	r3, r2, r3
 8008164:	4a1b      	ldr	r2, [pc, #108]	; (80081d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008166:	fba2 2303 	umull	r2, r3, r2, r3
 800816a:	0c9b      	lsrs	r3, r3, #18
 800816c:	3301      	adds	r3, #1
 800816e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008170:	e002      	b.n	8008178 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3b01      	subs	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008178:	4b14      	ldr	r3, [pc, #80]	; (80081cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008184:	d102      	bne.n	800818c <HAL_PWREx_ControlVoltageScaling+0x60>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f2      	bne.n	8008172 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800818c:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008198:	d110      	bne.n	80081bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e00f      	b.n	80081be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800819e:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081aa:	d007      	beq.n	80081bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80081ac:	4b07      	ldr	r3, [pc, #28]	; (80081cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80081b4:	4a05      	ldr	r2, [pc, #20]	; (80081cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80081b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	40007000 	.word	0x40007000
 80081d0:	20000000 	.word	0x20000000
 80081d4:	431bde83 	.word	0x431bde83

080081d8 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 80081dc:	4b09      	ldr	r3, [pc, #36]	; (8008204 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f023 0307 	bic.w	r3, r3, #7
 80081e4:	4a07      	ldr	r2, [pc, #28]	; (8008204 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 80081e6:	f043 0304 	orr.w	r3, r3, #4
 80081ea:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80081ec:	4b06      	ldr	r3, [pc, #24]	; (8008208 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	4a05      	ldr	r2, [pc, #20]	; (8008208 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80081f2:	f043 0304 	orr.w	r3, r3, #4
 80081f6:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80081f8:	bf30      	wfi
}
 80081fa:	bf00      	nop
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	40007000 	.word	0x40007000
 8008208:	e000ed00 	.word	0xe000ed00

0800820c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b08a      	sub	sp, #40	; 0x28
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	f000 bc4f 	b.w	8008abe <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008220:	4b97      	ldr	r3, [pc, #604]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f003 030c 	and.w	r3, r3, #12
 8008228:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800822a:	4b95      	ldr	r3, [pc, #596]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80e6 	beq.w	800840e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <HAL_RCC_OscConfig+0x4c>
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	2b0c      	cmp	r3, #12
 800824c:	f040 808d 	bne.w	800836a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	2b01      	cmp	r3, #1
 8008254:	f040 8089 	bne.w	800836a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008258:	4b89      	ldr	r3, [pc, #548]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d006      	beq.n	8008272 <HAL_RCC_OscConfig+0x66>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d102      	bne.n	8008272 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	f000 bc26 	b.w	8008abe <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008276:	4b82      	ldr	r3, [pc, #520]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0308 	and.w	r3, r3, #8
 800827e:	2b00      	cmp	r3, #0
 8008280:	d004      	beq.n	800828c <HAL_RCC_OscConfig+0x80>
 8008282:	4b7f      	ldr	r3, [pc, #508]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800828a:	e005      	b.n	8008298 <HAL_RCC_OscConfig+0x8c>
 800828c:	4b7c      	ldr	r3, [pc, #496]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 800828e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008292:	091b      	lsrs	r3, r3, #4
 8008294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008298:	4293      	cmp	r3, r2
 800829a:	d224      	bcs.n	80082e6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fdd9 	bl	8008e58 <RCC_SetFlashLatencyFromMSIRange>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f000 bc06 	b.w	8008abe <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082b2:	4b73      	ldr	r3, [pc, #460]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a72      	ldr	r2, [pc, #456]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80082b8:	f043 0308 	orr.w	r3, r3, #8
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	4b70      	ldr	r3, [pc, #448]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	496d      	ldr	r1, [pc, #436]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80082d0:	4b6b      	ldr	r3, [pc, #428]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	4968      	ldr	r1, [pc, #416]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	604b      	str	r3, [r1, #4]
 80082e4:	e025      	b.n	8008332 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082e6:	4b66      	ldr	r3, [pc, #408]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a65      	ldr	r2, [pc, #404]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80082ec:	f043 0308 	orr.w	r3, r3, #8
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	4b63      	ldr	r3, [pc, #396]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	4960      	ldr	r1, [pc, #384]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008300:	4313      	orrs	r3, r2
 8008302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008304:	4b5e      	ldr	r3, [pc, #376]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	495b      	ldr	r1, [pc, #364]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008314:	4313      	orrs	r3, r2
 8008316:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fd98 	bl	8008e58 <RCC_SetFlashLatencyFromMSIRange>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e3c5      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008332:	f000 fccd 	bl	8008cd0 <HAL_RCC_GetSysClockFreq>
 8008336:	4602      	mov	r2, r0
 8008338:	4b51      	ldr	r3, [pc, #324]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	091b      	lsrs	r3, r3, #4
 800833e:	f003 030f 	and.w	r3, r3, #15
 8008342:	4950      	ldr	r1, [pc, #320]	; (8008484 <HAL_RCC_OscConfig+0x278>)
 8008344:	5ccb      	ldrb	r3, [r1, r3]
 8008346:	f003 031f 	and.w	r3, r3, #31
 800834a:	fa22 f303 	lsr.w	r3, r2, r3
 800834e:	4a4e      	ldr	r2, [pc, #312]	; (8008488 <HAL_RCC_OscConfig+0x27c>)
 8008350:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008352:	4b4e      	ldr	r3, [pc, #312]	; (800848c <HAL_RCC_OscConfig+0x280>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe f8d0 	bl	80064fc <HAL_InitTick>
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d052      	beq.n	800840c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	e3a9      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d032      	beq.n	80083d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008372:	4b43      	ldr	r3, [pc, #268]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a42      	ldr	r2, [pc, #264]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008378:	f043 0301 	orr.w	r3, r3, #1
 800837c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800837e:	f7fe f90d 	bl	800659c <HAL_GetTick>
 8008382:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008384:	e008      	b.n	8008398 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008386:	f7fe f909 	bl	800659c <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e392      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008398:	4b39      	ldr	r3, [pc, #228]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0f0      	beq.n	8008386 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083a4:	4b36      	ldr	r3, [pc, #216]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a35      	ldr	r2, [pc, #212]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80083aa:	f043 0308 	orr.w	r3, r3, #8
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	4b33      	ldr	r3, [pc, #204]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	4930      	ldr	r1, [pc, #192]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083c2:	4b2f      	ldr	r3, [pc, #188]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	021b      	lsls	r3, r3, #8
 80083d0:	492b      	ldr	r1, [pc, #172]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	604b      	str	r3, [r1, #4]
 80083d6:	e01a      	b.n	800840e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80083d8:	4b29      	ldr	r3, [pc, #164]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a28      	ldr	r2, [pc, #160]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 80083de:	f023 0301 	bic.w	r3, r3, #1
 80083e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80083e4:	f7fe f8da 	bl	800659c <HAL_GetTick>
 80083e8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80083ec:	f7fe f8d6 	bl	800659c <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e35f      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80083fe:	4b20      	ldr	r3, [pc, #128]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f0      	bne.n	80083ec <HAL_RCC_OscConfig+0x1e0>
 800840a:	e000      	b.n	800840e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800840c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d073      	beq.n	8008502 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d005      	beq.n	800842c <HAL_RCC_OscConfig+0x220>
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	2b0c      	cmp	r3, #12
 8008424:	d10e      	bne.n	8008444 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	2b03      	cmp	r3, #3
 800842a:	d10b      	bne.n	8008444 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800842c:	4b14      	ldr	r3, [pc, #80]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d063      	beq.n	8008500 <HAL_RCC_OscConfig+0x2f4>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d15f      	bne.n	8008500 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e33c      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800844c:	d106      	bne.n	800845c <HAL_RCC_OscConfig+0x250>
 800844e:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a0b      	ldr	r2, [pc, #44]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	e025      	b.n	80084a8 <HAL_RCC_OscConfig+0x29c>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008464:	d114      	bne.n	8008490 <HAL_RCC_OscConfig+0x284>
 8008466:	4b06      	ldr	r3, [pc, #24]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a05      	ldr	r2, [pc, #20]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 800846c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a02      	ldr	r2, [pc, #8]	; (8008480 <HAL_RCC_OscConfig+0x274>)
 8008478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	e013      	b.n	80084a8 <HAL_RCC_OscConfig+0x29c>
 8008480:	40021000 	.word	0x40021000
 8008484:	080143fc 	.word	0x080143fc
 8008488:	20000000 	.word	0x20000000
 800848c:	20000008 	.word	0x20000008
 8008490:	4b8f      	ldr	r3, [pc, #572]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a8e      	ldr	r2, [pc, #568]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	4b8c      	ldr	r3, [pc, #560]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a8b      	ldr	r2, [pc, #556]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 80084a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d013      	beq.n	80084d8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b0:	f7fe f874 	bl	800659c <HAL_GetTick>
 80084b4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084b8:	f7fe f870 	bl	800659c <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b64      	cmp	r3, #100	; 0x64
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e2f9      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084ca:	4b81      	ldr	r3, [pc, #516]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0f0      	beq.n	80084b8 <HAL_RCC_OscConfig+0x2ac>
 80084d6:	e014      	b.n	8008502 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d8:	f7fe f860 	bl	800659c <HAL_GetTick>
 80084dc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80084de:	e008      	b.n	80084f2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084e0:	f7fe f85c 	bl	800659c <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b64      	cmp	r3, #100	; 0x64
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e2e5      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80084f2:	4b77      	ldr	r3, [pc, #476]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1f0      	bne.n	80084e0 <HAL_RCC_OscConfig+0x2d4>
 80084fe:	e000      	b.n	8008502 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d060      	beq.n	80085d0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	2b04      	cmp	r3, #4
 8008512:	d005      	beq.n	8008520 <HAL_RCC_OscConfig+0x314>
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	2b0c      	cmp	r3, #12
 8008518:	d119      	bne.n	800854e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d116      	bne.n	800854e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008520:	4b6b      	ldr	r3, [pc, #428]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <HAL_RCC_OscConfig+0x32c>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e2c2      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008538:	4b65      	ldr	r3, [pc, #404]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	061b      	lsls	r3, r3, #24
 8008546:	4962      	ldr	r1, [pc, #392]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008548:	4313      	orrs	r3, r2
 800854a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800854c:	e040      	b.n	80085d0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d023      	beq.n	800859e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008556:	4b5e      	ldr	r3, [pc, #376]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a5d      	ldr	r2, [pc, #372]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 800855c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008562:	f7fe f81b 	bl	800659c <HAL_GetTick>
 8008566:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008568:	e008      	b.n	800857c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800856a:	f7fe f817 	bl	800659c <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	2b02      	cmp	r3, #2
 8008576:	d901      	bls.n	800857c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e2a0      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800857c:	4b54      	ldr	r3, [pc, #336]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0f0      	beq.n	800856a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008588:	4b51      	ldr	r3, [pc, #324]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	061b      	lsls	r3, r3, #24
 8008596:	494e      	ldr	r1, [pc, #312]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008598:	4313      	orrs	r3, r2
 800859a:	604b      	str	r3, [r1, #4]
 800859c:	e018      	b.n	80085d0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800859e:	4b4c      	ldr	r3, [pc, #304]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a4b      	ldr	r2, [pc, #300]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 80085a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085aa:	f7fd fff7 	bl	800659c <HAL_GetTick>
 80085ae:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80085b0:	e008      	b.n	80085c4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085b2:	f7fd fff3 	bl	800659c <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d901      	bls.n	80085c4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e27c      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80085c4:	4b42      	ldr	r3, [pc, #264]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1f0      	bne.n	80085b2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8082 	beq.w	80086e2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d05f      	beq.n	80086a6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80085e6:	4b3a      	ldr	r3, [pc, #232]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 80085e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085ec:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699a      	ldr	r2, [r3, #24]
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f003 0310 	and.w	r3, r3, #16
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d037      	beq.n	800866c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d006      	beq.n	8008614 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e254      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d01b      	beq.n	8008656 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800861e:	4b2c      	ldr	r3, [pc, #176]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008624:	4a2a      	ldr	r2, [pc, #168]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008626:	f023 0301 	bic.w	r3, r3, #1
 800862a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800862e:	f7fd ffb5 	bl	800659c <HAL_GetTick>
 8008632:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008634:	e008      	b.n	8008648 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008636:	f7fd ffb1 	bl	800659c <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b11      	cmp	r3, #17
 8008642:	d901      	bls.n	8008648 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e23a      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008648:	4b21      	ldr	r3, [pc, #132]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 800864a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1ef      	bne.n	8008636 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8008656:	4b1e      	ldr	r3, [pc, #120]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800865c:	f023 0210 	bic.w	r2, r3, #16
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	491a      	ldr	r1, [pc, #104]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008666:	4313      	orrs	r3, r2
 8008668:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800866c:	4b18      	ldr	r3, [pc, #96]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 800866e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008672:	4a17      	ldr	r2, [pc, #92]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008674:	f043 0301 	orr.w	r3, r3, #1
 8008678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800867c:	f7fd ff8e 	bl	800659c <HAL_GetTick>
 8008680:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008684:	f7fd ff8a 	bl	800659c <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b11      	cmp	r3, #17
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e213      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 8008698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0ef      	beq.n	8008684 <HAL_RCC_OscConfig+0x478>
 80086a4:	e01d      	b.n	80086e2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086a6:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 80086a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086ac:	4a08      	ldr	r2, [pc, #32]	; (80086d0 <HAL_RCC_OscConfig+0x4c4>)
 80086ae:	f023 0301 	bic.w	r3, r3, #1
 80086b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b6:	f7fd ff71 	bl	800659c <HAL_GetTick>
 80086ba:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086bc:	e00a      	b.n	80086d4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086be:	f7fd ff6d 	bl	800659c <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b11      	cmp	r3, #17
 80086ca:	d903      	bls.n	80086d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e1f6      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
 80086d0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086d4:	4ba9      	ldr	r3, [pc, #676]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80086d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1ed      	bne.n	80086be <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 80bd 	beq.w	800886a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086f0:	2300      	movs	r3, #0
 80086f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80086f6:	4ba1      	ldr	r3, [pc, #644]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80086f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10e      	bne.n	8008720 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008702:	4b9e      	ldr	r3, [pc, #632]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008706:	4a9d      	ldr	r2, [pc, #628]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800870c:	6593      	str	r3, [r2, #88]	; 0x58
 800870e:	4b9b      	ldr	r3, [pc, #620]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008720:	4b97      	ldr	r3, [pc, #604]	; (8008980 <HAL_RCC_OscConfig+0x774>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d118      	bne.n	800875e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800872c:	4b94      	ldr	r3, [pc, #592]	; (8008980 <HAL_RCC_OscConfig+0x774>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a93      	ldr	r2, [pc, #588]	; (8008980 <HAL_RCC_OscConfig+0x774>)
 8008732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008736:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008738:	f7fd ff30 	bl	800659c <HAL_GetTick>
 800873c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800873e:	e008      	b.n	8008752 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008740:	f7fd ff2c 	bl	800659c <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e1b5      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008752:	4b8b      	ldr	r3, [pc, #556]	; (8008980 <HAL_RCC_OscConfig+0x774>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0f0      	beq.n	8008740 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d02c      	beq.n	80087c4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800876a:	4b84      	ldr	r3, [pc, #528]	; (800897c <HAL_RCC_OscConfig+0x770>)
 800876c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008770:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877c:	497f      	ldr	r1, [pc, #508]	; (800897c <HAL_RCC_OscConfig+0x770>)
 800877e:	4313      	orrs	r3, r2
 8008780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f003 0304 	and.w	r3, r3, #4
 800878c:	2b00      	cmp	r3, #0
 800878e:	d010      	beq.n	80087b2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008790:	4b7a      	ldr	r3, [pc, #488]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008796:	4a79      	ldr	r2, [pc, #484]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008798:	f043 0304 	orr.w	r3, r3, #4
 800879c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80087a0:	4b76      	ldr	r3, [pc, #472]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80087a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a6:	4a75      	ldr	r2, [pc, #468]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80087a8:	f043 0301 	orr.w	r3, r3, #1
 80087ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087b0:	e018      	b.n	80087e4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80087b2:	4b72      	ldr	r3, [pc, #456]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80087b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b8:	4a70      	ldr	r2, [pc, #448]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80087ba:	f043 0301 	orr.w	r3, r3, #1
 80087be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087c2:	e00f      	b.n	80087e4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80087c4:	4b6d      	ldr	r3, [pc, #436]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80087c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ca:	4a6c      	ldr	r2, [pc, #432]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80087cc:	f023 0301 	bic.w	r3, r3, #1
 80087d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80087d4:	4b69      	ldr	r3, [pc, #420]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80087d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087da:	4a68      	ldr	r2, [pc, #416]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80087dc:	f023 0304 	bic.w	r3, r3, #4
 80087e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d016      	beq.n	800881a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ec:	f7fd fed6 	bl	800659c <HAL_GetTick>
 80087f0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087f2:	e00a      	b.n	800880a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087f4:	f7fd fed2 	bl	800659c <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008802:	4293      	cmp	r3, r2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e159      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800880a:	4b5c      	ldr	r3, [pc, #368]	; (800897c <HAL_RCC_OscConfig+0x770>)
 800880c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0ed      	beq.n	80087f4 <HAL_RCC_OscConfig+0x5e8>
 8008818:	e01d      	b.n	8008856 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800881a:	f7fd febf 	bl	800659c <HAL_GetTick>
 800881e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008820:	e00a      	b.n	8008838 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008822:	f7fd febb 	bl	800659c <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008830:	4293      	cmp	r3, r2
 8008832:	d901      	bls.n	8008838 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e142      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008838:	4b50      	ldr	r3, [pc, #320]	; (800897c <HAL_RCC_OscConfig+0x770>)
 800883a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1ed      	bne.n	8008822 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8008846:	4b4d      	ldr	r3, [pc, #308]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884c:	4a4b      	ldr	r2, [pc, #300]	; (800897c <HAL_RCC_OscConfig+0x770>)
 800884e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800885a:	2b01      	cmp	r3, #1
 800885c:	d105      	bne.n	800886a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800885e:	4b47      	ldr	r3, [pc, #284]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008862:	4a46      	ldr	r2, [pc, #280]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008868:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	d03c      	beq.n	80088f0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	d01c      	beq.n	80088b8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800887e:	4b3f      	ldr	r3, [pc, #252]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008880:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008884:	4a3d      	ldr	r2, [pc, #244]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008886:	f043 0301 	orr.w	r3, r3, #1
 800888a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800888e:	f7fd fe85 	bl	800659c <HAL_GetTick>
 8008892:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008894:	e008      	b.n	80088a8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008896:	f7fd fe81 	bl	800659c <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d901      	bls.n	80088a8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e10a      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80088a8:	4b34      	ldr	r3, [pc, #208]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80088aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0ef      	beq.n	8008896 <HAL_RCC_OscConfig+0x68a>
 80088b6:	e01b      	b.n	80088f0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088b8:	4b30      	ldr	r3, [pc, #192]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80088ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088be:	4a2f      	ldr	r2, [pc, #188]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80088c0:	f023 0301 	bic.w	r3, r3, #1
 80088c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c8:	f7fd fe68 	bl	800659c <HAL_GetTick>
 80088cc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80088ce:	e008      	b.n	80088e2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088d0:	f7fd fe64 	bl	800659c <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d901      	bls.n	80088e2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e0ed      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80088e2:	4b26      	ldr	r3, [pc, #152]	; (800897c <HAL_RCC_OscConfig+0x770>)
 80088e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1ef      	bne.n	80088d0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 80e1 	beq.w	8008abc <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	2b02      	cmp	r3, #2
 8008900:	f040 80b5 	bne.w	8008a6e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008904:	4b1d      	ldr	r3, [pc, #116]	; (800897c <HAL_RCC_OscConfig+0x770>)
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f003 0203 	and.w	r2, r3, #3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008914:	429a      	cmp	r2, r3
 8008916:	d124      	bne.n	8008962 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008922:	3b01      	subs	r3, #1
 8008924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008926:	429a      	cmp	r2, r3
 8008928:	d11b      	bne.n	8008962 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008934:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008936:	429a      	cmp	r2, r3
 8008938:	d113      	bne.n	8008962 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008944:	085b      	lsrs	r3, r3, #1
 8008946:	3b01      	subs	r3, #1
 8008948:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800894a:	429a      	cmp	r2, r3
 800894c:	d109      	bne.n	8008962 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	3b01      	subs	r3, #1
 800895c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800895e:	429a      	cmp	r2, r3
 8008960:	d05f      	beq.n	8008a22 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	2b0c      	cmp	r3, #12
 8008966:	d05a      	beq.n	8008a1e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008968:	4b04      	ldr	r3, [pc, #16]	; (800897c <HAL_RCC_OscConfig+0x770>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a03      	ldr	r2, [pc, #12]	; (800897c <HAL_RCC_OscConfig+0x770>)
 800896e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008972:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008974:	f7fd fe12 	bl	800659c <HAL_GetTick>
 8008978:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800897a:	e00c      	b.n	8008996 <HAL_RCC_OscConfig+0x78a>
 800897c:	40021000 	.word	0x40021000
 8008980:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008984:	f7fd fe0a 	bl	800659c <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e093      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008996:	4b4c      	ldr	r3, [pc, #304]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1f0      	bne.n	8008984 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089a2:	4b49      	ldr	r3, [pc, #292]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	4b49      	ldr	r3, [pc, #292]	; (8008acc <HAL_RCC_OscConfig+0x8c0>)
 80089a8:	4013      	ands	r3, r2
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80089b2:	3a01      	subs	r2, #1
 80089b4:	0112      	lsls	r2, r2, #4
 80089b6:	4311      	orrs	r1, r2
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089bc:	0212      	lsls	r2, r2, #8
 80089be:	4311      	orrs	r1, r2
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80089c4:	0852      	lsrs	r2, r2, #1
 80089c6:	3a01      	subs	r2, #1
 80089c8:	0552      	lsls	r2, r2, #21
 80089ca:	4311      	orrs	r1, r2
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80089d0:	0852      	lsrs	r2, r2, #1
 80089d2:	3a01      	subs	r2, #1
 80089d4:	0652      	lsls	r2, r2, #25
 80089d6:	430a      	orrs	r2, r1
 80089d8:	493b      	ldr	r1, [pc, #236]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80089de:	4b3a      	ldr	r3, [pc, #232]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a39      	ldr	r2, [pc, #228]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 80089e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089e8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80089ea:	4b37      	ldr	r3, [pc, #220]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	4a36      	ldr	r2, [pc, #216]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 80089f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089f4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80089f6:	f7fd fdd1 	bl	800659c <HAL_GetTick>
 80089fa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089fc:	e008      	b.n	8008a10 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089fe:	f7fd fdcd 	bl	800659c <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d901      	bls.n	8008a10 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e056      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a10:	4b2d      	ldr	r3, [pc, #180]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0f0      	beq.n	80089fe <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a1c:	e04e      	b.n	8008abc <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e04d      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a22:	4b29      	ldr	r3, [pc, #164]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d146      	bne.n	8008abc <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008a2e:	4b26      	ldr	r3, [pc, #152]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a25      	ldr	r2, [pc, #148]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a38:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a3a:	4b23      	ldr	r3, [pc, #140]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	4a22      	ldr	r2, [pc, #136]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008a40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a44:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a46:	f7fd fda9 	bl	800659c <HAL_GetTick>
 8008a4a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a4c:	e008      	b.n	8008a60 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a4e:	f7fd fda5 	bl	800659c <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e02e      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a60:	4b19      	ldr	r3, [pc, #100]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0f0      	beq.n	8008a4e <HAL_RCC_OscConfig+0x842>
 8008a6c:	e026      	b.n	8008abc <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	2b0c      	cmp	r3, #12
 8008a72:	d021      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a74:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a13      	ldr	r2, [pc, #76]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a80:	f7fd fd8c 	bl	800659c <HAL_GetTick>
 8008a84:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a86:	e008      	b.n	8008a9a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a88:	f7fd fd88 	bl	800659c <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d901      	bls.n	8008a9a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e011      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1f0      	bne.n	8008a88 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8008aa6:	4b08      	ldr	r3, [pc, #32]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	4a07      	ldr	r2, [pc, #28]	; (8008ac8 <HAL_RCC_OscConfig+0x8bc>)
 8008aac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008ab0:	f023 0303 	bic.w	r3, r3, #3
 8008ab4:	60d3      	str	r3, [r2, #12]
 8008ab6:	e001      	b.n	8008abc <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3728      	adds	r7, #40	; 0x28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	40021000 	.word	0x40021000
 8008acc:	f99f808c 	.word	0xf99f808c

08008ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e0e7      	b.n	8008cb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ae4:	4b75      	ldr	r3, [pc, #468]	; (8008cbc <HAL_RCC_ClockConfig+0x1ec>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d910      	bls.n	8008b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008af2:	4b72      	ldr	r3, [pc, #456]	; (8008cbc <HAL_RCC_ClockConfig+0x1ec>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f023 0207 	bic.w	r2, r3, #7
 8008afa:	4970      	ldr	r1, [pc, #448]	; (8008cbc <HAL_RCC_ClockConfig+0x1ec>)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b02:	4b6e      	ldr	r3, [pc, #440]	; (8008cbc <HAL_RCC_ClockConfig+0x1ec>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d001      	beq.n	8008b14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e0cf      	b.n	8008cb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d010      	beq.n	8008b42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	4b66      	ldr	r3, [pc, #408]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d908      	bls.n	8008b42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b30:	4b63      	ldr	r3, [pc, #396]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	4960      	ldr	r1, [pc, #384]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d04c      	beq.n	8008be8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d107      	bne.n	8008b66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b56:	4b5a      	ldr	r3, [pc, #360]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d121      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e0a6      	b.n	8008cb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d107      	bne.n	8008b7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b6e:	4b54      	ldr	r3, [pc, #336]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d115      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e09a      	b.n	8008cb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d107      	bne.n	8008b96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008b86:	4b4e      	ldr	r3, [pc, #312]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d109      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e08e      	b.n	8008cb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b96:	4b4a      	ldr	r3, [pc, #296]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e086      	b.n	8008cb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ba6:	4b46      	ldr	r3, [pc, #280]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f023 0203 	bic.w	r2, r3, #3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	4943      	ldr	r1, [pc, #268]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bb8:	f7fd fcf0 	bl	800659c <HAL_GetTick>
 8008bbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bbe:	e00a      	b.n	8008bd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bc0:	f7fd fcec 	bl	800659c <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e06e      	b.n	8008cb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bd6:	4b3a      	ldr	r3, [pc, #232]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f003 020c 	and.w	r2, r3, #12
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d1eb      	bne.n	8008bc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d010      	beq.n	8008c16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	4b31      	ldr	r3, [pc, #196]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d208      	bcs.n	8008c16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c04:	4b2e      	ldr	r3, [pc, #184]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	492b      	ldr	r1, [pc, #172]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c16:	4b29      	ldr	r3, [pc, #164]	; (8008cbc <HAL_RCC_ClockConfig+0x1ec>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d210      	bcs.n	8008c46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c24:	4b25      	ldr	r3, [pc, #148]	; (8008cbc <HAL_RCC_ClockConfig+0x1ec>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f023 0207 	bic.w	r2, r3, #7
 8008c2c:	4923      	ldr	r1, [pc, #140]	; (8008cbc <HAL_RCC_ClockConfig+0x1ec>)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c34:	4b21      	ldr	r3, [pc, #132]	; (8008cbc <HAL_RCC_ClockConfig+0x1ec>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d001      	beq.n	8008c46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e036      	b.n	8008cb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0304 	and.w	r3, r3, #4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d008      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c52:	4b1b      	ldr	r3, [pc, #108]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	4918      	ldr	r1, [pc, #96]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d009      	beq.n	8008c84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c70:	4b13      	ldr	r3, [pc, #76]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	4910      	ldr	r1, [pc, #64]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c84:	f000 f824 	bl	8008cd0 <HAL_RCC_GetSysClockFreq>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	; (8008cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	091b      	lsrs	r3, r3, #4
 8008c90:	f003 030f 	and.w	r3, r3, #15
 8008c94:	490b      	ldr	r1, [pc, #44]	; (8008cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8008c96:	5ccb      	ldrb	r3, [r1, r3]
 8008c98:	f003 031f 	and.w	r3, r3, #31
 8008c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca0:	4a09      	ldr	r2, [pc, #36]	; (8008cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8008ca2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008ca4:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <HAL_RCC_ClockConfig+0x1fc>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7fd fc27 	bl	80064fc <HAL_InitTick>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8008cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	40022000 	.word	0x40022000
 8008cc0:	40021000 	.word	0x40021000
 8008cc4:	080143fc 	.word	0x080143fc
 8008cc8:	20000000 	.word	0x20000000
 8008ccc:	20000008 	.word	0x20000008

08008cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b089      	sub	sp, #36	; 0x24
 8008cd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cde:	4b3e      	ldr	r3, [pc, #248]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f003 030c 	and.w	r3, r3, #12
 8008ce6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ce8:	4b3b      	ldr	r3, [pc, #236]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f003 0303 	and.w	r3, r3, #3
 8008cf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <HAL_RCC_GetSysClockFreq+0x34>
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b0c      	cmp	r3, #12
 8008cfc:	d121      	bne.n	8008d42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d11e      	bne.n	8008d42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008d04:	4b34      	ldr	r3, [pc, #208]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0308 	and.w	r3, r3, #8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d107      	bne.n	8008d20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008d10:	4b31      	ldr	r3, [pc, #196]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	61fb      	str	r3, [r7, #28]
 8008d1e:	e005      	b.n	8008d2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008d20:	4b2d      	ldr	r3, [pc, #180]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	091b      	lsrs	r3, r3, #4
 8008d26:	f003 030f 	and.w	r3, r3, #15
 8008d2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008d2c:	4a2b      	ldr	r2, [pc, #172]	; (8008ddc <HAL_RCC_GetSysClockFreq+0x10c>)
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10d      	bne.n	8008d58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d40:	e00a      	b.n	8008d58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	d102      	bne.n	8008d4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008d48:	4b25      	ldr	r3, [pc, #148]	; (8008de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008d4a:	61bb      	str	r3, [r7, #24]
 8008d4c:	e004      	b.n	8008d58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	d101      	bne.n	8008d58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008d54:	4b23      	ldr	r3, [pc, #140]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008d56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	2b0c      	cmp	r3, #12
 8008d5c:	d134      	bne.n	8008dc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d5e:	4b1e      	ldr	r3, [pc, #120]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d003      	beq.n	8008d76 <HAL_RCC_GetSysClockFreq+0xa6>
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d003      	beq.n	8008d7c <HAL_RCC_GetSysClockFreq+0xac>
 8008d74:	e005      	b.n	8008d82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008d76:	4b1a      	ldr	r3, [pc, #104]	; (8008de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008d78:	617b      	str	r3, [r7, #20]
      break;
 8008d7a:	e005      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008d7c:	4b19      	ldr	r3, [pc, #100]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008d7e:	617b      	str	r3, [r7, #20]
      break;
 8008d80:	e002      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	617b      	str	r3, [r7, #20]
      break;
 8008d86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d88:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	091b      	lsrs	r3, r3, #4
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	3301      	adds	r3, #1
 8008d94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008d96:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	0a1b      	lsrs	r3, r3, #8
 8008d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	fb03 f202 	mul.w	r2, r3, r2
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008dae:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	0e5b      	lsrs	r3, r3, #25
 8008db4:	f003 0303 	and.w	r3, r3, #3
 8008db8:	3301      	adds	r3, #1
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008dc8:	69bb      	ldr	r3, [r7, #24]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3724      	adds	r7, #36	; 0x24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40021000 	.word	0x40021000
 8008ddc:	08014414 	.word	0x08014414
 8008de0:	00f42400 	.word	0x00f42400
 8008de4:	007a1200 	.word	0x007a1200

08008de8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dec:	4b03      	ldr	r3, [pc, #12]	; (8008dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8008dee:	681b      	ldr	r3, [r3, #0]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	20000000 	.word	0x20000000

08008e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008e04:	f7ff fff0 	bl	8008de8 <HAL_RCC_GetHCLKFreq>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	f003 0307 	and.w	r3, r3, #7
 8008e14:	4904      	ldr	r1, [pc, #16]	; (8008e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e16:	5ccb      	ldrb	r3, [r1, r3]
 8008e18:	f003 031f 	and.w	r3, r3, #31
 8008e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	40021000 	.word	0x40021000
 8008e28:	0801440c 	.word	0x0801440c

08008e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008e30:	f7ff ffda 	bl	8008de8 <HAL_RCC_GetHCLKFreq>
 8008e34:	4602      	mov	r2, r0
 8008e36:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	0adb      	lsrs	r3, r3, #11
 8008e3c:	f003 0307 	and.w	r3, r3, #7
 8008e40:	4904      	ldr	r1, [pc, #16]	; (8008e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e42:	5ccb      	ldrb	r3, [r1, r3]
 8008e44:	f003 031f 	and.w	r3, r3, #31
 8008e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	40021000 	.word	0x40021000
 8008e54:	0801440c 	.word	0x0801440c

08008e58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008e60:	2300      	movs	r3, #0
 8008e62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008e64:	4b2a      	ldr	r3, [pc, #168]	; (8008f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008e70:	f7ff f94e 	bl	8008110 <HAL_PWREx_GetVoltageRange>
 8008e74:	6178      	str	r0, [r7, #20]
 8008e76:	e014      	b.n	8008ea2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e78:	4b25      	ldr	r3, [pc, #148]	; (8008f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e7c:	4a24      	ldr	r2, [pc, #144]	; (8008f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e82:	6593      	str	r3, [r2, #88]	; 0x58
 8008e84:	4b22      	ldr	r3, [pc, #136]	; (8008f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008e90:	f7ff f93e 	bl	8008110 <HAL_PWREx_GetVoltageRange>
 8008e94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008e96:	4b1e      	ldr	r3, [pc, #120]	; (8008f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e9a:	4a1d      	ldr	r2, [pc, #116]	; (8008f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ea0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea8:	d10b      	bne.n	8008ec2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b80      	cmp	r3, #128	; 0x80
 8008eae:	d919      	bls.n	8008ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2ba0      	cmp	r3, #160	; 0xa0
 8008eb4:	d902      	bls.n	8008ebc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	613b      	str	r3, [r7, #16]
 8008eba:	e013      	b.n	8008ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	613b      	str	r3, [r7, #16]
 8008ec0:	e010      	b.n	8008ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b80      	cmp	r3, #128	; 0x80
 8008ec6:	d902      	bls.n	8008ece <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008ec8:	2303      	movs	r3, #3
 8008eca:	613b      	str	r3, [r7, #16]
 8008ecc:	e00a      	b.n	8008ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b80      	cmp	r3, #128	; 0x80
 8008ed2:	d102      	bne.n	8008eda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	613b      	str	r3, [r7, #16]
 8008ed8:	e004      	b.n	8008ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b70      	cmp	r3, #112	; 0x70
 8008ede:	d101      	bne.n	8008ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008ee4:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f023 0207 	bic.w	r2, r3, #7
 8008eec:	4909      	ldr	r1, [pc, #36]	; (8008f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008ef4:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d001      	beq.n	8008f06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e000      	b.n	8008f08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	40021000 	.word	0x40021000
 8008f14:	40022000 	.word	0x40022000

08008f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f20:	2300      	movs	r3, #0
 8008f22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f24:	2300      	movs	r3, #0
 8008f26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 809e 	beq.w	8009072 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f36:	2300      	movs	r3, #0
 8008f38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008f3a:	4b46      	ldr	r3, [pc, #280]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00d      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f50:	4b40      	ldr	r3, [pc, #256]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f54:	4a3f      	ldr	r2, [pc, #252]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8008f5c:	4b3d      	ldr	r3, [pc, #244]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f64:	60bb      	str	r3, [r7, #8]
 8008f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f6c:	4b3a      	ldr	r3, [pc, #232]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a39      	ldr	r2, [pc, #228]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f78:	f7fd fb10 	bl	800659c <HAL_GetTick>
 8008f7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008f7e:	e009      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f80:	f7fd fb0c 	bl	800659c <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d902      	bls.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	74fb      	strb	r3, [r7, #19]
        break;
 8008f92:	e005      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008f94:	4b30      	ldr	r3, [pc, #192]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0ef      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8008fa0:	7cfb      	ldrb	r3, [r7, #19]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d15a      	bne.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008fa6:	4b2b      	ldr	r3, [pc, #172]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01e      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d019      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008fc2:	4b24      	ldr	r3, [pc, #144]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fcc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fce:	4b21      	ldr	r3, [pc, #132]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd4:	4a1f      	ldr	r2, [pc, #124]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fde:	4b1d      	ldr	r3, [pc, #116]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fe4:	4a1b      	ldr	r2, [pc, #108]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008fee:	4a19      	ldr	r2, [pc, #100]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d016      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009000:	f7fd facc 	bl	800659c <HAL_GetTick>
 8009004:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009006:	e00b      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009008:	f7fd fac8 	bl	800659c <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	f241 3288 	movw	r2, #5000	; 0x1388
 8009016:	4293      	cmp	r3, r2
 8009018:	d902      	bls.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	74fb      	strb	r3, [r7, #19]
            break;
 800901e:	e006      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009020:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8009022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0ec      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800902e:	7cfb      	ldrb	r3, [r7, #19]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10b      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009034:	4b07      	ldr	r3, [pc, #28]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8009036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800903a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	4904      	ldr	r1, [pc, #16]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8009044:	4313      	orrs	r3, r2
 8009046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800904a:	e009      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800904c:	7cfb      	ldrb	r3, [r7, #19]
 800904e:	74bb      	strb	r3, [r7, #18]
 8009050:	e006      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8009052:	bf00      	nop
 8009054:	40021000 	.word	0x40021000
 8009058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800905c:	7cfb      	ldrb	r3, [r7, #19]
 800905e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009060:	7c7b      	ldrb	r3, [r7, #17]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d105      	bne.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009066:	4b6e      	ldr	r3, [pc, #440]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906a:	4a6d      	ldr	r2, [pc, #436]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800906c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800907e:	4b68      	ldr	r3, [pc, #416]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009084:	f023 0203 	bic.w	r2, r3, #3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	4964      	ldr	r1, [pc, #400]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800908e:	4313      	orrs	r3, r2
 8009090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00a      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80090a0:	4b5f      	ldr	r3, [pc, #380]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80090a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a6:	f023 020c 	bic.w	r2, r3, #12
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	495c      	ldr	r1, [pc, #368]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0304 	and.w	r3, r3, #4
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80090c2:	4b57      	ldr	r3, [pc, #348]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80090c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	4953      	ldr	r1, [pc, #332]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00a      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80090e4:	4b4e      	ldr	r3, [pc, #312]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80090e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	494b      	ldr	r1, [pc, #300]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009106:	4b46      	ldr	r3, [pc, #280]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800910c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	4942      	ldr	r1, [pc, #264]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009116:	4313      	orrs	r3, r2
 8009118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00a      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009128:	4b3d      	ldr	r3, [pc, #244]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800912a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	493a      	ldr	r1, [pc, #232]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009138:	4313      	orrs	r3, r2
 800913a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800914a:	4b35      	ldr	r3, [pc, #212]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800914c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009150:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	4931      	ldr	r1, [pc, #196]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800915a:	4313      	orrs	r3, r2
 800915c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800916c:	4b2c      	ldr	r3, [pc, #176]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800916e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009172:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	4929      	ldr	r1, [pc, #164]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800917c:	4313      	orrs	r3, r2
 800917e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800918e:	4b24      	ldr	r3, [pc, #144]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	4920      	ldr	r1, [pc, #128]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d015      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091b0:	4b1b      	ldr	r3, [pc, #108]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80091b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	4918      	ldr	r1, [pc, #96]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091ce:	d105      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091d0:	4b13      	ldr	r3, [pc, #76]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	4a12      	ldr	r2, [pc, #72]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80091d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091da:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d015      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091e8:	4b0d      	ldr	r3, [pc, #52]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80091ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f6:	490a      	ldr	r1, [pc, #40]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009206:	d105      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009208:	4b05      	ldr	r3, [pc, #20]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	4a04      	ldr	r2, [pc, #16]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800920e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009212:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009214:	7cbb      	ldrb	r3, [r7, #18]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	40021000 	.word	0x40021000

08009224 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009224:	b480      	push	{r7}
 8009226:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009228:	4b05      	ldr	r3, [pc, #20]	; (8009240 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a04      	ldr	r2, [pc, #16]	; (8009240 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800922e:	f043 0304 	orr.w	r3, r3, #4
 8009232:	6013      	str	r3, [r2, #0]
}
 8009234:	bf00      	nop
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	40021000 	.word	0x40021000

08009244 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e049      	b.n	80092ea <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	795b      	ldrb	r3, [r3, #5]
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	d105      	bne.n	800926c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7fb fc0a 	bl	8004a80 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f042 0204 	orr.w	r2, r2, #4
 8009280:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928c:	2b40      	cmp	r3, #64	; 0x40
 800928e:	d104      	bne.n	800929a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2204      	movs	r2, #4
 8009294:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e027      	b.n	80092ea <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800929a:	f7fd f97f 	bl	800659c <HAL_GetTick>
 800929e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80092a0:	e015      	b.n	80092ce <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80092a2:	f7fd f97b 	bl	800659c <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d90e      	bls.n	80092ce <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f003 0304 	and.w	r3, r3, #4
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d107      	bne.n	80092ce <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2204      	movs	r2, #4
 80092c2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e00d      	b.n	80092ea <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f003 0304 	and.w	r3, r3, #4
 80092d8:	2b04      	cmp	r3, #4
 80092da:	d0e2      	beq.n	80092a2 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	791b      	ldrb	r3, [r3, #4]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d101      	bne.n	800930c <HAL_RNG_GenerateRandomNumber+0x1a>
 8009308:	2302      	movs	r3, #2
 800930a:	e03d      	b.n	8009388 <HAL_RNG_GenerateRandomNumber+0x96>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	795b      	ldrb	r3, [r3, #5]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b01      	cmp	r3, #1
 800931a:	d12c      	bne.n	8009376 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009322:	f7fd f93b 	bl	800659c <HAL_GetTick>
 8009326:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009328:	e011      	b.n	800934e <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800932a:	f7fd f937 	bl	800659c <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d90a      	bls.n	800934e <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2202      	movs	r2, #2
 8009342:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e01c      	b.n	8009388 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	2b01      	cmp	r3, #1
 800935a:	d1e6      	bne.n	800932a <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68da      	ldr	r2, [r3, #12]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	715a      	strb	r2, [r3, #5]
 8009374:	e004      	b.n	8009380 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2204      	movs	r2, #4
 800937a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	711a      	strb	r2, [r3, #4]

  return status;
 8009386:	7bfb      	ldrb	r3, [r7, #15]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d073      	beq.n	800948a <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d106      	bne.n	80093bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7fb fb96 	bl	8004ae8 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80093c2:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	22ca      	movs	r2, #202	; 0xca
 80093d2:	625a      	str	r2, [r3, #36]	; 0x24
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2253      	movs	r2, #83	; 0x53
 80093da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fb75 	bl	8009acc <RTC_EnterInitMode>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d14e      	bne.n	800948a <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6812      	ldr	r2, [r2, #0]
 80093f6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80093fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093fe:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6999      	ldr	r1, [r3, #24]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689a      	ldr	r2, [r3, #8]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	431a      	orrs	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	431a      	orrs	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	430a      	orrs	r2, r1
 800941c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	6912      	ldr	r2, [r2, #16]
 8009426:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6919      	ldr	r1, [r3, #16]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	041a      	lsls	r2, r3, #16
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fb7b 	bl	8009b38 <RTC_ExitInitMode>
 8009442:	4603      	mov	r3, r0
 8009444:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d11e      	bne.n	800948a <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800945a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6999      	ldr	r1, [r3, #24]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	431a      	orrs	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	431a      	orrs	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	22ff      	movs	r2, #255	; 0xff
 8009480:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009494:	b590      	push	{r4, r7, lr}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d101      	bne.n	80094ae <HAL_RTC_SetTime+0x1a>
 80094aa:	2302      	movs	r3, #2
 80094ac:	e08b      	b.n	80095c6 <HAL_RTC_SetTime+0x132>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2202      	movs	r2, #2
 80094ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	22ca      	movs	r2, #202	; 0xca
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2253      	movs	r2, #83	; 0x53
 80094cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 fafc 	bl	8009acc <RTC_EnterInitMode>
 80094d4:	4603      	mov	r3, r0
 80094d6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80094d8:	7cfb      	ldrb	r3, [r7, #19]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d163      	bne.n	80095a6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d126      	bne.n	8009532 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d102      	bne.n	80094f8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2200      	movs	r2, #0
 80094f6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 fb59 	bl	8009bb4 <RTC_ByteToBcd2>
 8009502:	4603      	mov	r3, r0
 8009504:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	785b      	ldrb	r3, [r3, #1]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fb52 	bl	8009bb4 <RTC_ByteToBcd2>
 8009510:	4603      	mov	r3, r0
 8009512:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009514:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	789b      	ldrb	r3, [r3, #2]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fb4a 	bl	8009bb4 <RTC_ByteToBcd2>
 8009520:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009522:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	78db      	ldrb	r3, [r3, #3]
 800952a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800952c:	4313      	orrs	r3, r2
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	e018      	b.n	8009564 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953c:	2b00      	cmp	r3, #0
 800953e:	d102      	bne.n	8009546 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	2200      	movs	r2, #0
 8009544:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	785b      	ldrb	r3, [r3, #1]
 8009550:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009552:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009558:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	78db      	ldrb	r3, [r3, #3]
 800955e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009560:	4313      	orrs	r3, r2
 8009562:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800956e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009572:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699a      	ldr	r2, [r3, #24]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009582:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6999      	ldr	r1, [r3, #24]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	431a      	orrs	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 facb 	bl	8009b38 <RTC_ExitInitMode>
 80095a2:	4603      	mov	r3, r0
 80095a4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	22ff      	movs	r2, #255	; 0xff
 80095ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80095ae:	7cfb      	ldrb	r3, [r7, #19]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d103      	bne.n	80095bc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 80095c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd90      	pop	{r4, r7, pc}

080095ce <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b086      	sub	sp, #24
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80095fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009600:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	0c1b      	lsrs	r3, r3, #16
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800960c:	b2da      	uxtb	r2, r3
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	0a1b      	lsrs	r3, r3, #8
 8009616:	b2db      	uxtb	r3, r3
 8009618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800961c:	b2da      	uxtb	r2, r3
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800962a:	b2da      	uxtb	r2, r3
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	0d9b      	lsrs	r3, r3, #22
 8009634:	b2db      	uxtb	r3, r3
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	b2da      	uxtb	r2, r3
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d11a      	bne.n	800967c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	4618      	mov	r0, r3
 800964c:	f000 fad2 	bl	8009bf4 <RTC_Bcd2ToByte>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fac9 	bl	8009bf4 <RTC_Bcd2ToByte>
 8009662:	4603      	mov	r3, r0
 8009664:	461a      	mov	r2, r3
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	789b      	ldrb	r3, [r3, #2]
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fac0 	bl	8009bf4 <RTC_Bcd2ToByte>
 8009674:	4603      	mov	r3, r0
 8009676:	461a      	mov	r2, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009686:	b590      	push	{r4, r7, lr}
 8009688:	b087      	sub	sp, #28
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009698:	2b01      	cmp	r3, #1
 800969a:	d101      	bne.n	80096a0 <HAL_RTC_SetDate+0x1a>
 800969c:	2302      	movs	r3, #2
 800969e:	e075      	b.n	800978c <HAL_RTC_SetDate+0x106>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10e      	bne.n	80096d4 <HAL_RTC_SetDate+0x4e>
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	f003 0310 	and.w	r3, r3, #16
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d008      	beq.n	80096d4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	785b      	ldrb	r3, [r3, #1]
 80096c6:	f023 0310 	bic.w	r3, r3, #16
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	330a      	adds	r3, #10
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d11c      	bne.n	8009714 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	78db      	ldrb	r3, [r3, #3]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 fa68 	bl	8009bb4 <RTC_ByteToBcd2>
 80096e4:	4603      	mov	r3, r0
 80096e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	785b      	ldrb	r3, [r3, #1]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 fa61 	bl	8009bb4 <RTC_ByteToBcd2>
 80096f2:	4603      	mov	r3, r0
 80096f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80096f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	789b      	ldrb	r3, [r3, #2]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fa59 	bl	8009bb4 <RTC_ByteToBcd2>
 8009702:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009704:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800970e:	4313      	orrs	r3, r2
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	e00e      	b.n	8009732 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	78db      	ldrb	r3, [r3, #3]
 8009718:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	785b      	ldrb	r3, [r3, #1]
 800971e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009720:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009726:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800972e:	4313      	orrs	r3, r2
 8009730:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	22ca      	movs	r2, #202	; 0xca
 8009738:	625a      	str	r2, [r3, #36]	; 0x24
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2253      	movs	r2, #83	; 0x53
 8009740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 f9c2 	bl	8009acc <RTC_EnterInitMode>
 8009748:	4603      	mov	r3, r0
 800974a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800974c:	7cfb      	ldrb	r3, [r7, #19]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10c      	bne.n	800976c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800975c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009760:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 f9e8 	bl	8009b38 <RTC_ExitInitMode>
 8009768:	4603      	mov	r3, r0
 800976a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	22ff      	movs	r2, #255	; 0xff
 8009772:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009774:	7cfb      	ldrb	r3, [r7, #19]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d103      	bne.n	8009782 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 800978a:	7cfb      	ldrb	r3, [r7, #19]
}
 800978c:	4618      	mov	r0, r3
 800978e:	371c      	adds	r7, #28
 8009790:	46bd      	mov	sp, r7
 8009792:	bd90      	pop	{r4, r7, pc}

08009794 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80097aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80097ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	0c1b      	lsrs	r3, r3, #16
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	0a1b      	lsrs	r3, r3, #8
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f003 031f 	and.w	r3, r3, #31
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	0b5b      	lsrs	r3, r3, #13
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d11a      	bne.n	8009824 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	78db      	ldrb	r3, [r3, #3]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f000 f9fe 	bl	8009bf4 <RTC_Bcd2ToByte>
 80097f8:	4603      	mov	r3, r0
 80097fa:	461a      	mov	r2, r3
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	785b      	ldrb	r3, [r3, #1]
 8009804:	4618      	mov	r0, r3
 8009806:	f000 f9f5 	bl	8009bf4 <RTC_Bcd2ToByte>
 800980a:	4603      	mov	r3, r0
 800980c:	461a      	mov	r2, r3
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	789b      	ldrb	r3, [r3, #2]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f9ec 	bl	8009bf4 <RTC_Bcd2ToByte>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009830:	b590      	push	{r4, r7, lr}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009842:	2b01      	cmp	r3, #1
 8009844:	d101      	bne.n	800984a <HAL_RTC_SetAlarm_IT+0x1a>
 8009846:	2302      	movs	r3, #2
 8009848:	e0db      	b.n	8009a02 <HAL_RTC_SetAlarm_IT+0x1d2>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2202      	movs	r2, #2
 8009856:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if (Format == RTC_FORMAT_BIN)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d137      	bne.n	80098d0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986a:	2b00      	cmp	r3, #0
 800986c:	d102      	bne.n	8009874 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2200      	movs	r2, #0
 8009872:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 f99b 	bl	8009bb4 <RTC_ByteToBcd2>
 800987e:	4603      	mov	r3, r0
 8009880:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 f994 	bl	8009bb4 <RTC_ByteToBcd2>
 800988c:	4603      	mov	r3, r0
 800988e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009890:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	789b      	ldrb	r3, [r3, #2]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 f98c 	bl	8009bb4 <RTC_ByteToBcd2>
 800989c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800989e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	78db      	ldrb	r3, [r3, #3]
 80098a6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80098a8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 f97e 	bl	8009bb4 <RTC_ByteToBcd2>
 80098b8:	4603      	mov	r3, r0
 80098ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80098bc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80098c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80098ca:	4313      	orrs	r3, r2
 80098cc:	617b      	str	r3, [r7, #20]
 80098ce:	e023      	b.n	8009918 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d102      	bne.n	80098e4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2200      	movs	r2, #0
 80098e2:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80098f0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80098f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	78db      	ldrb	r3, [r3, #3]
 80098fc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80098fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009906:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009908:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800990e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	4313      	orrs	r3, r2
 8009922:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	22ca      	movs	r2, #202	; 0xca
 800992a:	625a      	str	r2, [r3, #36]	; 0x24
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2253      	movs	r2, #83	; 0x53
 8009932:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800993c:	d124      	bne.n	8009988 <HAL_RTC_SetAlarm_IT+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800994c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2201      	movs	r2, #1
 8009954:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	699a      	ldr	r2, [r3, #24]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009974:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699a      	ldr	r2, [r3, #24]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009984:	619a      	str	r2, [r3, #24]
 8009986:	e023      	b.n	80099d0 <HAL_RTC_SetAlarm_IT+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009996:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2202      	movs	r2, #2
 800999e:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	699a      	ldr	r2, [r3, #24]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099be:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	699a      	ldr	r2, [r3, #24]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099ce:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80099d0:	4b0e      	ldr	r3, [pc, #56]	; (8009a0c <HAL_RTC_SetAlarm_IT+0x1dc>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a0d      	ldr	r2, [pc, #52]	; (8009a0c <HAL_RTC_SetAlarm_IT+0x1dc>)
 80099d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099da:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80099dc:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <HAL_RTC_SetAlarm_IT+0x1dc>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	4a0a      	ldr	r2, [pc, #40]	; (8009a0c <HAL_RTC_SetAlarm_IT+0x1dc>)
 80099e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099e6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	22ff      	movs	r2, #255	; 0xff
 80099ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd90      	pop	{r4, r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	40010400 	.word	0x40010400

08009a10 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009a18:	4b13      	ldr	r3, [pc, #76]	; (8009a68 <HAL_RTC_AlarmIRQHandler+0x58>)
 8009a1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009a1e:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d006      	beq.n	8009a40 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2201      	movs	r2, #1
 8009a38:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f816 	bl	8009a6c <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d006      	beq.n	8009a58 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f92f 	bl	8009cb6 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8009a60:	bf00      	nop
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	40010400 	.word	0x40010400

08009a6c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68da      	ldr	r2, [r3, #12]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009a96:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8009a98:	f7fc fd80 	bl	800659c <HAL_GetTick>
 8009a9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009a9e:	e009      	b.n	8009ab4 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009aa0:	f7fc fd7c 	bl	800659c <HAL_GetTick>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009aae:	d901      	bls.n	8009ab4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e007      	b.n	8009ac4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d0ee      	beq.n	8009aa0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d123      	bne.n	8009b2e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009af4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009af6:	f7fc fd51 	bl	800659c <HAL_GetTick>
 8009afa:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009afc:	e00d      	b.n	8009b1a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009afe:	f7fc fd4d 	bl	800659c <HAL_GetTick>
 8009b02:	4602      	mov	r2, r0
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b0c:	d905      	bls.n	8009b1a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2203      	movs	r2, #3
 8009b16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <RTC_EnterInitMode+0x62>
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d1e7      	bne.n	8009afe <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009b44:	4b1a      	ldr	r3, [pc, #104]	; (8009bb0 <RTC_ExitInitMode+0x78>)
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	4a19      	ldr	r2, [pc, #100]	; (8009bb0 <RTC_ExitInitMode+0x78>)
 8009b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b4e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009b50:	4b17      	ldr	r3, [pc, #92]	; (8009bb0 <RTC_ExitInitMode+0x78>)
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10c      	bne.n	8009b76 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff ff8f 	bl	8009a80 <HAL_RTC_WaitForSynchro>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d01e      	beq.n	8009ba6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2203      	movs	r2, #3
 8009b6c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	73fb      	strb	r3, [r7, #15]
 8009b74:	e017      	b.n	8009ba6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b76:	4b0e      	ldr	r3, [pc, #56]	; (8009bb0 <RTC_ExitInitMode+0x78>)
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	4a0d      	ldr	r2, [pc, #52]	; (8009bb0 <RTC_ExitInitMode+0x78>)
 8009b7c:	f023 0320 	bic.w	r3, r3, #32
 8009b80:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff ff7c 	bl	8009a80 <HAL_RTC_WaitForSynchro>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d005      	beq.n	8009b9a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2203      	movs	r2, #3
 8009b92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b9a:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <RTC_ExitInitMode+0x78>)
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	4a04      	ldr	r2, [pc, #16]	; (8009bb0 <RTC_ExitInitMode+0x78>)
 8009ba0:	f043 0320 	orr.w	r3, r3, #32
 8009ba4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	40002800 	.word	0x40002800

08009bb4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009bc6:	e005      	b.n	8009bd4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009bce:	7afb      	ldrb	r3, [r7, #11]
 8009bd0:	3b0a      	subs	r3, #10
 8009bd2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009bd4:	7afb      	ldrb	r3, [r7, #11]
 8009bd6:	2b09      	cmp	r3, #9
 8009bd8:	d8f6      	bhi.n	8009bc8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	7afb      	ldrb	r3, [r7, #11]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	b2db      	uxtb	r3, r3
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009bfe:	79fb      	ldrb	r3, [r7, #7]
 8009c00:	091b      	lsrs	r3, r3, #4
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	0092      	lsls	r2, r2, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	f003 030f 	and.w	r3, r3, #15
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	4413      	add	r3, r2
 8009c1a:	b2db      	uxtb	r3, r3
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d101      	bne.n	8009c40 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e034      	b.n	8009caa <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	22ca      	movs	r2, #202	; 0xca
 8009c56:	625a      	str	r2, [r3, #36]	; 0x24
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2253      	movs	r2, #83	; 0x53
 8009c5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	699a      	ldr	r2, [r3, #24]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009c6e:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6999      	ldr	r1, [r3, #24]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699a      	ldr	r2, [r3, #24]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009c8e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	22ff      	movs	r2, #255	; 0xff
 8009c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b083      	sub	sp, #12
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009cbe:	bf00      	nop
 8009cc0:	370c      	adds	r7, #12
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b087      	sub	sp, #28
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	607a      	str	r2, [r7, #4]
  uint32_t __IO tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009cea:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	009a      	lsls	r2, r3, #2
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6013      	str	r3, [r2, #0]
}
 8009cfe:	bf00      	nop
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	4413      	add	r3, r2
 8009d20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009d28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	4413      	add	r3, r2
 8009d32:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	681b      	ldr	r3, [r3, #0]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e095      	b.n	8009e82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d108      	bne.n	8009d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d66:	d009      	beq.n	8009d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	61da      	str	r2, [r3, #28]
 8009d6e:	e005      	b.n	8009d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d106      	bne.n	8009d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7fa fefa 	bl	8004b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009db2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009dbc:	d902      	bls.n	8009dc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	e002      	b.n	8009dca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009dd2:	d007      	beq.n	8009de4 <HAL_SPI_Init+0xa0>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ddc:	d002      	beq.n	8009de4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f003 0302 	and.w	r3, r3, #2
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e1c:	431a      	orrs	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e26:	ea42 0103 	orr.w	r1, r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	0c1b      	lsrs	r3, r3, #16
 8009e40:	f003 0204 	and.w	r2, r3, #4
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	f003 0310 	and.w	r3, r3, #16
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e52:	f003 0308 	and.w	r3, r3, #8
 8009e56:	431a      	orrs	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009e60:	ea42 0103 	orr.w	r1, r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b088      	sub	sp, #32
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	60f8      	str	r0, [r7, #12]
 8009e92:	60b9      	str	r1, [r7, #8]
 8009e94:	603b      	str	r3, [r7, #0]
 8009e96:	4613      	mov	r3, r2
 8009e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d101      	bne.n	8009eac <HAL_SPI_Transmit+0x22>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e158      	b.n	800a15e <HAL_SPI_Transmit+0x2d4>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009eb4:	f7fc fb72 	bl	800659c <HAL_GetTick>
 8009eb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009eba:	88fb      	ldrh	r3, [r7, #6]
 8009ebc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d002      	beq.n	8009ed0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009eca:	2302      	movs	r3, #2
 8009ecc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009ece:	e13d      	b.n	800a14c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d002      	beq.n	8009edc <HAL_SPI_Transmit+0x52>
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009ee0:	e134      	b.n	800a14c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2203      	movs	r2, #3
 8009ee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	88fa      	ldrh	r2, [r7, #6]
 8009efa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	88fa      	ldrh	r2, [r7, #6]
 8009f00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f2c:	d10f      	bne.n	8009f4e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f58:	2b40      	cmp	r3, #64	; 0x40
 8009f5a:	d007      	beq.n	8009f6c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f74:	d94b      	bls.n	800a00e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d002      	beq.n	8009f84 <HAL_SPI_Transmit+0xfa>
 8009f7e:	8afb      	ldrh	r3, [r7, #22]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d13e      	bne.n	800a002 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	881a      	ldrh	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f94:	1c9a      	adds	r2, r3, #2
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009fa8:	e02b      	b.n	800a002 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d112      	bne.n	8009fde <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbc:	881a      	ldrh	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc8:	1c9a      	adds	r2, r3, #2
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fdc:	e011      	b.n	800a002 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fde:	f7fc fadd 	bl	800659c <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d803      	bhi.n	8009ff6 <HAL_SPI_Transmit+0x16c>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff4:	d102      	bne.n	8009ffc <HAL_SPI_Transmit+0x172>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d102      	bne.n	800a002 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a000:	e0a4      	b.n	800a14c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a006:	b29b      	uxth	r3, r3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1ce      	bne.n	8009faa <HAL_SPI_Transmit+0x120>
 800a00c:	e07c      	b.n	800a108 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <HAL_SPI_Transmit+0x192>
 800a016:	8afb      	ldrh	r3, [r7, #22]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d170      	bne.n	800a0fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a020:	b29b      	uxth	r3, r3
 800a022:	2b01      	cmp	r3, #1
 800a024:	d912      	bls.n	800a04c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02a:	881a      	ldrh	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a036:	1c9a      	adds	r2, r3, #2
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b02      	subs	r3, #2
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a04a:	e058      	b.n	800a0fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	7812      	ldrb	r2, [r2, #0]
 800a058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a072:	e044      	b.n	800a0fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 0302 	and.w	r3, r3, #2
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d12b      	bne.n	800a0da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a086:	b29b      	uxth	r3, r3
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d912      	bls.n	800a0b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a090:	881a      	ldrh	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09c:	1c9a      	adds	r2, r3, #2
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	3b02      	subs	r3, #2
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a0b0:	e025      	b.n	800a0fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	330c      	adds	r3, #12
 800a0bc:	7812      	ldrb	r2, [r2, #0]
 800a0be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a0d8:	e011      	b.n	800a0fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0da:	f7fc fa5f 	bl	800659c <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d803      	bhi.n	800a0f2 <HAL_SPI_Transmit+0x268>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f0:	d102      	bne.n	800a0f8 <HAL_SPI_Transmit+0x26e>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d102      	bne.n	800a0fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a0fc:	e026      	b.n	800a14c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a102:	b29b      	uxth	r3, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1b5      	bne.n	800a074 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 fb5b 	bl	800a7c8 <SPI_EndRxTxTransaction>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2220      	movs	r2, #32
 800a11c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10a      	bne.n	800a13c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a126:	2300      	movs	r3, #0
 800a128:	613b      	str	r3, [r7, #16]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	613b      	str	r3, [r7, #16]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	613b      	str	r3, [r7, #16]
 800a13a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	77fb      	strb	r3, [r7, #31]
 800a148:	e000      	b.n	800a14c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a14a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a15c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3720      	adds	r7, #32
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b08a      	sub	sp, #40	; 0x28
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	60f8      	str	r0, [r7, #12]
 800a16e:	60b9      	str	r1, [r7, #8]
 800a170:	607a      	str	r2, [r7, #4]
 800a172:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a174:	2301      	movs	r3, #1
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a184:	2b01      	cmp	r3, #1
 800a186:	d101      	bne.n	800a18c <HAL_SPI_TransmitReceive+0x26>
 800a188:	2302      	movs	r3, #2
 800a18a:	e1fb      	b.n	800a584 <HAL_SPI_TransmitReceive+0x41e>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a194:	f7fc fa02 	bl	800659c <HAL_GetTick>
 800a198:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a1a0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a1a8:	887b      	ldrh	r3, [r7, #2]
 800a1aa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a1ac:	887b      	ldrh	r3, [r7, #2]
 800a1ae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a1b0:	7efb      	ldrb	r3, [r7, #27]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d00e      	beq.n	800a1d4 <HAL_SPI_TransmitReceive+0x6e>
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1bc:	d106      	bne.n	800a1cc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d102      	bne.n	800a1cc <HAL_SPI_TransmitReceive+0x66>
 800a1c6:	7efb      	ldrb	r3, [r7, #27]
 800a1c8:	2b04      	cmp	r3, #4
 800a1ca:	d003      	beq.n	800a1d4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a1d2:	e1cd      	b.n	800a570 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d005      	beq.n	800a1e6 <HAL_SPI_TransmitReceive+0x80>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <HAL_SPI_TransmitReceive+0x80>
 800a1e0:	887b      	ldrh	r3, [r7, #2]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d103      	bne.n	800a1ee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a1ec:	e1c0      	b.n	800a570 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	d003      	beq.n	800a202 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2205      	movs	r2, #5
 800a1fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	887a      	ldrh	r2, [r7, #2]
 800a212:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	887a      	ldrh	r2, [r7, #2]
 800a21a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	887a      	ldrh	r2, [r7, #2]
 800a228:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	887a      	ldrh	r2, [r7, #2]
 800a22e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a244:	d802      	bhi.n	800a24c <HAL_SPI_TransmitReceive+0xe6>
 800a246:	8a3b      	ldrh	r3, [r7, #16]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d908      	bls.n	800a25e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a25a:	605a      	str	r2, [r3, #4]
 800a25c:	e007      	b.n	800a26e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a26c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a278:	2b40      	cmp	r3, #64	; 0x40
 800a27a:	d007      	beq.n	800a28c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a28a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a294:	d97c      	bls.n	800a390 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d002      	beq.n	800a2a4 <HAL_SPI_TransmitReceive+0x13e>
 800a29e:	8a7b      	ldrh	r3, [r7, #18]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d169      	bne.n	800a378 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a8:	881a      	ldrh	r2, [r3, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b4:	1c9a      	adds	r2, r3, #2
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2c8:	e056      	b.n	800a378 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d11b      	bne.n	800a310 <HAL_SPI_TransmitReceive+0x1aa>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d016      	beq.n	800a310 <HAL_SPI_TransmitReceive+0x1aa>
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d113      	bne.n	800a310 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ec:	881a      	ldrh	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f8:	1c9a      	adds	r2, r3, #2
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a302:	b29b      	uxth	r3, r3
 800a304:	3b01      	subs	r3, #1
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a30c:	2300      	movs	r3, #0
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d11c      	bne.n	800a358 <HAL_SPI_TransmitReceive+0x1f2>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a324:	b29b      	uxth	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d016      	beq.n	800a358 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68da      	ldr	r2, [r3, #12]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a334:	b292      	uxth	r2, r2
 800a336:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33c:	1c9a      	adds	r2, r3, #2
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a348:	b29b      	uxth	r3, r3
 800a34a:	3b01      	subs	r3, #1
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a354:	2301      	movs	r3, #1
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a358:	f7fc f920 	bl	800659c <HAL_GetTick>
 800a35c:	4602      	mov	r2, r0
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a364:	429a      	cmp	r2, r3
 800a366:	d807      	bhi.n	800a378 <HAL_SPI_TransmitReceive+0x212>
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a36e:	d003      	beq.n	800a378 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a370:	2303      	movs	r3, #3
 800a372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a376:	e0fb      	b.n	800a570 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1a3      	bne.n	800a2ca <HAL_SPI_TransmitReceive+0x164>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a388:	b29b      	uxth	r3, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d19d      	bne.n	800a2ca <HAL_SPI_TransmitReceive+0x164>
 800a38e:	e0df      	b.n	800a550 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <HAL_SPI_TransmitReceive+0x23a>
 800a398:	8a7b      	ldrh	r3, [r7, #18]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	f040 80cb 	bne.w	800a536 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d912      	bls.n	800a3d0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ae:	881a      	ldrh	r2, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ba:	1c9a      	adds	r2, r3, #2
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	3b02      	subs	r3, #2
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a3ce:	e0b2      	b.n	800a536 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	330c      	adds	r3, #12
 800a3da:	7812      	ldrb	r2, [r2, #0]
 800a3dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3f6:	e09e      	b.n	800a536 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	2b02      	cmp	r3, #2
 800a404:	d134      	bne.n	800a470 <HAL_SPI_TransmitReceive+0x30a>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d02f      	beq.n	800a470 <HAL_SPI_TransmitReceive+0x30a>
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	2b01      	cmp	r3, #1
 800a414:	d12c      	bne.n	800a470 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d912      	bls.n	800a446 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a424:	881a      	ldrh	r2, [r3, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a430:	1c9a      	adds	r2, r3, #2
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3b02      	subs	r3, #2
 800a43e:	b29a      	uxth	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a444:	e012      	b.n	800a46c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	330c      	adds	r3, #12
 800a450:	7812      	ldrb	r2, [r2, #0]
 800a452:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a458:	1c5a      	adds	r2, r3, #1
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a462:	b29b      	uxth	r3, r3
 800a464:	3b01      	subs	r3, #1
 800a466:	b29a      	uxth	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d148      	bne.n	800a510 <HAL_SPI_TransmitReceive+0x3aa>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d042      	beq.n	800a510 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a490:	b29b      	uxth	r3, r3
 800a492:	2b01      	cmp	r3, #1
 800a494:	d923      	bls.n	800a4de <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a0:	b292      	uxth	r2, r2
 800a4a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a8:	1c9a      	adds	r2, r3, #2
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	3b02      	subs	r3, #2
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d81f      	bhi.n	800a50c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a4da:	605a      	str	r2, [r3, #4]
 800a4dc:	e016      	b.n	800a50c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f103 020c 	add.w	r2, r3, #12
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ea:	7812      	ldrb	r2, [r2, #0]
 800a4ec:	b2d2      	uxtb	r2, r2
 800a4ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a500:	b29b      	uxth	r3, r3
 800a502:	3b01      	subs	r3, #1
 800a504:	b29a      	uxth	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a50c:	2301      	movs	r3, #1
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a510:	f7fc f844 	bl	800659c <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d803      	bhi.n	800a528 <HAL_SPI_TransmitReceive+0x3c2>
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a526:	d102      	bne.n	800a52e <HAL_SPI_TransmitReceive+0x3c8>
 800a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d103      	bne.n	800a536 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a534:	e01c      	b.n	800a570 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f47f af5b 	bne.w	800a3f8 <HAL_SPI_TransmitReceive+0x292>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a548:	b29b      	uxth	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f47f af54 	bne.w	800a3f8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a550:	69fa      	ldr	r2, [r7, #28]
 800a552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 f937 	bl	800a7c8 <SPI_EndRxTxTransaction>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d006      	beq.n	800a56e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2220      	movs	r2, #32
 800a56a:	661a      	str	r2, [r3, #96]	; 0x60
 800a56c:	e000      	b.n	800a570 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a56e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a584:	4618      	mov	r0, r3
 800a586:	3728      	adds	r7, #40	; 0x28
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b088      	sub	sp, #32
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	603b      	str	r3, [r7, #0]
 800a598:	4613      	mov	r3, r2
 800a59a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a59c:	f7fb fffe 	bl	800659c <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a4:	1a9b      	subs	r3, r3, r2
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a5ac:	f7fb fff6 	bl	800659c <HAL_GetTick>
 800a5b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a5b2:	4b39      	ldr	r3, [pc, #228]	; (800a698 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	015b      	lsls	r3, r3, #5
 800a5b8:	0d1b      	lsrs	r3, r3, #20
 800a5ba:	69fa      	ldr	r2, [r7, #28]
 800a5bc:	fb02 f303 	mul.w	r3, r2, r3
 800a5c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5c2:	e054      	b.n	800a66e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d050      	beq.n	800a66e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5cc:	f7fb ffe6 	bl	800659c <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	69fa      	ldr	r2, [r7, #28]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d902      	bls.n	800a5e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d13d      	bne.n	800a65e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5fa:	d111      	bne.n	800a620 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a604:	d004      	beq.n	800a610 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a60e:	d107      	bne.n	800a620 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a61e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a628:	d10f      	bne.n	800a64a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e017      	b.n	800a68e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	4013      	ands	r3, r2
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	bf0c      	ite	eq
 800a67e:	2301      	moveq	r3, #1
 800a680:	2300      	movne	r3, #0
 800a682:	b2db      	uxtb	r3, r3
 800a684:	461a      	mov	r2, r3
 800a686:	79fb      	ldrb	r3, [r7, #7]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d19b      	bne.n	800a5c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3720      	adds	r7, #32
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20000000 	.word	0x20000000

0800a69c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08a      	sub	sp, #40	; 0x28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a6ae:	f7fb ff75 	bl	800659c <HAL_GetTick>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	1a9b      	subs	r3, r3, r2
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a6be:	f7fb ff6d 	bl	800659c <HAL_GetTick>
 800a6c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	330c      	adds	r3, #12
 800a6ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a6cc:	4b3d      	ldr	r3, [pc, #244]	; (800a7c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	00da      	lsls	r2, r3, #3
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	0d1b      	lsrs	r3, r3, #20
 800a6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6de:	fb02 f303 	mul.w	r3, r2, r3
 800a6e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a6e4:	e060      	b.n	800a7a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a6ec:	d107      	bne.n	800a6fe <SPI_WaitFifoStateUntilTimeout+0x62>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d104      	bne.n	800a6fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a704:	d050      	beq.n	800a7a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a706:	f7fb ff49 	bl	800659c <HAL_GetTick>
 800a70a:	4602      	mov	r2, r0
 800a70c:	6a3b      	ldr	r3, [r7, #32]
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a712:	429a      	cmp	r2, r3
 800a714:	d902      	bls.n	800a71c <SPI_WaitFifoStateUntilTimeout+0x80>
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d13d      	bne.n	800a798 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a72a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a734:	d111      	bne.n	800a75a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a73e:	d004      	beq.n	800a74a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a748:	d107      	bne.n	800a75a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a758:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a762:	d10f      	bne.n	800a784 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a782:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	e010      	b.n	800a7ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689a      	ldr	r2, [r3, #8]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d196      	bne.n	800a6e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3728      	adds	r7, #40	; 0x28
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000000 	.word	0x20000000

0800a7c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af02      	add	r7, sp, #8
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f7ff ff5b 	bl	800a69c <SPI_WaitFifoStateUntilTimeout>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d007      	beq.n	800a7fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7f0:	f043 0220 	orr.w	r2, r3, #32
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e027      	b.n	800a84c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	2200      	movs	r2, #0
 800a804:	2180      	movs	r1, #128	; 0x80
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7ff fec0 	bl	800a58c <SPI_WaitFlagStateUntilTimeout>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d007      	beq.n	800a822 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a816:	f043 0220 	orr.w	r2, r3, #32
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a81e:	2303      	movs	r3, #3
 800a820:	e014      	b.n	800a84c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2200      	movs	r2, #0
 800a82a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f7ff ff34 	bl	800a69c <SPI_WaitFifoStateUntilTimeout>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d007      	beq.n	800a84a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a83e:	f043 0220 	orr.w	r2, r3, #32
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e000      	b.n	800a84c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e040      	b.n	800a8e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d106      	bne.n	800a87c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7fa f862 	bl	8004940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2224      	movs	r2, #36	; 0x24
 800a880:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f022 0201 	bic.w	r2, r2, #1
 800a890:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fe8a 	bl	800b5ac <UART_SetConfig>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d101      	bne.n	800a8a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e022      	b.n	800a8e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d002      	beq.n	800a8b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 f8d8 	bl	800ba60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689a      	ldr	r2, [r3, #8]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f042 0201 	orr.w	r2, r2, #1
 800a8de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f001 f95f 	bl	800bba4 <UART_CheckIdleState>
 800a8e6:	4603      	mov	r3, r0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08a      	sub	sp, #40	; 0x28
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	603b      	str	r3, [r7, #0]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a904:	2b20      	cmp	r3, #32
 800a906:	f040 8082 	bne.w	800aa0e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <HAL_UART_Transmit+0x26>
 800a910:	88fb      	ldrh	r3, [r7, #6]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e07a      	b.n	800aa10 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_UART_Transmit+0x38>
 800a924:	2302      	movs	r3, #2
 800a926:	e073      	b.n	800aa10 <HAL_UART_Transmit+0x120>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2221      	movs	r2, #33	; 0x21
 800a93c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a93e:	f7fb fe2d 	bl	800659c <HAL_GetTick>
 800a942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	88fa      	ldrh	r2, [r7, #6]
 800a948:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	88fa      	ldrh	r2, [r7, #6]
 800a950:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95c:	d108      	bne.n	800a970 <HAL_UART_Transmit+0x80>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d104      	bne.n	800a970 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a966:	2300      	movs	r3, #0
 800a968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	61bb      	str	r3, [r7, #24]
 800a96e:	e003      	b.n	800a978 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a974:	2300      	movs	r3, #0
 800a976:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a980:	e02d      	b.n	800a9de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2200      	movs	r2, #0
 800a98a:	2180      	movs	r1, #128	; 0x80
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f001 f952 	bl	800bc36 <UART_WaitOnFlagUntilTimeout>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d001      	beq.n	800a99c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e039      	b.n	800aa10 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10b      	bne.n	800a9ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	881a      	ldrh	r2, [r3, #0]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9ae:	b292      	uxth	r2, r2
 800a9b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	61bb      	str	r3, [r7, #24]
 800a9b8:	e008      	b.n	800a9cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	781a      	ldrb	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	b292      	uxth	r2, r2
 800a9c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1cb      	bne.n	800a982 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2140      	movs	r1, #64	; 0x40
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f001 f91e 	bl	800bc36 <UART_WaitOnFlagUntilTimeout>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e005      	b.n	800aa10 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2220      	movs	r2, #32
 800aa08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e000      	b.n	800aa10 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800aa0e:	2302      	movs	r3, #2
  }
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3720      	adds	r7, #32
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08a      	sub	sp, #40	; 0x28
 800aa1c:	af02      	add	r7, sp, #8
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	603b      	str	r3, [r7, #0]
 800aa24:	4613      	mov	r3, r2
 800aa26:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa2c:	2b20      	cmp	r3, #32
 800aa2e:	f040 80bf 	bne.w	800abb0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <HAL_UART_Receive+0x26>
 800aa38:	88fb      	ldrh	r3, [r7, #6]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e0b7      	b.n	800abb2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d101      	bne.n	800aa50 <HAL_UART_Receive+0x38>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e0b0      	b.n	800abb2 <HAL_UART_Receive+0x19a>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2222      	movs	r2, #34	; 0x22
 800aa64:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa6c:	f7fb fd96 	bl	800659c <HAL_GetTick>
 800aa70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	88fa      	ldrh	r2, [r7, #6]
 800aa76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	88fa      	ldrh	r2, [r7, #6]
 800aa7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa8a:	d10e      	bne.n	800aaaa <HAL_UART_Receive+0x92>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d105      	bne.n	800aaa0 <HAL_UART_Receive+0x88>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f240 12ff 	movw	r2, #511	; 0x1ff
 800aa9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa9e:	e02d      	b.n	800aafc <HAL_UART_Receive+0xe4>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	22ff      	movs	r2, #255	; 0xff
 800aaa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aaa8:	e028      	b.n	800aafc <HAL_UART_Receive+0xe4>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10d      	bne.n	800aace <HAL_UART_Receive+0xb6>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d104      	bne.n	800aac4 <HAL_UART_Receive+0xac>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	22ff      	movs	r2, #255	; 0xff
 800aabe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aac2:	e01b      	b.n	800aafc <HAL_UART_Receive+0xe4>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	227f      	movs	r2, #127	; 0x7f
 800aac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aacc:	e016      	b.n	800aafc <HAL_UART_Receive+0xe4>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aad6:	d10d      	bne.n	800aaf4 <HAL_UART_Receive+0xdc>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d104      	bne.n	800aaea <HAL_UART_Receive+0xd2>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	227f      	movs	r2, #127	; 0x7f
 800aae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aae8:	e008      	b.n	800aafc <HAL_UART_Receive+0xe4>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	223f      	movs	r2, #63	; 0x3f
 800aaee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aaf2:	e003      	b.n	800aafc <HAL_UART_Receive+0xe4>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab02:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab0c:	d108      	bne.n	800ab20 <HAL_UART_Receive+0x108>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d104      	bne.n	800ab20 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	61bb      	str	r3, [r7, #24]
 800ab1e:	e003      	b.n	800ab28 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ab30:	e033      	b.n	800ab9a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2120      	movs	r1, #32
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f001 f87a 	bl	800bc36 <UART_WaitOnFlagUntilTimeout>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e032      	b.n	800abb2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10c      	bne.n	800ab6c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	8a7b      	ldrh	r3, [r7, #18]
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	3302      	adds	r3, #2
 800ab68:	61bb      	str	r3, [r7, #24]
 800ab6a:	e00d      	b.n	800ab88 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	8a7b      	ldrh	r3, [r7, #18]
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	3301      	adds	r3, #1
 800ab86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	3b01      	subs	r3, #1
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1c5      	bne.n	800ab32 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2220      	movs	r2, #32
 800abaa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	e000      	b.n	800abb2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800abb0:	2302      	movs	r3, #2
  }
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3720      	adds	r7, #32
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
	...

0800abbc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b08b      	sub	sp, #44	; 0x2c
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4613      	mov	r3, r2
 800abc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abce:	2b20      	cmp	r3, #32
 800abd0:	d156      	bne.n	800ac80 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <HAL_UART_Transmit_IT+0x22>
 800abd8:	88fb      	ldrh	r3, [r7, #6]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e04f      	b.n	800ac82 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d101      	bne.n	800abf0 <HAL_UART_Transmit_IT+0x34>
 800abec:	2302      	movs	r3, #2
 800abee:	e048      	b.n	800ac82 <HAL_UART_Transmit_IT+0xc6>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	88fa      	ldrh	r2, [r7, #6]
 800ac02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	88fa      	ldrh	r2, [r7, #6]
 800ac0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2221      	movs	r2, #33	; 0x21
 800ac20:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac2a:	d107      	bne.n	800ac3c <HAL_UART_Transmit_IT+0x80>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d103      	bne.n	800ac3c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	4a16      	ldr	r2, [pc, #88]	; (800ac90 <HAL_UART_Transmit_IT+0xd4>)
 800ac38:	669a      	str	r2, [r3, #104]	; 0x68
 800ac3a:	e002      	b.n	800ac42 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	4a15      	ldr	r2, [pc, #84]	; (800ac94 <HAL_UART_Transmit_IT+0xd8>)
 800ac40:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	e853 3f00 	ldrex	r3, [r3]
 800ac56:	613b      	str	r3, [r7, #16]
   return(result);
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac5e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	461a      	mov	r2, r3
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	623b      	str	r3, [r7, #32]
 800ac6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6c:	69f9      	ldr	r1, [r7, #28]
 800ac6e:	6a3a      	ldr	r2, [r7, #32]
 800ac70:	e841 2300 	strex	r3, r2, [r1]
 800ac74:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1e6      	bne.n	800ac4a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e000      	b.n	800ac82 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800ac80:	2302      	movs	r3, #2
  }
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	372c      	adds	r7, #44	; 0x2c
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	0800c1e7 	.word	0x0800c1e7
 800ac94:	0800c12f 	.word	0x0800c12f

0800ac98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08a      	sub	sp, #40	; 0x28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	4613      	mov	r3, r2
 800aca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acaa:	2b20      	cmp	r3, #32
 800acac:	d142      	bne.n	800ad34 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <HAL_UART_Receive_IT+0x22>
 800acb4:	88fb      	ldrh	r3, [r7, #6]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e03b      	b.n	800ad36 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d101      	bne.n	800accc <HAL_UART_Receive_IT+0x34>
 800acc8:	2302      	movs	r3, #2
 800acca:	e034      	b.n	800ad36 <HAL_UART_Receive_IT+0x9e>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a18      	ldr	r2, [pc, #96]	; (800ad40 <HAL_UART_Receive_IT+0xa8>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d01f      	beq.n	800ad24 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d018      	beq.n	800ad24 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	e853 3f00 	ldrex	r3, [r3]
 800acfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad06:	627b      	str	r3, [r7, #36]	; 0x24
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	623b      	str	r3, [r7, #32]
 800ad12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad14:	69f9      	ldr	r1, [r7, #28]
 800ad16:	6a3a      	ldr	r2, [r7, #32]
 800ad18:	e841 2300 	strex	r3, r2, [r1]
 800ad1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1e6      	bne.n	800acf2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ad24:	88fb      	ldrh	r3, [r7, #6]
 800ad26:	461a      	mov	r2, r3
 800ad28:	68b9      	ldr	r1, [r7, #8]
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f001 f848 	bl	800bdc0 <UART_Start_Receive_IT>
 800ad30:	4603      	mov	r3, r0
 800ad32:	e000      	b.n	800ad36 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800ad34:	2302      	movs	r3, #2
  }
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3728      	adds	r7, #40	; 0x28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	40008000 	.word	0x40008000

0800ad44 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b0a2      	sub	sp, #136	; 0x88
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad5a:	e853 3f00 	ldrex	r3, [r3]
 800ad5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad62:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800ad66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad74:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad76:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad7c:	e841 2300 	strex	r3, r2, [r1]
 800ad80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1e4      	bne.n	800ad52 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	3308      	adds	r3, #8
 800ad8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad92:	e853 3f00 	ldrex	r3, [r3]
 800ad96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad9a:	f023 0301 	bic.w	r3, r3, #1
 800ad9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3308      	adds	r3, #8
 800ada6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ada8:	65ba      	str	r2, [r7, #88]	; 0x58
 800adaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800adae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800adb0:	e841 2300 	strex	r3, r2, [r1]
 800adb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800adb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e5      	bne.n	800ad88 <HAL_UART_Abort_IT+0x44>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d118      	bne.n	800adf6 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	e853 3f00 	ldrex	r3, [r3]
 800add0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800add2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add4:	f023 0310 	bic.w	r3, r3, #16
 800add8:	67bb      	str	r3, [r7, #120]	; 0x78
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ade2:	647b      	str	r3, [r7, #68]	; 0x44
 800ade4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ade8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adea:	e841 2300 	strex	r3, r2, [r1]
 800adee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1e6      	bne.n	800adc4 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00f      	beq.n	800ae1e <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae08:	2b80      	cmp	r3, #128	; 0x80
 800ae0a:	d104      	bne.n	800ae16 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae10:	4a5e      	ldr	r2, [pc, #376]	; (800af8c <HAL_UART_Abort_IT+0x248>)
 800ae12:	639a      	str	r2, [r3, #56]	; 0x38
 800ae14:	e003      	b.n	800ae1e <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00f      	beq.n	800ae46 <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae30:	2b40      	cmp	r3, #64	; 0x40
 800ae32:	d104      	bne.n	800ae3e <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae38:	4a55      	ldr	r2, [pc, #340]	; (800af90 <HAL_UART_Abort_IT+0x24c>)
 800ae3a:	639a      	str	r2, [r3, #56]	; 0x38
 800ae3c:	e003      	b.n	800ae46 <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae42:	2200      	movs	r2, #0
 800ae44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae50:	2b80      	cmp	r3, #128	; 0x80
 800ae52:	d12d      	bne.n	800aeb0 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3308      	adds	r3, #8
 800ae5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	623b      	str	r3, [r7, #32]
   return(result);
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae6a:	677b      	str	r3, [r7, #116]	; 0x74
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3308      	adds	r3, #8
 800ae72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ae74:	633a      	str	r2, [r7, #48]	; 0x30
 800ae76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae7c:	e841 2300 	strex	r3, r2, [r1]
 800ae80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1e5      	bne.n	800ae54 <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00f      	beq.n	800aeb0 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fc fcc6 	bl	8007826 <HAL_DMA_Abort_IT>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d004      	beq.n	800aeaa <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aea4:	2200      	movs	r2, #0
 800aea6:	639a      	str	r2, [r3, #56]	; 0x38
 800aea8:	e002      	b.n	800aeb0 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeba:	2b40      	cmp	r3, #64	; 0x40
 800aebc:	d130      	bne.n	800af20 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3308      	adds	r3, #8
 800aec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	60fb      	str	r3, [r7, #12]
   return(result);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aed4:	673b      	str	r3, [r7, #112]	; 0x70
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3308      	adds	r3, #8
 800aedc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aede:	61fa      	str	r2, [r7, #28]
 800aee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee2:	69b9      	ldr	r1, [r7, #24]
 800aee4:	69fa      	ldr	r2, [r7, #28]
 800aee6:	e841 2300 	strex	r3, r2, [r1]
 800aeea:	617b      	str	r3, [r7, #20]
   return(result);
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e5      	bne.n	800aebe <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d012      	beq.n	800af20 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fc fc91 	bl	8007826 <HAL_DMA_Abort_IT>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d007      	beq.n	800af1a <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af0e:	2200      	movs	r2, #0
 800af10:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 800af12:	2301      	movs	r3, #1
 800af14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800af18:	e002      	b.n	800af20 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 800af1a:	2300      	movs	r3, #0
 800af1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800af20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af24:	2b01      	cmp	r3, #1
 800af26:	d12b      	bne.n	800af80 <HAL_UART_Abort_IT+0x23c>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	665a      	str	r2, [r3, #100]	; 0x64
    huart->TxISR = NULL;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	669a      	str	r2, [r3, #104]	; 0x68

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	220f      	movs	r2, #15
 800af52:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	8b1b      	ldrh	r3, [r3, #24]
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f042 0208 	orr.w	r2, r2, #8
 800af64:	b292      	uxth	r2, r2
 800af66:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2220      	movs	r2, #32
 800af6c:	679a      	str	r2, [r3, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2220      	movs	r2, #32
 800af72:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fb00 	bl	800b580 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3788      	adds	r7, #136	; 0x88
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	0800c047 	.word	0x0800c047
 800af90:	0800c0b1 	.word	0x0800c0b1

0800af94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b0ba      	sub	sp, #232	; 0xe8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800afba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800afbe:	f640 030f 	movw	r3, #2063	; 0x80f
 800afc2:	4013      	ands	r3, r2
 800afc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800afc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d115      	bne.n	800affc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800afd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afd4:	f003 0320 	and.w	r3, r3, #32
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00f      	beq.n	800affc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800afdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afe0:	f003 0320 	and.w	r3, r3, #32
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d009      	beq.n	800affc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afec:	2b00      	cmp	r3, #0
 800afee:	f000 82a6 	beq.w	800b53e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	4798      	blx	r3
      }
      return;
 800affa:	e2a0      	b.n	800b53e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800affc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 8117 	beq.w	800b234 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d106      	bne.n	800b020 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b012:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b016:	4b85      	ldr	r3, [pc, #532]	; (800b22c <HAL_UART_IRQHandler+0x298>)
 800b018:	4013      	ands	r3, r2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 810a 	beq.w	800b234 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d011      	beq.n	800b050 <HAL_UART_IRQHandler+0xbc>
 800b02c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00b      	beq.n	800b050 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2201      	movs	r2, #1
 800b03e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b046:	f043 0201 	orr.w	r2, r3, #1
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b054:	f003 0302 	and.w	r3, r3, #2
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d011      	beq.n	800b080 <HAL_UART_IRQHandler+0xec>
 800b05c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00b      	beq.n	800b080 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2202      	movs	r2, #2
 800b06e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b076:	f043 0204 	orr.w	r2, r3, #4
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b084:	f003 0304 	and.w	r3, r3, #4
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d011      	beq.n	800b0b0 <HAL_UART_IRQHandler+0x11c>
 800b08c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00b      	beq.n	800b0b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2204      	movs	r2, #4
 800b09e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0a6:	f043 0202 	orr.w	r2, r3, #2
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b4:	f003 0308 	and.w	r3, r3, #8
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d017      	beq.n	800b0ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0c0:	f003 0320 	and.w	r3, r3, #32
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d105      	bne.n	800b0d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b0c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00b      	beq.n	800b0ec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2208      	movs	r2, #8
 800b0da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0e2:	f043 0208 	orr.w	r2, r3, #8
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d012      	beq.n	800b11e <HAL_UART_IRQHandler+0x18a>
 800b0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00c      	beq.n	800b11e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b10c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b114:	f043 0220 	orr.w	r2, r3, #32
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b124:	2b00      	cmp	r3, #0
 800b126:	f000 820c 	beq.w	800b542 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12e:	f003 0320 	and.w	r3, r3, #32
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00d      	beq.n	800b152 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b13a:	f003 0320 	and.w	r3, r3, #32
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d007      	beq.n	800b152 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b158:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b166:	2b40      	cmp	r3, #64	; 0x40
 800b168:	d005      	beq.n	800b176 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b16a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b16e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b172:	2b00      	cmp	r3, #0
 800b174:	d04f      	beq.n	800b216 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 feec 	bl	800bf54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b186:	2b40      	cmp	r3, #64	; 0x40
 800b188:	d141      	bne.n	800b20e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3308      	adds	r3, #8
 800b190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b198:	e853 3f00 	ldrex	r3, [r3]
 800b19c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b1a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b1b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b1ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b1c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b1ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1d9      	bne.n	800b18a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d013      	beq.n	800b206 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e2:	4a13      	ldr	r2, [pc, #76]	; (800b230 <HAL_UART_IRQHandler+0x29c>)
 800b1e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fc fb1b 	bl	8007826 <HAL_DMA_Abort_IT>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d017      	beq.n	800b226 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b204:	e00f      	b.n	800b226 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f9b0 	bl	800b56c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b20c:	e00b      	b.n	800b226 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f9ac 	bl	800b56c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b214:	e007      	b.n	800b226 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f9a8 	bl	800b56c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b224:	e18d      	b.n	800b542 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b226:	bf00      	nop
    return;
 800b228:	e18b      	b.n	800b542 <HAL_UART_IRQHandler+0x5ae>
 800b22a:	bf00      	nop
 800b22c:	04000120 	.word	0x04000120
 800b230:	0800c01b 	.word	0x0800c01b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b238:	2b01      	cmp	r3, #1
 800b23a:	f040 8146 	bne.w	800b4ca <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b242:	f003 0310 	and.w	r3, r3, #16
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 813f 	beq.w	800b4ca <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b250:	f003 0310 	and.w	r3, r3, #16
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 8138 	beq.w	800b4ca <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2210      	movs	r2, #16
 800b260:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26c:	2b40      	cmp	r3, #64	; 0x40
 800b26e:	f040 80b4 	bne.w	800b3da <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b27e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 815f 	beq.w	800b546 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b28e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b292:	429a      	cmp	r2, r3
 800b294:	f080 8157 	bcs.w	800b546 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b29e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0320 	and.w	r3, r3, #32
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f040 8085 	bne.w	800b3be <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2c0:	e853 3f00 	ldrex	r3, [r3]
 800b2c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b2c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b2e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b2ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b2ee:	e841 2300 	strex	r3, r2, [r1]
 800b2f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b2f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1da      	bne.n	800b2b4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3308      	adds	r3, #8
 800b304:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b30e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b310:	f023 0301 	bic.w	r3, r3, #1
 800b314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3308      	adds	r3, #8
 800b31e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b322:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b326:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b328:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b32a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b32e:	e841 2300 	strex	r3, r2, [r1]
 800b332:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1e1      	bne.n	800b2fe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3308      	adds	r3, #8
 800b340:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b34a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b34c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3308      	adds	r3, #8
 800b35a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b35e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b360:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b362:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b364:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b366:	e841 2300 	strex	r3, r2, [r1]
 800b36a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b36c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1e3      	bne.n	800b33a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2220      	movs	r2, #32
 800b376:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b386:	e853 3f00 	ldrex	r3, [r3]
 800b38a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b38e:	f023 0310 	bic.w	r3, r3, #16
 800b392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3a8:	e841 2300 	strex	r3, r2, [r1]
 800b3ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1e4      	bne.n	800b37e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fc f9f6 	bl	80077aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f8de 	bl	800b594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3d8:	e0b5      	b.n	800b546 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 80a7 	beq.w	800b54a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b3fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 80a2 	beq.w	800b54a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	e853 3f00 	ldrex	r3, [r3]
 800b412:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b41a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	461a      	mov	r2, r3
 800b424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b428:	647b      	str	r3, [r7, #68]	; 0x44
 800b42a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b42e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b430:	e841 2300 	strex	r3, r2, [r1]
 800b434:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1e4      	bne.n	800b406 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	3308      	adds	r3, #8
 800b442:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b446:	e853 3f00 	ldrex	r3, [r3]
 800b44a:	623b      	str	r3, [r7, #32]
   return(result);
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	f023 0301 	bic.w	r3, r3, #1
 800b452:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3308      	adds	r3, #8
 800b45c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b460:	633a      	str	r2, [r7, #48]	; 0x30
 800b462:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b468:	e841 2300 	strex	r3, r2, [r1]
 800b46c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1e3      	bne.n	800b43c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2220      	movs	r2, #32
 800b478:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	e853 3f00 	ldrex	r3, [r3]
 800b492:	60fb      	str	r3, [r7, #12]
   return(result);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f023 0310 	bic.w	r3, r3, #16
 800b49a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b4a8:	61fb      	str	r3, [r7, #28]
 800b4aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ac:	69b9      	ldr	r1, [r7, #24]
 800b4ae:	69fa      	ldr	r2, [r7, #28]
 800b4b0:	e841 2300 	strex	r3, r2, [r1]
 800b4b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1e4      	bne.n	800b486 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f866 	bl	800b594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4c8:	e03f      	b.n	800b54a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00e      	beq.n	800b4f4 <HAL_UART_IRQHandler+0x560>
 800b4d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d008      	beq.n	800b4f4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b4ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f001 f864 	bl	800c5ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4f2:	e02d      	b.n	800b550 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00e      	beq.n	800b51e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d008      	beq.n	800b51e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b510:	2b00      	cmp	r3, #0
 800b512:	d01c      	beq.n	800b54e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	4798      	blx	r3
    }
    return;
 800b51c:	e017      	b.n	800b54e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b526:	2b00      	cmp	r3, #0
 800b528:	d012      	beq.n	800b550 <HAL_UART_IRQHandler+0x5bc>
 800b52a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00c      	beq.n	800b550 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 feb5 	bl	800c2a6 <UART_EndTransmit_IT>
    return;
 800b53c:	e008      	b.n	800b550 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b53e:	bf00      	nop
 800b540:	e006      	b.n	800b550 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b542:	bf00      	nop
 800b544:	e004      	b.n	800b550 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b546:	bf00      	nop
 800b548:	e002      	b.n	800b550 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b54a:	bf00      	nop
 800b54c:	e000      	b.n	800b550 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b54e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b550:	37e8      	adds	r7, #232	; 0xe8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop

0800b558 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b574:	bf00      	nop
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5b0:	b08a      	sub	sp, #40	; 0x28
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	689a      	ldr	r2, [r3, #8]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	695b      	ldr	r3, [r3, #20]
 800b5ca:	431a      	orrs	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	4b9e      	ldr	r3, [pc, #632]	; (800b854 <UART_SetConfig+0x2a8>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	6812      	ldr	r2, [r2, #0]
 800b5e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	430a      	orrs	r2, r1
 800b5fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	699b      	ldr	r3, [r3, #24]
 800b602:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a93      	ldr	r2, [pc, #588]	; (800b858 <UART_SetConfig+0x2ac>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d004      	beq.n	800b618 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6a1b      	ldr	r3, [r3, #32]
 800b612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b614:	4313      	orrs	r3, r2
 800b616:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b628:	430a      	orrs	r2, r1
 800b62a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a8a      	ldr	r2, [pc, #552]	; (800b85c <UART_SetConfig+0x2b0>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d126      	bne.n	800b684 <UART_SetConfig+0xd8>
 800b636:	4b8a      	ldr	r3, [pc, #552]	; (800b860 <UART_SetConfig+0x2b4>)
 800b638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b63c:	f003 0303 	and.w	r3, r3, #3
 800b640:	2b03      	cmp	r3, #3
 800b642:	d81b      	bhi.n	800b67c <UART_SetConfig+0xd0>
 800b644:	a201      	add	r2, pc, #4	; (adr r2, 800b64c <UART_SetConfig+0xa0>)
 800b646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64a:	bf00      	nop
 800b64c:	0800b65d 	.word	0x0800b65d
 800b650:	0800b66d 	.word	0x0800b66d
 800b654:	0800b665 	.word	0x0800b665
 800b658:	0800b675 	.word	0x0800b675
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b662:	e0ab      	b.n	800b7bc <UART_SetConfig+0x210>
 800b664:	2302      	movs	r3, #2
 800b666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b66a:	e0a7      	b.n	800b7bc <UART_SetConfig+0x210>
 800b66c:	2304      	movs	r3, #4
 800b66e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b672:	e0a3      	b.n	800b7bc <UART_SetConfig+0x210>
 800b674:	2308      	movs	r3, #8
 800b676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b67a:	e09f      	b.n	800b7bc <UART_SetConfig+0x210>
 800b67c:	2310      	movs	r3, #16
 800b67e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b682:	e09b      	b.n	800b7bc <UART_SetConfig+0x210>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a76      	ldr	r2, [pc, #472]	; (800b864 <UART_SetConfig+0x2b8>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d138      	bne.n	800b700 <UART_SetConfig+0x154>
 800b68e:	4b74      	ldr	r3, [pc, #464]	; (800b860 <UART_SetConfig+0x2b4>)
 800b690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b694:	f003 030c 	and.w	r3, r3, #12
 800b698:	2b0c      	cmp	r3, #12
 800b69a:	d82d      	bhi.n	800b6f8 <UART_SetConfig+0x14c>
 800b69c:	a201      	add	r2, pc, #4	; (adr r2, 800b6a4 <UART_SetConfig+0xf8>)
 800b69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a2:	bf00      	nop
 800b6a4:	0800b6d9 	.word	0x0800b6d9
 800b6a8:	0800b6f9 	.word	0x0800b6f9
 800b6ac:	0800b6f9 	.word	0x0800b6f9
 800b6b0:	0800b6f9 	.word	0x0800b6f9
 800b6b4:	0800b6e9 	.word	0x0800b6e9
 800b6b8:	0800b6f9 	.word	0x0800b6f9
 800b6bc:	0800b6f9 	.word	0x0800b6f9
 800b6c0:	0800b6f9 	.word	0x0800b6f9
 800b6c4:	0800b6e1 	.word	0x0800b6e1
 800b6c8:	0800b6f9 	.word	0x0800b6f9
 800b6cc:	0800b6f9 	.word	0x0800b6f9
 800b6d0:	0800b6f9 	.word	0x0800b6f9
 800b6d4:	0800b6f1 	.word	0x0800b6f1
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6de:	e06d      	b.n	800b7bc <UART_SetConfig+0x210>
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6e6:	e069      	b.n	800b7bc <UART_SetConfig+0x210>
 800b6e8:	2304      	movs	r3, #4
 800b6ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6ee:	e065      	b.n	800b7bc <UART_SetConfig+0x210>
 800b6f0:	2308      	movs	r3, #8
 800b6f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6f6:	e061      	b.n	800b7bc <UART_SetConfig+0x210>
 800b6f8:	2310      	movs	r3, #16
 800b6fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6fe:	e05d      	b.n	800b7bc <UART_SetConfig+0x210>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a58      	ldr	r2, [pc, #352]	; (800b868 <UART_SetConfig+0x2bc>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d125      	bne.n	800b756 <UART_SetConfig+0x1aa>
 800b70a:	4b55      	ldr	r3, [pc, #340]	; (800b860 <UART_SetConfig+0x2b4>)
 800b70c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b710:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b714:	2b30      	cmp	r3, #48	; 0x30
 800b716:	d016      	beq.n	800b746 <UART_SetConfig+0x19a>
 800b718:	2b30      	cmp	r3, #48	; 0x30
 800b71a:	d818      	bhi.n	800b74e <UART_SetConfig+0x1a2>
 800b71c:	2b20      	cmp	r3, #32
 800b71e:	d00a      	beq.n	800b736 <UART_SetConfig+0x18a>
 800b720:	2b20      	cmp	r3, #32
 800b722:	d814      	bhi.n	800b74e <UART_SetConfig+0x1a2>
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <UART_SetConfig+0x182>
 800b728:	2b10      	cmp	r3, #16
 800b72a:	d008      	beq.n	800b73e <UART_SetConfig+0x192>
 800b72c:	e00f      	b.n	800b74e <UART_SetConfig+0x1a2>
 800b72e:	2300      	movs	r3, #0
 800b730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b734:	e042      	b.n	800b7bc <UART_SetConfig+0x210>
 800b736:	2302      	movs	r3, #2
 800b738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b73c:	e03e      	b.n	800b7bc <UART_SetConfig+0x210>
 800b73e:	2304      	movs	r3, #4
 800b740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b744:	e03a      	b.n	800b7bc <UART_SetConfig+0x210>
 800b746:	2308      	movs	r3, #8
 800b748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b74c:	e036      	b.n	800b7bc <UART_SetConfig+0x210>
 800b74e:	2310      	movs	r3, #16
 800b750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b754:	e032      	b.n	800b7bc <UART_SetConfig+0x210>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a3f      	ldr	r2, [pc, #252]	; (800b858 <UART_SetConfig+0x2ac>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d12a      	bne.n	800b7b6 <UART_SetConfig+0x20a>
 800b760:	4b3f      	ldr	r3, [pc, #252]	; (800b860 <UART_SetConfig+0x2b4>)
 800b762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b766:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b76a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b76e:	d01a      	beq.n	800b7a6 <UART_SetConfig+0x1fa>
 800b770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b774:	d81b      	bhi.n	800b7ae <UART_SetConfig+0x202>
 800b776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b77a:	d00c      	beq.n	800b796 <UART_SetConfig+0x1ea>
 800b77c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b780:	d815      	bhi.n	800b7ae <UART_SetConfig+0x202>
 800b782:	2b00      	cmp	r3, #0
 800b784:	d003      	beq.n	800b78e <UART_SetConfig+0x1e2>
 800b786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b78a:	d008      	beq.n	800b79e <UART_SetConfig+0x1f2>
 800b78c:	e00f      	b.n	800b7ae <UART_SetConfig+0x202>
 800b78e:	2300      	movs	r3, #0
 800b790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b794:	e012      	b.n	800b7bc <UART_SetConfig+0x210>
 800b796:	2302      	movs	r3, #2
 800b798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b79c:	e00e      	b.n	800b7bc <UART_SetConfig+0x210>
 800b79e:	2304      	movs	r3, #4
 800b7a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7a4:	e00a      	b.n	800b7bc <UART_SetConfig+0x210>
 800b7a6:	2308      	movs	r3, #8
 800b7a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7ac:	e006      	b.n	800b7bc <UART_SetConfig+0x210>
 800b7ae:	2310      	movs	r3, #16
 800b7b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7b4:	e002      	b.n	800b7bc <UART_SetConfig+0x210>
 800b7b6:	2310      	movs	r3, #16
 800b7b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a25      	ldr	r2, [pc, #148]	; (800b858 <UART_SetConfig+0x2ac>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	f040 808a 	bne.w	800b8dc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7cc:	2b08      	cmp	r3, #8
 800b7ce:	d824      	bhi.n	800b81a <UART_SetConfig+0x26e>
 800b7d0:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <UART_SetConfig+0x22c>)
 800b7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d6:	bf00      	nop
 800b7d8:	0800b7fd 	.word	0x0800b7fd
 800b7dc:	0800b81b 	.word	0x0800b81b
 800b7e0:	0800b805 	.word	0x0800b805
 800b7e4:	0800b81b 	.word	0x0800b81b
 800b7e8:	0800b80b 	.word	0x0800b80b
 800b7ec:	0800b81b 	.word	0x0800b81b
 800b7f0:	0800b81b 	.word	0x0800b81b
 800b7f4:	0800b81b 	.word	0x0800b81b
 800b7f8:	0800b813 	.word	0x0800b813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7fc:	f7fd fb00 	bl	8008e00 <HAL_RCC_GetPCLK1Freq>
 800b800:	61f8      	str	r0, [r7, #28]
        break;
 800b802:	e010      	b.n	800b826 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b804:	4b19      	ldr	r3, [pc, #100]	; (800b86c <UART_SetConfig+0x2c0>)
 800b806:	61fb      	str	r3, [r7, #28]
        break;
 800b808:	e00d      	b.n	800b826 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b80a:	f7fd fa61 	bl	8008cd0 <HAL_RCC_GetSysClockFreq>
 800b80e:	61f8      	str	r0, [r7, #28]
        break;
 800b810:	e009      	b.n	800b826 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b816:	61fb      	str	r3, [r7, #28]
        break;
 800b818:	e005      	b.n	800b826 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b824:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 8109 	beq.w	800ba40 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	4613      	mov	r3, r2
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	4413      	add	r3, r2
 800b838:	69fa      	ldr	r2, [r7, #28]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d305      	bcc.n	800b84a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b844:	69fa      	ldr	r2, [r7, #28]
 800b846:	429a      	cmp	r2, r3
 800b848:	d912      	bls.n	800b870 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b850:	e0f6      	b.n	800ba40 <UART_SetConfig+0x494>
 800b852:	bf00      	nop
 800b854:	efff69f3 	.word	0xefff69f3
 800b858:	40008000 	.word	0x40008000
 800b85c:	40013800 	.word	0x40013800
 800b860:	40021000 	.word	0x40021000
 800b864:	40004400 	.word	0x40004400
 800b868:	40004800 	.word	0x40004800
 800b86c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	2200      	movs	r2, #0
 800b874:	461c      	mov	r4, r3
 800b876:	4615      	mov	r5, r2
 800b878:	f04f 0200 	mov.w	r2, #0
 800b87c:	f04f 0300 	mov.w	r3, #0
 800b880:	022b      	lsls	r3, r5, #8
 800b882:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b886:	0222      	lsls	r2, r4, #8
 800b888:	68f9      	ldr	r1, [r7, #12]
 800b88a:	6849      	ldr	r1, [r1, #4]
 800b88c:	0849      	lsrs	r1, r1, #1
 800b88e:	2000      	movs	r0, #0
 800b890:	4688      	mov	r8, r1
 800b892:	4681      	mov	r9, r0
 800b894:	eb12 0a08 	adds.w	sl, r2, r8
 800b898:	eb43 0b09 	adc.w	fp, r3, r9
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	603b      	str	r3, [r7, #0]
 800b8a4:	607a      	str	r2, [r7, #4]
 800b8a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8aa:	4650      	mov	r0, sl
 800b8ac:	4659      	mov	r1, fp
 800b8ae:	f7f5 f97b 	bl	8000ba8 <__aeabi_uldivmod>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8c0:	d308      	bcc.n	800b8d4 <UART_SetConfig+0x328>
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8c8:	d204      	bcs.n	800b8d4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	69ba      	ldr	r2, [r7, #24]
 800b8d0:	60da      	str	r2, [r3, #12]
 800b8d2:	e0b5      	b.n	800ba40 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b8da:	e0b1      	b.n	800ba40 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	69db      	ldr	r3, [r3, #28]
 800b8e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8e4:	d15d      	bne.n	800b9a2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800b8e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8ea:	2b08      	cmp	r3, #8
 800b8ec:	d827      	bhi.n	800b93e <UART_SetConfig+0x392>
 800b8ee:	a201      	add	r2, pc, #4	; (adr r2, 800b8f4 <UART_SetConfig+0x348>)
 800b8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f4:	0800b919 	.word	0x0800b919
 800b8f8:	0800b921 	.word	0x0800b921
 800b8fc:	0800b929 	.word	0x0800b929
 800b900:	0800b93f 	.word	0x0800b93f
 800b904:	0800b92f 	.word	0x0800b92f
 800b908:	0800b93f 	.word	0x0800b93f
 800b90c:	0800b93f 	.word	0x0800b93f
 800b910:	0800b93f 	.word	0x0800b93f
 800b914:	0800b937 	.word	0x0800b937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b918:	f7fd fa72 	bl	8008e00 <HAL_RCC_GetPCLK1Freq>
 800b91c:	61f8      	str	r0, [r7, #28]
        break;
 800b91e:	e014      	b.n	800b94a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b920:	f7fd fa84 	bl	8008e2c <HAL_RCC_GetPCLK2Freq>
 800b924:	61f8      	str	r0, [r7, #28]
        break;
 800b926:	e010      	b.n	800b94a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b928:	4b4c      	ldr	r3, [pc, #304]	; (800ba5c <UART_SetConfig+0x4b0>)
 800b92a:	61fb      	str	r3, [r7, #28]
        break;
 800b92c:	e00d      	b.n	800b94a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b92e:	f7fd f9cf 	bl	8008cd0 <HAL_RCC_GetSysClockFreq>
 800b932:	61f8      	str	r0, [r7, #28]
        break;
 800b934:	e009      	b.n	800b94a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b93a:	61fb      	str	r3, [r7, #28]
        break;
 800b93c:	e005      	b.n	800b94a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800b93e:	2300      	movs	r3, #0
 800b940:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b948:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d077      	beq.n	800ba40 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	005a      	lsls	r2, r3, #1
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	085b      	lsrs	r3, r3, #1
 800b95a:	441a      	add	r2, r3
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	fbb2 f3f3 	udiv	r3, r2, r3
 800b964:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	2b0f      	cmp	r3, #15
 800b96a:	d916      	bls.n	800b99a <UART_SetConfig+0x3ee>
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b972:	d212      	bcs.n	800b99a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	b29b      	uxth	r3, r3
 800b978:	f023 030f 	bic.w	r3, r3, #15
 800b97c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	085b      	lsrs	r3, r3, #1
 800b982:	b29b      	uxth	r3, r3
 800b984:	f003 0307 	and.w	r3, r3, #7
 800b988:	b29a      	uxth	r2, r3
 800b98a:	8afb      	ldrh	r3, [r7, #22]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	8afa      	ldrh	r2, [r7, #22]
 800b996:	60da      	str	r2, [r3, #12]
 800b998:	e052      	b.n	800ba40 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b9a0:	e04e      	b.n	800ba40 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9a6:	2b08      	cmp	r3, #8
 800b9a8:	d827      	bhi.n	800b9fa <UART_SetConfig+0x44e>
 800b9aa:	a201      	add	r2, pc, #4	; (adr r2, 800b9b0 <UART_SetConfig+0x404>)
 800b9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b0:	0800b9d5 	.word	0x0800b9d5
 800b9b4:	0800b9dd 	.word	0x0800b9dd
 800b9b8:	0800b9e5 	.word	0x0800b9e5
 800b9bc:	0800b9fb 	.word	0x0800b9fb
 800b9c0:	0800b9eb 	.word	0x0800b9eb
 800b9c4:	0800b9fb 	.word	0x0800b9fb
 800b9c8:	0800b9fb 	.word	0x0800b9fb
 800b9cc:	0800b9fb 	.word	0x0800b9fb
 800b9d0:	0800b9f3 	.word	0x0800b9f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9d4:	f7fd fa14 	bl	8008e00 <HAL_RCC_GetPCLK1Freq>
 800b9d8:	61f8      	str	r0, [r7, #28]
        break;
 800b9da:	e014      	b.n	800ba06 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9dc:	f7fd fa26 	bl	8008e2c <HAL_RCC_GetPCLK2Freq>
 800b9e0:	61f8      	str	r0, [r7, #28]
        break;
 800b9e2:	e010      	b.n	800ba06 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9e4:	4b1d      	ldr	r3, [pc, #116]	; (800ba5c <UART_SetConfig+0x4b0>)
 800b9e6:	61fb      	str	r3, [r7, #28]
        break;
 800b9e8:	e00d      	b.n	800ba06 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9ea:	f7fd f971 	bl	8008cd0 <HAL_RCC_GetSysClockFreq>
 800b9ee:	61f8      	str	r0, [r7, #28]
        break;
 800b9f0:	e009      	b.n	800ba06 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9f6:	61fb      	str	r3, [r7, #28]
        break;
 800b9f8:	e005      	b.n	800ba06 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ba04:	bf00      	nop
    }

    if (pclk != 0U)
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d019      	beq.n	800ba40 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	085a      	lsrs	r2, r3, #1
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	441a      	add	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	2b0f      	cmp	r3, #15
 800ba24:	d909      	bls.n	800ba3a <UART_SetConfig+0x48e>
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba2c:	d205      	bcs.n	800ba3a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	60da      	str	r2, [r3, #12]
 800ba38:	e002      	b.n	800ba40 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ba4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3728      	adds	r7, #40	; 0x28
 800ba54:	46bd      	mov	sp, r7
 800ba56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba5a:	bf00      	nop
 800ba5c:	00f42400 	.word	0x00f42400

0800ba60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00a      	beq.n	800ba8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	430a      	orrs	r2, r1
 800ba88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8e:	f003 0302 	and.w	r3, r3, #2
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00a      	beq.n	800baac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	430a      	orrs	r2, r1
 800baaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	f003 0304 	and.w	r3, r3, #4
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00a      	beq.n	800bace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	430a      	orrs	r2, r1
 800bacc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad2:	f003 0308 	and.w	r3, r3, #8
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	430a      	orrs	r2, r1
 800baee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf4:	f003 0310 	and.w	r3, r3, #16
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00a      	beq.n	800bb12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb16:	f003 0320 	and.w	r3, r3, #32
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00a      	beq.n	800bb34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	430a      	orrs	r2, r1
 800bb32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d01a      	beq.n	800bb76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	430a      	orrs	r2, r1
 800bb54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb5e:	d10a      	bne.n	800bb76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	430a      	orrs	r2, r1
 800bb74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00a      	beq.n	800bb98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	430a      	orrs	r2, r1
 800bb96:	605a      	str	r2, [r3, #4]
  }
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af02      	add	r7, sp, #8
 800bbaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbb4:	f7fa fcf2 	bl	800659c <HAL_GetTick>
 800bbb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 0308 	and.w	r3, r3, #8
 800bbc4:	2b08      	cmp	r3, #8
 800bbc6:	d10e      	bne.n	800bbe6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f82d 	bl	800bc36 <UART_WaitOnFlagUntilTimeout>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	e023      	b.n	800bc2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b04      	cmp	r3, #4
 800bbf2:	d10e      	bne.n	800bc12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f817 	bl	800bc36 <UART_WaitOnFlagUntilTimeout>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e00d      	b.n	800bc2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2220      	movs	r2, #32
 800bc16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2220      	movs	r2, #32
 800bc1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b09c      	sub	sp, #112	; 0x70
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	603b      	str	r3, [r7, #0]
 800bc42:	4613      	mov	r3, r2
 800bc44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc46:	e0a5      	b.n	800bd94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4e:	f000 80a1 	beq.w	800bd94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc52:	f7fa fca3 	bl	800659c <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d302      	bcc.n	800bc68 <UART_WaitOnFlagUntilTimeout+0x32>
 800bc62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d13e      	bne.n	800bce6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc7c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc8e:	e841 2300 	strex	r3, r2, [r1]
 800bc92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1e6      	bne.n	800bc68 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3308      	adds	r3, #8
 800bca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca4:	e853 3f00 	ldrex	r3, [r3]
 800bca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcac:	f023 0301 	bic.w	r3, r3, #1
 800bcb0:	663b      	str	r3, [r7, #96]	; 0x60
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcba:	64ba      	str	r2, [r7, #72]	; 0x48
 800bcbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcc2:	e841 2300 	strex	r3, r2, [r1]
 800bcc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1e5      	bne.n	800bc9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2220      	movs	r2, #32
 800bcd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2220      	movs	r2, #32
 800bcd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bce2:	2303      	movs	r3, #3
 800bce4:	e067      	b.n	800bdb6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 0304 	and.w	r3, r3, #4
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d04f      	beq.n	800bd94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	69db      	ldr	r3, [r3, #28]
 800bcfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd02:	d147      	bne.n	800bd94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd0c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	e853 3f00 	ldrex	r3, [r3]
 800bd1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd34:	e841 2300 	strex	r3, r2, [r1]
 800bd38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1e6      	bne.n	800bd0e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3308      	adds	r3, #8
 800bd46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	e853 3f00 	ldrex	r3, [r3]
 800bd4e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	f023 0301 	bic.w	r3, r3, #1
 800bd56:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	3308      	adds	r3, #8
 800bd5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd60:	623a      	str	r2, [r7, #32]
 800bd62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd64:	69f9      	ldr	r1, [r7, #28]
 800bd66:	6a3a      	ldr	r2, [r7, #32]
 800bd68:	e841 2300 	strex	r3, r2, [r1]
 800bd6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1e5      	bne.n	800bd40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2220      	movs	r2, #32
 800bd78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2220      	movs	r2, #32
 800bd7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2220      	movs	r2, #32
 800bd84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bd90:	2303      	movs	r3, #3
 800bd92:	e010      	b.n	800bdb6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	69da      	ldr	r2, [r3, #28]
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	bf0c      	ite	eq
 800bda4:	2301      	moveq	r3, #1
 800bda6:	2300      	movne	r3, #0
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	461a      	mov	r2, r3
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	f43f af4a 	beq.w	800bc48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3770      	adds	r7, #112	; 0x70
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
	...

0800bdc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b097      	sub	sp, #92	; 0x5c
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	88fa      	ldrh	r2, [r7, #6]
 800bdd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	88fa      	ldrh	r2, [r7, #6]
 800bde0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf2:	d10e      	bne.n	800be12 <UART_Start_Receive_IT+0x52>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d105      	bne.n	800be08 <UART_Start_Receive_IT+0x48>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800be02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be06:	e02d      	b.n	800be64 <UART_Start_Receive_IT+0xa4>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	22ff      	movs	r2, #255	; 0xff
 800be0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be10:	e028      	b.n	800be64 <UART_Start_Receive_IT+0xa4>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10d      	bne.n	800be36 <UART_Start_Receive_IT+0x76>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d104      	bne.n	800be2c <UART_Start_Receive_IT+0x6c>
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	22ff      	movs	r2, #255	; 0xff
 800be26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be2a:	e01b      	b.n	800be64 <UART_Start_Receive_IT+0xa4>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	227f      	movs	r2, #127	; 0x7f
 800be30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be34:	e016      	b.n	800be64 <UART_Start_Receive_IT+0xa4>
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be3e:	d10d      	bne.n	800be5c <UART_Start_Receive_IT+0x9c>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d104      	bne.n	800be52 <UART_Start_Receive_IT+0x92>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	227f      	movs	r2, #127	; 0x7f
 800be4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be50:	e008      	b.n	800be64 <UART_Start_Receive_IT+0xa4>
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	223f      	movs	r2, #63	; 0x3f
 800be56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be5a:	e003      	b.n	800be64 <UART_Start_Receive_IT+0xa4>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2222      	movs	r2, #34	; 0x22
 800be70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	3308      	adds	r3, #8
 800be78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be7c:	e853 3f00 	ldrex	r3, [r3]
 800be80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be84:	f043 0301 	orr.w	r3, r3, #1
 800be88:	657b      	str	r3, [r7, #84]	; 0x54
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	3308      	adds	r3, #8
 800be90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be92:	64ba      	str	r2, [r7, #72]	; 0x48
 800be94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be9a:	e841 2300 	strex	r3, r2, [r1]
 800be9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1e5      	bne.n	800be72 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beae:	d107      	bne.n	800bec0 <UART_Start_Receive_IT+0x100>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d103      	bne.n	800bec0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	4a24      	ldr	r2, [pc, #144]	; (800bf4c <UART_Start_Receive_IT+0x18c>)
 800bebc:	665a      	str	r2, [r3, #100]	; 0x64
 800bebe:	e002      	b.n	800bec6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4a23      	ldr	r2, [pc, #140]	; (800bf50 <UART_Start_Receive_IT+0x190>)
 800bec4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d019      	beq.n	800bf0a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bede:	e853 3f00 	ldrex	r3, [r3]
 800bee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800beea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	461a      	mov	r2, r3
 800bef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef4:	637b      	str	r3, [r7, #52]	; 0x34
 800bef6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800befa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800befc:	e841 2300 	strex	r3, r2, [r1]
 800bf00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1e6      	bne.n	800bed6 <UART_Start_Receive_IT+0x116>
 800bf08:	e018      	b.n	800bf3c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	e853 3f00 	ldrex	r3, [r3]
 800bf16:	613b      	str	r3, [r7, #16]
   return(result);
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f043 0320 	orr.w	r3, r3, #32
 800bf1e:	653b      	str	r3, [r7, #80]	; 0x50
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	461a      	mov	r2, r3
 800bf26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf28:	623b      	str	r3, [r7, #32]
 800bf2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2c:	69f9      	ldr	r1, [r7, #28]
 800bf2e:	6a3a      	ldr	r2, [r7, #32]
 800bf30:	e841 2300 	strex	r3, r2, [r1]
 800bf34:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1e6      	bne.n	800bf0a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	375c      	adds	r7, #92	; 0x5c
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	0800c45b 	.word	0x0800c45b
 800bf50:	0800c2fb 	.word	0x0800c2fb

0800bf54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b095      	sub	sp, #84	; 0x54
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf64:	e853 3f00 	ldrex	r3, [r3]
 800bf68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	461a      	mov	r2, r3
 800bf78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf7a:	643b      	str	r3, [r7, #64]	; 0x40
 800bf7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf82:	e841 2300 	strex	r3, r2, [r1]
 800bf86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1e6      	bne.n	800bf5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3308      	adds	r3, #8
 800bf94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf96:	6a3b      	ldr	r3, [r7, #32]
 800bf98:	e853 3f00 	ldrex	r3, [r3]
 800bf9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	f023 0301 	bic.w	r3, r3, #1
 800bfa4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3308      	adds	r3, #8
 800bfac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfb6:	e841 2300 	strex	r3, r2, [r1]
 800bfba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1e5      	bne.n	800bf8e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d118      	bne.n	800bffc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	e853 3f00 	ldrex	r3, [r3]
 800bfd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	f023 0310 	bic.w	r3, r3, #16
 800bfde:	647b      	str	r3, [r7, #68]	; 0x44
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfe8:	61bb      	str	r3, [r7, #24]
 800bfea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfec:	6979      	ldr	r1, [r7, #20]
 800bfee:	69ba      	ldr	r2, [r7, #24]
 800bff0:	e841 2300 	strex	r3, r2, [r1]
 800bff4:	613b      	str	r3, [r7, #16]
   return(result);
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e6      	bne.n	800bfca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2220      	movs	r2, #32
 800c000:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c00e:	bf00      	nop
 800c010:	3754      	adds	r7, #84	; 0x54
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c026:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f7ff fa97 	bl	800b56c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c03e:	bf00      	nop
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c052:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c058:	2200      	movs	r2, #0
 800c05a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c060:	2b00      	cmp	r3, #0
 800c062:	d004      	beq.n	800c06e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d11c      	bne.n	800c0a8 <UART_DMATxAbortCallback+0x62>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2200      	movs	r2, #0
 800c07a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	220f      	movs	r2, #15
 800c08c:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2220      	movs	r2, #32
 800c092:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2220      	movs	r2, #32
 800c098:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f7ff fa6d 	bl	800b580 <HAL_UART_AbortCpltCallback>
 800c0a6:	e000      	b.n	800c0aa <UART_DMATxAbortCallback+0x64>
      return;
 800c0a8:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0bc:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d004      	beq.n	800c0d8 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d126      	bne.n	800c126 <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	220f      	movs	r2, #15
 800c0f6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	8b1b      	ldrh	r3, [r3, #24]
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f042 0208 	orr.w	r2, r2, #8
 800c108:	b292      	uxth	r2, r2
 800c10a:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2220      	movs	r2, #32
 800c110:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2220      	movs	r2, #32
 800c116:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2200      	movs	r2, #0
 800c11c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f7ff fa2e 	bl	800b580 <HAL_UART_AbortCpltCallback>
 800c124:	e000      	b.n	800c128 <UART_DMARxAbortCallback+0x78>
      return;
 800c126:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c12e:	b480      	push	{r7}
 800c130:	b08f      	sub	sp, #60	; 0x3c
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c13a:	2b21      	cmp	r3, #33	; 0x21
 800c13c:	d14d      	bne.n	800c1da <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c144:	b29b      	uxth	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d132      	bne.n	800c1b0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	e853 3f00 	ldrex	r3, [r3]
 800c156:	61fb      	str	r3, [r7, #28]
   return(result);
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c15e:	637b      	str	r3, [r7, #52]	; 0x34
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	461a      	mov	r2, r3
 800c166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c16a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c16c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c16e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c170:	e841 2300 	strex	r3, r2, [r1]
 800c174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1e6      	bne.n	800c14a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	e853 3f00 	ldrex	r3, [r3]
 800c188:	60bb      	str	r3, [r7, #8]
   return(result);
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c190:	633b      	str	r3, [r7, #48]	; 0x30
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	61bb      	str	r3, [r7, #24]
 800c19c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19e:	6979      	ldr	r1, [r7, #20]
 800c1a0:	69ba      	ldr	r2, [r7, #24]
 800c1a2:	e841 2300 	strex	r3, r2, [r1]
 800c1a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1e6      	bne.n	800c17c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c1ae:	e014      	b.n	800c1da <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1b4:	781a      	ldrb	r2, [r3, #0]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	b292      	uxth	r2, r2
 800c1bc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c1da:	bf00      	nop
 800c1dc:	373c      	adds	r7, #60	; 0x3c
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b091      	sub	sp, #68	; 0x44
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1f2:	2b21      	cmp	r3, #33	; 0x21
 800c1f4:	d151      	bne.n	800c29a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d132      	bne.n	800c268 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	e853 3f00 	ldrex	r3, [r3]
 800c20e:	623b      	str	r3, [r7, #32]
   return(result);
 800c210:	6a3b      	ldr	r3, [r7, #32]
 800c212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c216:	63bb      	str	r3, [r7, #56]	; 0x38
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	461a      	mov	r2, r3
 800c21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c220:	633b      	str	r3, [r7, #48]	; 0x30
 800c222:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c224:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c228:	e841 2300 	strex	r3, r2, [r1]
 800c22c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1e6      	bne.n	800c202 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	e853 3f00 	ldrex	r3, [r3]
 800c240:	60fb      	str	r3, [r7, #12]
   return(result);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c248:	637b      	str	r3, [r7, #52]	; 0x34
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	461a      	mov	r2, r3
 800c250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c252:	61fb      	str	r3, [r7, #28]
 800c254:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c256:	69b9      	ldr	r1, [r7, #24]
 800c258:	69fa      	ldr	r2, [r7, #28]
 800c25a:	e841 2300 	strex	r3, r2, [r1]
 800c25e:	617b      	str	r3, [r7, #20]
   return(result);
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1e6      	bne.n	800c234 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c266:	e018      	b.n	800c29a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c26c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c270:	881a      	ldrh	r2, [r3, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c27a:	b292      	uxth	r2, r2
 800c27c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c282:	1c9a      	adds	r2, r3, #2
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c28e:	b29b      	uxth	r3, r3
 800c290:	3b01      	subs	r3, #1
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c29a:	bf00      	nop
 800c29c:	3744      	adds	r7, #68	; 0x44
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr

0800c2a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b088      	sub	sp, #32
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	e853 3f00 	ldrex	r3, [r3]
 800c2ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2c2:	61fb      	str	r3, [r7, #28]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	61bb      	str	r3, [r7, #24]
 800c2ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d0:	6979      	ldr	r1, [r7, #20]
 800c2d2:	69ba      	ldr	r2, [r7, #24]
 800c2d4:	e841 2300 	strex	r3, r2, [r1]
 800c2d8:	613b      	str	r3, [r7, #16]
   return(result);
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1e6      	bne.n	800c2ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2220      	movs	r2, #32
 800c2e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f7ff f933 	bl	800b558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2f2:	bf00      	nop
 800c2f4:	3720      	adds	r7, #32
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b096      	sub	sp, #88	; 0x58
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c308:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c310:	2b22      	cmp	r3, #34	; 0x22
 800c312:	f040 8094 	bne.w	800c43e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c31c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c320:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c324:	b2d9      	uxtb	r1, r3
 800c326:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c330:	400a      	ands	r2, r1
 800c332:	b2d2      	uxtb	r2, r2
 800c334:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c346:	b29b      	uxth	r3, r3
 800c348:	3b01      	subs	r3, #1
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c358:	b29b      	uxth	r3, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d179      	bne.n	800c452 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c366:	e853 3f00 	ldrex	r3, [r3]
 800c36a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c36e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c372:	653b      	str	r3, [r7, #80]	; 0x50
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	461a      	mov	r2, r3
 800c37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c37c:	647b      	str	r3, [r7, #68]	; 0x44
 800c37e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c380:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c384:	e841 2300 	strex	r3, r2, [r1]
 800c388:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1e6      	bne.n	800c35e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	3308      	adds	r3, #8
 800c396:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39a:	e853 3f00 	ldrex	r3, [r3]
 800c39e:	623b      	str	r3, [r7, #32]
   return(result);
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	f023 0301 	bic.w	r3, r3, #1
 800c3a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3308      	adds	r3, #8
 800c3ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3b0:	633a      	str	r2, [r7, #48]	; 0x30
 800c3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b8:	e841 2300 	strex	r3, r2, [r1]
 800c3bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1e5      	bne.n	800c390 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2220      	movs	r2, #32
 800c3c8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d12e      	bne.n	800c436 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	e853 3f00 	ldrex	r3, [r3]
 800c3ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f023 0310 	bic.w	r3, r3, #16
 800c3f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3fc:	61fb      	str	r3, [r7, #28]
 800c3fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c400:	69b9      	ldr	r1, [r7, #24]
 800c402:	69fa      	ldr	r2, [r7, #28]
 800c404:	e841 2300 	strex	r3, r2, [r1]
 800c408:	617b      	str	r3, [r7, #20]
   return(result);
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1e6      	bne.n	800c3de <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	f003 0310 	and.w	r3, r3, #16
 800c41a:	2b10      	cmp	r3, #16
 800c41c:	d103      	bne.n	800c426 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2210      	movs	r2, #16
 800c424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7ff f8b0 	bl	800b594 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c434:	e00d      	b.n	800c452 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7f8 f91e 	bl	8004678 <HAL_UART_RxCpltCallback>
}
 800c43c:	e009      	b.n	800c452 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	8b1b      	ldrh	r3, [r3, #24]
 800c444:	b29a      	uxth	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f042 0208 	orr.w	r2, r2, #8
 800c44e:	b292      	uxth	r2, r2
 800c450:	831a      	strh	r2, [r3, #24]
}
 800c452:	bf00      	nop
 800c454:	3758      	adds	r7, #88	; 0x58
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b096      	sub	sp, #88	; 0x58
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c468:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c470:	2b22      	cmp	r3, #34	; 0x22
 800c472:	f040 8094 	bne.w	800c59e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c47c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c484:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c486:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c48a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c48e:	4013      	ands	r3, r2
 800c490:	b29a      	uxth	r2, r3
 800c492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c494:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c49a:	1c9a      	adds	r2, r3, #2
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d179      	bne.n	800c5b2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c6:	e853 3f00 	ldrex	r3, [r3]
 800c4ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c4de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4e4:	e841 2300 	strex	r3, r2, [r1]
 800c4e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1e6      	bne.n	800c4be <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	e853 3f00 	ldrex	r3, [r3]
 800c4fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	f023 0301 	bic.w	r3, r3, #1
 800c506:	64bb      	str	r3, [r7, #72]	; 0x48
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	3308      	adds	r3, #8
 800c50e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c510:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c518:	e841 2300 	strex	r3, r2, [r1]
 800c51c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1e5      	bne.n	800c4f0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2220      	movs	r2, #32
 800c528:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c534:	2b01      	cmp	r3, #1
 800c536:	d12e      	bne.n	800c596 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	e853 3f00 	ldrex	r3, [r3]
 800c54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	f023 0310 	bic.w	r3, r3, #16
 800c552:	647b      	str	r3, [r7, #68]	; 0x44
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	461a      	mov	r2, r3
 800c55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c55c:	61bb      	str	r3, [r7, #24]
 800c55e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c560:	6979      	ldr	r1, [r7, #20]
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	e841 2300 	strex	r3, r2, [r1]
 800c568:	613b      	str	r3, [r7, #16]
   return(result);
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1e6      	bne.n	800c53e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	f003 0310 	and.w	r3, r3, #16
 800c57a:	2b10      	cmp	r3, #16
 800c57c:	d103      	bne.n	800c586 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2210      	movs	r2, #16
 800c584:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c58c:	4619      	mov	r1, r3
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7ff f800 	bl	800b594 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c594:	e00d      	b.n	800c5b2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7f8 f86e 	bl	8004678 <HAL_UART_RxCpltCallback>
}
 800c59c:	e009      	b.n	800c5b2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	8b1b      	ldrh	r3, [r3, #24]
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f042 0208 	orr.w	r2, r2, #8
 800c5ae:	b292      	uxth	r2, r2
 800c5b0:	831a      	strh	r2, [r3, #24]
}
 800c5b2:	bf00      	nop
 800c5b4:	3758      	adds	r7, #88	; 0x58
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b083      	sub	sp, #12
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c5c2:	bf00      	nop
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
	...

0800c5d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c5d4:	4904      	ldr	r1, [pc, #16]	; (800c5e8 <MX_FATFS_Init+0x18>)
 800c5d6:	4805      	ldr	r0, [pc, #20]	; (800c5ec <MX_FATFS_Init+0x1c>)
 800c5d8:	f003 fc0a 	bl	800fdf0 <FATFS_LinkDriver>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4b03      	ldr	r3, [pc, #12]	; (800c5f0 <MX_FATFS_Init+0x20>)
 800c5e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c5e4:	bf00      	nop
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	200006ec 	.word	0x200006ec
 800c5ec:	20000030 	.word	0x20000030
 800c5f0:	200006e8 	.word	0x200006e8

0800c5f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c5f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	4603      	mov	r3, r0
 800c60c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	4618      	mov	r0, r3
 800c612:	f7f9 fc15 	bl	8005e40 <SD_disk_initialize>
 800c616:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 800c62a:	79fb      	ldrb	r3, [r7, #7]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7f9 fcf3 	bl	8006018 <SD_disk_status>
 800c632:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	60b9      	str	r1, [r7, #8]
 800c644:	607a      	str	r2, [r7, #4]
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	4603      	mov	r3, r0
 800c64a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 800c64c:	7bf8      	ldrb	r0, [r7, #15]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	f7f9 fcf6 	bl	8006044 <SD_disk_read>
 800c658:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b084      	sub	sp, #16
 800c666:	af00      	add	r7, sp, #0
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
 800c66c:	603b      	str	r3, [r7, #0]
 800c66e:	4603      	mov	r3, r0
 800c670:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 800c672:	7bf8      	ldrb	r0, [r7, #15]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	68b9      	ldr	r1, [r7, #8]
 800c67a:	f7f9 fd4d 	bl	8006118 <SD_disk_write>
 800c67e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c680:	4618      	mov	r0, r3
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	4603      	mov	r3, r0
 800c690:	603a      	str	r2, [r7, #0]
 800c692:	71fb      	strb	r3, [r7, #7]
 800c694:	460b      	mov	r3, r1
 800c696:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 800c698:	79b9      	ldrb	r1, [r7, #6]
 800c69a:	79fb      	ldrb	r3, [r7, #7]
 800c69c:	683a      	ldr	r2, [r7, #0]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7f9 fdbe 	bl	8006220 <SD_disk_ioctl>
 800c6a4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
	...

0800c6b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c6ba:	79fb      	ldrb	r3, [r7, #7]
 800c6bc:	4a08      	ldr	r2, [pc, #32]	; (800c6e0 <disk_status+0x30>)
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	79fa      	ldrb	r2, [r7, #7]
 800c6c8:	4905      	ldr	r1, [pc, #20]	; (800c6e0 <disk_status+0x30>)
 800c6ca:	440a      	add	r2, r1
 800c6cc:	7a12      	ldrb	r2, [r2, #8]
 800c6ce:	4610      	mov	r0, r2
 800c6d0:	4798      	blx	r3
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	20000918 	.word	0x20000918

0800c6e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c6f2:	79fb      	ldrb	r3, [r7, #7]
 800c6f4:	4a0d      	ldr	r2, [pc, #52]	; (800c72c <disk_initialize+0x48>)
 800c6f6:	5cd3      	ldrb	r3, [r2, r3]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d111      	bne.n	800c720 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c6fc:	79fb      	ldrb	r3, [r7, #7]
 800c6fe:	4a0b      	ldr	r2, [pc, #44]	; (800c72c <disk_initialize+0x48>)
 800c700:	2101      	movs	r1, #1
 800c702:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	4a09      	ldr	r2, [pc, #36]	; (800c72c <disk_initialize+0x48>)
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	4413      	add	r3, r2
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	79fa      	ldrb	r2, [r7, #7]
 800c712:	4906      	ldr	r1, [pc, #24]	; (800c72c <disk_initialize+0x48>)
 800c714:	440a      	add	r2, r1
 800c716:	7a12      	ldrb	r2, [r2, #8]
 800c718:	4610      	mov	r0, r2
 800c71a:	4798      	blx	r3
 800c71c:	4603      	mov	r3, r0
 800c71e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c720:	7bfb      	ldrb	r3, [r7, #15]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	20000918 	.word	0x20000918

0800c730 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c730:	b590      	push	{r4, r7, lr}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	60b9      	str	r1, [r7, #8]
 800c738:	607a      	str	r2, [r7, #4]
 800c73a:	603b      	str	r3, [r7, #0]
 800c73c:	4603      	mov	r3, r0
 800c73e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	4a0a      	ldr	r2, [pc, #40]	; (800c76c <disk_read+0x3c>)
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4413      	add	r3, r2
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	689c      	ldr	r4, [r3, #8]
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	4a07      	ldr	r2, [pc, #28]	; (800c76c <disk_read+0x3c>)
 800c750:	4413      	add	r3, r2
 800c752:	7a18      	ldrb	r0, [r3, #8]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	68b9      	ldr	r1, [r7, #8]
 800c75a:	47a0      	blx	r4
 800c75c:	4603      	mov	r3, r0
 800c75e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c760:	7dfb      	ldrb	r3, [r7, #23]
}
 800c762:	4618      	mov	r0, r3
 800c764:	371c      	adds	r7, #28
 800c766:	46bd      	mov	sp, r7
 800c768:	bd90      	pop	{r4, r7, pc}
 800c76a:	bf00      	nop
 800c76c:	20000918 	.word	0x20000918

0800c770 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c770:	b590      	push	{r4, r7, lr}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
 800c77a:	603b      	str	r3, [r7, #0]
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c780:	7bfb      	ldrb	r3, [r7, #15]
 800c782:	4a0a      	ldr	r2, [pc, #40]	; (800c7ac <disk_write+0x3c>)
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4413      	add	r3, r2
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	68dc      	ldr	r4, [r3, #12]
 800c78c:	7bfb      	ldrb	r3, [r7, #15]
 800c78e:	4a07      	ldr	r2, [pc, #28]	; (800c7ac <disk_write+0x3c>)
 800c790:	4413      	add	r3, r2
 800c792:	7a18      	ldrb	r0, [r3, #8]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	68b9      	ldr	r1, [r7, #8]
 800c79a:	47a0      	blx	r4
 800c79c:	4603      	mov	r3, r0
 800c79e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd90      	pop	{r4, r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20000918 	.word	0x20000918

0800c7b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	603a      	str	r2, [r7, #0]
 800c7ba:	71fb      	strb	r3, [r7, #7]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c7c0:	79fb      	ldrb	r3, [r7, #7]
 800c7c2:	4a09      	ldr	r2, [pc, #36]	; (800c7e8 <disk_ioctl+0x38>)
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	4413      	add	r3, r2
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	79fa      	ldrb	r2, [r7, #7]
 800c7ce:	4906      	ldr	r1, [pc, #24]	; (800c7e8 <disk_ioctl+0x38>)
 800c7d0:	440a      	add	r2, r1
 800c7d2:	7a10      	ldrb	r0, [r2, #8]
 800c7d4:	79b9      	ldrb	r1, [r7, #6]
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	4798      	blx	r3
 800c7da:	4603      	mov	r3, r0
 800c7dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800c7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	20000918 	.word	0x20000918

0800c7ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c7fc:	89fb      	ldrh	r3, [r7, #14]
 800c7fe:	021b      	lsls	r3, r3, #8
 800c800:	b21a      	sxth	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	b21b      	sxth	r3, r3
 800c808:	4313      	orrs	r3, r2
 800c80a:	b21b      	sxth	r3, r3
 800c80c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c80e:	89fb      	ldrh	r3, [r7, #14]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	3303      	adds	r3, #3
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	021b      	lsls	r3, r3, #8
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	3202      	adds	r2, #2
 800c834:	7812      	ldrb	r2, [r2, #0]
 800c836:	4313      	orrs	r3, r2
 800c838:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	021b      	lsls	r3, r3, #8
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	3201      	adds	r2, #1
 800c842:	7812      	ldrb	r2, [r2, #0]
 800c844:	4313      	orrs	r3, r2
 800c846:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	021b      	lsls	r3, r3, #8
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	7812      	ldrb	r2, [r2, #0]
 800c850:	4313      	orrs	r3, r2
 800c852:	60fb      	str	r3, [r7, #12]
	return rv;
 800c854:	68fb      	ldr	r3, [r7, #12]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c862:	b480      	push	{r7}
 800c864:	b083      	sub	sp, #12
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	460b      	mov	r3, r1
 800c86c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	887a      	ldrh	r2, [r7, #2]
 800c876:	b2d2      	uxtb	r2, r2
 800c878:	701a      	strb	r2, [r3, #0]
 800c87a:	887b      	ldrh	r3, [r7, #2]
 800c87c:	0a1b      	lsrs	r3, r3, #8
 800c87e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	607a      	str	r2, [r7, #4]
 800c886:	887a      	ldrh	r2, [r7, #2]
 800c888:	b2d2      	uxtb	r2, r2
 800c88a:	701a      	strb	r2, [r3, #0]
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	1c5a      	adds	r2, r3, #1
 800c8a6:	607a      	str	r2, [r7, #4]
 800c8a8:	683a      	ldr	r2, [r7, #0]
 800c8aa:	b2d2      	uxtb	r2, r2
 800c8ac:	701a      	strb	r2, [r3, #0]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	0a1b      	lsrs	r3, r3, #8
 800c8b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	607a      	str	r2, [r7, #4]
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	b2d2      	uxtb	r2, r2
 800c8be:	701a      	strb	r2, [r3, #0]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	0a1b      	lsrs	r3, r3, #8
 800c8c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	683a      	ldr	r2, [r7, #0]
 800c8ce:	b2d2      	uxtb	r2, r2
 800c8d0:	701a      	strb	r2, [r3, #0]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	0a1b      	lsrs	r3, r3, #8
 800c8d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	1c5a      	adds	r2, r3, #1
 800c8dc:	607a      	str	r2, [r7, #4]
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	b2d2      	uxtb	r2, r2
 800c8e2:	701a      	strb	r2, [r3, #0]
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c8f0:	b480      	push	{r7}
 800c8f2:	b087      	sub	sp, #28
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00d      	beq.n	800c926 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c90a:	693a      	ldr	r2, [r7, #16]
 800c90c:	1c53      	adds	r3, r2, #1
 800c90e:	613b      	str	r3, [r7, #16]
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	1c59      	adds	r1, r3, #1
 800c914:	6179      	str	r1, [r7, #20]
 800c916:	7812      	ldrb	r2, [r2, #0]
 800c918:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	3b01      	subs	r3, #1
 800c91e:	607b      	str	r3, [r7, #4]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1f1      	bne.n	800c90a <mem_cpy+0x1a>
	}
}
 800c926:	bf00      	nop
 800c928:	371c      	adds	r7, #28
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr

0800c932 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c932:	b480      	push	{r7}
 800c934:	b087      	sub	sp, #28
 800c936:	af00      	add	r7, sp, #0
 800c938:	60f8      	str	r0, [r7, #12]
 800c93a:	60b9      	str	r1, [r7, #8]
 800c93c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	1c5a      	adds	r2, r3, #1
 800c946:	617a      	str	r2, [r7, #20]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	b2d2      	uxtb	r2, r2
 800c94c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	3b01      	subs	r3, #1
 800c952:	607b      	str	r3, [r7, #4]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d1f3      	bne.n	800c942 <mem_set+0x10>
}
 800c95a:	bf00      	nop
 800c95c:	bf00      	nop
 800c95e:	371c      	adds	r7, #28
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c968:	b480      	push	{r7}
 800c96a:	b089      	sub	sp, #36	; 0x24
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	61fb      	str	r3, [r7, #28]
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	1c5a      	adds	r2, r3, #1
 800c984:	61fa      	str	r2, [r7, #28]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	4619      	mov	r1, r3
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	1c5a      	adds	r2, r3, #1
 800c98e:	61ba      	str	r2, [r7, #24]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	1acb      	subs	r3, r1, r3
 800c994:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	3b01      	subs	r3, #1
 800c99a:	607b      	str	r3, [r7, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <mem_cmp+0x40>
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d0eb      	beq.n	800c980 <mem_cmp+0x18>

	return r;
 800c9a8:	697b      	ldr	r3, [r7, #20]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3724      	adds	r7, #36	; 0x24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr

0800c9b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c9b6:	b480      	push	{r7}
 800c9b8:	b083      	sub	sp, #12
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c9c0:	e002      	b.n	800c9c8 <chk_chr+0x12>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	607b      	str	r3, [r7, #4]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d005      	beq.n	800c9dc <chk_chr+0x26>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d1f2      	bne.n	800c9c2 <chk_chr+0xc>
	return *str;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	781b      	ldrb	r3, [r3, #0]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	60bb      	str	r3, [r7, #8]
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	60fb      	str	r3, [r7, #12]
 800c9fe:	e029      	b.n	800ca54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ca00:	4a27      	ldr	r2, [pc, #156]	; (800caa0 <chk_lock+0xb4>)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	011b      	lsls	r3, r3, #4
 800ca06:	4413      	add	r3, r2
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d01d      	beq.n	800ca4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca0e:	4a24      	ldr	r2, [pc, #144]	; (800caa0 <chk_lock+0xb4>)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	011b      	lsls	r3, r3, #4
 800ca14:	4413      	add	r3, r2
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d116      	bne.n	800ca4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ca20:	4a1f      	ldr	r2, [pc, #124]	; (800caa0 <chk_lock+0xb4>)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	011b      	lsls	r3, r3, #4
 800ca26:	4413      	add	r3, r2
 800ca28:	3304      	adds	r3, #4
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d10c      	bne.n	800ca4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca34:	4a1a      	ldr	r2, [pc, #104]	; (800caa0 <chk_lock+0xb4>)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	011b      	lsls	r3, r3, #4
 800ca3a:	4413      	add	r3, r2
 800ca3c:	3308      	adds	r3, #8
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d102      	bne.n	800ca4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca48:	e007      	b.n	800ca5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3301      	adds	r3, #1
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d9d2      	bls.n	800ca00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d109      	bne.n	800ca74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d102      	bne.n	800ca6c <chk_lock+0x80>
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d101      	bne.n	800ca70 <chk_lock+0x84>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	e010      	b.n	800ca92 <chk_lock+0xa6>
 800ca70:	2312      	movs	r3, #18
 800ca72:	e00e      	b.n	800ca92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d108      	bne.n	800ca8c <chk_lock+0xa0>
 800ca7a:	4a09      	ldr	r2, [pc, #36]	; (800caa0 <chk_lock+0xb4>)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	011b      	lsls	r3, r3, #4
 800ca80:	4413      	add	r3, r2
 800ca82:	330c      	adds	r3, #12
 800ca84:	881b      	ldrh	r3, [r3, #0]
 800ca86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca8a:	d101      	bne.n	800ca90 <chk_lock+0xa4>
 800ca8c:	2310      	movs	r3, #16
 800ca8e:	e000      	b.n	800ca92 <chk_lock+0xa6>
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	200006f8 	.word	0x200006f8

0800caa4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800caaa:	2300      	movs	r3, #0
 800caac:	607b      	str	r3, [r7, #4]
 800caae:	e002      	b.n	800cab6 <enq_lock+0x12>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	3301      	adds	r3, #1
 800cab4:	607b      	str	r3, [r7, #4]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d806      	bhi.n	800caca <enq_lock+0x26>
 800cabc:	4a09      	ldr	r2, [pc, #36]	; (800cae4 <enq_lock+0x40>)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	011b      	lsls	r3, r3, #4
 800cac2:	4413      	add	r3, r2
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1f2      	bne.n	800cab0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b02      	cmp	r3, #2
 800cace:	bf14      	ite	ne
 800cad0:	2301      	movne	r3, #1
 800cad2:	2300      	moveq	r3, #0
 800cad4:	b2db      	uxtb	r3, r3
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	200006f8 	.word	0x200006f8

0800cae8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800caf2:	2300      	movs	r3, #0
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	e01f      	b.n	800cb38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800caf8:	4a41      	ldr	r2, [pc, #260]	; (800cc00 <inc_lock+0x118>)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	011b      	lsls	r3, r3, #4
 800cafe:	4413      	add	r3, r2
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d113      	bne.n	800cb32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cb0a:	4a3d      	ldr	r2, [pc, #244]	; (800cc00 <inc_lock+0x118>)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	011b      	lsls	r3, r3, #4
 800cb10:	4413      	add	r3, r2
 800cb12:	3304      	adds	r3, #4
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d109      	bne.n	800cb32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cb1e:	4a38      	ldr	r2, [pc, #224]	; (800cc00 <inc_lock+0x118>)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	011b      	lsls	r3, r3, #4
 800cb24:	4413      	add	r3, r2
 800cb26:	3308      	adds	r3, #8
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d006      	beq.n	800cb40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3301      	adds	r3, #1
 800cb36:	60fb      	str	r3, [r7, #12]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d9dc      	bls.n	800caf8 <inc_lock+0x10>
 800cb3e:	e000      	b.n	800cb42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cb40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	d132      	bne.n	800cbae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	e002      	b.n	800cb54 <inc_lock+0x6c>
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	3301      	adds	r3, #1
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d806      	bhi.n	800cb68 <inc_lock+0x80>
 800cb5a:	4a29      	ldr	r2, [pc, #164]	; (800cc00 <inc_lock+0x118>)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	011b      	lsls	r3, r3, #4
 800cb60:	4413      	add	r3, r2
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1f2      	bne.n	800cb4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d101      	bne.n	800cb72 <inc_lock+0x8a>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	e040      	b.n	800cbf4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	4922      	ldr	r1, [pc, #136]	; (800cc00 <inc_lock+0x118>)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	011b      	lsls	r3, r3, #4
 800cb7c:	440b      	add	r3, r1
 800cb7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	689a      	ldr	r2, [r3, #8]
 800cb84:	491e      	ldr	r1, [pc, #120]	; (800cc00 <inc_lock+0x118>)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	011b      	lsls	r3, r3, #4
 800cb8a:	440b      	add	r3, r1
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	695a      	ldr	r2, [r3, #20]
 800cb94:	491a      	ldr	r1, [pc, #104]	; (800cc00 <inc_lock+0x118>)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	011b      	lsls	r3, r3, #4
 800cb9a:	440b      	add	r3, r1
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cba0:	4a17      	ldr	r2, [pc, #92]	; (800cc00 <inc_lock+0x118>)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	011b      	lsls	r3, r3, #4
 800cba6:	4413      	add	r3, r2
 800cba8:	330c      	adds	r3, #12
 800cbaa:	2200      	movs	r2, #0
 800cbac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d009      	beq.n	800cbc8 <inc_lock+0xe0>
 800cbb4:	4a12      	ldr	r2, [pc, #72]	; (800cc00 <inc_lock+0x118>)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	011b      	lsls	r3, r3, #4
 800cbba:	4413      	add	r3, r2
 800cbbc:	330c      	adds	r3, #12
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d001      	beq.n	800cbc8 <inc_lock+0xe0>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	e015      	b.n	800cbf4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d108      	bne.n	800cbe0 <inc_lock+0xf8>
 800cbce:	4a0c      	ldr	r2, [pc, #48]	; (800cc00 <inc_lock+0x118>)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	011b      	lsls	r3, r3, #4
 800cbd4:	4413      	add	r3, r2
 800cbd6:	330c      	adds	r3, #12
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	e001      	b.n	800cbe4 <inc_lock+0xfc>
 800cbe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbe4:	4906      	ldr	r1, [pc, #24]	; (800cc00 <inc_lock+0x118>)
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	011b      	lsls	r3, r3, #4
 800cbea:	440b      	add	r3, r1
 800cbec:	330c      	adds	r3, #12
 800cbee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3301      	adds	r3, #1
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3714      	adds	r7, #20
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr
 800cc00:	200006f8 	.word	0x200006f8

0800cc04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	607b      	str	r3, [r7, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d825      	bhi.n	800cc64 <dec_lock+0x60>
		n = Files[i].ctr;
 800cc18:	4a17      	ldr	r2, [pc, #92]	; (800cc78 <dec_lock+0x74>)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	011b      	lsls	r3, r3, #4
 800cc1e:	4413      	add	r3, r2
 800cc20:	330c      	adds	r3, #12
 800cc22:	881b      	ldrh	r3, [r3, #0]
 800cc24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cc26:	89fb      	ldrh	r3, [r7, #14]
 800cc28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc2c:	d101      	bne.n	800cc32 <dec_lock+0x2e>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cc32:	89fb      	ldrh	r3, [r7, #14]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d002      	beq.n	800cc3e <dec_lock+0x3a>
 800cc38:	89fb      	ldrh	r3, [r7, #14]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cc3e:	4a0e      	ldr	r2, [pc, #56]	; (800cc78 <dec_lock+0x74>)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	011b      	lsls	r3, r3, #4
 800cc44:	4413      	add	r3, r2
 800cc46:	330c      	adds	r3, #12
 800cc48:	89fa      	ldrh	r2, [r7, #14]
 800cc4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cc4c:	89fb      	ldrh	r3, [r7, #14]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d105      	bne.n	800cc5e <dec_lock+0x5a>
 800cc52:	4a09      	ldr	r2, [pc, #36]	; (800cc78 <dec_lock+0x74>)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	011b      	lsls	r3, r3, #4
 800cc58:	4413      	add	r3, r2
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	737b      	strb	r3, [r7, #13]
 800cc62:	e001      	b.n	800cc68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cc64:	2302      	movs	r3, #2
 800cc66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cc68:	7b7b      	ldrb	r3, [r7, #13]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	200006f8 	.word	0x200006f8

0800cc7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cc84:	2300      	movs	r3, #0
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	e010      	b.n	800ccac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cc8a:	4a0d      	ldr	r2, [pc, #52]	; (800ccc0 <clear_lock+0x44>)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	011b      	lsls	r3, r3, #4
 800cc90:	4413      	add	r3, r2
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d105      	bne.n	800cca6 <clear_lock+0x2a>
 800cc9a:	4a09      	ldr	r2, [pc, #36]	; (800ccc0 <clear_lock+0x44>)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	011b      	lsls	r3, r3, #4
 800cca0:	4413      	add	r3, r2
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d9eb      	bls.n	800cc8a <clear_lock+0xe>
	}
}
 800ccb2:	bf00      	nop
 800ccb4:	bf00      	nop
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr
 800ccc0:	200006f8 	.word	0x200006f8

0800ccc4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	78db      	ldrb	r3, [r3, #3]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d034      	beq.n	800cd42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccdc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	7858      	ldrb	r0, [r3, #1]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cce8:	2301      	movs	r3, #1
 800ccea:	697a      	ldr	r2, [r7, #20]
 800ccec:	f7ff fd40 	bl	800c770 <disk_write>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d002      	beq.n	800ccfc <sync_window+0x38>
			res = FR_DISK_ERR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	73fb      	strb	r3, [r7, #15]
 800ccfa:	e022      	b.n	800cd42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	1ad2      	subs	r2, r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d217      	bcs.n	800cd42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	789b      	ldrb	r3, [r3, #2]
 800cd16:	613b      	str	r3, [r7, #16]
 800cd18:	e010      	b.n	800cd3c <sync_window+0x78>
					wsect += fs->fsize;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6a1b      	ldr	r3, [r3, #32]
 800cd1e:	697a      	ldr	r2, [r7, #20]
 800cd20:	4413      	add	r3, r2
 800cd22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	7858      	ldrb	r0, [r3, #1]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd2e:	2301      	movs	r3, #1
 800cd30:	697a      	ldr	r2, [r7, #20]
 800cd32:	f7ff fd1d 	bl	800c770 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	613b      	str	r3, [r7, #16]
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d8eb      	bhi.n	800cd1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3718      	adds	r7, #24
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d01b      	beq.n	800cd9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff ffad 	bl	800ccc4 <sync_window>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d113      	bne.n	800cd9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7858      	ldrb	r0, [r3, #1]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd7e:	2301      	movs	r3, #1
 800cd80:	683a      	ldr	r2, [r7, #0]
 800cd82:	f7ff fcd5 	bl	800c730 <disk_read>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d004      	beq.n	800cd96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800cd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
	...

0800cda8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f7ff ff87 	bl	800ccc4 <sync_window>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cdba:	7bfb      	ldrb	r3, [r7, #15]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d159      	bne.n	800ce74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d149      	bne.n	800ce5c <sync_fs+0xb4>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	791b      	ldrb	r3, [r3, #4]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d145      	bne.n	800ce5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	899b      	ldrh	r3, [r3, #12]
 800cdda:	461a      	mov	r2, r3
 800cddc:	2100      	movs	r1, #0
 800cdde:	f7ff fda8 	bl	800c932 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	3338      	adds	r3, #56	; 0x38
 800cde6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff fd37 	bl	800c862 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	3338      	adds	r3, #56	; 0x38
 800cdf8:	4921      	ldr	r1, [pc, #132]	; (800ce80 <sync_fs+0xd8>)
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7ff fd4c 	bl	800c898 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3338      	adds	r3, #56	; 0x38
 800ce04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce08:	491e      	ldr	r1, [pc, #120]	; (800ce84 <sync_fs+0xdc>)
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff fd44 	bl	800c898 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	3338      	adds	r3, #56	; 0x38
 800ce14:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4610      	mov	r0, r2
 800ce20:	f7ff fd3a 	bl	800c898 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	3338      	adds	r3, #56	; 0x38
 800ce28:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	695b      	ldr	r3, [r3, #20]
 800ce30:	4619      	mov	r1, r3
 800ce32:	4610      	mov	r0, r2
 800ce34:	f7ff fd30 	bl	800c898 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3c:	1c5a      	adds	r2, r3, #1
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	7858      	ldrb	r0, [r3, #1]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce50:	2301      	movs	r3, #1
 800ce52:	f7ff fc8d 	bl	800c770 <disk_write>
			fs->fsi_flag = 0;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	785b      	ldrb	r3, [r3, #1]
 800ce60:	2200      	movs	r2, #0
 800ce62:	2100      	movs	r1, #0
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7ff fca3 	bl	800c7b0 <disk_ioctl>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <sync_fs+0xcc>
 800ce70:	2301      	movs	r3, #1
 800ce72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	41615252 	.word	0x41615252
 800ce84:	61417272 	.word	0x61417272

0800ce88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	3b02      	subs	r3, #2
 800ce96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	69db      	ldr	r3, [r3, #28]
 800ce9c:	3b02      	subs	r3, #2
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d301      	bcc.n	800cea8 <clust2sect+0x20>
 800cea4:	2300      	movs	r3, #0
 800cea6:	e008      	b.n	800ceba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	895b      	ldrh	r3, [r3, #10]
 800ceac:	461a      	mov	r2, r3
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	fb03 f202 	mul.w	r2, r3, r2
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb8:	4413      	add	r3, r2
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	370c      	adds	r7, #12
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr

0800cec6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b086      	sub	sp, #24
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d904      	bls.n	800cee6 <get_fat+0x20>
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	69db      	ldr	r3, [r3, #28]
 800cee0:	683a      	ldr	r2, [r7, #0]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d302      	bcc.n	800ceec <get_fat+0x26>
		val = 1;	/* Internal error */
 800cee6:	2301      	movs	r3, #1
 800cee8:	617b      	str	r3, [r7, #20]
 800ceea:	e0bb      	b.n	800d064 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ceec:	f04f 33ff 	mov.w	r3, #4294967295
 800cef0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	f000 8083 	beq.w	800d002 <get_fat+0x13c>
 800cefc:	2b03      	cmp	r3, #3
 800cefe:	f300 80a7 	bgt.w	800d050 <get_fat+0x18a>
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d002      	beq.n	800cf0c <get_fat+0x46>
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	d056      	beq.n	800cfb8 <get_fat+0xf2>
 800cf0a:	e0a1      	b.n	800d050 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	60fb      	str	r3, [r7, #12]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	085b      	lsrs	r3, r3, #1
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	4413      	add	r3, r2
 800cf18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	899b      	ldrh	r3, [r3, #12]
 800cf22:	4619      	mov	r1, r3
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf2a:	4413      	add	r3, r2
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	6938      	ldr	r0, [r7, #16]
 800cf30:	f7ff ff0c 	bl	800cd4c <move_window>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f040 808d 	bne.w	800d056 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	1c5a      	adds	r2, r3, #1
 800cf40:	60fa      	str	r2, [r7, #12]
 800cf42:	693a      	ldr	r2, [r7, #16]
 800cf44:	8992      	ldrh	r2, [r2, #12]
 800cf46:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf4a:	fb01 f202 	mul.w	r2, r1, r2
 800cf4e:	1a9b      	subs	r3, r3, r2
 800cf50:	693a      	ldr	r2, [r7, #16]
 800cf52:	4413      	add	r3, r2
 800cf54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cf58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	899b      	ldrh	r3, [r3, #12]
 800cf62:	4619      	mov	r1, r3
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf6a:	4413      	add	r3, r2
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	6938      	ldr	r0, [r7, #16]
 800cf70:	f7ff feec 	bl	800cd4c <move_window>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d16f      	bne.n	800d05a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	899b      	ldrh	r3, [r3, #12]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf86:	fb01 f202 	mul.w	r2, r1, r2
 800cf8a:	1a9b      	subs	r3, r3, r2
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	4413      	add	r3, r2
 800cf90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cf94:	021b      	lsls	r3, r3, #8
 800cf96:	461a      	mov	r2, r3
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d002      	beq.n	800cfae <get_fat+0xe8>
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	091b      	lsrs	r3, r3, #4
 800cfac:	e002      	b.n	800cfb4 <get_fat+0xee>
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfb4:	617b      	str	r3, [r7, #20]
			break;
 800cfb6:	e055      	b.n	800d064 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	899b      	ldrh	r3, [r3, #12]
 800cfc0:	085b      	lsrs	r3, r3, #1
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	fbb3 f3f1 	udiv	r3, r3, r1
 800cfcc:	4413      	add	r3, r2
 800cfce:	4619      	mov	r1, r3
 800cfd0:	6938      	ldr	r0, [r7, #16]
 800cfd2:	f7ff febb 	bl	800cd4c <move_window>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d140      	bne.n	800d05e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	693a      	ldr	r2, [r7, #16]
 800cfe8:	8992      	ldrh	r2, [r2, #12]
 800cfea:	fbb3 f0f2 	udiv	r0, r3, r2
 800cfee:	fb00 f202 	mul.w	r2, r0, r2
 800cff2:	1a9b      	subs	r3, r3, r2
 800cff4:	440b      	add	r3, r1
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff fbf8 	bl	800c7ec <ld_word>
 800cffc:	4603      	mov	r3, r0
 800cffe:	617b      	str	r3, [r7, #20]
			break;
 800d000:	e030      	b.n	800d064 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	899b      	ldrh	r3, [r3, #12]
 800d00a:	089b      	lsrs	r3, r3, #2
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	4619      	mov	r1, r3
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	fbb3 f3f1 	udiv	r3, r3, r1
 800d016:	4413      	add	r3, r2
 800d018:	4619      	mov	r1, r3
 800d01a:	6938      	ldr	r0, [r7, #16]
 800d01c:	f7ff fe96 	bl	800cd4c <move_window>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d11d      	bne.n	800d062 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	8992      	ldrh	r2, [r2, #12]
 800d034:	fbb3 f0f2 	udiv	r0, r3, r2
 800d038:	fb00 f202 	mul.w	r2, r0, r2
 800d03c:	1a9b      	subs	r3, r3, r2
 800d03e:	440b      	add	r3, r1
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff fbeb 	bl	800c81c <ld_dword>
 800d046:	4603      	mov	r3, r0
 800d048:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d04c:	617b      	str	r3, [r7, #20]
			break;
 800d04e:	e009      	b.n	800d064 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d050:	2301      	movs	r3, #1
 800d052:	617b      	str	r3, [r7, #20]
 800d054:	e006      	b.n	800d064 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d056:	bf00      	nop
 800d058:	e004      	b.n	800d064 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d05a:	bf00      	nop
 800d05c:	e002      	b.n	800d064 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d05e:	bf00      	nop
 800d060:	e000      	b.n	800d064 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d062:	bf00      	nop
		}
	}

	return val;
 800d064:	697b      	ldr	r3, [r7, #20]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d06e:	b590      	push	{r4, r7, lr}
 800d070:	b089      	sub	sp, #36	; 0x24
 800d072:	af00      	add	r7, sp, #0
 800d074:	60f8      	str	r0, [r7, #12]
 800d076:	60b9      	str	r1, [r7, #8]
 800d078:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d07a:	2302      	movs	r3, #2
 800d07c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	2b01      	cmp	r3, #1
 800d082:	f240 8102 	bls.w	800d28a <put_fat+0x21c>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	69db      	ldr	r3, [r3, #28]
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	f080 80fc 	bcs.w	800d28a <put_fat+0x21c>
		switch (fs->fs_type) {
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b03      	cmp	r3, #3
 800d098:	f000 80b6 	beq.w	800d208 <put_fat+0x19a>
 800d09c:	2b03      	cmp	r3, #3
 800d09e:	f300 80fd 	bgt.w	800d29c <put_fat+0x22e>
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d003      	beq.n	800d0ae <put_fat+0x40>
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	f000 8083 	beq.w	800d1b2 <put_fat+0x144>
 800d0ac:	e0f6      	b.n	800d29c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	61bb      	str	r3, [r7, #24]
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	085b      	lsrs	r3, r3, #1
 800d0b6:	69ba      	ldr	r2, [r7, #24]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	899b      	ldrh	r3, [r3, #12]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0cc:	4413      	add	r3, r2
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	f7ff fe3b 	bl	800cd4c <move_window>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0da:	7ffb      	ldrb	r3, [r7, #31]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f040 80d6 	bne.w	800d28e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d0e8:	69bb      	ldr	r3, [r7, #24]
 800d0ea:	1c5a      	adds	r2, r3, #1
 800d0ec:	61ba      	str	r2, [r7, #24]
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	8992      	ldrh	r2, [r2, #12]
 800d0f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800d0f6:	fb00 f202 	mul.w	r2, r0, r2
 800d0fa:	1a9b      	subs	r3, r3, r2
 800d0fc:	440b      	add	r3, r1
 800d0fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	f003 0301 	and.w	r3, r3, #1
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00d      	beq.n	800d126 <put_fat+0xb8>
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	b25b      	sxtb	r3, r3
 800d110:	f003 030f 	and.w	r3, r3, #15
 800d114:	b25a      	sxtb	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	011b      	lsls	r3, r3, #4
 800d11c:	b25b      	sxtb	r3, r3
 800d11e:	4313      	orrs	r3, r2
 800d120:	b25b      	sxtb	r3, r3
 800d122:	b2db      	uxtb	r3, r3
 800d124:	e001      	b.n	800d12a <put_fat+0xbc>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	697a      	ldr	r2, [r7, #20]
 800d12c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2201      	movs	r2, #1
 800d132:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	899b      	ldrh	r3, [r3, #12]
 800d13c:	4619      	mov	r1, r3
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	fbb3 f3f1 	udiv	r3, r3, r1
 800d144:	4413      	add	r3, r2
 800d146:	4619      	mov	r1, r3
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f7ff fdff 	bl	800cd4c <move_window>
 800d14e:	4603      	mov	r3, r0
 800d150:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d152:	7ffb      	ldrb	r3, [r7, #31]
 800d154:	2b00      	cmp	r3, #0
 800d156:	f040 809c 	bne.w	800d292 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	899b      	ldrh	r3, [r3, #12]
 800d164:	461a      	mov	r2, r3
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	fbb3 f0f2 	udiv	r0, r3, r2
 800d16c:	fb00 f202 	mul.w	r2, r0, r2
 800d170:	1a9b      	subs	r3, r3, r2
 800d172:	440b      	add	r3, r1
 800d174:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	f003 0301 	and.w	r3, r3, #1
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d003      	beq.n	800d188 <put_fat+0x11a>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	091b      	lsrs	r3, r3, #4
 800d184:	b2db      	uxtb	r3, r3
 800d186:	e00e      	b.n	800d1a6 <put_fat+0x138>
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	b25b      	sxtb	r3, r3
 800d18e:	f023 030f 	bic.w	r3, r3, #15
 800d192:	b25a      	sxtb	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	0a1b      	lsrs	r3, r3, #8
 800d198:	b25b      	sxtb	r3, r3
 800d19a:	f003 030f 	and.w	r3, r3, #15
 800d19e:	b25b      	sxtb	r3, r3
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	b25b      	sxtb	r3, r3
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	697a      	ldr	r2, [r7, #20]
 800d1a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	70da      	strb	r2, [r3, #3]
			break;
 800d1b0:	e074      	b.n	800d29c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	899b      	ldrh	r3, [r3, #12]
 800d1ba:	085b      	lsrs	r3, r3, #1
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	4619      	mov	r1, r3
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1c6:	4413      	add	r3, r2
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f7ff fdbe 	bl	800cd4c <move_window>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1d4:	7ffb      	ldrb	r3, [r7, #31]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d15d      	bne.n	800d296 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	005b      	lsls	r3, r3, #1
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	8992      	ldrh	r2, [r2, #12]
 800d1e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1ec:	fb00 f202 	mul.w	r2, r0, r2
 800d1f0:	1a9b      	subs	r3, r3, r2
 800d1f2:	440b      	add	r3, r1
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	b292      	uxth	r2, r2
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7ff fb31 	bl	800c862 <st_word>
			fs->wflag = 1;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2201      	movs	r2, #1
 800d204:	70da      	strb	r2, [r3, #3]
			break;
 800d206:	e049      	b.n	800d29c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	899b      	ldrh	r3, [r3, #12]
 800d210:	089b      	lsrs	r3, r3, #2
 800d212:	b29b      	uxth	r3, r3
 800d214:	4619      	mov	r1, r3
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	fbb3 f3f1 	udiv	r3, r3, r1
 800d21c:	4413      	add	r3, r2
 800d21e:	4619      	mov	r1, r3
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f7ff fd93 	bl	800cd4c <move_window>
 800d226:	4603      	mov	r3, r0
 800d228:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d22a:	7ffb      	ldrb	r3, [r7, #31]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d134      	bne.n	800d29a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	8992      	ldrh	r2, [r2, #12]
 800d244:	fbb3 f0f2 	udiv	r0, r3, r2
 800d248:	fb00 f202 	mul.w	r2, r0, r2
 800d24c:	1a9b      	subs	r3, r3, r2
 800d24e:	440b      	add	r3, r1
 800d250:	4618      	mov	r0, r3
 800d252:	f7ff fae3 	bl	800c81c <ld_dword>
 800d256:	4603      	mov	r3, r0
 800d258:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d25c:	4323      	orrs	r3, r4
 800d25e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	68fa      	ldr	r2, [r7, #12]
 800d26c:	8992      	ldrh	r2, [r2, #12]
 800d26e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d272:	fb00 f202 	mul.w	r2, r0, r2
 800d276:	1a9b      	subs	r3, r3, r2
 800d278:	440b      	add	r3, r1
 800d27a:	6879      	ldr	r1, [r7, #4]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff fb0b 	bl	800c898 <st_dword>
			fs->wflag = 1;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2201      	movs	r2, #1
 800d286:	70da      	strb	r2, [r3, #3]
			break;
 800d288:	e008      	b.n	800d29c <put_fat+0x22e>
		}
	}
 800d28a:	bf00      	nop
 800d28c:	e006      	b.n	800d29c <put_fat+0x22e>
			if (res != FR_OK) break;
 800d28e:	bf00      	nop
 800d290:	e004      	b.n	800d29c <put_fat+0x22e>
			if (res != FR_OK) break;
 800d292:	bf00      	nop
 800d294:	e002      	b.n	800d29c <put_fat+0x22e>
			if (res != FR_OK) break;
 800d296:	bf00      	nop
 800d298:	e000      	b.n	800d29c <put_fat+0x22e>
			if (res != FR_OK) break;
 800d29a:	bf00      	nop
	return res;
 800d29c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3724      	adds	r7, #36	; 0x24
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd90      	pop	{r4, r7, pc}

0800d2a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b088      	sub	sp, #32
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	60f8      	str	r0, [r7, #12]
 800d2ae:	60b9      	str	r1, [r7, #8]
 800d2b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d904      	bls.n	800d2cc <remove_chain+0x26>
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	69db      	ldr	r3, [r3, #28]
 800d2c6:	68ba      	ldr	r2, [r7, #8]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d301      	bcc.n	800d2d0 <remove_chain+0x2a>
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	e04b      	b.n	800d368 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00c      	beq.n	800d2f0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	69b8      	ldr	r0, [r7, #24]
 800d2de:	f7ff fec6 	bl	800d06e <put_fat>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d2e6:	7ffb      	ldrb	r3, [r7, #31]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d001      	beq.n	800d2f0 <remove_chain+0x4a>
 800d2ec:	7ffb      	ldrb	r3, [r7, #31]
 800d2ee:	e03b      	b.n	800d368 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d2f0:	68b9      	ldr	r1, [r7, #8]
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	f7ff fde7 	bl	800cec6 <get_fat>
 800d2f8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d031      	beq.n	800d364 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d101      	bne.n	800d30a <remove_chain+0x64>
 800d306:	2302      	movs	r3, #2
 800d308:	e02e      	b.n	800d368 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d310:	d101      	bne.n	800d316 <remove_chain+0x70>
 800d312:	2301      	movs	r3, #1
 800d314:	e028      	b.n	800d368 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d316:	2200      	movs	r2, #0
 800d318:	68b9      	ldr	r1, [r7, #8]
 800d31a:	69b8      	ldr	r0, [r7, #24]
 800d31c:	f7ff fea7 	bl	800d06e <put_fat>
 800d320:	4603      	mov	r3, r0
 800d322:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d324:	7ffb      	ldrb	r3, [r7, #31]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d001      	beq.n	800d32e <remove_chain+0x88>
 800d32a:	7ffb      	ldrb	r3, [r7, #31]
 800d32c:	e01c      	b.n	800d368 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	699a      	ldr	r2, [r3, #24]
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	69db      	ldr	r3, [r3, #28]
 800d336:	3b02      	subs	r3, #2
 800d338:	429a      	cmp	r2, r3
 800d33a:	d20b      	bcs.n	800d354 <remove_chain+0xae>
			fs->free_clst++;
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	1c5a      	adds	r2, r3, #1
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	791b      	ldrb	r3, [r3, #4]
 800d34a:	f043 0301 	orr.w	r3, r3, #1
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	69db      	ldr	r3, [r3, #28]
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d3c6      	bcc.n	800d2f0 <remove_chain+0x4a>
 800d362:	e000      	b.n	800d366 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d364:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3720      	adds	r7, #32
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b088      	sub	sp, #32
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10d      	bne.n	800d3a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	695b      	ldr	r3, [r3, #20]
 800d38a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d004      	beq.n	800d39c <create_chain+0x2c>
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	69db      	ldr	r3, [r3, #28]
 800d396:	69ba      	ldr	r2, [r7, #24]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d31b      	bcc.n	800d3d4 <create_chain+0x64>
 800d39c:	2301      	movs	r3, #1
 800d39e:	61bb      	str	r3, [r7, #24]
 800d3a0:	e018      	b.n	800d3d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d3a2:	6839      	ldr	r1, [r7, #0]
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff fd8e 	bl	800cec6 <get_fat>
 800d3aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d801      	bhi.n	800d3b6 <create_chain+0x46>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e070      	b.n	800d498 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3bc:	d101      	bne.n	800d3c2 <create_chain+0x52>
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	e06a      	b.n	800d498 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	69db      	ldr	r3, [r3, #28]
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d201      	bcs.n	800d3d0 <create_chain+0x60>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	e063      	b.n	800d498 <create_chain+0x128>
		scl = clst;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	69db      	ldr	r3, [r3, #28]
 800d3e2:	69fa      	ldr	r2, [r7, #28]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d307      	bcc.n	800d3f8 <create_chain+0x88>
				ncl = 2;
 800d3e8:	2302      	movs	r3, #2
 800d3ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d3ec:	69fa      	ldr	r2, [r7, #28]
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d901      	bls.n	800d3f8 <create_chain+0x88>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	e04f      	b.n	800d498 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d3f8:	69f9      	ldr	r1, [r7, #28]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7ff fd63 	bl	800cec6 <get_fat>
 800d400:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00e      	beq.n	800d426 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d003      	beq.n	800d416 <create_chain+0xa6>
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d414:	d101      	bne.n	800d41a <create_chain+0xaa>
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	e03e      	b.n	800d498 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d41a:	69fa      	ldr	r2, [r7, #28]
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d1da      	bne.n	800d3d8 <create_chain+0x68>
 800d422:	2300      	movs	r3, #0
 800d424:	e038      	b.n	800d498 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d426:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d428:	f04f 32ff 	mov.w	r2, #4294967295
 800d42c:	69f9      	ldr	r1, [r7, #28]
 800d42e:	6938      	ldr	r0, [r7, #16]
 800d430:	f7ff fe1d 	bl	800d06e <put_fat>
 800d434:	4603      	mov	r3, r0
 800d436:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d438:	7dfb      	ldrb	r3, [r7, #23]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d109      	bne.n	800d452 <create_chain+0xe2>
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d006      	beq.n	800d452 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d444:	69fa      	ldr	r2, [r7, #28]
 800d446:	6839      	ldr	r1, [r7, #0]
 800d448:	6938      	ldr	r0, [r7, #16]
 800d44a:	f7ff fe10 	bl	800d06e <put_fat>
 800d44e:	4603      	mov	r3, r0
 800d450:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d452:	7dfb      	ldrb	r3, [r7, #23]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d116      	bne.n	800d486 <create_chain+0x116>
		fs->last_clst = ncl;
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	69fa      	ldr	r2, [r7, #28]
 800d45c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	699a      	ldr	r2, [r3, #24]
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	69db      	ldr	r3, [r3, #28]
 800d466:	3b02      	subs	r3, #2
 800d468:	429a      	cmp	r2, r3
 800d46a:	d804      	bhi.n	800d476 <create_chain+0x106>
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	699b      	ldr	r3, [r3, #24]
 800d470:	1e5a      	subs	r2, r3, #1
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	791b      	ldrb	r3, [r3, #4]
 800d47a:	f043 0301 	orr.w	r3, r3, #1
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	711a      	strb	r2, [r3, #4]
 800d484:	e007      	b.n	800d496 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d486:	7dfb      	ldrb	r3, [r7, #23]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d102      	bne.n	800d492 <create_chain+0x122>
 800d48c:	f04f 33ff 	mov.w	r3, #4294967295
 800d490:	e000      	b.n	800d494 <create_chain+0x124>
 800d492:	2301      	movs	r3, #1
 800d494:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d496:	69fb      	ldr	r3, [r7, #28]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3720      	adds	r7, #32
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b087      	sub	sp, #28
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	899b      	ldrh	r3, [r3, #12]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	8952      	ldrh	r2, [r2, #10]
 800d4c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	1d1a      	adds	r2, r3, #4
 800d4d2:	613a      	str	r2, [r7, #16]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d101      	bne.n	800d4e2 <clmt_clust+0x42>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	e010      	b.n	800d504 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800d4e2:	697a      	ldr	r2, [r7, #20]
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d307      	bcc.n	800d4fa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800d4ea:	697a      	ldr	r2, [r7, #20]
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	617b      	str	r3, [r7, #20]
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d4f8:	e7e9      	b.n	800d4ce <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800d4fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	4413      	add	r3, r2
}
 800d504:	4618      	mov	r0, r3
 800d506:	371c      	adds	r7, #28
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d526:	d204      	bcs.n	800d532 <dir_sdi+0x22>
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	f003 031f 	and.w	r3, r3, #31
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d532:	2302      	movs	r3, #2
 800d534:	e071      	b.n	800d61a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	683a      	ldr	r2, [r7, #0]
 800d53a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d106      	bne.n	800d556 <dir_sdi+0x46>
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d902      	bls.n	800d556 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d554:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10c      	bne.n	800d576 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	095b      	lsrs	r3, r3, #5
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	8912      	ldrh	r2, [r2, #8]
 800d564:	4293      	cmp	r3, r2
 800d566:	d301      	bcc.n	800d56c <dir_sdi+0x5c>
 800d568:	2302      	movs	r3, #2
 800d56a:	e056      	b.n	800d61a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	61da      	str	r2, [r3, #28]
 800d574:	e02d      	b.n	800d5d2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	895b      	ldrh	r3, [r3, #10]
 800d57a:	461a      	mov	r2, r3
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	899b      	ldrh	r3, [r3, #12]
 800d580:	fb02 f303 	mul.w	r3, r2, r3
 800d584:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d586:	e019      	b.n	800d5bc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6979      	ldr	r1, [r7, #20]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7ff fc9a 	bl	800cec6 <get_fat>
 800d592:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59a:	d101      	bne.n	800d5a0 <dir_sdi+0x90>
 800d59c:	2301      	movs	r3, #1
 800d59e:	e03c      	b.n	800d61a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d904      	bls.n	800d5b0 <dir_sdi+0xa0>
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	69db      	ldr	r3, [r3, #28]
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d301      	bcc.n	800d5b4 <dir_sdi+0xa4>
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	e032      	b.n	800d61a <dir_sdi+0x10a>
			ofs -= csz;
 800d5b4:	683a      	ldr	r2, [r7, #0]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d2e1      	bcs.n	800d588 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800d5c4:	6979      	ldr	r1, [r7, #20]
 800d5c6:	6938      	ldr	r0, [r7, #16]
 800d5c8:	f7ff fc5e 	bl	800ce88 <clust2sect>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	697a      	ldr	r2, [r7, #20]
 800d5d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	69db      	ldr	r3, [r3, #28]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d101      	bne.n	800d5e4 <dir_sdi+0xd4>
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	e01a      	b.n	800d61a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	69da      	ldr	r2, [r3, #28]
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	899b      	ldrh	r3, [r3, #12]
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d5f4:	441a      	add	r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	899b      	ldrh	r3, [r3, #12]
 800d604:	461a      	mov	r2, r3
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	fbb3 f0f2 	udiv	r0, r3, r2
 800d60c:	fb00 f202 	mul.w	r2, r0, r2
 800d610:	1a9b      	subs	r3, r3, r2
 800d612:	18ca      	adds	r2, r1, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3718      	adds	r7, #24
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b086      	sub	sp, #24
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
 800d62a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	695b      	ldr	r3, [r3, #20]
 800d636:	3320      	adds	r3, #32
 800d638:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	69db      	ldr	r3, [r3, #28]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <dir_next+0x28>
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d648:	d301      	bcc.n	800d64e <dir_next+0x2c>
 800d64a:	2304      	movs	r3, #4
 800d64c:	e0bb      	b.n	800d7c6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	899b      	ldrh	r3, [r3, #12]
 800d652:	461a      	mov	r2, r3
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	fbb3 f1f2 	udiv	r1, r3, r2
 800d65a:	fb01 f202 	mul.w	r2, r1, r2
 800d65e:	1a9b      	subs	r3, r3, r2
 800d660:	2b00      	cmp	r3, #0
 800d662:	f040 809d 	bne.w	800d7a0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	69db      	ldr	r3, [r3, #28]
 800d66a:	1c5a      	adds	r2, r3, #1
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	699b      	ldr	r3, [r3, #24]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10b      	bne.n	800d690 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	095b      	lsrs	r3, r3, #5
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	8912      	ldrh	r2, [r2, #8]
 800d680:	4293      	cmp	r3, r2
 800d682:	f0c0 808d 	bcc.w	800d7a0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2200      	movs	r2, #0
 800d68a:	61da      	str	r2, [r3, #28]
 800d68c:	2304      	movs	r3, #4
 800d68e:	e09a      	b.n	800d7c6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	899b      	ldrh	r3, [r3, #12]
 800d694:	461a      	mov	r2, r3
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	fbb3 f3f2 	udiv	r3, r3, r2
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	8952      	ldrh	r2, [r2, #10]
 800d6a0:	3a01      	subs	r2, #1
 800d6a2:	4013      	ands	r3, r2
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d17b      	bne.n	800d7a0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	699b      	ldr	r3, [r3, #24]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	4610      	mov	r0, r2
 800d6b2:	f7ff fc08 	bl	800cec6 <get_fat>
 800d6b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d801      	bhi.n	800d6c2 <dir_next+0xa0>
 800d6be:	2302      	movs	r3, #2
 800d6c0:	e081      	b.n	800d7c6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6c8:	d101      	bne.n	800d6ce <dir_next+0xac>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e07b      	b.n	800d7c6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	69db      	ldr	r3, [r3, #28]
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d359      	bcc.n	800d78c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d104      	bne.n	800d6e8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	61da      	str	r2, [r3, #28]
 800d6e4:	2304      	movs	r3, #4
 800d6e6:	e06e      	b.n	800d7c6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	699b      	ldr	r3, [r3, #24]
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	f7ff fe3d 	bl	800d370 <create_chain>
 800d6f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d101      	bne.n	800d702 <dir_next+0xe0>
 800d6fe:	2307      	movs	r3, #7
 800d700:	e061      	b.n	800d7c6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d101      	bne.n	800d70c <dir_next+0xea>
 800d708:	2302      	movs	r3, #2
 800d70a:	e05c      	b.n	800d7c6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d712:	d101      	bne.n	800d718 <dir_next+0xf6>
 800d714:	2301      	movs	r3, #1
 800d716:	e056      	b.n	800d7c6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f7ff fad3 	bl	800ccc4 <sync_window>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d001      	beq.n	800d728 <dir_next+0x106>
 800d724:	2301      	movs	r3, #1
 800d726:	e04e      	b.n	800d7c6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	899b      	ldrh	r3, [r3, #12]
 800d732:	461a      	mov	r2, r3
 800d734:	2100      	movs	r1, #0
 800d736:	f7ff f8fc 	bl	800c932 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d73a:	2300      	movs	r3, #0
 800d73c:	613b      	str	r3, [r7, #16]
 800d73e:	6979      	ldr	r1, [r7, #20]
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f7ff fba1 	bl	800ce88 <clust2sect>
 800d746:	4602      	mov	r2, r0
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	635a      	str	r2, [r3, #52]	; 0x34
 800d74c:	e012      	b.n	800d774 <dir_next+0x152>
						fs->wflag = 1;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2201      	movs	r2, #1
 800d752:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f7ff fab5 	bl	800ccc4 <sync_window>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d001      	beq.n	800d764 <dir_next+0x142>
 800d760:	2301      	movs	r3, #1
 800d762:	e030      	b.n	800d7c6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	3301      	adds	r3, #1
 800d768:	613b      	str	r3, [r7, #16]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	635a      	str	r2, [r3, #52]	; 0x34
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	895b      	ldrh	r3, [r3, #10]
 800d778:	461a      	mov	r2, r3
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d3e6      	bcc.n	800d74e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	1ad2      	subs	r2, r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	697a      	ldr	r2, [r7, #20]
 800d790:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d792:	6979      	ldr	r1, [r7, #20]
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f7ff fb77 	bl	800ce88 <clust2sect>
 800d79a:	4602      	mov	r2, r0
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	899b      	ldrh	r3, [r3, #12]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7b8:	fb00 f202 	mul.w	r2, r0, r2
 800d7bc:	1a9b      	subs	r3, r3, r2
 800d7be:	18ca      	adds	r2, r1, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3718      	adds	r7, #24
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b086      	sub	sp, #24
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d7de:	2100      	movs	r1, #0
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f7ff fe95 	bl	800d510 <dir_sdi>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7ea:	7dfb      	ldrb	r3, [r7, #23]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d12b      	bne.n	800d848 <dir_alloc+0x7a>
		n = 0;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	69db      	ldr	r3, [r3, #28]
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f7ff faa6 	bl	800cd4c <move_window>
 800d800:	4603      	mov	r3, r0
 800d802:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d804:	7dfb      	ldrb	r3, [r7, #23]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d11d      	bne.n	800d846 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a1b      	ldr	r3, [r3, #32]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	2be5      	cmp	r3, #229	; 0xe5
 800d812:	d004      	beq.n	800d81e <dir_alloc+0x50>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6a1b      	ldr	r3, [r3, #32]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d107      	bne.n	800d82e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	3301      	adds	r3, #1
 800d822:	613b      	str	r3, [r7, #16]
 800d824:	693a      	ldr	r2, [r7, #16]
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d102      	bne.n	800d832 <dir_alloc+0x64>
 800d82c:	e00c      	b.n	800d848 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d82e:	2300      	movs	r3, #0
 800d830:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d832:	2101      	movs	r1, #1
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7ff fef4 	bl	800d622 <dir_next>
 800d83a:	4603      	mov	r3, r0
 800d83c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d83e:	7dfb      	ldrb	r3, [r7, #23]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d0d7      	beq.n	800d7f4 <dir_alloc+0x26>
 800d844:	e000      	b.n	800d848 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d846:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d848:	7dfb      	ldrb	r3, [r7, #23]
 800d84a:	2b04      	cmp	r3, #4
 800d84c:	d101      	bne.n	800d852 <dir_alloc+0x84>
 800d84e:	2307      	movs	r3, #7
 800d850:	75fb      	strb	r3, [r7, #23]
	return res;
 800d852:	7dfb      	ldrb	r3, [r7, #23]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3718      	adds	r7, #24
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	331a      	adds	r3, #26
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fe ffbe 	bl	800c7ec <ld_word>
 800d870:	4603      	mov	r3, r0
 800d872:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	2b03      	cmp	r3, #3
 800d87a:	d109      	bne.n	800d890 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	3314      	adds	r3, #20
 800d880:	4618      	mov	r0, r3
 800d882:	f7fe ffb3 	bl	800c7ec <ld_word>
 800d886:	4603      	mov	r3, r0
 800d888:	041b      	lsls	r3, r3, #16
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	4313      	orrs	r3, r2
 800d88e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d890:	68fb      	ldr	r3, [r7, #12]
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}

0800d89a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d89a:	b580      	push	{r7, lr}
 800d89c:	b084      	sub	sp, #16
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	60f8      	str	r0, [r7, #12]
 800d8a2:	60b9      	str	r1, [r7, #8]
 800d8a4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	331a      	adds	r3, #26
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	b292      	uxth	r2, r2
 800d8ae:	4611      	mov	r1, r2
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7fe ffd6 	bl	800c862 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b03      	cmp	r3, #3
 800d8bc:	d109      	bne.n	800d8d2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	f103 0214 	add.w	r2, r3, #20
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	0c1b      	lsrs	r3, r3, #16
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	f7fe ffc8 	bl	800c862 <st_word>
	}
}
 800d8d2:	bf00      	nop
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
	...

0800d8dc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d8dc:	b590      	push	{r4, r7, lr}
 800d8de:	b087      	sub	sp, #28
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	331a      	adds	r3, #26
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fe ff7e 	bl	800c7ec <ld_word>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d001      	beq.n	800d8fa <cmp_lfn+0x1e>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	e059      	b.n	800d9ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d902:	1e5a      	subs	r2, r3, #1
 800d904:	4613      	mov	r3, r2
 800d906:	005b      	lsls	r3, r3, #1
 800d908:	4413      	add	r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	4413      	add	r3, r2
 800d90e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d910:	2301      	movs	r3, #1
 800d912:	81fb      	strh	r3, [r7, #14]
 800d914:	2300      	movs	r3, #0
 800d916:	613b      	str	r3, [r7, #16]
 800d918:	e033      	b.n	800d982 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d91a:	4a27      	ldr	r2, [pc, #156]	; (800d9b8 <cmp_lfn+0xdc>)
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	4413      	add	r3, r2
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	461a      	mov	r2, r3
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	4413      	add	r3, r2
 800d928:	4618      	mov	r0, r3
 800d92a:	f7fe ff5f 	bl	800c7ec <ld_word>
 800d92e:	4603      	mov	r3, r0
 800d930:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d932:	89fb      	ldrh	r3, [r7, #14]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d01a      	beq.n	800d96e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	2bfe      	cmp	r3, #254	; 0xfe
 800d93c:	d812      	bhi.n	800d964 <cmp_lfn+0x88>
 800d93e:	89bb      	ldrh	r3, [r7, #12]
 800d940:	4618      	mov	r0, r3
 800d942:	f002 faa1 	bl	800fe88 <ff_wtoupper>
 800d946:	4603      	mov	r3, r0
 800d948:	461c      	mov	r4, r3
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	1c5a      	adds	r2, r3, #1
 800d94e:	617a      	str	r2, [r7, #20]
 800d950:	005b      	lsls	r3, r3, #1
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	4413      	add	r3, r2
 800d956:	881b      	ldrh	r3, [r3, #0]
 800d958:	4618      	mov	r0, r3
 800d95a:	f002 fa95 	bl	800fe88 <ff_wtoupper>
 800d95e:	4603      	mov	r3, r0
 800d960:	429c      	cmp	r4, r3
 800d962:	d001      	beq.n	800d968 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d964:	2300      	movs	r3, #0
 800d966:	e022      	b.n	800d9ae <cmp_lfn+0xd2>
			}
			wc = uc;
 800d968:	89bb      	ldrh	r3, [r7, #12]
 800d96a:	81fb      	strh	r3, [r7, #14]
 800d96c:	e006      	b.n	800d97c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d96e:	89bb      	ldrh	r3, [r7, #12]
 800d970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d974:	4293      	cmp	r3, r2
 800d976:	d001      	beq.n	800d97c <cmp_lfn+0xa0>
 800d978:	2300      	movs	r3, #0
 800d97a:	e018      	b.n	800d9ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	3301      	adds	r3, #1
 800d980:	613b      	str	r3, [r7, #16]
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	2b0c      	cmp	r3, #12
 800d986:	d9c8      	bls.n	800d91a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00b      	beq.n	800d9ac <cmp_lfn+0xd0>
 800d994:	89fb      	ldrh	r3, [r7, #14]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d008      	beq.n	800d9ac <cmp_lfn+0xd0>
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	005b      	lsls	r3, r3, #1
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	881b      	ldrh	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d001      	beq.n	800d9ac <cmp_lfn+0xd0>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e000      	b.n	800d9ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d9ac:	2301      	movs	r3, #1
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	371c      	adds	r7, #28
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd90      	pop	{r4, r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	080144c4 	.word	0x080144c4

0800d9bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	71fb      	strb	r3, [r7, #7]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	330d      	adds	r3, #13
 800d9d6:	79ba      	ldrb	r2, [r7, #6]
 800d9d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	330b      	adds	r3, #11
 800d9de:	220f      	movs	r2, #15
 800d9e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	330c      	adds	r3, #12
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	331a      	adds	r3, #26
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7fe ff36 	bl	800c862 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d9f6:	79fb      	ldrb	r3, [r7, #7]
 800d9f8:	1e5a      	subs	r2, r3, #1
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	005b      	lsls	r3, r3, #1
 800d9fe:	4413      	add	r3, r2
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	4413      	add	r3, r2
 800da04:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800da06:	2300      	movs	r3, #0
 800da08:	82fb      	strh	r3, [r7, #22]
 800da0a:	2300      	movs	r3, #0
 800da0c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800da0e:	8afb      	ldrh	r3, [r7, #22]
 800da10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da14:	4293      	cmp	r3, r2
 800da16:	d007      	beq.n	800da28 <put_lfn+0x6c>
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	61fa      	str	r2, [r7, #28]
 800da1e:	005b      	lsls	r3, r3, #1
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	4413      	add	r3, r2
 800da24:	881b      	ldrh	r3, [r3, #0]
 800da26:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800da28:	4a17      	ldr	r2, [pc, #92]	; (800da88 <put_lfn+0xcc>)
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	4413      	add	r3, r2
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	461a      	mov	r2, r3
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	4413      	add	r3, r2
 800da36:	8afa      	ldrh	r2, [r7, #22]
 800da38:	4611      	mov	r1, r2
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fe ff11 	bl	800c862 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800da40:	8afb      	ldrh	r3, [r7, #22]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d102      	bne.n	800da4c <put_lfn+0x90>
 800da46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da4a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	3301      	adds	r3, #1
 800da50:	61bb      	str	r3, [r7, #24]
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	2b0c      	cmp	r3, #12
 800da56:	d9da      	bls.n	800da0e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800da58:	8afb      	ldrh	r3, [r7, #22]
 800da5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da5e:	4293      	cmp	r3, r2
 800da60:	d006      	beq.n	800da70 <put_lfn+0xb4>
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	005b      	lsls	r3, r3, #1
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	4413      	add	r3, r2
 800da6a:	881b      	ldrh	r3, [r3, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d103      	bne.n	800da78 <put_lfn+0xbc>
 800da70:	79fb      	ldrb	r3, [r7, #7]
 800da72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da76:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	79fa      	ldrb	r2, [r7, #7]
 800da7c:	701a      	strb	r2, [r3, #0]
}
 800da7e:	bf00      	nop
 800da80:	3720      	adds	r7, #32
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	080144c4 	.word	0x080144c4

0800da8c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08c      	sub	sp, #48	; 0x30
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
 800da98:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800da9a:	220b      	movs	r2, #11
 800da9c:	68b9      	ldr	r1, [r7, #8]
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	f7fe ff26 	bl	800c8f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2b05      	cmp	r3, #5
 800daa8:	d92b      	bls.n	800db02 <gen_numname+0x76>
		sr = seq;
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800daae:	e022      	b.n	800daf6 <gen_numname+0x6a>
			wc = *lfn++;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	1c9a      	adds	r2, r3, #2
 800dab4:	607a      	str	r2, [r7, #4]
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800daba:	2300      	movs	r3, #0
 800dabc:	62bb      	str	r3, [r7, #40]	; 0x28
 800dabe:	e017      	b.n	800daf0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	005a      	lsls	r2, r3, #1
 800dac4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	4413      	add	r3, r2
 800dacc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800dace:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dad0:	085b      	lsrs	r3, r3, #1
 800dad2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d005      	beq.n	800daea <gen_numname+0x5e>
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800dae4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800dae8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800daea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daec:	3301      	adds	r3, #1
 800daee:	62bb      	str	r3, [r7, #40]	; 0x28
 800daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf2:	2b0f      	cmp	r3, #15
 800daf4:	d9e4      	bls.n	800dac0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	881b      	ldrh	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d1d8      	bne.n	800dab0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800db02:	2307      	movs	r3, #7
 800db04:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	f003 030f 	and.w	r3, r3, #15
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	3330      	adds	r3, #48	; 0x30
 800db12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800db16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db1a:	2b39      	cmp	r3, #57	; 0x39
 800db1c:	d904      	bls.n	800db28 <gen_numname+0x9c>
 800db1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db22:	3307      	adds	r3, #7
 800db24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800db28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2a:	1e5a      	subs	r2, r3, #1
 800db2c:	62ba      	str	r2, [r7, #40]	; 0x28
 800db2e:	3330      	adds	r3, #48	; 0x30
 800db30:	443b      	add	r3, r7
 800db32:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800db36:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	091b      	lsrs	r3, r3, #4
 800db3e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1df      	bne.n	800db06 <gen_numname+0x7a>
	ns[i] = '~';
 800db46:	f107 0214 	add.w	r2, r7, #20
 800db4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4c:	4413      	add	r3, r2
 800db4e:	227e      	movs	r2, #126	; 0x7e
 800db50:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800db52:	2300      	movs	r3, #0
 800db54:	627b      	str	r3, [r7, #36]	; 0x24
 800db56:	e002      	b.n	800db5e <gen_numname+0xd2>
 800db58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5a:	3301      	adds	r3, #1
 800db5c:	627b      	str	r3, [r7, #36]	; 0x24
 800db5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db62:	429a      	cmp	r2, r3
 800db64:	d205      	bcs.n	800db72 <gen_numname+0xe6>
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	4413      	add	r3, r2
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	2b20      	cmp	r3, #32
 800db70:	d1f2      	bne.n	800db58 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800db72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db74:	2b07      	cmp	r3, #7
 800db76:	d807      	bhi.n	800db88 <gen_numname+0xfc>
 800db78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	62ba      	str	r2, [r7, #40]	; 0x28
 800db7e:	3330      	adds	r3, #48	; 0x30
 800db80:	443b      	add	r3, r7
 800db82:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800db86:	e000      	b.n	800db8a <gen_numname+0xfe>
 800db88:	2120      	movs	r1, #32
 800db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	627a      	str	r2, [r7, #36]	; 0x24
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	4413      	add	r3, r2
 800db94:	460a      	mov	r2, r1
 800db96:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	2b07      	cmp	r3, #7
 800db9c:	d9e9      	bls.n	800db72 <gen_numname+0xe6>
}
 800db9e:	bf00      	nop
 800dba0:	bf00      	nop
 800dba2:	3730      	adds	r7, #48	; 0x30
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b085      	sub	sp, #20
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800dbb4:	230b      	movs	r3, #11
 800dbb6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	0852      	lsrs	r2, r2, #1
 800dbbe:	01db      	lsls	r3, r3, #7
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	1c59      	adds	r1, r3, #1
 800dbc8:	6079      	str	r1, [r7, #4]
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	4413      	add	r3, r2
 800dbce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	60bb      	str	r3, [r7, #8]
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1ed      	bne.n	800dbb8 <sum_sfn+0x10>
	return sum;
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3714      	adds	r7, #20
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b086      	sub	sp, #24
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7ff fc88 	bl	800d510 <dir_sdi>
 800dc00:	4603      	mov	r3, r0
 800dc02:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dc04:	7dfb      	ldrb	r3, [r7, #23]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d001      	beq.n	800dc0e <dir_find+0x24>
 800dc0a:	7dfb      	ldrb	r3, [r7, #23]
 800dc0c:	e0a9      	b.n	800dd62 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dc0e:	23ff      	movs	r3, #255	; 0xff
 800dc10:	753b      	strb	r3, [r7, #20]
 800dc12:	7d3b      	ldrb	r3, [r7, #20]
 800dc14:	757b      	strb	r3, [r7, #21]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f04f 32ff 	mov.w	r2, #4294967295
 800dc1c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	69db      	ldr	r3, [r3, #28]
 800dc22:	4619      	mov	r1, r3
 800dc24:	6938      	ldr	r0, [r7, #16]
 800dc26:	f7ff f891 	bl	800cd4c <move_window>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f040 8090 	bne.w	800dd56 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dc3e:	7dbb      	ldrb	r3, [r7, #22]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <dir_find+0x60>
 800dc44:	2304      	movs	r3, #4
 800dc46:	75fb      	strb	r3, [r7, #23]
 800dc48:	e08a      	b.n	800dd60 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a1b      	ldr	r3, [r3, #32]
 800dc4e:	330b      	adds	r3, #11
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc56:	73fb      	strb	r3, [r7, #15]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	7bfa      	ldrb	r2, [r7, #15]
 800dc5c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dc5e:	7dbb      	ldrb	r3, [r7, #22]
 800dc60:	2be5      	cmp	r3, #229	; 0xe5
 800dc62:	d007      	beq.n	800dc74 <dir_find+0x8a>
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
 800dc66:	f003 0308 	and.w	r3, r3, #8
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d009      	beq.n	800dc82 <dir_find+0x98>
 800dc6e:	7bfb      	ldrb	r3, [r7, #15]
 800dc70:	2b0f      	cmp	r3, #15
 800dc72:	d006      	beq.n	800dc82 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dc74:	23ff      	movs	r3, #255	; 0xff
 800dc76:	757b      	strb	r3, [r7, #21]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc7e:	631a      	str	r2, [r3, #48]	; 0x30
 800dc80:	e05e      	b.n	800dd40 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dc82:	7bfb      	ldrb	r3, [r7, #15]
 800dc84:	2b0f      	cmp	r3, #15
 800dc86:	d136      	bne.n	800dcf6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d154      	bne.n	800dd40 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800dc96:	7dbb      	ldrb	r3, [r7, #22]
 800dc98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00d      	beq.n	800dcbc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6a1b      	ldr	r3, [r3, #32]
 800dca4:	7b5b      	ldrb	r3, [r3, #13]
 800dca6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800dca8:	7dbb      	ldrb	r3, [r7, #22]
 800dcaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcae:	75bb      	strb	r3, [r7, #22]
 800dcb0:	7dbb      	ldrb	r3, [r7, #22]
 800dcb2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	695a      	ldr	r2, [r3, #20]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dcbc:	7dba      	ldrb	r2, [r7, #22]
 800dcbe:	7d7b      	ldrb	r3, [r7, #21]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d115      	bne.n	800dcf0 <dir_find+0x106>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6a1b      	ldr	r3, [r3, #32]
 800dcc8:	330d      	adds	r3, #13
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	7d3a      	ldrb	r2, [r7, #20]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d10e      	bne.n	800dcf0 <dir_find+0x106>
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	691a      	ldr	r2, [r3, #16]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a1b      	ldr	r3, [r3, #32]
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4610      	mov	r0, r2
 800dcde:	f7ff fdfd 	bl	800d8dc <cmp_lfn>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d003      	beq.n	800dcf0 <dir_find+0x106>
 800dce8:	7d7b      	ldrb	r3, [r7, #21]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	e000      	b.n	800dcf2 <dir_find+0x108>
 800dcf0:	23ff      	movs	r3, #255	; 0xff
 800dcf2:	757b      	strb	r3, [r7, #21]
 800dcf4:	e024      	b.n	800dd40 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dcf6:	7d7b      	ldrb	r3, [r7, #21]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d109      	bne.n	800dd10 <dir_find+0x126>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a1b      	ldr	r3, [r3, #32]
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7ff ff51 	bl	800dba8 <sum_sfn>
 800dd06:	4603      	mov	r3, r0
 800dd08:	461a      	mov	r2, r3
 800dd0a:	7d3b      	ldrb	r3, [r7, #20]
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d024      	beq.n	800dd5a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10a      	bne.n	800dd34 <dir_find+0x14a>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6a18      	ldr	r0, [r3, #32]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	3324      	adds	r3, #36	; 0x24
 800dd26:	220b      	movs	r2, #11
 800dd28:	4619      	mov	r1, r3
 800dd2a:	f7fe fe1d 	bl	800c968 <mem_cmp>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d014      	beq.n	800dd5e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dd34:	23ff      	movs	r3, #255	; 0xff
 800dd36:	757b      	strb	r3, [r7, #21]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd3e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dd40:	2100      	movs	r1, #0
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f7ff fc6d 	bl	800d622 <dir_next>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dd4c:	7dfb      	ldrb	r3, [r7, #23]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f43f af65 	beq.w	800dc1e <dir_find+0x34>
 800dd54:	e004      	b.n	800dd60 <dir_find+0x176>
		if (res != FR_OK) break;
 800dd56:	bf00      	nop
 800dd58:	e002      	b.n	800dd60 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dd5a:	bf00      	nop
 800dd5c:	e000      	b.n	800dd60 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dd5e:	bf00      	nop

	return res;
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
	...

0800dd6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08c      	sub	sp, #48	; 0x30
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dd80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <dir_register+0x20>
 800dd88:	2306      	movs	r3, #6
 800dd8a:	e0e0      	b.n	800df4e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	627b      	str	r3, [r7, #36]	; 0x24
 800dd90:	e002      	b.n	800dd98 <dir_register+0x2c>
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	3301      	adds	r3, #1
 800dd96:	627b      	str	r3, [r7, #36]	; 0x24
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	691a      	ldr	r2, [r3, #16]
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	4413      	add	r3, r2
 800dda2:	881b      	ldrh	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1f4      	bne.n	800dd92 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ddae:	f107 030c 	add.w	r3, r7, #12
 800ddb2:	220c      	movs	r2, #12
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fe fd9b 	bl	800c8f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
 800ddbc:	f003 0301 	and.w	r3, r3, #1
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d032      	beq.n	800de2a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2240      	movs	r2, #64	; 0x40
 800ddc8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ddcc:	2301      	movs	r3, #1
 800ddce:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddd0:	e016      	b.n	800de00 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	691a      	ldr	r2, [r3, #16]
 800dddc:	f107 010c 	add.w	r1, r7, #12
 800dde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde2:	f7ff fe53 	bl	800da8c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7ff feff 	bl	800dbea <dir_find>
 800ddec:	4603      	mov	r3, r0
 800ddee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ddf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	62bb      	str	r3, [r7, #40]	; 0x28
 800de00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de02:	2b63      	cmp	r3, #99	; 0x63
 800de04:	d9e5      	bls.n	800ddd2 <dir_register+0x66>
 800de06:	e000      	b.n	800de0a <dir_register+0x9e>
			if (res != FR_OK) break;
 800de08:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800de0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0c:	2b64      	cmp	r3, #100	; 0x64
 800de0e:	d101      	bne.n	800de14 <dir_register+0xa8>
 800de10:	2307      	movs	r3, #7
 800de12:	e09c      	b.n	800df4e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800de14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de18:	2b04      	cmp	r3, #4
 800de1a:	d002      	beq.n	800de22 <dir_register+0xb6>
 800de1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de20:	e095      	b.n	800df4e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800de22:	7dfa      	ldrb	r2, [r7, #23]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800de2a:	7dfb      	ldrb	r3, [r7, #23]
 800de2c:	f003 0302 	and.w	r3, r3, #2
 800de30:	2b00      	cmp	r3, #0
 800de32:	d007      	beq.n	800de44 <dir_register+0xd8>
 800de34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de36:	330c      	adds	r3, #12
 800de38:	4a47      	ldr	r2, [pc, #284]	; (800df58 <dir_register+0x1ec>)
 800de3a:	fba2 2303 	umull	r2, r3, r2, r3
 800de3e:	089b      	lsrs	r3, r3, #2
 800de40:	3301      	adds	r3, #1
 800de42:	e000      	b.n	800de46 <dir_register+0xda>
 800de44:	2301      	movs	r3, #1
 800de46:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800de48:	6a39      	ldr	r1, [r7, #32]
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f7ff fcbf 	bl	800d7ce <dir_alloc>
 800de50:	4603      	mov	r3, r0
 800de52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800de56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d148      	bne.n	800def0 <dir_register+0x184>
 800de5e:	6a3b      	ldr	r3, [r7, #32]
 800de60:	3b01      	subs	r3, #1
 800de62:	623b      	str	r3, [r7, #32]
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d042      	beq.n	800def0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	695a      	ldr	r2, [r3, #20]
 800de6e:	6a3b      	ldr	r3, [r7, #32]
 800de70:	015b      	lsls	r3, r3, #5
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	4619      	mov	r1, r3
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7ff fb4a 	bl	800d510 <dir_sdi>
 800de7c:	4603      	mov	r3, r0
 800de7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800de82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de86:	2b00      	cmp	r3, #0
 800de88:	d132      	bne.n	800def0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	3324      	adds	r3, #36	; 0x24
 800de8e:	4618      	mov	r0, r3
 800de90:	f7ff fe8a 	bl	800dba8 <sum_sfn>
 800de94:	4603      	mov	r3, r0
 800de96:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	4619      	mov	r1, r3
 800de9e:	69f8      	ldr	r0, [r7, #28]
 800dea0:	f7fe ff54 	bl	800cd4c <move_window>
 800dea4:	4603      	mov	r3, r0
 800dea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800deaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d11d      	bne.n	800deee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	6918      	ldr	r0, [r3, #16]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a19      	ldr	r1, [r3, #32]
 800deba:	6a3b      	ldr	r3, [r7, #32]
 800debc:	b2da      	uxtb	r2, r3
 800debe:	7efb      	ldrb	r3, [r7, #27]
 800dec0:	f7ff fd7c 	bl	800d9bc <put_lfn>
				fs->wflag = 1;
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	2201      	movs	r2, #1
 800dec8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800deca:	2100      	movs	r1, #0
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff fba8 	bl	800d622 <dir_next>
 800ded2:	4603      	mov	r3, r0
 800ded4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ded8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d107      	bne.n	800def0 <dir_register+0x184>
 800dee0:	6a3b      	ldr	r3, [r7, #32]
 800dee2:	3b01      	subs	r3, #1
 800dee4:	623b      	str	r3, [r7, #32]
 800dee6:	6a3b      	ldr	r3, [r7, #32]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d1d5      	bne.n	800de98 <dir_register+0x12c>
 800deec:	e000      	b.n	800def0 <dir_register+0x184>
				if (res != FR_OK) break;
 800deee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800def0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800def4:	2b00      	cmp	r3, #0
 800def6:	d128      	bne.n	800df4a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	69db      	ldr	r3, [r3, #28]
 800defc:	4619      	mov	r1, r3
 800defe:	69f8      	ldr	r0, [r7, #28]
 800df00:	f7fe ff24 	bl	800cd4c <move_window>
 800df04:	4603      	mov	r3, r0
 800df06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800df0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d11b      	bne.n	800df4a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	2220      	movs	r2, #32
 800df18:	2100      	movs	r1, #0
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fe fd09 	bl	800c932 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6a18      	ldr	r0, [r3, #32]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	3324      	adds	r3, #36	; 0x24
 800df28:	220b      	movs	r2, #11
 800df2a:	4619      	mov	r1, r3
 800df2c:	f7fe fce0 	bl	800c8f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a1b      	ldr	r3, [r3, #32]
 800df3a:	330c      	adds	r3, #12
 800df3c:	f002 0218 	and.w	r2, r2, #24
 800df40:	b2d2      	uxtb	r2, r2
 800df42:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	2201      	movs	r2, #1
 800df48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800df4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3730      	adds	r7, #48	; 0x30
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	4ec4ec4f 	.word	0x4ec4ec4f

0800df5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b08a      	sub	sp, #40	; 0x28
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	613b      	str	r3, [r7, #16]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	60fb      	str	r3, [r7, #12]
 800df74:	2300      	movs	r3, #0
 800df76:	617b      	str	r3, [r7, #20]
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	1c5a      	adds	r2, r3, #1
 800df80:	61ba      	str	r2, [r7, #24]
 800df82:	693a      	ldr	r2, [r7, #16]
 800df84:	4413      	add	r3, r2
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800df8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df8c:	2b1f      	cmp	r3, #31
 800df8e:	d940      	bls.n	800e012 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800df90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df92:	2b2f      	cmp	r3, #47	; 0x2f
 800df94:	d006      	beq.n	800dfa4 <create_name+0x48>
 800df96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df98:	2b5c      	cmp	r3, #92	; 0x5c
 800df9a:	d110      	bne.n	800dfbe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800df9c:	e002      	b.n	800dfa4 <create_name+0x48>
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	61bb      	str	r3, [r7, #24]
 800dfa4:	693a      	ldr	r2, [r7, #16]
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	2b2f      	cmp	r3, #47	; 0x2f
 800dfae:	d0f6      	beq.n	800df9e <create_name+0x42>
 800dfb0:	693a      	ldr	r2, [r7, #16]
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	2b5c      	cmp	r3, #92	; 0x5c
 800dfba:	d0f0      	beq.n	800df9e <create_name+0x42>
			break;
 800dfbc:	e02a      	b.n	800e014 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2bfe      	cmp	r3, #254	; 0xfe
 800dfc2:	d901      	bls.n	800dfc8 <create_name+0x6c>
 800dfc4:	2306      	movs	r3, #6
 800dfc6:	e17d      	b.n	800e2c4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800dfc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dfce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfd0:	2101      	movs	r1, #1
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f001 ff1c 	bl	800fe10 <ff_convert>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dfdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d101      	bne.n	800dfe6 <create_name+0x8a>
 800dfe2:	2306      	movs	r3, #6
 800dfe4:	e16e      	b.n	800e2c4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dfe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfe8:	2b7f      	cmp	r3, #127	; 0x7f
 800dfea:	d809      	bhi.n	800e000 <create_name+0xa4>
 800dfec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfee:	4619      	mov	r1, r3
 800dff0:	488d      	ldr	r0, [pc, #564]	; (800e228 <create_name+0x2cc>)
 800dff2:	f7fe fce0 	bl	800c9b6 <chk_chr>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d001      	beq.n	800e000 <create_name+0xa4>
 800dffc:	2306      	movs	r3, #6
 800dffe:	e161      	b.n	800e2c4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	1c5a      	adds	r2, r3, #1
 800e004:	617a      	str	r2, [r7, #20]
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	4413      	add	r3, r2
 800e00c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e00e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e010:	e7b4      	b.n	800df7c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e012:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e014:	693a      	ldr	r2, [r7, #16]
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	441a      	add	r2, r3
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e01e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e020:	2b1f      	cmp	r3, #31
 800e022:	d801      	bhi.n	800e028 <create_name+0xcc>
 800e024:	2304      	movs	r3, #4
 800e026:	e000      	b.n	800e02a <create_name+0xce>
 800e028:	2300      	movs	r3, #0
 800e02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e02e:	e011      	b.n	800e054 <create_name+0xf8>
		w = lfn[di - 1];
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e036:	3b01      	subs	r3, #1
 800e038:	005b      	lsls	r3, r3, #1
 800e03a:	68fa      	ldr	r2, [r7, #12]
 800e03c:	4413      	add	r3, r2
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e044:	2b20      	cmp	r3, #32
 800e046:	d002      	beq.n	800e04e <create_name+0xf2>
 800e048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e04a:	2b2e      	cmp	r3, #46	; 0x2e
 800e04c:	d106      	bne.n	800e05c <create_name+0x100>
		di--;
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	3b01      	subs	r3, #1
 800e052:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1ea      	bne.n	800e030 <create_name+0xd4>
 800e05a:	e000      	b.n	800e05e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e05c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	005b      	lsls	r3, r3, #1
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	4413      	add	r3, r2
 800e066:	2200      	movs	r2, #0
 800e068:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d101      	bne.n	800e074 <create_name+0x118>
 800e070:	2306      	movs	r3, #6
 800e072:	e127      	b.n	800e2c4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	3324      	adds	r3, #36	; 0x24
 800e078:	220b      	movs	r2, #11
 800e07a:	2120      	movs	r1, #32
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe fc58 	bl	800c932 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e082:	2300      	movs	r3, #0
 800e084:	61bb      	str	r3, [r7, #24]
 800e086:	e002      	b.n	800e08e <create_name+0x132>
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	3301      	adds	r3, #1
 800e08c:	61bb      	str	r3, [r7, #24]
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	4413      	add	r3, r2
 800e096:	881b      	ldrh	r3, [r3, #0]
 800e098:	2b20      	cmp	r3, #32
 800e09a:	d0f5      	beq.n	800e088 <create_name+0x12c>
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	005b      	lsls	r3, r3, #1
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	2b2e      	cmp	r3, #46	; 0x2e
 800e0a8:	d0ee      	beq.n	800e088 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d009      	beq.n	800e0c4 <create_name+0x168>
 800e0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0b4:	f043 0303 	orr.w	r3, r3, #3
 800e0b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e0bc:	e002      	b.n	800e0c4 <create_name+0x168>
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	617b      	str	r3, [r7, #20]
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d009      	beq.n	800e0de <create_name+0x182>
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	881b      	ldrh	r3, [r3, #0]
 800e0da:	2b2e      	cmp	r3, #46	; 0x2e
 800e0dc:	d1ef      	bne.n	800e0be <create_name+0x162>

	i = b = 0; ni = 8;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	623b      	str	r3, [r7, #32]
 800e0e8:	2308      	movs	r3, #8
 800e0ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	1c5a      	adds	r2, r3, #1
 800e0f0:	61ba      	str	r2, [r7, #24]
 800e0f2:	005b      	lsls	r3, r3, #1
 800e0f4:	68fa      	ldr	r2, [r7, #12]
 800e0f6:	4413      	add	r3, r2
 800e0f8:	881b      	ldrh	r3, [r3, #0]
 800e0fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e0fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	f000 8090 	beq.w	800e224 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e106:	2b20      	cmp	r3, #32
 800e108:	d006      	beq.n	800e118 <create_name+0x1bc>
 800e10a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e10c:	2b2e      	cmp	r3, #46	; 0x2e
 800e10e:	d10a      	bne.n	800e126 <create_name+0x1ca>
 800e110:	69ba      	ldr	r2, [r7, #24]
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	429a      	cmp	r2, r3
 800e116:	d006      	beq.n	800e126 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e11c:	f043 0303 	orr.w	r3, r3, #3
 800e120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e124:	e07d      	b.n	800e222 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e126:	6a3a      	ldr	r2, [r7, #32]
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d203      	bcs.n	800e136 <create_name+0x1da>
 800e12e:	69ba      	ldr	r2, [r7, #24]
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	429a      	cmp	r2, r3
 800e134:	d123      	bne.n	800e17e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	2b0b      	cmp	r3, #11
 800e13a:	d106      	bne.n	800e14a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e140:	f043 0303 	orr.w	r3, r3, #3
 800e144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e148:	e075      	b.n	800e236 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e14a:	69ba      	ldr	r2, [r7, #24]
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d005      	beq.n	800e15e <create_name+0x202>
 800e152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e156:	f043 0303 	orr.w	r3, r3, #3
 800e15a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e15e:	69ba      	ldr	r2, [r7, #24]
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	429a      	cmp	r2, r3
 800e164:	d866      	bhi.n	800e234 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	61bb      	str	r3, [r7, #24]
 800e16a:	2308      	movs	r3, #8
 800e16c:	623b      	str	r3, [r7, #32]
 800e16e:	230b      	movs	r3, #11
 800e170:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e172:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e17c:	e051      	b.n	800e222 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e17e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e180:	2b7f      	cmp	r3, #127	; 0x7f
 800e182:	d914      	bls.n	800e1ae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e186:	2100      	movs	r1, #0
 800e188:	4618      	mov	r0, r3
 800e18a:	f001 fe41 	bl	800fe10 <ff_convert>
 800e18e:	4603      	mov	r3, r0
 800e190:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e194:	2b00      	cmp	r3, #0
 800e196:	d004      	beq.n	800e1a2 <create_name+0x246>
 800e198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e19a:	3b80      	subs	r3, #128	; 0x80
 800e19c:	4a23      	ldr	r2, [pc, #140]	; (800e22c <create_name+0x2d0>)
 800e19e:	5cd3      	ldrb	r3, [r2, r3]
 800e1a0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1a6:	f043 0302 	orr.w	r3, r3, #2
 800e1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e1ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d007      	beq.n	800e1c4 <create_name+0x268>
 800e1b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	481d      	ldr	r0, [pc, #116]	; (800e230 <create_name+0x2d4>)
 800e1ba:	f7fe fbfc 	bl	800c9b6 <chk_chr>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d008      	beq.n	800e1d6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e1c4:	235f      	movs	r3, #95	; 0x5f
 800e1c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e1c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1cc:	f043 0303 	orr.w	r3, r3, #3
 800e1d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1d4:	e01b      	b.n	800e20e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e1d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1d8:	2b40      	cmp	r3, #64	; 0x40
 800e1da:	d909      	bls.n	800e1f0 <create_name+0x294>
 800e1dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1de:	2b5a      	cmp	r3, #90	; 0x5a
 800e1e0:	d806      	bhi.n	800e1f0 <create_name+0x294>
					b |= 2;
 800e1e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1e6:	f043 0302 	orr.w	r3, r3, #2
 800e1ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e1ee:	e00e      	b.n	800e20e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e1f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1f2:	2b60      	cmp	r3, #96	; 0x60
 800e1f4:	d90b      	bls.n	800e20e <create_name+0x2b2>
 800e1f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1f8:	2b7a      	cmp	r3, #122	; 0x7a
 800e1fa:	d808      	bhi.n	800e20e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e1fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e200:	f043 0301 	orr.w	r3, r3, #1
 800e204:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e20a:	3b20      	subs	r3, #32
 800e20c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e20e:	6a3b      	ldr	r3, [r7, #32]
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	623a      	str	r2, [r7, #32]
 800e214:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e216:	b2d1      	uxtb	r1, r2
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	4413      	add	r3, r2
 800e21c:	460a      	mov	r2, r1
 800e21e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e222:	e763      	b.n	800e0ec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e224:	bf00      	nop
 800e226:	e006      	b.n	800e236 <create_name+0x2da>
 800e228:	080143a8 	.word	0x080143a8
 800e22c:	08014444 	.word	0x08014444
 800e230:	080143b4 	.word	0x080143b4
			if (si > di) break;			/* No extension */
 800e234:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e23c:	2be5      	cmp	r3, #229	; 0xe5
 800e23e:	d103      	bne.n	800e248 <create_name+0x2ec>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2205      	movs	r2, #5
 800e244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	2b08      	cmp	r3, #8
 800e24c:	d104      	bne.n	800e258 <create_name+0x2fc>
 800e24e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e25c:	f003 030c 	and.w	r3, r3, #12
 800e260:	2b0c      	cmp	r3, #12
 800e262:	d005      	beq.n	800e270 <create_name+0x314>
 800e264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e268:	f003 0303 	and.w	r3, r3, #3
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d105      	bne.n	800e27c <create_name+0x320>
 800e270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e274:	f043 0302 	orr.w	r3, r3, #2
 800e278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e280:	f003 0302 	and.w	r3, r3, #2
 800e284:	2b00      	cmp	r3, #0
 800e286:	d117      	bne.n	800e2b8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e28c:	f003 0303 	and.w	r3, r3, #3
 800e290:	2b01      	cmp	r3, #1
 800e292:	d105      	bne.n	800e2a0 <create_name+0x344>
 800e294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e298:	f043 0310 	orr.w	r3, r3, #16
 800e29c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e2a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2a4:	f003 030c 	and.w	r3, r3, #12
 800e2a8:	2b04      	cmp	r3, #4
 800e2aa:	d105      	bne.n	800e2b8 <create_name+0x35c>
 800e2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2b0:	f043 0308 	orr.w	r3, r3, #8
 800e2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e2be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e2c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3728      	adds	r7, #40	; 0x28
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b086      	sub	sp, #24
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e2e0:	e002      	b.n	800e2e8 <follow_path+0x1c>
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	603b      	str	r3, [r7, #0]
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	2b2f      	cmp	r3, #47	; 0x2f
 800e2ee:	d0f8      	beq.n	800e2e2 <follow_path+0x16>
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2b5c      	cmp	r3, #92	; 0x5c
 800e2f6:	d0f4      	beq.n	800e2e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b1f      	cmp	r3, #31
 800e304:	d80a      	bhi.n	800e31c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2280      	movs	r2, #128	; 0x80
 800e30a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e30e:	2100      	movs	r1, #0
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7ff f8fd 	bl	800d510 <dir_sdi>
 800e316:	4603      	mov	r3, r0
 800e318:	75fb      	strb	r3, [r7, #23]
 800e31a:	e048      	b.n	800e3ae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e31c:	463b      	mov	r3, r7
 800e31e:	4619      	mov	r1, r3
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7ff fe1b 	bl	800df5c <create_name>
 800e326:	4603      	mov	r3, r0
 800e328:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d139      	bne.n	800e3a4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7ff fc5a 	bl	800dbea <dir_find>
 800e336:	4603      	mov	r3, r0
 800e338:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e340:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e342:	7dfb      	ldrb	r3, [r7, #23]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e348:	7dfb      	ldrb	r3, [r7, #23]
 800e34a:	2b04      	cmp	r3, #4
 800e34c:	d12c      	bne.n	800e3a8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e34e:	7afb      	ldrb	r3, [r7, #11]
 800e350:	f003 0304 	and.w	r3, r3, #4
 800e354:	2b00      	cmp	r3, #0
 800e356:	d127      	bne.n	800e3a8 <follow_path+0xdc>
 800e358:	2305      	movs	r3, #5
 800e35a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e35c:	e024      	b.n	800e3a8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e35e:	7afb      	ldrb	r3, [r7, #11]
 800e360:	f003 0304 	and.w	r3, r3, #4
 800e364:	2b00      	cmp	r3, #0
 800e366:	d121      	bne.n	800e3ac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	799b      	ldrb	r3, [r3, #6]
 800e36c:	f003 0310 	and.w	r3, r3, #16
 800e370:	2b00      	cmp	r3, #0
 800e372:	d102      	bne.n	800e37a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e374:	2305      	movs	r3, #5
 800e376:	75fb      	strb	r3, [r7, #23]
 800e378:	e019      	b.n	800e3ae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	8992      	ldrh	r2, [r2, #12]
 800e388:	fbb3 f0f2 	udiv	r0, r3, r2
 800e38c:	fb00 f202 	mul.w	r2, r0, r2
 800e390:	1a9b      	subs	r3, r3, r2
 800e392:	440b      	add	r3, r1
 800e394:	4619      	mov	r1, r3
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	f7ff fa60 	bl	800d85c <ld_clust>
 800e39c:	4602      	mov	r2, r0
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e3a2:	e7bb      	b.n	800e31c <follow_path+0x50>
			if (res != FR_OK) break;
 800e3a4:	bf00      	nop
 800e3a6:	e002      	b.n	800e3ae <follow_path+0xe2>
				break;
 800e3a8:	bf00      	nop
 800e3aa:	e000      	b.n	800e3ae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e3ac:	bf00      	nop
			}
		}
	}

	return res;
 800e3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3718      	adds	r7, #24
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b087      	sub	sp, #28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d031      	beq.n	800e432 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	617b      	str	r3, [r7, #20]
 800e3d4:	e002      	b.n	800e3dc <get_ldnumber+0x24>
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	617b      	str	r3, [r7, #20]
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	2b1f      	cmp	r3, #31
 800e3e2:	d903      	bls.n	800e3ec <get_ldnumber+0x34>
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	2b3a      	cmp	r3, #58	; 0x3a
 800e3ea:	d1f4      	bne.n	800e3d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	2b3a      	cmp	r3, #58	; 0x3a
 800e3f2:	d11c      	bne.n	800e42e <get_ldnumber+0x76>
			tp = *path;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	60fa      	str	r2, [r7, #12]
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	3b30      	subs	r3, #48	; 0x30
 800e404:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	2b09      	cmp	r3, #9
 800e40a:	d80e      	bhi.n	800e42a <get_ldnumber+0x72>
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	429a      	cmp	r2, r3
 800e412:	d10a      	bne.n	800e42a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d107      	bne.n	800e42a <get_ldnumber+0x72>
					vol = (int)i;
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	3301      	adds	r3, #1
 800e422:	617b      	str	r3, [r7, #20]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	697a      	ldr	r2, [r7, #20]
 800e428:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	e002      	b.n	800e434 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e42e:	2300      	movs	r3, #0
 800e430:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e432:	693b      	ldr	r3, [r7, #16]
}
 800e434:	4618      	mov	r0, r3
 800e436:	371c      	adds	r7, #28
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2200      	movs	r2, #0
 800e44e:	70da      	strb	r2, [r3, #3]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f04f 32ff 	mov.w	r2, #4294967295
 800e456:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e458:	6839      	ldr	r1, [r7, #0]
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7fe fc76 	bl	800cd4c <move_window>
 800e460:	4603      	mov	r3, r0
 800e462:	2b00      	cmp	r3, #0
 800e464:	d001      	beq.n	800e46a <check_fs+0x2a>
 800e466:	2304      	movs	r3, #4
 800e468:	e038      	b.n	800e4dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	3338      	adds	r3, #56	; 0x38
 800e46e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e472:	4618      	mov	r0, r3
 800e474:	f7fe f9ba 	bl	800c7ec <ld_word>
 800e478:	4603      	mov	r3, r0
 800e47a:	461a      	mov	r2, r3
 800e47c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e480:	429a      	cmp	r2, r3
 800e482:	d001      	beq.n	800e488 <check_fs+0x48>
 800e484:	2303      	movs	r3, #3
 800e486:	e029      	b.n	800e4dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e48e:	2be9      	cmp	r3, #233	; 0xe9
 800e490:	d009      	beq.n	800e4a6 <check_fs+0x66>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e498:	2beb      	cmp	r3, #235	; 0xeb
 800e49a:	d11e      	bne.n	800e4da <check_fs+0x9a>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e4a2:	2b90      	cmp	r3, #144	; 0x90
 800e4a4:	d119      	bne.n	800e4da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	3338      	adds	r3, #56	; 0x38
 800e4aa:	3336      	adds	r3, #54	; 0x36
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fe f9b5 	bl	800c81c <ld_dword>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e4b8:	4a0a      	ldr	r2, [pc, #40]	; (800e4e4 <check_fs+0xa4>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d101      	bne.n	800e4c2 <check_fs+0x82>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	e00c      	b.n	800e4dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3338      	adds	r3, #56	; 0x38
 800e4c6:	3352      	adds	r3, #82	; 0x52
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7fe f9a7 	bl	800c81c <ld_dword>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	4a05      	ldr	r2, [pc, #20]	; (800e4e8 <check_fs+0xa8>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d101      	bne.n	800e4da <check_fs+0x9a>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	e000      	b.n	800e4dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e4da:	2302      	movs	r3, #2
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	00544146 	.word	0x00544146
 800e4e8:	33544146 	.word	0x33544146

0800e4ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b096      	sub	sp, #88	; 0x58
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f7ff ff59 	bl	800e3b8 <get_ldnumber>
 800e506:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	da01      	bge.n	800e512 <find_volume+0x26>
 800e50e:	230b      	movs	r3, #11
 800e510:	e265      	b.n	800e9de <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e512:	4a9f      	ldr	r2, [pc, #636]	; (800e790 <find_volume+0x2a4>)
 800e514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e51a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <find_volume+0x3a>
 800e522:	230c      	movs	r3, #12
 800e524:	e25b      	b.n	800e9de <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e52a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	f023 0301 	bic.w	r3, r3, #1
 800e532:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d01a      	beq.n	800e572 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53e:	785b      	ldrb	r3, [r3, #1]
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe f8b5 	bl	800c6b0 <disk_status>
 800e546:	4603      	mov	r3, r0
 800e548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e54c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e550:	f003 0301 	and.w	r3, r3, #1
 800e554:	2b00      	cmp	r3, #0
 800e556:	d10c      	bne.n	800e572 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e558:	79fb      	ldrb	r3, [r7, #7]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d007      	beq.n	800e56e <find_volume+0x82>
 800e55e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e562:	f003 0304 	and.w	r3, r3, #4
 800e566:	2b00      	cmp	r3, #0
 800e568:	d001      	beq.n	800e56e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e56a:	230a      	movs	r3, #10
 800e56c:	e237      	b.n	800e9de <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800e56e:	2300      	movs	r3, #0
 800e570:	e235      	b.n	800e9de <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e574:	2200      	movs	r2, #0
 800e576:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e57a:	b2da      	uxtb	r2, r3
 800e57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e582:	785b      	ldrb	r3, [r3, #1]
 800e584:	4618      	mov	r0, r3
 800e586:	f7fe f8ad 	bl	800c6e4 <disk_initialize>
 800e58a:	4603      	mov	r3, r0
 800e58c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e590:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e594:	f003 0301 	and.w	r3, r3, #1
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d001      	beq.n	800e5a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e59c:	2303      	movs	r3, #3
 800e59e:	e21e      	b.n	800e9de <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d007      	beq.n	800e5b6 <find_volume+0xca>
 800e5a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5aa:	f003 0304 	and.w	r3, r3, #4
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e5b2:	230a      	movs	r3, #10
 800e5b4:	e213      	b.n	800e9de <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b8:	7858      	ldrb	r0, [r3, #1]
 800e5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5bc:	330c      	adds	r3, #12
 800e5be:	461a      	mov	r2, r3
 800e5c0:	2102      	movs	r1, #2
 800e5c2:	f7fe f8f5 	bl	800c7b0 <disk_ioctl>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <find_volume+0xe4>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e206      	b.n	800e9de <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d2:	899b      	ldrh	r3, [r3, #12]
 800e5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5d8:	d80d      	bhi.n	800e5f6 <find_volume+0x10a>
 800e5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5dc:	899b      	ldrh	r3, [r3, #12]
 800e5de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5e2:	d308      	bcc.n	800e5f6 <find_volume+0x10a>
 800e5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e6:	899b      	ldrh	r3, [r3, #12]
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ec:	899b      	ldrh	r3, [r3, #12]
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d001      	beq.n	800e5fa <find_volume+0x10e>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e1f1      	b.n	800e9de <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e5fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e602:	f7ff ff1d 	bl	800e440 <check_fs>
 800e606:	4603      	mov	r3, r0
 800e608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e60c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e610:	2b02      	cmp	r3, #2
 800e612:	d149      	bne.n	800e6a8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e614:	2300      	movs	r3, #0
 800e616:	643b      	str	r3, [r7, #64]	; 0x40
 800e618:	e01e      	b.n	800e658 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e622:	011b      	lsls	r3, r3, #4
 800e624:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e628:	4413      	add	r3, r2
 800e62a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62e:	3304      	adds	r3, #4
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d006      	beq.n	800e644 <find_volume+0x158>
 800e636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e638:	3308      	adds	r3, #8
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fe f8ee 	bl	800c81c <ld_dword>
 800e640:	4602      	mov	r2, r0
 800e642:	e000      	b.n	800e646 <find_volume+0x15a>
 800e644:	2200      	movs	r2, #0
 800e646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	3358      	adds	r3, #88	; 0x58
 800e64c:	443b      	add	r3, r7
 800e64e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e654:	3301      	adds	r3, #1
 800e656:	643b      	str	r3, [r7, #64]	; 0x40
 800e658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e65a:	2b03      	cmp	r3, #3
 800e65c:	d9dd      	bls.n	800e61a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e65e:	2300      	movs	r3, #0
 800e660:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e664:	2b00      	cmp	r3, #0
 800e666:	d002      	beq.n	800e66e <find_volume+0x182>
 800e668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e66a:	3b01      	subs	r3, #1
 800e66c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	3358      	adds	r3, #88	; 0x58
 800e674:	443b      	add	r3, r7
 800e676:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e67a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e67c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d005      	beq.n	800e68e <find_volume+0x1a2>
 800e682:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e684:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e686:	f7ff fedb 	bl	800e440 <check_fs>
 800e68a:	4603      	mov	r3, r0
 800e68c:	e000      	b.n	800e690 <find_volume+0x1a4>
 800e68e:	2303      	movs	r3, #3
 800e690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e694:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d905      	bls.n	800e6a8 <find_volume+0x1bc>
 800e69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e69e:	3301      	adds	r3, #1
 800e6a0:	643b      	str	r3, [r7, #64]	; 0x40
 800e6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6a4:	2b03      	cmp	r3, #3
 800e6a6:	d9e2      	bls.n	800e66e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e6a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e6ac:	2b04      	cmp	r3, #4
 800e6ae:	d101      	bne.n	800e6b4 <find_volume+0x1c8>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e194      	b.n	800e9de <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e6b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d901      	bls.n	800e6c0 <find_volume+0x1d4>
 800e6bc:	230d      	movs	r3, #13
 800e6be:	e18e      	b.n	800e9de <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c2:	3338      	adds	r3, #56	; 0x38
 800e6c4:	330b      	adds	r3, #11
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fe f890 	bl	800c7ec <ld_word>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d2:	899b      	ldrh	r3, [r3, #12]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d001      	beq.n	800e6dc <find_volume+0x1f0>
 800e6d8:	230d      	movs	r3, #13
 800e6da:	e180      	b.n	800e9de <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6de:	3338      	adds	r3, #56	; 0x38
 800e6e0:	3316      	adds	r3, #22
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe f882 	bl	800c7ec <ld_word>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e6ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d106      	bne.n	800e700 <find_volume+0x214>
 800e6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f4:	3338      	adds	r3, #56	; 0x38
 800e6f6:	3324      	adds	r3, #36	; 0x24
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fe f88f 	bl	800c81c <ld_dword>
 800e6fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e702:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e704:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e708:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e712:	789b      	ldrb	r3, [r3, #2]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d005      	beq.n	800e724 <find_volume+0x238>
 800e718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71a:	789b      	ldrb	r3, [r3, #2]
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d001      	beq.n	800e724 <find_volume+0x238>
 800e720:	230d      	movs	r3, #13
 800e722:	e15c      	b.n	800e9de <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e726:	789b      	ldrb	r3, [r3, #2]
 800e728:	461a      	mov	r2, r3
 800e72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e72c:	fb02 f303 	mul.w	r3, r2, r3
 800e730:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e738:	b29a      	uxth	r2, r3
 800e73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e740:	895b      	ldrh	r3, [r3, #10]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d008      	beq.n	800e758 <find_volume+0x26c>
 800e746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e748:	895b      	ldrh	r3, [r3, #10]
 800e74a:	461a      	mov	r2, r3
 800e74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74e:	895b      	ldrh	r3, [r3, #10]
 800e750:	3b01      	subs	r3, #1
 800e752:	4013      	ands	r3, r2
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <find_volume+0x270>
 800e758:	230d      	movs	r3, #13
 800e75a:	e140      	b.n	800e9de <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75e:	3338      	adds	r3, #56	; 0x38
 800e760:	3311      	adds	r3, #17
 800e762:	4618      	mov	r0, r3
 800e764:	f7fe f842 	bl	800c7ec <ld_word>
 800e768:	4603      	mov	r3, r0
 800e76a:	461a      	mov	r2, r3
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e772:	891b      	ldrh	r3, [r3, #8]
 800e774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e776:	8992      	ldrh	r2, [r2, #12]
 800e778:	0952      	lsrs	r2, r2, #5
 800e77a:	b292      	uxth	r2, r2
 800e77c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e780:	fb01 f202 	mul.w	r2, r1, r2
 800e784:	1a9b      	subs	r3, r3, r2
 800e786:	b29b      	uxth	r3, r3
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d003      	beq.n	800e794 <find_volume+0x2a8>
 800e78c:	230d      	movs	r3, #13
 800e78e:	e126      	b.n	800e9de <find_volume+0x4f2>
 800e790:	200006f0 	.word	0x200006f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e796:	3338      	adds	r3, #56	; 0x38
 800e798:	3313      	adds	r3, #19
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7fe f826 	bl	800c7ec <ld_word>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e7a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d106      	bne.n	800e7b8 <find_volume+0x2cc>
 800e7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ac:	3338      	adds	r3, #56	; 0x38
 800e7ae:	3320      	adds	r3, #32
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fe f833 	bl	800c81c <ld_dword>
 800e7b6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ba:	3338      	adds	r3, #56	; 0x38
 800e7bc:	330e      	adds	r3, #14
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7fe f814 	bl	800c7ec <ld_word>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e7c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d101      	bne.n	800e7d2 <find_volume+0x2e6>
 800e7ce:	230d      	movs	r3, #13
 800e7d0:	e105      	b.n	800e9de <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e7d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e7d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7d6:	4413      	add	r3, r2
 800e7d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7da:	8911      	ldrh	r1, [r2, #8]
 800e7dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7de:	8992      	ldrh	r2, [r2, #12]
 800e7e0:	0952      	lsrs	r2, r2, #5
 800e7e2:	b292      	uxth	r2, r2
 800e7e4:	fbb1 f2f2 	udiv	r2, r1, r2
 800e7e8:	b292      	uxth	r2, r2
 800e7ea:	4413      	add	r3, r2
 800e7ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e7ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d201      	bcs.n	800e7fa <find_volume+0x30e>
 800e7f6:	230d      	movs	r3, #13
 800e7f8:	e0f1      	b.n	800e9de <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e7fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e802:	8952      	ldrh	r2, [r2, #10]
 800e804:	fbb3 f3f2 	udiv	r3, r3, r2
 800e808:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <find_volume+0x328>
 800e810:	230d      	movs	r3, #13
 800e812:	e0e4      	b.n	800e9de <find_volume+0x4f2>
		fmt = FS_FAT32;
 800e814:	2303      	movs	r3, #3
 800e816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e820:	4293      	cmp	r3, r2
 800e822:	d802      	bhi.n	800e82a <find_volume+0x33e>
 800e824:	2302      	movs	r3, #2
 800e826:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e830:	4293      	cmp	r3, r2
 800e832:	d802      	bhi.n	800e83a <find_volume+0x34e>
 800e834:	2301      	movs	r3, #1
 800e836:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83c:	1c9a      	adds	r2, r3, #2
 800e83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e840:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e844:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e846:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e848:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e84c:	441a      	add	r2, r3
 800e84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e850:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e852:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e856:	441a      	add	r2, r3
 800e858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e85c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e860:	2b03      	cmp	r3, #3
 800e862:	d11e      	bne.n	800e8a2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e866:	3338      	adds	r3, #56	; 0x38
 800e868:	332a      	adds	r3, #42	; 0x2a
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fd ffbe 	bl	800c7ec <ld_word>
 800e870:	4603      	mov	r3, r0
 800e872:	2b00      	cmp	r3, #0
 800e874:	d001      	beq.n	800e87a <find_volume+0x38e>
 800e876:	230d      	movs	r3, #13
 800e878:	e0b1      	b.n	800e9de <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87c:	891b      	ldrh	r3, [r3, #8]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <find_volume+0x39a>
 800e882:	230d      	movs	r3, #13
 800e884:	e0ab      	b.n	800e9de <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e888:	3338      	adds	r3, #56	; 0x38
 800e88a:	332c      	adds	r3, #44	; 0x2c
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fd ffc5 	bl	800c81c <ld_dword>
 800e892:	4602      	mov	r2, r0
 800e894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e896:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89a:	69db      	ldr	r3, [r3, #28]
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	647b      	str	r3, [r7, #68]	; 0x44
 800e8a0:	e01f      	b.n	800e8e2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a4:	891b      	ldrh	r3, [r3, #8]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d101      	bne.n	800e8ae <find_volume+0x3c2>
 800e8aa:	230d      	movs	r3, #13
 800e8ac:	e097      	b.n	800e9de <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8b4:	441a      	add	r2, r3
 800e8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e8ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	d103      	bne.n	800e8ca <find_volume+0x3de>
 800e8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c4:	69db      	ldr	r3, [r3, #28]
 800e8c6:	005b      	lsls	r3, r3, #1
 800e8c8:	e00a      	b.n	800e8e0 <find_volume+0x3f4>
 800e8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8cc:	69da      	ldr	r2, [r3, #28]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	005b      	lsls	r3, r3, #1
 800e8d2:	4413      	add	r3, r2
 800e8d4:	085a      	lsrs	r2, r3, #1
 800e8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d8:	69db      	ldr	r3, [r3, #28]
 800e8da:	f003 0301 	and.w	r3, r3, #1
 800e8de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e8e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	6a1a      	ldr	r2, [r3, #32]
 800e8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e8:	899b      	ldrh	r3, [r3, #12]
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8ee:	440b      	add	r3, r1
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8f4:	8989      	ldrh	r1, [r1, #12]
 800e8f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d201      	bcs.n	800e902 <find_volume+0x416>
 800e8fe:	230d      	movs	r3, #13
 800e900:	e06d      	b.n	800e9de <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e904:	f04f 32ff 	mov.w	r2, #4294967295
 800e908:	619a      	str	r2, [r3, #24]
 800e90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90c:	699a      	ldr	r2, [r3, #24]
 800e90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e910:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e914:	2280      	movs	r2, #128	; 0x80
 800e916:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e918:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e91c:	2b03      	cmp	r3, #3
 800e91e:	d149      	bne.n	800e9b4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e922:	3338      	adds	r3, #56	; 0x38
 800e924:	3330      	adds	r3, #48	; 0x30
 800e926:	4618      	mov	r0, r3
 800e928:	f7fd ff60 	bl	800c7ec <ld_word>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d140      	bne.n	800e9b4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e934:	3301      	adds	r3, #1
 800e936:	4619      	mov	r1, r3
 800e938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e93a:	f7fe fa07 	bl	800cd4c <move_window>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d137      	bne.n	800e9b4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800e944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e946:	2200      	movs	r2, #0
 800e948:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94c:	3338      	adds	r3, #56	; 0x38
 800e94e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e952:	4618      	mov	r0, r3
 800e954:	f7fd ff4a 	bl	800c7ec <ld_word>
 800e958:	4603      	mov	r3, r0
 800e95a:	461a      	mov	r2, r3
 800e95c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e960:	429a      	cmp	r2, r3
 800e962:	d127      	bne.n	800e9b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e966:	3338      	adds	r3, #56	; 0x38
 800e968:	4618      	mov	r0, r3
 800e96a:	f7fd ff57 	bl	800c81c <ld_dword>
 800e96e:	4603      	mov	r3, r0
 800e970:	4a1d      	ldr	r2, [pc, #116]	; (800e9e8 <find_volume+0x4fc>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d11e      	bne.n	800e9b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e978:	3338      	adds	r3, #56	; 0x38
 800e97a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fd ff4c 	bl	800c81c <ld_dword>
 800e984:	4603      	mov	r3, r0
 800e986:	4a19      	ldr	r2, [pc, #100]	; (800e9ec <find_volume+0x500>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d113      	bne.n	800e9b4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98e:	3338      	adds	r3, #56	; 0x38
 800e990:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e994:	4618      	mov	r0, r3
 800e996:	f7fd ff41 	bl	800c81c <ld_dword>
 800e99a:	4602      	mov	r2, r0
 800e99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a2:	3338      	adds	r3, #56	; 0x38
 800e9a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7fd ff37 	bl	800c81c <ld_dword>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e9ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e9bc:	4b0c      	ldr	r3, [pc, #48]	; (800e9f0 <find_volume+0x504>)
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	4b0a      	ldr	r3, [pc, #40]	; (800e9f0 <find_volume+0x504>)
 800e9c6:	801a      	strh	r2, [r3, #0]
 800e9c8:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <find_volume+0x504>)
 800e9ca:	881a      	ldrh	r2, [r3, #0]
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ce:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d2:	4a08      	ldr	r2, [pc, #32]	; (800e9f4 <find_volume+0x508>)
 800e9d4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e9d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9d8:	f7fe f950 	bl	800cc7c <clear_lock>
#endif
	return FR_OK;
 800e9dc:	2300      	movs	r3, #0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3758      	adds	r7, #88	; 0x58
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	41615252 	.word	0x41615252
 800e9ec:	61417272 	.word	0x61417272
 800e9f0:	200006f4 	.word	0x200006f4
 800e9f4:	20000718 	.word	0x20000718

0800e9f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ea02:	2309      	movs	r3, #9
 800ea04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d01c      	beq.n	800ea46 <validate+0x4e>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d018      	beq.n	800ea46 <validate+0x4e>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d013      	beq.n	800ea46 <validate+0x4e>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	889a      	ldrh	r2, [r3, #4]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	88db      	ldrh	r3, [r3, #6]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d10c      	bne.n	800ea46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	785b      	ldrb	r3, [r3, #1]
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fd fe3c 	bl	800c6b0 <disk_status>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f003 0301 	and.w	r3, r3, #1
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d101      	bne.n	800ea46 <validate+0x4e>
			res = FR_OK;
 800ea42:	2300      	movs	r3, #0
 800ea44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ea46:	7bfb      	ldrb	r3, [r7, #15]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d102      	bne.n	800ea52 <validate+0x5a>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	e000      	b.n	800ea54 <validate+0x5c>
 800ea52:	2300      	movs	r3, #0
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	6013      	str	r3, [r2, #0]
	return res;
 800ea58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
	...

0800ea64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b088      	sub	sp, #32
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ea76:	f107 0310 	add.w	r3, r7, #16
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff fc9c 	bl	800e3b8 <get_ldnumber>
 800ea80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	da01      	bge.n	800ea8c <f_mount+0x28>
 800ea88:	230b      	movs	r3, #11
 800ea8a:	e02b      	b.n	800eae4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ea8c:	4a17      	ldr	r2, [pc, #92]	; (800eaec <f_mount+0x88>)
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d005      	beq.n	800eaa8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ea9c:	69b8      	ldr	r0, [r7, #24]
 800ea9e:	f7fe f8ed 	bl	800cc7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d002      	beq.n	800eab4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	490d      	ldr	r1, [pc, #52]	; (800eaec <f_mount+0x88>)
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d002      	beq.n	800eaca <f_mount+0x66>
 800eac4:	79fb      	ldrb	r3, [r7, #7]
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d001      	beq.n	800eace <f_mount+0x6a>
 800eaca:	2300      	movs	r3, #0
 800eacc:	e00a      	b.n	800eae4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800eace:	f107 010c 	add.w	r1, r7, #12
 800ead2:	f107 0308 	add.w	r3, r7, #8
 800ead6:	2200      	movs	r2, #0
 800ead8:	4618      	mov	r0, r3
 800eada:	f7ff fd07 	bl	800e4ec <find_volume>
 800eade:	4603      	mov	r3, r0
 800eae0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800eae2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3720      	adds	r7, #32
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	200006f0 	.word	0x200006f0

0800eaf0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b09a      	sub	sp, #104	; 0x68
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	4613      	mov	r3, r2
 800eafc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d101      	bne.n	800eb08 <f_open+0x18>
 800eb04:	2309      	movs	r3, #9
 800eb06:	e1bb      	b.n	800ee80 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eb08:	79fb      	ldrb	r3, [r7, #7]
 800eb0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eb10:	79fa      	ldrb	r2, [r7, #7]
 800eb12:	f107 0114 	add.w	r1, r7, #20
 800eb16:	f107 0308 	add.w	r3, r7, #8
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7ff fce6 	bl	800e4ec <find_volume>
 800eb20:	4603      	mov	r3, r0
 800eb22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800eb26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	f040 819f 	bne.w	800ee6e <f_open+0x37e>
		dj.obj.fs = fs;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800eb34:	68ba      	ldr	r2, [r7, #8]
 800eb36:	f107 0318 	add.w	r3, r7, #24
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7ff fbc5 	bl	800e2cc <follow_path>
 800eb42:	4603      	mov	r3, r0
 800eb44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eb48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d11a      	bne.n	800eb86 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eb50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800eb54:	b25b      	sxtb	r3, r3
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	da03      	bge.n	800eb62 <f_open+0x72>
				res = FR_INVALID_NAME;
 800eb5a:	2306      	movs	r3, #6
 800eb5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eb60:	e011      	b.n	800eb86 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	f023 0301 	bic.w	r3, r3, #1
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	bf14      	ite	ne
 800eb6c:	2301      	movne	r3, #1
 800eb6e:	2300      	moveq	r3, #0
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	461a      	mov	r2, r3
 800eb74:	f107 0318 	add.w	r3, r7, #24
 800eb78:	4611      	mov	r1, r2
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fd ff36 	bl	800c9ec <chk_lock>
 800eb80:	4603      	mov	r3, r0
 800eb82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eb86:	79fb      	ldrb	r3, [r7, #7]
 800eb88:	f003 031c 	and.w	r3, r3, #28
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d07f      	beq.n	800ec90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eb90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d017      	beq.n	800ebc8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eb98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb9c:	2b04      	cmp	r3, #4
 800eb9e:	d10e      	bne.n	800ebbe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eba0:	f7fd ff80 	bl	800caa4 <enq_lock>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d006      	beq.n	800ebb8 <f_open+0xc8>
 800ebaa:	f107 0318 	add.w	r3, r7, #24
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7ff f8dc 	bl	800dd6c <dir_register>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	e000      	b.n	800ebba <f_open+0xca>
 800ebb8:	2312      	movs	r3, #18
 800ebba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ebbe:	79fb      	ldrb	r3, [r7, #7]
 800ebc0:	f043 0308 	orr.w	r3, r3, #8
 800ebc4:	71fb      	strb	r3, [r7, #7]
 800ebc6:	e010      	b.n	800ebea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ebc8:	7fbb      	ldrb	r3, [r7, #30]
 800ebca:	f003 0311 	and.w	r3, r3, #17
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d003      	beq.n	800ebda <f_open+0xea>
					res = FR_DENIED;
 800ebd2:	2307      	movs	r3, #7
 800ebd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ebd8:	e007      	b.n	800ebea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ebda:	79fb      	ldrb	r3, [r7, #7]
 800ebdc:	f003 0304 	and.w	r3, r3, #4
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <f_open+0xfa>
 800ebe4:	2308      	movs	r3, #8
 800ebe6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ebea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d168      	bne.n	800ecc4 <f_open+0x1d4>
 800ebf2:	79fb      	ldrb	r3, [r7, #7]
 800ebf4:	f003 0308 	and.w	r3, r3, #8
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d063      	beq.n	800ecc4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ebfc:	f7fd fcfa 	bl	800c5f4 <get_fattime>
 800ec00:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ec02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec04:	330e      	adds	r3, #14
 800ec06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7fd fe45 	bl	800c898 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ec0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec10:	3316      	adds	r3, #22
 800ec12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7fd fe3f 	bl	800c898 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1c:	330b      	adds	r3, #11
 800ec1e:	2220      	movs	r2, #32
 800ec20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec26:	4611      	mov	r1, r2
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fe fe17 	bl	800d85c <ld_clust>
 800ec2e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ec34:	2200      	movs	r2, #0
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fe fe2f 	bl	800d89a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ec3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3e:	331c      	adds	r3, #28
 800ec40:	2100      	movs	r1, #0
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fd fe28 	bl	800c898 <st_dword>
					fs->wflag = 1;
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ec4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d037      	beq.n	800ecc4 <f_open+0x1d4>
						dw = fs->winsect;
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec58:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ec5a:	f107 0318 	add.w	r3, r7, #24
 800ec5e:	2200      	movs	r2, #0
 800ec60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7fe fb1f 	bl	800d2a6 <remove_chain>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ec6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d126      	bne.n	800ecc4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fe f866 	bl	800cd4c <move_window>
 800ec80:	4603      	mov	r3, r0
 800ec82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec8a:	3a01      	subs	r2, #1
 800ec8c:	615a      	str	r2, [r3, #20]
 800ec8e:	e019      	b.n	800ecc4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ec90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d115      	bne.n	800ecc4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ec98:	7fbb      	ldrb	r3, [r7, #30]
 800ec9a:	f003 0310 	and.w	r3, r3, #16
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d003      	beq.n	800ecaa <f_open+0x1ba>
					res = FR_NO_FILE;
 800eca2:	2304      	movs	r3, #4
 800eca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eca8:	e00c      	b.n	800ecc4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ecaa:	79fb      	ldrb	r3, [r7, #7]
 800ecac:	f003 0302 	and.w	r3, r3, #2
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d007      	beq.n	800ecc4 <f_open+0x1d4>
 800ecb4:	7fbb      	ldrb	r3, [r7, #30]
 800ecb6:	f003 0301 	and.w	r3, r3, #1
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d002      	beq.n	800ecc4 <f_open+0x1d4>
						res = FR_DENIED;
 800ecbe:	2307      	movs	r3, #7
 800ecc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ecc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d128      	bne.n	800ed1e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eccc:	79fb      	ldrb	r3, [r7, #7]
 800ecce:	f003 0308 	and.w	r3, r3, #8
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d003      	beq.n	800ecde <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ecd6:	79fb      	ldrb	r3, [r7, #7]
 800ecd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecdc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ece6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	f023 0301 	bic.w	r3, r3, #1
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	bf14      	ite	ne
 800ecf6:	2301      	movne	r3, #1
 800ecf8:	2300      	moveq	r3, #0
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	f107 0318 	add.w	r3, r7, #24
 800ed02:	4611      	mov	r1, r2
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fd feef 	bl	800cae8 <inc_lock>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	691b      	ldr	r3, [r3, #16]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d102      	bne.n	800ed1e <f_open+0x22e>
 800ed18:	2302      	movs	r3, #2
 800ed1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ed1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	f040 80a3 	bne.w	800ee6e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed2c:	4611      	mov	r1, r2
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fe fd94 	bl	800d85c <ld_clust>
 800ed34:	4602      	mov	r2, r0
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ed3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3c:	331c      	adds	r3, #28
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fd fd6c 	bl	800c81c <ld_dword>
 800ed44:	4602      	mov	r2, r0
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ed50:	697a      	ldr	r2, [r7, #20]
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	88da      	ldrh	r2, [r3, #6]
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	79fa      	ldrb	r2, [r7, #7]
 800ed62:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2200      	movs	r2, #0
 800ed68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2200      	movs	r2, #0
 800ed74:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	3330      	adds	r3, #48	; 0x30
 800ed7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ed7e:	2100      	movs	r1, #0
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fd fdd6 	bl	800c932 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ed86:	79fb      	ldrb	r3, [r7, #7]
 800ed88:	f003 0320 	and.w	r3, r3, #32
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d06e      	beq.n	800ee6e <f_open+0x37e>
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d06a      	beq.n	800ee6e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	68da      	ldr	r2, [r3, #12]
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	895b      	ldrh	r3, [r3, #10]
 800eda4:	461a      	mov	r2, r3
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	899b      	ldrh	r3, [r3, #12]
 800edaa:	fb02 f303 	mul.w	r3, r2, r3
 800edae:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	689b      	ldr	r3, [r3, #8]
 800edb4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edbc:	e016      	b.n	800edec <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fe f87f 	bl	800cec6 <get_fat>
 800edc8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800edca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d802      	bhi.n	800edd6 <f_open+0x2e6>
 800edd0:	2302      	movs	r3, #2
 800edd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800edd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eddc:	d102      	bne.n	800ede4 <f_open+0x2f4>
 800edde:	2301      	movs	r3, #1
 800ede0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ede4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ede6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d103      	bne.n	800edfc <f_open+0x30c>
 800edf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800edf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d8e0      	bhi.n	800edbe <f_open+0x2ce>
				}
				fp->clust = clst;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ee02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d131      	bne.n	800ee6e <f_open+0x37e>
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	899b      	ldrh	r3, [r3, #12]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee12:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee16:	fb01 f202 	mul.w	r2, r1, r2
 800ee1a:	1a9b      	subs	r3, r3, r2
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d026      	beq.n	800ee6e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7fe f82f 	bl	800ce88 <clust2sect>
 800ee2a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ee2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d103      	bne.n	800ee3a <f_open+0x34a>
						res = FR_INT_ERR;
 800ee32:	2302      	movs	r3, #2
 800ee34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ee38:	e019      	b.n	800ee6e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	899b      	ldrh	r3, [r3, #12]
 800ee3e:	461a      	mov	r2, r3
 800ee40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee42:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee48:	441a      	add	r2, r3
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	7858      	ldrb	r0, [r3, #1]
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	6a1a      	ldr	r2, [r3, #32]
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	f7fd fc67 	bl	800c730 <disk_read>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d002      	beq.n	800ee6e <f_open+0x37e>
 800ee68:	2301      	movs	r3, #1
 800ee6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ee6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d002      	beq.n	800ee7c <f_open+0x38c>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ee7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3768      	adds	r7, #104	; 0x68
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b08e      	sub	sp, #56	; 0x38
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	60f8      	str	r0, [r7, #12]
 800ee90:	60b9      	str	r1, [r7, #8]
 800ee92:	607a      	str	r2, [r7, #4]
 800ee94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f107 0214 	add.w	r2, r7, #20
 800eea6:	4611      	mov	r1, r2
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff fda5 	bl	800e9f8 <validate>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eeb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d107      	bne.n	800eecc <f_read+0x44>
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	7d5b      	ldrb	r3, [r3, #21]
 800eec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eec4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d002      	beq.n	800eed2 <f_read+0x4a>
 800eecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eed0:	e135      	b.n	800f13e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	7d1b      	ldrb	r3, [r3, #20]
 800eed6:	f003 0301 	and.w	r3, r3, #1
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d101      	bne.n	800eee2 <f_read+0x5a>
 800eede:	2307      	movs	r3, #7
 800eee0:	e12d      	b.n	800f13e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	68da      	ldr	r2, [r3, #12]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	699b      	ldr	r3, [r3, #24]
 800eeea:	1ad3      	subs	r3, r2, r3
 800eeec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	6a3b      	ldr	r3, [r7, #32]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	f240 811e 	bls.w	800f134 <f_read+0x2ac>
 800eef8:	6a3b      	ldr	r3, [r7, #32]
 800eefa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eefc:	e11a      	b.n	800f134 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	699b      	ldr	r3, [r3, #24]
 800ef02:	697a      	ldr	r2, [r7, #20]
 800ef04:	8992      	ldrh	r2, [r2, #12]
 800ef06:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef0a:	fb01 f202 	mul.w	r2, r1, r2
 800ef0e:	1a9b      	subs	r3, r3, r2
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f040 80d5 	bne.w	800f0c0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	699b      	ldr	r3, [r3, #24]
 800ef1a:	697a      	ldr	r2, [r7, #20]
 800ef1c:	8992      	ldrh	r2, [r2, #12]
 800ef1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef22:	697a      	ldr	r2, [r7, #20]
 800ef24:	8952      	ldrh	r2, [r2, #10]
 800ef26:	3a01      	subs	r2, #1
 800ef28:	4013      	ands	r3, r2
 800ef2a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d12f      	bne.n	800ef92 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	699b      	ldr	r3, [r3, #24]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d103      	bne.n	800ef42 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	633b      	str	r3, [r7, #48]	; 0x30
 800ef40:	e013      	b.n	800ef6a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d007      	beq.n	800ef5a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	699b      	ldr	r3, [r3, #24]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	f7fe faa5 	bl	800d4a0 <clmt_clust>
 800ef56:	6338      	str	r0, [r7, #48]	; 0x30
 800ef58:	e007      	b.n	800ef6a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	69db      	ldr	r3, [r3, #28]
 800ef60:	4619      	mov	r1, r3
 800ef62:	4610      	mov	r0, r2
 800ef64:	f7fd ffaf 	bl	800cec6 <get_fat>
 800ef68:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ef6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d804      	bhi.n	800ef7a <f_read+0xf2>
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2202      	movs	r2, #2
 800ef74:	755a      	strb	r2, [r3, #21]
 800ef76:	2302      	movs	r3, #2
 800ef78:	e0e1      	b.n	800f13e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef80:	d104      	bne.n	800ef8c <f_read+0x104>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2201      	movs	r2, #1
 800ef86:	755a      	strb	r2, [r3, #21]
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e0d8      	b.n	800f13e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef90:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef92:	697a      	ldr	r2, [r7, #20]
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	69db      	ldr	r3, [r3, #28]
 800ef98:	4619      	mov	r1, r3
 800ef9a:	4610      	mov	r0, r2
 800ef9c:	f7fd ff74 	bl	800ce88 <clust2sect>
 800efa0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d104      	bne.n	800efb2 <f_read+0x12a>
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2202      	movs	r2, #2
 800efac:	755a      	strb	r2, [r3, #21]
 800efae:	2302      	movs	r3, #2
 800efb0:	e0c5      	b.n	800f13e <f_read+0x2b6>
			sect += csect;
 800efb2:	69ba      	ldr	r2, [r7, #24]
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	4413      	add	r3, r2
 800efb8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	899b      	ldrh	r3, [r3, #12]
 800efbe:	461a      	mov	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800efc6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800efc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d041      	beq.n	800f052 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800efce:	69fa      	ldr	r2, [r7, #28]
 800efd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd2:	4413      	add	r3, r2
 800efd4:	697a      	ldr	r2, [r7, #20]
 800efd6:	8952      	ldrh	r2, [r2, #10]
 800efd8:	4293      	cmp	r3, r2
 800efda:	d905      	bls.n	800efe8 <f_read+0x160>
					cc = fs->csize - csect;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	895b      	ldrh	r3, [r3, #10]
 800efe0:	461a      	mov	r2, r3
 800efe2:	69fb      	ldr	r3, [r7, #28]
 800efe4:	1ad3      	subs	r3, r2, r3
 800efe6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	7858      	ldrb	r0, [r3, #1]
 800efec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efee:	69ba      	ldr	r2, [r7, #24]
 800eff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eff2:	f7fd fb9d 	bl	800c730 <disk_read>
 800eff6:	4603      	mov	r3, r0
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d004      	beq.n	800f006 <f_read+0x17e>
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2201      	movs	r2, #1
 800f000:	755a      	strb	r2, [r3, #21]
 800f002:	2301      	movs	r3, #1
 800f004:	e09b      	b.n	800f13e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	7d1b      	ldrb	r3, [r3, #20]
 800f00a:	b25b      	sxtb	r3, r3
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	da18      	bge.n	800f042 <f_read+0x1ba>
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	6a1a      	ldr	r2, [r3, #32]
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	1ad3      	subs	r3, r2, r3
 800f018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d911      	bls.n	800f042 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6a1a      	ldr	r2, [r3, #32]
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	1ad3      	subs	r3, r2, r3
 800f026:	697a      	ldr	r2, [r7, #20]
 800f028:	8992      	ldrh	r2, [r2, #12]
 800f02a:	fb02 f303 	mul.w	r3, r2, r3
 800f02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f030:	18d0      	adds	r0, r2, r3
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	899b      	ldrh	r3, [r3, #12]
 800f03c:	461a      	mov	r2, r3
 800f03e:	f7fd fc57 	bl	800c8f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	899b      	ldrh	r3, [r3, #12]
 800f046:	461a      	mov	r2, r3
 800f048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04a:	fb02 f303 	mul.w	r3, r2, r3
 800f04e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f050:	e05c      	b.n	800f10c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6a1b      	ldr	r3, [r3, #32]
 800f056:	69ba      	ldr	r2, [r7, #24]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d02e      	beq.n	800f0ba <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	7d1b      	ldrb	r3, [r3, #20]
 800f060:	b25b      	sxtb	r3, r3
 800f062:	2b00      	cmp	r3, #0
 800f064:	da18      	bge.n	800f098 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	7858      	ldrb	r0, [r3, #1]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6a1a      	ldr	r2, [r3, #32]
 800f074:	2301      	movs	r3, #1
 800f076:	f7fd fb7b 	bl	800c770 <disk_write>
 800f07a:	4603      	mov	r3, r0
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d004      	beq.n	800f08a <f_read+0x202>
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2201      	movs	r2, #1
 800f084:	755a      	strb	r2, [r3, #21]
 800f086:	2301      	movs	r3, #1
 800f088:	e059      	b.n	800f13e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	7d1b      	ldrb	r3, [r3, #20]
 800f08e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f092:	b2da      	uxtb	r2, r3
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	7858      	ldrb	r0, [r3, #1]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	69ba      	ldr	r2, [r7, #24]
 800f0a6:	f7fd fb43 	bl	800c730 <disk_read>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d004      	beq.n	800f0ba <f_read+0x232>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	755a      	strb	r2, [r3, #21]
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e041      	b.n	800f13e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	69ba      	ldr	r2, [r7, #24]
 800f0be:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	899b      	ldrh	r3, [r3, #12]
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	699b      	ldr	r3, [r3, #24]
 800f0ca:	697a      	ldr	r2, [r7, #20]
 800f0cc:	8992      	ldrh	r2, [r2, #12]
 800f0ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0d2:	fb01 f202 	mul.w	r2, r1, r2
 800f0d6:	1a9b      	subs	r3, r3, r2
 800f0d8:	1ac3      	subs	r3, r0, r3
 800f0da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f0dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d901      	bls.n	800f0e8 <f_read+0x260>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	699b      	ldr	r3, [r3, #24]
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	8992      	ldrh	r2, [r2, #12]
 800f0f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0fa:	fb00 f202 	mul.w	r2, r0, r2
 800f0fe:	1a9b      	subs	r3, r3, r2
 800f100:	440b      	add	r3, r1
 800f102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f104:	4619      	mov	r1, r3
 800f106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f108:	f7fd fbf2 	bl	800c8f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f110:	4413      	add	r3, r2
 800f112:	627b      	str	r3, [r7, #36]	; 0x24
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	699a      	ldr	r2, [r3, #24]
 800f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11a:	441a      	add	r2, r3
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	619a      	str	r2, [r3, #24]
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	441a      	add	r2, r3
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	601a      	str	r2, [r3, #0]
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	1ad3      	subs	r3, r2, r3
 800f132:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	f47f aee1 	bne.w	800eefe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3738      	adds	r7, #56	; 0x38
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b08c      	sub	sp, #48	; 0x30
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	60f8      	str	r0, [r7, #12]
 800f14e:	60b9      	str	r1, [r7, #8]
 800f150:	607a      	str	r2, [r7, #4]
 800f152:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	2200      	movs	r2, #0
 800f15c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f107 0210 	add.w	r2, r7, #16
 800f164:	4611      	mov	r1, r2
 800f166:	4618      	mov	r0, r3
 800f168:	f7ff fc46 	bl	800e9f8 <validate>
 800f16c:	4603      	mov	r3, r0
 800f16e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f176:	2b00      	cmp	r3, #0
 800f178:	d107      	bne.n	800f18a <f_write+0x44>
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	7d5b      	ldrb	r3, [r3, #21]
 800f17e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f186:	2b00      	cmp	r3, #0
 800f188:	d002      	beq.n	800f190 <f_write+0x4a>
 800f18a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f18e:	e16a      	b.n	800f466 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	7d1b      	ldrb	r3, [r3, #20]
 800f194:	f003 0302 	and.w	r3, r3, #2
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d101      	bne.n	800f1a0 <f_write+0x5a>
 800f19c:	2307      	movs	r3, #7
 800f19e:	e162      	b.n	800f466 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	699a      	ldr	r2, [r3, #24]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	441a      	add	r2, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	699b      	ldr	r3, [r3, #24]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	f080 814c 	bcs.w	800f44a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	699b      	ldr	r3, [r3, #24]
 800f1b6:	43db      	mvns	r3, r3
 800f1b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f1ba:	e146      	b.n	800f44a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	699b      	ldr	r3, [r3, #24]
 800f1c0:	693a      	ldr	r2, [r7, #16]
 800f1c2:	8992      	ldrh	r2, [r2, #12]
 800f1c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f1c8:	fb01 f202 	mul.w	r2, r1, r2
 800f1cc:	1a9b      	subs	r3, r3, r2
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f040 80f1 	bne.w	800f3b6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	699b      	ldr	r3, [r3, #24]
 800f1d8:	693a      	ldr	r2, [r7, #16]
 800f1da:	8992      	ldrh	r2, [r2, #12]
 800f1dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1e0:	693a      	ldr	r2, [r7, #16]
 800f1e2:	8952      	ldrh	r2, [r2, #10]
 800f1e4:	3a01      	subs	r2, #1
 800f1e6:	4013      	ands	r3, r2
 800f1e8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d143      	bne.n	800f278 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	699b      	ldr	r3, [r3, #24]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d10c      	bne.n	800f212 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	689b      	ldr	r3, [r3, #8]
 800f1fc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f200:	2b00      	cmp	r3, #0
 800f202:	d11a      	bne.n	800f23a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2100      	movs	r1, #0
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fe f8b1 	bl	800d370 <create_chain>
 800f20e:	62b8      	str	r0, [r7, #40]	; 0x28
 800f210:	e013      	b.n	800f23a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f216:	2b00      	cmp	r3, #0
 800f218:	d007      	beq.n	800f22a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	699b      	ldr	r3, [r3, #24]
 800f21e:	4619      	mov	r1, r3
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f7fe f93d 	bl	800d4a0 <clmt_clust>
 800f226:	62b8      	str	r0, [r7, #40]	; 0x28
 800f228:	e007      	b.n	800f23a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f22a:	68fa      	ldr	r2, [r7, #12]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	69db      	ldr	r3, [r3, #28]
 800f230:	4619      	mov	r1, r3
 800f232:	4610      	mov	r0, r2
 800f234:	f7fe f89c 	bl	800d370 <create_chain>
 800f238:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 8109 	beq.w	800f454 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f244:	2b01      	cmp	r3, #1
 800f246:	d104      	bne.n	800f252 <f_write+0x10c>
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2202      	movs	r2, #2
 800f24c:	755a      	strb	r2, [r3, #21]
 800f24e:	2302      	movs	r3, #2
 800f250:	e109      	b.n	800f466 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f258:	d104      	bne.n	800f264 <f_write+0x11e>
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2201      	movs	r2, #1
 800f25e:	755a      	strb	r2, [r3, #21]
 800f260:	2301      	movs	r3, #1
 800f262:	e100      	b.n	800f466 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f268:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d102      	bne.n	800f278 <f_write+0x132>
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f276:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	7d1b      	ldrb	r3, [r3, #20]
 800f27c:	b25b      	sxtb	r3, r3
 800f27e:	2b00      	cmp	r3, #0
 800f280:	da18      	bge.n	800f2b4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	7858      	ldrb	r0, [r3, #1]
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6a1a      	ldr	r2, [r3, #32]
 800f290:	2301      	movs	r3, #1
 800f292:	f7fd fa6d 	bl	800c770 <disk_write>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d004      	beq.n	800f2a6 <f_write+0x160>
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	755a      	strb	r2, [r3, #21]
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	e0df      	b.n	800f466 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	7d1b      	ldrb	r3, [r3, #20]
 800f2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2ae:	b2da      	uxtb	r2, r3
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f2b4:	693a      	ldr	r2, [r7, #16]
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	69db      	ldr	r3, [r3, #28]
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	4610      	mov	r0, r2
 800f2be:	f7fd fde3 	bl	800ce88 <clust2sect>
 800f2c2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d104      	bne.n	800f2d4 <f_write+0x18e>
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	2202      	movs	r2, #2
 800f2ce:	755a      	strb	r2, [r3, #21]
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	e0c8      	b.n	800f466 <f_write+0x320>
			sect += csect;
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	4413      	add	r3, r2
 800f2da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	899b      	ldrh	r3, [r3, #12]
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2e8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f2ea:	6a3b      	ldr	r3, [r7, #32]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d043      	beq.n	800f378 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f2f0:	69ba      	ldr	r2, [r7, #24]
 800f2f2:	6a3b      	ldr	r3, [r7, #32]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	693a      	ldr	r2, [r7, #16]
 800f2f8:	8952      	ldrh	r2, [r2, #10]
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d905      	bls.n	800f30a <f_write+0x1c4>
					cc = fs->csize - csect;
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	895b      	ldrh	r3, [r3, #10]
 800f302:	461a      	mov	r2, r3
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	1ad3      	subs	r3, r2, r3
 800f308:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	7858      	ldrb	r0, [r3, #1]
 800f30e:	6a3b      	ldr	r3, [r7, #32]
 800f310:	697a      	ldr	r2, [r7, #20]
 800f312:	69f9      	ldr	r1, [r7, #28]
 800f314:	f7fd fa2c 	bl	800c770 <disk_write>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d004      	beq.n	800f328 <f_write+0x1e2>
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2201      	movs	r2, #1
 800f322:	755a      	strb	r2, [r3, #21]
 800f324:	2301      	movs	r3, #1
 800f326:	e09e      	b.n	800f466 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6a1a      	ldr	r2, [r3, #32]
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	1ad3      	subs	r3, r2, r3
 800f330:	6a3a      	ldr	r2, [r7, #32]
 800f332:	429a      	cmp	r2, r3
 800f334:	d918      	bls.n	800f368 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	6a1a      	ldr	r2, [r3, #32]
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	1ad3      	subs	r3, r2, r3
 800f344:	693a      	ldr	r2, [r7, #16]
 800f346:	8992      	ldrh	r2, [r2, #12]
 800f348:	fb02 f303 	mul.w	r3, r2, r3
 800f34c:	69fa      	ldr	r2, [r7, #28]
 800f34e:	18d1      	adds	r1, r2, r3
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	899b      	ldrh	r3, [r3, #12]
 800f354:	461a      	mov	r2, r3
 800f356:	f7fd facb 	bl	800c8f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	7d1b      	ldrb	r3, [r3, #20]
 800f35e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f362:	b2da      	uxtb	r2, r3
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	899b      	ldrh	r3, [r3, #12]
 800f36c:	461a      	mov	r2, r3
 800f36e:	6a3b      	ldr	r3, [r7, #32]
 800f370:	fb02 f303 	mul.w	r3, r2, r3
 800f374:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f376:	e04b      	b.n	800f410 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	6a1b      	ldr	r3, [r3, #32]
 800f37c:	697a      	ldr	r2, [r7, #20]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d016      	beq.n	800f3b0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	699a      	ldr	r2, [r3, #24]
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d210      	bcs.n	800f3b0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	7858      	ldrb	r0, [r3, #1]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f398:	2301      	movs	r3, #1
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	f7fd f9c8 	bl	800c730 <disk_read>
 800f3a0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d004      	beq.n	800f3b0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	755a      	strb	r2, [r3, #21]
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	e05a      	b.n	800f466 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	697a      	ldr	r2, [r7, #20]
 800f3b4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	899b      	ldrh	r3, [r3, #12]
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	699b      	ldr	r3, [r3, #24]
 800f3c0:	693a      	ldr	r2, [r7, #16]
 800f3c2:	8992      	ldrh	r2, [r2, #12]
 800f3c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3c8:	fb01 f202 	mul.w	r2, r1, r2
 800f3cc:	1a9b      	subs	r3, r3, r2
 800f3ce:	1ac3      	subs	r3, r0, r3
 800f3d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d901      	bls.n	800f3de <f_write+0x298>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	699b      	ldr	r3, [r3, #24]
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	8992      	ldrh	r2, [r2, #12]
 800f3ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3f0:	fb00 f202 	mul.w	r2, r0, r2
 800f3f4:	1a9b      	subs	r3, r3, r2
 800f3f6:	440b      	add	r3, r1
 800f3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3fa:	69f9      	ldr	r1, [r7, #28]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fd fa77 	bl	800c8f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	7d1b      	ldrb	r3, [r3, #20]
 800f406:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f40a:	b2da      	uxtb	r2, r3
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f410:	69fa      	ldr	r2, [r7, #28]
 800f412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f414:	4413      	add	r3, r2
 800f416:	61fb      	str	r3, [r7, #28]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	699a      	ldr	r2, [r3, #24]
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41e:	441a      	add	r2, r3
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	619a      	str	r2, [r3, #24]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	68da      	ldr	r2, [r3, #12]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	699b      	ldr	r3, [r3, #24]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	bf38      	it	cc
 800f430:	461a      	movcc	r2, r3
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	60da      	str	r2, [r3, #12]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43c:	441a      	add	r2, r3
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	601a      	str	r2, [r3, #0]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f446:	1ad3      	subs	r3, r2, r3
 800f448:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f47f aeb5 	bne.w	800f1bc <f_write+0x76>
 800f452:	e000      	b.n	800f456 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f454:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	7d1b      	ldrb	r3, [r3, #20]
 800f45a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f45e:	b2da      	uxtb	r2, r3
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	3730      	adds	r7, #48	; 0x30
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f46e:	b580      	push	{r7, lr}
 800f470:	b086      	sub	sp, #24
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f107 0208 	add.w	r2, r7, #8
 800f47c:	4611      	mov	r1, r2
 800f47e:	4618      	mov	r0, r3
 800f480:	f7ff faba 	bl	800e9f8 <validate>
 800f484:	4603      	mov	r3, r0
 800f486:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f488:	7dfb      	ldrb	r3, [r7, #23]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d168      	bne.n	800f560 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	7d1b      	ldrb	r3, [r3, #20]
 800f492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f496:	2b00      	cmp	r3, #0
 800f498:	d062      	beq.n	800f560 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	7d1b      	ldrb	r3, [r3, #20]
 800f49e:	b25b      	sxtb	r3, r3
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	da15      	bge.n	800f4d0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	7858      	ldrb	r0, [r3, #1]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6a1a      	ldr	r2, [r3, #32]
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	f7fd f95c 	bl	800c770 <disk_write>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d001      	beq.n	800f4c2 <f_sync+0x54>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e04f      	b.n	800f562 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	7d1b      	ldrb	r3, [r3, #20]
 800f4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4ca:	b2da      	uxtb	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f4d0:	f7fd f890 	bl	800c5f4 <get_fattime>
 800f4d4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f4d6:	68ba      	ldr	r2, [r7, #8]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4dc:	4619      	mov	r1, r3
 800f4de:	4610      	mov	r0, r2
 800f4e0:	f7fd fc34 	bl	800cd4c <move_window>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f4e8:	7dfb      	ldrb	r3, [r7, #23]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d138      	bne.n	800f560 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	330b      	adds	r3, #11
 800f4f8:	781a      	ldrb	r2, [r3, #0]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	330b      	adds	r3, #11
 800f4fe:	f042 0220 	orr.w	r2, r2, #32
 800f502:	b2d2      	uxtb	r2, r2
 800f504:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6818      	ldr	r0, [r3, #0]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	461a      	mov	r2, r3
 800f510:	68f9      	ldr	r1, [r7, #12]
 800f512:	f7fe f9c2 	bl	800d89a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f103 021c 	add.w	r2, r3, #28
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	4619      	mov	r1, r3
 800f522:	4610      	mov	r0, r2
 800f524:	f7fd f9b8 	bl	800c898 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	3316      	adds	r3, #22
 800f52c:	6939      	ldr	r1, [r7, #16]
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fd f9b2 	bl	800c898 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	3312      	adds	r3, #18
 800f538:	2100      	movs	r1, #0
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fd f991 	bl	800c862 <st_word>
					fs->wflag = 1;
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	2201      	movs	r2, #1
 800f544:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fd fc2d 	bl	800cda8 <sync_fs>
 800f54e:	4603      	mov	r3, r0
 800f550:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	7d1b      	ldrb	r3, [r3, #20]
 800f556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f55a:	b2da      	uxtb	r2, r3
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f560:	7dfb      	ldrb	r3, [r7, #23]
}
 800f562:	4618      	mov	r0, r3
 800f564:	3718      	adds	r7, #24
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b084      	sub	sp, #16
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7ff ff7b 	bl	800f46e <f_sync>
 800f578:	4603      	mov	r3, r0
 800f57a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d118      	bne.n	800f5b4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f107 0208 	add.w	r2, r7, #8
 800f588:	4611      	mov	r1, r2
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7ff fa34 	bl	800e9f8 <validate>
 800f590:	4603      	mov	r3, r0
 800f592:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f594:	7bfb      	ldrb	r3, [r7, #15]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d10c      	bne.n	800f5b4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	691b      	ldr	r3, [r3, #16]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fd fb30 	bl	800cc04 <dec_lock>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d102      	bne.n	800f5b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3710      	adds	r7, #16
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b090      	sub	sp, #64	; 0x40
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
 800f5c6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f107 0208 	add.w	r2, r7, #8
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff fa11 	bl	800e9f8 <validate>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f5dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d103      	bne.n	800f5ec <f_lseek+0x2e>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	7d5b      	ldrb	r3, [r3, #21]
 800f5e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f5ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d002      	beq.n	800f5fa <f_lseek+0x3c>
 800f5f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5f8:	e201      	b.n	800f9fe <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f000 80d9 	beq.w	800f7b6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f60a:	d15a      	bne.n	800f6c2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f610:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f614:	1d1a      	adds	r2, r3, #4
 800f616:	627a      	str	r2, [r7, #36]	; 0x24
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	617b      	str	r3, [r7, #20]
 800f61c:	2302      	movs	r3, #2
 800f61e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	689b      	ldr	r3, [r3, #8]
 800f624:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d03a      	beq.n	800f6a2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62e:	613b      	str	r3, [r7, #16]
 800f630:	2300      	movs	r3, #0
 800f632:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f636:	3302      	adds	r3, #2
 800f638:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63c:	60fb      	str	r3, [r7, #12]
 800f63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f640:	3301      	adds	r3, #1
 800f642:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fd fc3c 	bl	800cec6 <get_fat>
 800f64e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f652:	2b01      	cmp	r3, #1
 800f654:	d804      	bhi.n	800f660 <f_lseek+0xa2>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2202      	movs	r2, #2
 800f65a:	755a      	strb	r2, [r3, #21]
 800f65c:	2302      	movs	r3, #2
 800f65e:	e1ce      	b.n	800f9fe <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f666:	d104      	bne.n	800f672 <f_lseek+0xb4>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2201      	movs	r2, #1
 800f66c:	755a      	strb	r2, [r3, #21]
 800f66e:	2301      	movs	r3, #1
 800f670:	e1c5      	b.n	800f9fe <f_lseek+0x440>
					} while (cl == pcl + 1);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	3301      	adds	r3, #1
 800f676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f678:	429a      	cmp	r2, r3
 800f67a:	d0de      	beq.n	800f63a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f67c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	429a      	cmp	r2, r3
 800f682:	d809      	bhi.n	800f698 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f686:	1d1a      	adds	r2, r3, #4
 800f688:	627a      	str	r2, [r7, #36]	; 0x24
 800f68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f68c:	601a      	str	r2, [r3, #0]
 800f68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f690:	1d1a      	adds	r2, r3, #4
 800f692:	627a      	str	r2, [r7, #36]	; 0x24
 800f694:	693a      	ldr	r2, [r7, #16]
 800f696:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	69db      	ldr	r3, [r3, #28]
 800f69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d3c4      	bcc.n	800f62c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6a8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f6aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d803      	bhi.n	800f6ba <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	601a      	str	r2, [r3, #0]
 800f6b8:	e19f      	b.n	800f9fa <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f6ba:	2311      	movs	r3, #17
 800f6bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f6c0:	e19b      	b.n	800f9fa <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	683a      	ldr	r2, [r7, #0]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d902      	bls.n	800f6d2 <f_lseek+0x114>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	683a      	ldr	r2, [r7, #0]
 800f6d6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f000 818d 	beq.w	800f9fa <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	3b01      	subs	r3, #1
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f7fd feda 	bl	800d4a0 <clmt_clust>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f6f2:	68ba      	ldr	r2, [r7, #8]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	69db      	ldr	r3, [r3, #28]
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	4610      	mov	r0, r2
 800f6fc:	f7fd fbc4 	bl	800ce88 <clust2sect>
 800f700:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d104      	bne.n	800f712 <f_lseek+0x154>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2202      	movs	r2, #2
 800f70c:	755a      	strb	r2, [r3, #21]
 800f70e:	2302      	movs	r3, #2
 800f710:	e175      	b.n	800f9fe <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	3b01      	subs	r3, #1
 800f716:	68ba      	ldr	r2, [r7, #8]
 800f718:	8992      	ldrh	r2, [r2, #12]
 800f71a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f71e:	68ba      	ldr	r2, [r7, #8]
 800f720:	8952      	ldrh	r2, [r2, #10]
 800f722:	3a01      	subs	r2, #1
 800f724:	4013      	ands	r3, r2
 800f726:	69ba      	ldr	r2, [r7, #24]
 800f728:	4413      	add	r3, r2
 800f72a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	699b      	ldr	r3, [r3, #24]
 800f730:	68ba      	ldr	r2, [r7, #8]
 800f732:	8992      	ldrh	r2, [r2, #12]
 800f734:	fbb3 f1f2 	udiv	r1, r3, r2
 800f738:	fb01 f202 	mul.w	r2, r1, r2
 800f73c:	1a9b      	subs	r3, r3, r2
 800f73e:	2b00      	cmp	r3, #0
 800f740:	f000 815b 	beq.w	800f9fa <f_lseek+0x43c>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6a1b      	ldr	r3, [r3, #32]
 800f748:	69ba      	ldr	r2, [r7, #24]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	f000 8155 	beq.w	800f9fa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	7d1b      	ldrb	r3, [r3, #20]
 800f754:	b25b      	sxtb	r3, r3
 800f756:	2b00      	cmp	r3, #0
 800f758:	da18      	bge.n	800f78c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	7858      	ldrb	r0, [r3, #1]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6a1a      	ldr	r2, [r3, #32]
 800f768:	2301      	movs	r3, #1
 800f76a:	f7fd f801 	bl	800c770 <disk_write>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d004      	beq.n	800f77e <f_lseek+0x1c0>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2201      	movs	r2, #1
 800f778:	755a      	strb	r2, [r3, #21]
 800f77a:	2301      	movs	r3, #1
 800f77c:	e13f      	b.n	800f9fe <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	7d1b      	ldrb	r3, [r3, #20]
 800f782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f786:	b2da      	uxtb	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	7858      	ldrb	r0, [r3, #1]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f796:	2301      	movs	r3, #1
 800f798:	69ba      	ldr	r2, [r7, #24]
 800f79a:	f7fc ffc9 	bl	800c730 <disk_read>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d004      	beq.n	800f7ae <f_lseek+0x1f0>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	755a      	strb	r2, [r3, #21]
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	e127      	b.n	800f9fe <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	69ba      	ldr	r2, [r7, #24]
 800f7b2:	621a      	str	r2, [r3, #32]
 800f7b4:	e121      	b.n	800f9fa <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	68db      	ldr	r3, [r3, #12]
 800f7ba:	683a      	ldr	r2, [r7, #0]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d908      	bls.n	800f7d2 <f_lseek+0x214>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	7d1b      	ldrb	r3, [r3, #20]
 800f7c4:	f003 0302 	and.w	r3, r3, #2
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d102      	bne.n	800f7d2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	699b      	ldr	r3, [r3, #24]
 800f7d6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	637b      	str	r3, [r7, #52]	; 0x34
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7e0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f000 80b5 	beq.w	800f954 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	895b      	ldrh	r3, [r3, #10]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	899b      	ldrh	r3, [r3, #12]
 800f7f4:	fb02 f303 	mul.w	r3, r2, r3
 800f7f8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f7fa:	6a3b      	ldr	r3, [r7, #32]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d01b      	beq.n	800f838 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	1e5a      	subs	r2, r3, #1
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	fbb2 f2f3 	udiv	r2, r2, r3
 800f80a:	6a3b      	ldr	r3, [r7, #32]
 800f80c:	1e59      	subs	r1, r3, #1
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f814:	429a      	cmp	r2, r3
 800f816:	d30f      	bcc.n	800f838 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f818:	6a3b      	ldr	r3, [r7, #32]
 800f81a:	1e5a      	subs	r2, r3, #1
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	425b      	negs	r3, r3
 800f820:	401a      	ands	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	699b      	ldr	r3, [r3, #24]
 800f82a:	683a      	ldr	r2, [r7, #0]
 800f82c:	1ad3      	subs	r3, r2, r3
 800f82e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	69db      	ldr	r3, [r3, #28]
 800f834:	63bb      	str	r3, [r7, #56]	; 0x38
 800f836:	e022      	b.n	800f87e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	689b      	ldr	r3, [r3, #8]
 800f83c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f840:	2b00      	cmp	r3, #0
 800f842:	d119      	bne.n	800f878 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2100      	movs	r1, #0
 800f848:	4618      	mov	r0, r3
 800f84a:	f7fd fd91 	bl	800d370 <create_chain>
 800f84e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f852:	2b01      	cmp	r3, #1
 800f854:	d104      	bne.n	800f860 <f_lseek+0x2a2>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2202      	movs	r2, #2
 800f85a:	755a      	strb	r2, [r3, #21]
 800f85c:	2302      	movs	r3, #2
 800f85e:	e0ce      	b.n	800f9fe <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f866:	d104      	bne.n	800f872 <f_lseek+0x2b4>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2201      	movs	r2, #1
 800f86c:	755a      	strb	r2, [r3, #21]
 800f86e:	2301      	movs	r3, #1
 800f870:	e0c5      	b.n	800f9fe <f_lseek+0x440>
					fp->obj.sclust = clst;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f876:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f87c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f880:	2b00      	cmp	r3, #0
 800f882:	d067      	beq.n	800f954 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800f884:	e03a      	b.n	800f8fc <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	603b      	str	r3, [r7, #0]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	699a      	ldr	r2, [r3, #24]
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	441a      	add	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7d1b      	ldrb	r3, [r3, #20]
 800f89e:	f003 0302 	and.w	r3, r3, #2
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00b      	beq.n	800f8be <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fd fd60 	bl	800d370 <create_chain>
 800f8b0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d108      	bne.n	800f8ca <f_lseek+0x30c>
							ofs = 0; break;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	603b      	str	r3, [r7, #0]
 800f8bc:	e022      	b.n	800f904 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7fd faff 	bl	800cec6 <get_fat>
 800f8c8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8d0:	d104      	bne.n	800f8dc <f_lseek+0x31e>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	755a      	strb	r2, [r3, #21]
 800f8d8:	2301      	movs	r3, #1
 800f8da:	e090      	b.n	800f9fe <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d904      	bls.n	800f8ec <f_lseek+0x32e>
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	69db      	ldr	r3, [r3, #28]
 800f8e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d304      	bcc.n	800f8f6 <f_lseek+0x338>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2202      	movs	r2, #2
 800f8f0:	755a      	strb	r2, [r3, #21]
 800f8f2:	2302      	movs	r3, #2
 800f8f4:	e083      	b.n	800f9fe <f_lseek+0x440>
					fp->clust = clst;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8fa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f8fc:	683a      	ldr	r2, [r7, #0]
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	429a      	cmp	r2, r3
 800f902:	d8c0      	bhi.n	800f886 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	699a      	ldr	r2, [r3, #24]
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	441a      	add	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	899b      	ldrh	r3, [r3, #12]
 800f914:	461a      	mov	r2, r3
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	fbb3 f1f2 	udiv	r1, r3, r2
 800f91c:	fb01 f202 	mul.w	r2, r1, r2
 800f920:	1a9b      	subs	r3, r3, r2
 800f922:	2b00      	cmp	r3, #0
 800f924:	d016      	beq.n	800f954 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fd faac 	bl	800ce88 <clust2sect>
 800f930:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f934:	2b00      	cmp	r3, #0
 800f936:	d104      	bne.n	800f942 <f_lseek+0x384>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2202      	movs	r2, #2
 800f93c:	755a      	strb	r2, [r3, #21]
 800f93e:	2302      	movs	r3, #2
 800f940:	e05d      	b.n	800f9fe <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	899b      	ldrh	r3, [r3, #12]
 800f946:	461a      	mov	r2, r3
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f94e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f950:	4413      	add	r3, r2
 800f952:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	699a      	ldr	r2, [r3, #24]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d90a      	bls.n	800f976 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	699a      	ldr	r2, [r3, #24]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	7d1b      	ldrb	r3, [r3, #20]
 800f96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f970:	b2da      	uxtb	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	699b      	ldr	r3, [r3, #24]
 800f97a:	68ba      	ldr	r2, [r7, #8]
 800f97c:	8992      	ldrh	r2, [r2, #12]
 800f97e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f982:	fb01 f202 	mul.w	r2, r1, r2
 800f986:	1a9b      	subs	r3, r3, r2
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d036      	beq.n	800f9fa <f_lseek+0x43c>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6a1b      	ldr	r3, [r3, #32]
 800f990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f992:	429a      	cmp	r2, r3
 800f994:	d031      	beq.n	800f9fa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	7d1b      	ldrb	r3, [r3, #20]
 800f99a:	b25b      	sxtb	r3, r3
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	da18      	bge.n	800f9d2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	7858      	ldrb	r0, [r3, #1]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a1a      	ldr	r2, [r3, #32]
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	f7fc fede 	bl	800c770 <disk_write>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d004      	beq.n	800f9c4 <f_lseek+0x406>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	755a      	strb	r2, [r3, #21]
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e01c      	b.n	800f9fe <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	7d1b      	ldrb	r3, [r3, #20]
 800f9c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9cc:	b2da      	uxtb	r2, r3
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	7858      	ldrb	r0, [r3, #1]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9dc:	2301      	movs	r3, #1
 800f9de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9e0:	f7fc fea6 	bl	800c730 <disk_read>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d004      	beq.n	800f9f4 <f_lseek+0x436>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	755a      	strb	r2, [r3, #21]
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e004      	b.n	800f9fe <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9f8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f9fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3740      	adds	r7, #64	; 0x40
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b098      	sub	sp, #96	; 0x60
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800fa0e:	f107 010c 	add.w	r1, r7, #12
 800fa12:	1d3b      	adds	r3, r7, #4
 800fa14:	2202      	movs	r2, #2
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fe fd68 	bl	800e4ec <find_volume>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800fa26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f040 80f2 	bne.w	800fc14 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	f107 0310 	add.w	r3, r7, #16
 800fa36:	4611      	mov	r1, r2
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fe fc47 	bl	800e2cc <follow_path>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800fa44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d102      	bne.n	800fa52 <f_mkdir+0x4c>
 800fa4c:	2308      	movs	r3, #8
 800fa4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800fa52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa56:	2b04      	cmp	r3, #4
 800fa58:	f040 80dc 	bne.w	800fc14 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800fa5c:	f107 0310 	add.w	r3, r7, #16
 800fa60:	2100      	movs	r1, #0
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fd fc84 	bl	800d370 <create_chain>
 800fa68:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	895b      	ldrh	r3, [r3, #10]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	899b      	ldrh	r3, [r3, #12]
 800fa74:	fb02 f303 	mul.w	r3, r2, r3
 800fa78:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800fa80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d102      	bne.n	800fa8c <f_mkdir+0x86>
 800fa86:	2307      	movs	r3, #7
 800fa88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800fa8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d102      	bne.n	800fa98 <f_mkdir+0x92>
 800fa92:	2302      	movs	r3, #2
 800fa94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fa98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa9e:	d102      	bne.n	800faa6 <f_mkdir+0xa0>
 800faa0:	2301      	movs	r3, #1
 800faa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800faa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d106      	bne.n	800fabc <f_mkdir+0xb6>
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fd f907 	bl	800ccc4 <sync_window>
 800fab6:	4603      	mov	r3, r0
 800fab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800fabc:	f7fc fd9a 	bl	800c5f4 <get_fattime>
 800fac0:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800fac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d16c      	bne.n	800fba4 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800face:	4618      	mov	r0, r3
 800fad0:	f7fd f9da 	bl	800ce88 <clust2sect>
 800fad4:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	3338      	adds	r3, #56	; 0x38
 800fada:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	899b      	ldrh	r3, [r3, #12]
 800fae0:	461a      	mov	r2, r3
 800fae2:	2100      	movs	r1, #0
 800fae4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fae6:	f7fc ff24 	bl	800c932 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800faea:	220b      	movs	r2, #11
 800faec:	2120      	movs	r1, #32
 800faee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800faf0:	f7fc ff1f 	bl	800c932 <mem_set>
					dir[DIR_Name] = '.';
 800faf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faf6:	222e      	movs	r2, #46	; 0x2e
 800faf8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800fafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fafc:	330b      	adds	r3, #11
 800fafe:	2210      	movs	r2, #16
 800fb00:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800fb02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb04:	3316      	adds	r3, #22
 800fb06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fc fec5 	bl	800c898 <st_dword>
					st_clust(fs, dir, dcl);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fd fec0 	bl	800d89a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800fb1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb1c:	3320      	adds	r3, #32
 800fb1e:	2220      	movs	r2, #32
 800fb20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7fc fee4 	bl	800c8f0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800fb28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb2a:	3321      	adds	r3, #33	; 0x21
 800fb2c:	222e      	movs	r2, #46	; 0x2e
 800fb2e:	701a      	strb	r2, [r3, #0]
 800fb30:	69bb      	ldr	r3, [r7, #24]
 800fb32:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	2b03      	cmp	r3, #3
 800fb3a:	d106      	bne.n	800fb4a <f_mkdir+0x144>
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d101      	bne.n	800fb4a <f_mkdir+0x144>
 800fb46:	2300      	movs	r3, #0
 800fb48:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb4e:	3320      	adds	r3, #32
 800fb50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb52:	4619      	mov	r1, r3
 800fb54:	f7fd fea1 	bl	800d89a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	895b      	ldrh	r3, [r3, #10]
 800fb5c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fb5e:	e01c      	b.n	800fb9a <f_mkdir+0x194>
					fs->winsect = dsc++;
 800fb60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb62:	1c5a      	adds	r2, r3, #1
 800fb64:	657a      	str	r2, [r7, #84]	; 0x54
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fd f8a6 	bl	800ccc4 <sync_window>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800fb7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d10d      	bne.n	800fba2 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	899b      	ldrh	r3, [r3, #12]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb90:	f7fc fecf 	bl	800c932 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fb94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb96:	3b01      	subs	r3, #1
 800fb98:	65bb      	str	r3, [r7, #88]	; 0x58
 800fb9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d1df      	bne.n	800fb60 <f_mkdir+0x15a>
 800fba0:	e000      	b.n	800fba4 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800fba2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800fba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d107      	bne.n	800fbbc <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800fbac:	f107 0310 	add.w	r3, r7, #16
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fe f8db 	bl	800dd6c <dir_register>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800fbbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d120      	bne.n	800fc06 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc6:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800fbc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbca:	3316      	adds	r3, #22
 800fbcc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fc fe62 	bl	800c898 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fbd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7fd fe5d 	bl	800d89a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800fbe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbe2:	330b      	adds	r3, #11
 800fbe4:	2210      	movs	r2, #16
 800fbe6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2201      	movs	r2, #1
 800fbec:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800fbee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d10e      	bne.n	800fc14 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7fd f8d5 	bl	800cda8 <sync_fs>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fc04:	e006      	b.n	800fc14 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800fc06:	f107 0310 	add.w	r3, r7, #16
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7fd fb49 	bl	800d2a6 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800fc14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3760      	adds	r7, #96	; 0x60
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}

0800fc20 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	460b      	mov	r3, r1
 800fc2a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800fc2c:	78fb      	ldrb	r3, [r7, #3]
 800fc2e:	2b0a      	cmp	r3, #10
 800fc30:	d103      	bne.n	800fc3a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800fc32:	210d      	movs	r1, #13
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f7ff fff3 	bl	800fc20 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	db25      	blt.n	800fc92 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	1c5a      	adds	r2, r3, #1
 800fc4a:	60fa      	str	r2, [r7, #12]
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	4413      	add	r3, r2
 800fc50:	78fa      	ldrb	r2, [r7, #3]
 800fc52:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2b3c      	cmp	r3, #60	; 0x3c
 800fc58:	dd12      	ble.n	800fc80 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6818      	ldr	r0, [r3, #0]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f103 010c 	add.w	r1, r3, #12
 800fc64:	68fa      	ldr	r2, [r7, #12]
 800fc66:	f107 0308 	add.w	r3, r7, #8
 800fc6a:	f7ff fa6c 	bl	800f146 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800fc6e:	68ba      	ldr	r2, [r7, #8]
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d101      	bne.n	800fc7a <putc_bfd+0x5a>
 800fc76:	2300      	movs	r3, #0
 800fc78:	e001      	b.n	800fc7e <putc_bfd+0x5e>
 800fc7a:	f04f 33ff 	mov.w	r3, #4294967295
 800fc7e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	68fa      	ldr	r2, [r7, #12]
 800fc84:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	1c5a      	adds	r2, r3, #1
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	609a      	str	r2, [r3, #8]
 800fc90:	e000      	b.n	800fc94 <putc_bfd+0x74>
	if (i < 0) return;
 800fc92:	bf00      	nop
}
 800fc94:	3710      	adds	r7, #16
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b084      	sub	sp, #16
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	db16      	blt.n	800fcd8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6818      	ldr	r0, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f103 010c 	add.w	r1, r3, #12
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	461a      	mov	r2, r3
 800fcba:	f107 030c 	add.w	r3, r7, #12
 800fcbe:	f7ff fa42 	bl	800f146 <f_write>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d107      	bne.n	800fcd8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d102      	bne.n	800fcd8 <putc_flush+0x3e>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	689b      	ldr	r3, [r3, #8]
 800fcd6:	e001      	b.n	800fcdc <putc_flush+0x42>
	return EOF;
 800fcd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3710      	adds	r7, #16
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	683a      	ldr	r2, [r7, #0]
 800fcf2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	605a      	str	r2, [r3, #4]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	685a      	ldr	r2, [r3, #4]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	609a      	str	r2, [r3, #8]
}
 800fd02:	bf00      	nop
 800fd04:	370c      	adds	r7, #12
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr

0800fd0e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b096      	sub	sp, #88	; 0x58
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800fd18:	f107 030c 	add.w	r3, r7, #12
 800fd1c:	6839      	ldr	r1, [r7, #0]
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7ff ffe0 	bl	800fce4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800fd24:	e009      	b.n	800fd3a <f_puts+0x2c>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	1c5a      	adds	r2, r3, #1
 800fd2a:	607a      	str	r2, [r7, #4]
 800fd2c:	781a      	ldrb	r2, [r3, #0]
 800fd2e:	f107 030c 	add.w	r3, r7, #12
 800fd32:	4611      	mov	r1, r2
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7ff ff73 	bl	800fc20 <putc_bfd>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d1f1      	bne.n	800fd26 <f_puts+0x18>
	return putc_flush(&pb);
 800fd42:	f107 030c 	add.w	r3, r7, #12
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7ff ffa7 	bl	800fc9a <putc_flush>
 800fd4c:	4603      	mov	r3, r0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3758      	adds	r7, #88	; 0x58
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
	...

0800fd58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	4613      	mov	r3, r2
 800fd64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fd66:	2301      	movs	r3, #1
 800fd68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fd6e:	4b1f      	ldr	r3, [pc, #124]	; (800fdec <FATFS_LinkDriverEx+0x94>)
 800fd70:	7a5b      	ldrb	r3, [r3, #9]
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d131      	bne.n	800fddc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fd78:	4b1c      	ldr	r3, [pc, #112]	; (800fdec <FATFS_LinkDriverEx+0x94>)
 800fd7a:	7a5b      	ldrb	r3, [r3, #9]
 800fd7c:	b2db      	uxtb	r3, r3
 800fd7e:	461a      	mov	r2, r3
 800fd80:	4b1a      	ldr	r3, [pc, #104]	; (800fdec <FATFS_LinkDriverEx+0x94>)
 800fd82:	2100      	movs	r1, #0
 800fd84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fd86:	4b19      	ldr	r3, [pc, #100]	; (800fdec <FATFS_LinkDriverEx+0x94>)
 800fd88:	7a5b      	ldrb	r3, [r3, #9]
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	4a17      	ldr	r2, [pc, #92]	; (800fdec <FATFS_LinkDriverEx+0x94>)
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	4413      	add	r3, r2
 800fd92:	68fa      	ldr	r2, [r7, #12]
 800fd94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fd96:	4b15      	ldr	r3, [pc, #84]	; (800fdec <FATFS_LinkDriverEx+0x94>)
 800fd98:	7a5b      	ldrb	r3, [r3, #9]
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	4b13      	ldr	r3, [pc, #76]	; (800fdec <FATFS_LinkDriverEx+0x94>)
 800fda0:	4413      	add	r3, r2
 800fda2:	79fa      	ldrb	r2, [r7, #7]
 800fda4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fda6:	4b11      	ldr	r3, [pc, #68]	; (800fdec <FATFS_LinkDriverEx+0x94>)
 800fda8:	7a5b      	ldrb	r3, [r3, #9]
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	1c5a      	adds	r2, r3, #1
 800fdae:	b2d1      	uxtb	r1, r2
 800fdb0:	4a0e      	ldr	r2, [pc, #56]	; (800fdec <FATFS_LinkDriverEx+0x94>)
 800fdb2:	7251      	strb	r1, [r2, #9]
 800fdb4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fdb6:	7dbb      	ldrb	r3, [r7, #22]
 800fdb8:	3330      	adds	r3, #48	; 0x30
 800fdba:	b2da      	uxtb	r2, r3
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	223a      	movs	r2, #58	; 0x3a
 800fdc6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	3302      	adds	r3, #2
 800fdcc:	222f      	movs	r2, #47	; 0x2f
 800fdce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	3303      	adds	r3, #3
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fddc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	371c      	adds	r7, #28
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	20000918 	.word	0x20000918

0800fdf0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	6839      	ldr	r1, [r7, #0]
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f7ff ffaa 	bl	800fd58 <FATFS_LinkDriverEx>
 800fe04:	4603      	mov	r3, r0
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
	...

0800fe10 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b085      	sub	sp, #20
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	4603      	mov	r3, r0
 800fe18:	6039      	str	r1, [r7, #0]
 800fe1a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fe1c:	88fb      	ldrh	r3, [r7, #6]
 800fe1e:	2b7f      	cmp	r3, #127	; 0x7f
 800fe20:	d802      	bhi.n	800fe28 <ff_convert+0x18>
		c = chr;
 800fe22:	88fb      	ldrh	r3, [r7, #6]
 800fe24:	81fb      	strh	r3, [r7, #14]
 800fe26:	e025      	b.n	800fe74 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d00b      	beq.n	800fe46 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fe2e:	88fb      	ldrh	r3, [r7, #6]
 800fe30:	2bff      	cmp	r3, #255	; 0xff
 800fe32:	d805      	bhi.n	800fe40 <ff_convert+0x30>
 800fe34:	88fb      	ldrh	r3, [r7, #6]
 800fe36:	3b80      	subs	r3, #128	; 0x80
 800fe38:	4a12      	ldr	r2, [pc, #72]	; (800fe84 <ff_convert+0x74>)
 800fe3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe3e:	e000      	b.n	800fe42 <ff_convert+0x32>
 800fe40:	2300      	movs	r3, #0
 800fe42:	81fb      	strh	r3, [r7, #14]
 800fe44:	e016      	b.n	800fe74 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fe46:	2300      	movs	r3, #0
 800fe48:	81fb      	strh	r3, [r7, #14]
 800fe4a:	e009      	b.n	800fe60 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fe4c:	89fb      	ldrh	r3, [r7, #14]
 800fe4e:	4a0d      	ldr	r2, [pc, #52]	; (800fe84 <ff_convert+0x74>)
 800fe50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe54:	88fa      	ldrh	r2, [r7, #6]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d006      	beq.n	800fe68 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fe5a:	89fb      	ldrh	r3, [r7, #14]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	81fb      	strh	r3, [r7, #14]
 800fe60:	89fb      	ldrh	r3, [r7, #14]
 800fe62:	2b7f      	cmp	r3, #127	; 0x7f
 800fe64:	d9f2      	bls.n	800fe4c <ff_convert+0x3c>
 800fe66:	e000      	b.n	800fe6a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fe68:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fe6a:	89fb      	ldrh	r3, [r7, #14]
 800fe6c:	3380      	adds	r3, #128	; 0x80
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fe74:	89fb      	ldrh	r3, [r7, #14]
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3714      	adds	r7, #20
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop
 800fe84:	080144d4 	.word	0x080144d4

0800fe88 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b087      	sub	sp, #28
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	4603      	mov	r3, r0
 800fe90:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fe92:	88fb      	ldrh	r3, [r7, #6]
 800fe94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe98:	d201      	bcs.n	800fe9e <ff_wtoupper+0x16>
 800fe9a:	4b3e      	ldr	r3, [pc, #248]	; (800ff94 <ff_wtoupper+0x10c>)
 800fe9c:	e000      	b.n	800fea0 <ff_wtoupper+0x18>
 800fe9e:	4b3e      	ldr	r3, [pc, #248]	; (800ff98 <ff_wtoupper+0x110>)
 800fea0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	1c9a      	adds	r2, r3, #2
 800fea6:	617a      	str	r2, [r7, #20]
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800feac:	8a7b      	ldrh	r3, [r7, #18]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d068      	beq.n	800ff84 <ff_wtoupper+0xfc>
 800feb2:	88fa      	ldrh	r2, [r7, #6]
 800feb4:	8a7b      	ldrh	r3, [r7, #18]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d364      	bcc.n	800ff84 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	1c9a      	adds	r2, r3, #2
 800febe:	617a      	str	r2, [r7, #20]
 800fec0:	881b      	ldrh	r3, [r3, #0]
 800fec2:	823b      	strh	r3, [r7, #16]
 800fec4:	8a3b      	ldrh	r3, [r7, #16]
 800fec6:	0a1b      	lsrs	r3, r3, #8
 800fec8:	81fb      	strh	r3, [r7, #14]
 800feca:	8a3b      	ldrh	r3, [r7, #16]
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fed0:	88fa      	ldrh	r2, [r7, #6]
 800fed2:	8a79      	ldrh	r1, [r7, #18]
 800fed4:	8a3b      	ldrh	r3, [r7, #16]
 800fed6:	440b      	add	r3, r1
 800fed8:	429a      	cmp	r2, r3
 800feda:	da49      	bge.n	800ff70 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fedc:	89fb      	ldrh	r3, [r7, #14]
 800fede:	2b08      	cmp	r3, #8
 800fee0:	d84f      	bhi.n	800ff82 <ff_wtoupper+0xfa>
 800fee2:	a201      	add	r2, pc, #4	; (adr r2, 800fee8 <ff_wtoupper+0x60>)
 800fee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fee8:	0800ff0d 	.word	0x0800ff0d
 800feec:	0800ff1f 	.word	0x0800ff1f
 800fef0:	0800ff35 	.word	0x0800ff35
 800fef4:	0800ff3d 	.word	0x0800ff3d
 800fef8:	0800ff45 	.word	0x0800ff45
 800fefc:	0800ff4d 	.word	0x0800ff4d
 800ff00:	0800ff55 	.word	0x0800ff55
 800ff04:	0800ff5d 	.word	0x0800ff5d
 800ff08:	0800ff65 	.word	0x0800ff65
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ff0c:	88fa      	ldrh	r2, [r7, #6]
 800ff0e:	8a7b      	ldrh	r3, [r7, #18]
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	005b      	lsls	r3, r3, #1
 800ff14:	697a      	ldr	r2, [r7, #20]
 800ff16:	4413      	add	r3, r2
 800ff18:	881b      	ldrh	r3, [r3, #0]
 800ff1a:	80fb      	strh	r3, [r7, #6]
 800ff1c:	e027      	b.n	800ff6e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ff1e:	88fa      	ldrh	r2, [r7, #6]
 800ff20:	8a7b      	ldrh	r3, [r7, #18]
 800ff22:	1ad3      	subs	r3, r2, r3
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	f003 0301 	and.w	r3, r3, #1
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	88fa      	ldrh	r2, [r7, #6]
 800ff2e:	1ad3      	subs	r3, r2, r3
 800ff30:	80fb      	strh	r3, [r7, #6]
 800ff32:	e01c      	b.n	800ff6e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ff34:	88fb      	ldrh	r3, [r7, #6]
 800ff36:	3b10      	subs	r3, #16
 800ff38:	80fb      	strh	r3, [r7, #6]
 800ff3a:	e018      	b.n	800ff6e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ff3c:	88fb      	ldrh	r3, [r7, #6]
 800ff3e:	3b20      	subs	r3, #32
 800ff40:	80fb      	strh	r3, [r7, #6]
 800ff42:	e014      	b.n	800ff6e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ff44:	88fb      	ldrh	r3, [r7, #6]
 800ff46:	3b30      	subs	r3, #48	; 0x30
 800ff48:	80fb      	strh	r3, [r7, #6]
 800ff4a:	e010      	b.n	800ff6e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ff4c:	88fb      	ldrh	r3, [r7, #6]
 800ff4e:	3b1a      	subs	r3, #26
 800ff50:	80fb      	strh	r3, [r7, #6]
 800ff52:	e00c      	b.n	800ff6e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ff54:	88fb      	ldrh	r3, [r7, #6]
 800ff56:	3308      	adds	r3, #8
 800ff58:	80fb      	strh	r3, [r7, #6]
 800ff5a:	e008      	b.n	800ff6e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ff5c:	88fb      	ldrh	r3, [r7, #6]
 800ff5e:	3b50      	subs	r3, #80	; 0x50
 800ff60:	80fb      	strh	r3, [r7, #6]
 800ff62:	e004      	b.n	800ff6e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ff64:	88fb      	ldrh	r3, [r7, #6]
 800ff66:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ff6a:	80fb      	strh	r3, [r7, #6]
 800ff6c:	bf00      	nop
			}
			break;
 800ff6e:	e008      	b.n	800ff82 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ff70:	89fb      	ldrh	r3, [r7, #14]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d195      	bne.n	800fea2 <ff_wtoupper+0x1a>
 800ff76:	8a3b      	ldrh	r3, [r7, #16]
 800ff78:	005b      	lsls	r3, r3, #1
 800ff7a:	697a      	ldr	r2, [r7, #20]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ff80:	e78f      	b.n	800fea2 <ff_wtoupper+0x1a>
			break;
 800ff82:	bf00      	nop
	}

	return chr;
 800ff84:	88fb      	ldrh	r3, [r7, #6]
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	371c      	adds	r7, #28
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	080145d4 	.word	0x080145d4
 800ff98:	080147c8 	.word	0x080147c8

0800ff9c <__errno>:
 800ff9c:	4b01      	ldr	r3, [pc, #4]	; (800ffa4 <__errno+0x8>)
 800ff9e:	6818      	ldr	r0, [r3, #0]
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop
 800ffa4:	20000044 	.word	0x20000044

0800ffa8 <__libc_init_array>:
 800ffa8:	b570      	push	{r4, r5, r6, lr}
 800ffaa:	4d0d      	ldr	r5, [pc, #52]	; (800ffe0 <__libc_init_array+0x38>)
 800ffac:	4c0d      	ldr	r4, [pc, #52]	; (800ffe4 <__libc_init_array+0x3c>)
 800ffae:	1b64      	subs	r4, r4, r5
 800ffb0:	10a4      	asrs	r4, r4, #2
 800ffb2:	2600      	movs	r6, #0
 800ffb4:	42a6      	cmp	r6, r4
 800ffb6:	d109      	bne.n	800ffcc <__libc_init_array+0x24>
 800ffb8:	4d0b      	ldr	r5, [pc, #44]	; (800ffe8 <__libc_init_array+0x40>)
 800ffba:	4c0c      	ldr	r4, [pc, #48]	; (800ffec <__libc_init_array+0x44>)
 800ffbc:	f003 fdf0 	bl	8013ba0 <_init>
 800ffc0:	1b64      	subs	r4, r4, r5
 800ffc2:	10a4      	asrs	r4, r4, #2
 800ffc4:	2600      	movs	r6, #0
 800ffc6:	42a6      	cmp	r6, r4
 800ffc8:	d105      	bne.n	800ffd6 <__libc_init_array+0x2e>
 800ffca:	bd70      	pop	{r4, r5, r6, pc}
 800ffcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffd0:	4798      	blx	r3
 800ffd2:	3601      	adds	r6, #1
 800ffd4:	e7ee      	b.n	800ffb4 <__libc_init_array+0xc>
 800ffd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffda:	4798      	blx	r3
 800ffdc:	3601      	adds	r6, #1
 800ffde:	e7f2      	b.n	800ffc6 <__libc_init_array+0x1e>
 800ffe0:	08014c88 	.word	0x08014c88
 800ffe4:	08014c88 	.word	0x08014c88
 800ffe8:	08014c88 	.word	0x08014c88
 800ffec:	08014c8c 	.word	0x08014c8c

0800fff0 <malloc>:
 800fff0:	4b02      	ldr	r3, [pc, #8]	; (800fffc <malloc+0xc>)
 800fff2:	4601      	mov	r1, r0
 800fff4:	6818      	ldr	r0, [r3, #0]
 800fff6:	f000 b885 	b.w	8010104 <_malloc_r>
 800fffa:	bf00      	nop
 800fffc:	20000044 	.word	0x20000044

08010000 <memcpy>:
 8010000:	440a      	add	r2, r1
 8010002:	4291      	cmp	r1, r2
 8010004:	f100 33ff 	add.w	r3, r0, #4294967295
 8010008:	d100      	bne.n	801000c <memcpy+0xc>
 801000a:	4770      	bx	lr
 801000c:	b510      	push	{r4, lr}
 801000e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010016:	4291      	cmp	r1, r2
 8010018:	d1f9      	bne.n	801000e <memcpy+0xe>
 801001a:	bd10      	pop	{r4, pc}

0801001c <memset>:
 801001c:	4402      	add	r2, r0
 801001e:	4603      	mov	r3, r0
 8010020:	4293      	cmp	r3, r2
 8010022:	d100      	bne.n	8010026 <memset+0xa>
 8010024:	4770      	bx	lr
 8010026:	f803 1b01 	strb.w	r1, [r3], #1
 801002a:	e7f9      	b.n	8010020 <memset+0x4>

0801002c <_free_r>:
 801002c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801002e:	2900      	cmp	r1, #0
 8010030:	d044      	beq.n	80100bc <_free_r+0x90>
 8010032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010036:	9001      	str	r0, [sp, #4]
 8010038:	2b00      	cmp	r3, #0
 801003a:	f1a1 0404 	sub.w	r4, r1, #4
 801003e:	bfb8      	it	lt
 8010040:	18e4      	addlt	r4, r4, r3
 8010042:	f001 fff1 	bl	8012028 <__malloc_lock>
 8010046:	4a1e      	ldr	r2, [pc, #120]	; (80100c0 <_free_r+0x94>)
 8010048:	9801      	ldr	r0, [sp, #4]
 801004a:	6813      	ldr	r3, [r2, #0]
 801004c:	b933      	cbnz	r3, 801005c <_free_r+0x30>
 801004e:	6063      	str	r3, [r4, #4]
 8010050:	6014      	str	r4, [r2, #0]
 8010052:	b003      	add	sp, #12
 8010054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010058:	f001 bfec 	b.w	8012034 <__malloc_unlock>
 801005c:	42a3      	cmp	r3, r4
 801005e:	d908      	bls.n	8010072 <_free_r+0x46>
 8010060:	6825      	ldr	r5, [r4, #0]
 8010062:	1961      	adds	r1, r4, r5
 8010064:	428b      	cmp	r3, r1
 8010066:	bf01      	itttt	eq
 8010068:	6819      	ldreq	r1, [r3, #0]
 801006a:	685b      	ldreq	r3, [r3, #4]
 801006c:	1949      	addeq	r1, r1, r5
 801006e:	6021      	streq	r1, [r4, #0]
 8010070:	e7ed      	b.n	801004e <_free_r+0x22>
 8010072:	461a      	mov	r2, r3
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	b10b      	cbz	r3, 801007c <_free_r+0x50>
 8010078:	42a3      	cmp	r3, r4
 801007a:	d9fa      	bls.n	8010072 <_free_r+0x46>
 801007c:	6811      	ldr	r1, [r2, #0]
 801007e:	1855      	adds	r5, r2, r1
 8010080:	42a5      	cmp	r5, r4
 8010082:	d10b      	bne.n	801009c <_free_r+0x70>
 8010084:	6824      	ldr	r4, [r4, #0]
 8010086:	4421      	add	r1, r4
 8010088:	1854      	adds	r4, r2, r1
 801008a:	42a3      	cmp	r3, r4
 801008c:	6011      	str	r1, [r2, #0]
 801008e:	d1e0      	bne.n	8010052 <_free_r+0x26>
 8010090:	681c      	ldr	r4, [r3, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	6053      	str	r3, [r2, #4]
 8010096:	4421      	add	r1, r4
 8010098:	6011      	str	r1, [r2, #0]
 801009a:	e7da      	b.n	8010052 <_free_r+0x26>
 801009c:	d902      	bls.n	80100a4 <_free_r+0x78>
 801009e:	230c      	movs	r3, #12
 80100a0:	6003      	str	r3, [r0, #0]
 80100a2:	e7d6      	b.n	8010052 <_free_r+0x26>
 80100a4:	6825      	ldr	r5, [r4, #0]
 80100a6:	1961      	adds	r1, r4, r5
 80100a8:	428b      	cmp	r3, r1
 80100aa:	bf04      	itt	eq
 80100ac:	6819      	ldreq	r1, [r3, #0]
 80100ae:	685b      	ldreq	r3, [r3, #4]
 80100b0:	6063      	str	r3, [r4, #4]
 80100b2:	bf04      	itt	eq
 80100b4:	1949      	addeq	r1, r1, r5
 80100b6:	6021      	streq	r1, [r4, #0]
 80100b8:	6054      	str	r4, [r2, #4]
 80100ba:	e7ca      	b.n	8010052 <_free_r+0x26>
 80100bc:	b003      	add	sp, #12
 80100be:	bd30      	pop	{r4, r5, pc}
 80100c0:	20000924 	.word	0x20000924

080100c4 <sbrk_aligned>:
 80100c4:	b570      	push	{r4, r5, r6, lr}
 80100c6:	4e0e      	ldr	r6, [pc, #56]	; (8010100 <sbrk_aligned+0x3c>)
 80100c8:	460c      	mov	r4, r1
 80100ca:	6831      	ldr	r1, [r6, #0]
 80100cc:	4605      	mov	r5, r0
 80100ce:	b911      	cbnz	r1, 80100d6 <sbrk_aligned+0x12>
 80100d0:	f000 fd0e 	bl	8010af0 <_sbrk_r>
 80100d4:	6030      	str	r0, [r6, #0]
 80100d6:	4621      	mov	r1, r4
 80100d8:	4628      	mov	r0, r5
 80100da:	f000 fd09 	bl	8010af0 <_sbrk_r>
 80100de:	1c43      	adds	r3, r0, #1
 80100e0:	d00a      	beq.n	80100f8 <sbrk_aligned+0x34>
 80100e2:	1cc4      	adds	r4, r0, #3
 80100e4:	f024 0403 	bic.w	r4, r4, #3
 80100e8:	42a0      	cmp	r0, r4
 80100ea:	d007      	beq.n	80100fc <sbrk_aligned+0x38>
 80100ec:	1a21      	subs	r1, r4, r0
 80100ee:	4628      	mov	r0, r5
 80100f0:	f000 fcfe 	bl	8010af0 <_sbrk_r>
 80100f4:	3001      	adds	r0, #1
 80100f6:	d101      	bne.n	80100fc <sbrk_aligned+0x38>
 80100f8:	f04f 34ff 	mov.w	r4, #4294967295
 80100fc:	4620      	mov	r0, r4
 80100fe:	bd70      	pop	{r4, r5, r6, pc}
 8010100:	20000928 	.word	0x20000928

08010104 <_malloc_r>:
 8010104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010108:	1ccd      	adds	r5, r1, #3
 801010a:	f025 0503 	bic.w	r5, r5, #3
 801010e:	3508      	adds	r5, #8
 8010110:	2d0c      	cmp	r5, #12
 8010112:	bf38      	it	cc
 8010114:	250c      	movcc	r5, #12
 8010116:	2d00      	cmp	r5, #0
 8010118:	4607      	mov	r7, r0
 801011a:	db01      	blt.n	8010120 <_malloc_r+0x1c>
 801011c:	42a9      	cmp	r1, r5
 801011e:	d905      	bls.n	801012c <_malloc_r+0x28>
 8010120:	230c      	movs	r3, #12
 8010122:	603b      	str	r3, [r7, #0]
 8010124:	2600      	movs	r6, #0
 8010126:	4630      	mov	r0, r6
 8010128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801012c:	4e2e      	ldr	r6, [pc, #184]	; (80101e8 <_malloc_r+0xe4>)
 801012e:	f001 ff7b 	bl	8012028 <__malloc_lock>
 8010132:	6833      	ldr	r3, [r6, #0]
 8010134:	461c      	mov	r4, r3
 8010136:	bb34      	cbnz	r4, 8010186 <_malloc_r+0x82>
 8010138:	4629      	mov	r1, r5
 801013a:	4638      	mov	r0, r7
 801013c:	f7ff ffc2 	bl	80100c4 <sbrk_aligned>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	4604      	mov	r4, r0
 8010144:	d14d      	bne.n	80101e2 <_malloc_r+0xde>
 8010146:	6834      	ldr	r4, [r6, #0]
 8010148:	4626      	mov	r6, r4
 801014a:	2e00      	cmp	r6, #0
 801014c:	d140      	bne.n	80101d0 <_malloc_r+0xcc>
 801014e:	6823      	ldr	r3, [r4, #0]
 8010150:	4631      	mov	r1, r6
 8010152:	4638      	mov	r0, r7
 8010154:	eb04 0803 	add.w	r8, r4, r3
 8010158:	f000 fcca 	bl	8010af0 <_sbrk_r>
 801015c:	4580      	cmp	r8, r0
 801015e:	d13a      	bne.n	80101d6 <_malloc_r+0xd2>
 8010160:	6821      	ldr	r1, [r4, #0]
 8010162:	3503      	adds	r5, #3
 8010164:	1a6d      	subs	r5, r5, r1
 8010166:	f025 0503 	bic.w	r5, r5, #3
 801016a:	3508      	adds	r5, #8
 801016c:	2d0c      	cmp	r5, #12
 801016e:	bf38      	it	cc
 8010170:	250c      	movcc	r5, #12
 8010172:	4629      	mov	r1, r5
 8010174:	4638      	mov	r0, r7
 8010176:	f7ff ffa5 	bl	80100c4 <sbrk_aligned>
 801017a:	3001      	adds	r0, #1
 801017c:	d02b      	beq.n	80101d6 <_malloc_r+0xd2>
 801017e:	6823      	ldr	r3, [r4, #0]
 8010180:	442b      	add	r3, r5
 8010182:	6023      	str	r3, [r4, #0]
 8010184:	e00e      	b.n	80101a4 <_malloc_r+0xa0>
 8010186:	6822      	ldr	r2, [r4, #0]
 8010188:	1b52      	subs	r2, r2, r5
 801018a:	d41e      	bmi.n	80101ca <_malloc_r+0xc6>
 801018c:	2a0b      	cmp	r2, #11
 801018e:	d916      	bls.n	80101be <_malloc_r+0xba>
 8010190:	1961      	adds	r1, r4, r5
 8010192:	42a3      	cmp	r3, r4
 8010194:	6025      	str	r5, [r4, #0]
 8010196:	bf18      	it	ne
 8010198:	6059      	strne	r1, [r3, #4]
 801019a:	6863      	ldr	r3, [r4, #4]
 801019c:	bf08      	it	eq
 801019e:	6031      	streq	r1, [r6, #0]
 80101a0:	5162      	str	r2, [r4, r5]
 80101a2:	604b      	str	r3, [r1, #4]
 80101a4:	4638      	mov	r0, r7
 80101a6:	f104 060b 	add.w	r6, r4, #11
 80101aa:	f001 ff43 	bl	8012034 <__malloc_unlock>
 80101ae:	f026 0607 	bic.w	r6, r6, #7
 80101b2:	1d23      	adds	r3, r4, #4
 80101b4:	1af2      	subs	r2, r6, r3
 80101b6:	d0b6      	beq.n	8010126 <_malloc_r+0x22>
 80101b8:	1b9b      	subs	r3, r3, r6
 80101ba:	50a3      	str	r3, [r4, r2]
 80101bc:	e7b3      	b.n	8010126 <_malloc_r+0x22>
 80101be:	6862      	ldr	r2, [r4, #4]
 80101c0:	42a3      	cmp	r3, r4
 80101c2:	bf0c      	ite	eq
 80101c4:	6032      	streq	r2, [r6, #0]
 80101c6:	605a      	strne	r2, [r3, #4]
 80101c8:	e7ec      	b.n	80101a4 <_malloc_r+0xa0>
 80101ca:	4623      	mov	r3, r4
 80101cc:	6864      	ldr	r4, [r4, #4]
 80101ce:	e7b2      	b.n	8010136 <_malloc_r+0x32>
 80101d0:	4634      	mov	r4, r6
 80101d2:	6876      	ldr	r6, [r6, #4]
 80101d4:	e7b9      	b.n	801014a <_malloc_r+0x46>
 80101d6:	230c      	movs	r3, #12
 80101d8:	603b      	str	r3, [r7, #0]
 80101da:	4638      	mov	r0, r7
 80101dc:	f001 ff2a 	bl	8012034 <__malloc_unlock>
 80101e0:	e7a1      	b.n	8010126 <_malloc_r+0x22>
 80101e2:	6025      	str	r5, [r4, #0]
 80101e4:	e7de      	b.n	80101a4 <_malloc_r+0xa0>
 80101e6:	bf00      	nop
 80101e8:	20000924 	.word	0x20000924

080101ec <__cvt>:
 80101ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101f0:	ec55 4b10 	vmov	r4, r5, d0
 80101f4:	2d00      	cmp	r5, #0
 80101f6:	460e      	mov	r6, r1
 80101f8:	4619      	mov	r1, r3
 80101fa:	462b      	mov	r3, r5
 80101fc:	bfbb      	ittet	lt
 80101fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010202:	461d      	movlt	r5, r3
 8010204:	2300      	movge	r3, #0
 8010206:	232d      	movlt	r3, #45	; 0x2d
 8010208:	700b      	strb	r3, [r1, #0]
 801020a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801020c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010210:	4691      	mov	r9, r2
 8010212:	f023 0820 	bic.w	r8, r3, #32
 8010216:	bfbc      	itt	lt
 8010218:	4622      	movlt	r2, r4
 801021a:	4614      	movlt	r4, r2
 801021c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010220:	d005      	beq.n	801022e <__cvt+0x42>
 8010222:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010226:	d100      	bne.n	801022a <__cvt+0x3e>
 8010228:	3601      	adds	r6, #1
 801022a:	2102      	movs	r1, #2
 801022c:	e000      	b.n	8010230 <__cvt+0x44>
 801022e:	2103      	movs	r1, #3
 8010230:	ab03      	add	r3, sp, #12
 8010232:	9301      	str	r3, [sp, #4]
 8010234:	ab02      	add	r3, sp, #8
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	ec45 4b10 	vmov	d0, r4, r5
 801023c:	4653      	mov	r3, sl
 801023e:	4632      	mov	r2, r6
 8010240:	f000 feb2 	bl	8010fa8 <_dtoa_r>
 8010244:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010248:	4607      	mov	r7, r0
 801024a:	d102      	bne.n	8010252 <__cvt+0x66>
 801024c:	f019 0f01 	tst.w	r9, #1
 8010250:	d022      	beq.n	8010298 <__cvt+0xac>
 8010252:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010256:	eb07 0906 	add.w	r9, r7, r6
 801025a:	d110      	bne.n	801027e <__cvt+0x92>
 801025c:	783b      	ldrb	r3, [r7, #0]
 801025e:	2b30      	cmp	r3, #48	; 0x30
 8010260:	d10a      	bne.n	8010278 <__cvt+0x8c>
 8010262:	2200      	movs	r2, #0
 8010264:	2300      	movs	r3, #0
 8010266:	4620      	mov	r0, r4
 8010268:	4629      	mov	r1, r5
 801026a:	f7f0 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 801026e:	b918      	cbnz	r0, 8010278 <__cvt+0x8c>
 8010270:	f1c6 0601 	rsb	r6, r6, #1
 8010274:	f8ca 6000 	str.w	r6, [sl]
 8010278:	f8da 3000 	ldr.w	r3, [sl]
 801027c:	4499      	add	r9, r3
 801027e:	2200      	movs	r2, #0
 8010280:	2300      	movs	r3, #0
 8010282:	4620      	mov	r0, r4
 8010284:	4629      	mov	r1, r5
 8010286:	f7f0 fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 801028a:	b108      	cbz	r0, 8010290 <__cvt+0xa4>
 801028c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010290:	2230      	movs	r2, #48	; 0x30
 8010292:	9b03      	ldr	r3, [sp, #12]
 8010294:	454b      	cmp	r3, r9
 8010296:	d307      	bcc.n	80102a8 <__cvt+0xbc>
 8010298:	9b03      	ldr	r3, [sp, #12]
 801029a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801029c:	1bdb      	subs	r3, r3, r7
 801029e:	4638      	mov	r0, r7
 80102a0:	6013      	str	r3, [r2, #0]
 80102a2:	b004      	add	sp, #16
 80102a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102a8:	1c59      	adds	r1, r3, #1
 80102aa:	9103      	str	r1, [sp, #12]
 80102ac:	701a      	strb	r2, [r3, #0]
 80102ae:	e7f0      	b.n	8010292 <__cvt+0xa6>

080102b0 <__exponent>:
 80102b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102b2:	4603      	mov	r3, r0
 80102b4:	2900      	cmp	r1, #0
 80102b6:	bfb8      	it	lt
 80102b8:	4249      	neglt	r1, r1
 80102ba:	f803 2b02 	strb.w	r2, [r3], #2
 80102be:	bfb4      	ite	lt
 80102c0:	222d      	movlt	r2, #45	; 0x2d
 80102c2:	222b      	movge	r2, #43	; 0x2b
 80102c4:	2909      	cmp	r1, #9
 80102c6:	7042      	strb	r2, [r0, #1]
 80102c8:	dd2a      	ble.n	8010320 <__exponent+0x70>
 80102ca:	f10d 0407 	add.w	r4, sp, #7
 80102ce:	46a4      	mov	ip, r4
 80102d0:	270a      	movs	r7, #10
 80102d2:	46a6      	mov	lr, r4
 80102d4:	460a      	mov	r2, r1
 80102d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80102da:	fb07 1516 	mls	r5, r7, r6, r1
 80102de:	3530      	adds	r5, #48	; 0x30
 80102e0:	2a63      	cmp	r2, #99	; 0x63
 80102e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80102e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80102ea:	4631      	mov	r1, r6
 80102ec:	dcf1      	bgt.n	80102d2 <__exponent+0x22>
 80102ee:	3130      	adds	r1, #48	; 0x30
 80102f0:	f1ae 0502 	sub.w	r5, lr, #2
 80102f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80102f8:	1c44      	adds	r4, r0, #1
 80102fa:	4629      	mov	r1, r5
 80102fc:	4561      	cmp	r1, ip
 80102fe:	d30a      	bcc.n	8010316 <__exponent+0x66>
 8010300:	f10d 0209 	add.w	r2, sp, #9
 8010304:	eba2 020e 	sub.w	r2, r2, lr
 8010308:	4565      	cmp	r5, ip
 801030a:	bf88      	it	hi
 801030c:	2200      	movhi	r2, #0
 801030e:	4413      	add	r3, r2
 8010310:	1a18      	subs	r0, r3, r0
 8010312:	b003      	add	sp, #12
 8010314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010316:	f811 2b01 	ldrb.w	r2, [r1], #1
 801031a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801031e:	e7ed      	b.n	80102fc <__exponent+0x4c>
 8010320:	2330      	movs	r3, #48	; 0x30
 8010322:	3130      	adds	r1, #48	; 0x30
 8010324:	7083      	strb	r3, [r0, #2]
 8010326:	70c1      	strb	r1, [r0, #3]
 8010328:	1d03      	adds	r3, r0, #4
 801032a:	e7f1      	b.n	8010310 <__exponent+0x60>

0801032c <_printf_float>:
 801032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010330:	ed2d 8b02 	vpush	{d8}
 8010334:	b08d      	sub	sp, #52	; 0x34
 8010336:	460c      	mov	r4, r1
 8010338:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801033c:	4616      	mov	r6, r2
 801033e:	461f      	mov	r7, r3
 8010340:	4605      	mov	r5, r0
 8010342:	f001 fe05 	bl	8011f50 <_localeconv_r>
 8010346:	f8d0 a000 	ldr.w	sl, [r0]
 801034a:	4650      	mov	r0, sl
 801034c:	f7ef ff40 	bl	80001d0 <strlen>
 8010350:	2300      	movs	r3, #0
 8010352:	930a      	str	r3, [sp, #40]	; 0x28
 8010354:	6823      	ldr	r3, [r4, #0]
 8010356:	9305      	str	r3, [sp, #20]
 8010358:	f8d8 3000 	ldr.w	r3, [r8]
 801035c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010360:	3307      	adds	r3, #7
 8010362:	f023 0307 	bic.w	r3, r3, #7
 8010366:	f103 0208 	add.w	r2, r3, #8
 801036a:	f8c8 2000 	str.w	r2, [r8]
 801036e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010372:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010376:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801037a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801037e:	9307      	str	r3, [sp, #28]
 8010380:	f8cd 8018 	str.w	r8, [sp, #24]
 8010384:	ee08 0a10 	vmov	s16, r0
 8010388:	4b9f      	ldr	r3, [pc, #636]	; (8010608 <_printf_float+0x2dc>)
 801038a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801038e:	f04f 32ff 	mov.w	r2, #4294967295
 8010392:	f7f0 fbcb 	bl	8000b2c <__aeabi_dcmpun>
 8010396:	bb88      	cbnz	r0, 80103fc <_printf_float+0xd0>
 8010398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801039c:	4b9a      	ldr	r3, [pc, #616]	; (8010608 <_printf_float+0x2dc>)
 801039e:	f04f 32ff 	mov.w	r2, #4294967295
 80103a2:	f7f0 fba5 	bl	8000af0 <__aeabi_dcmple>
 80103a6:	bb48      	cbnz	r0, 80103fc <_printf_float+0xd0>
 80103a8:	2200      	movs	r2, #0
 80103aa:	2300      	movs	r3, #0
 80103ac:	4640      	mov	r0, r8
 80103ae:	4649      	mov	r1, r9
 80103b0:	f7f0 fb94 	bl	8000adc <__aeabi_dcmplt>
 80103b4:	b110      	cbz	r0, 80103bc <_printf_float+0x90>
 80103b6:	232d      	movs	r3, #45	; 0x2d
 80103b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103bc:	4b93      	ldr	r3, [pc, #588]	; (801060c <_printf_float+0x2e0>)
 80103be:	4894      	ldr	r0, [pc, #592]	; (8010610 <_printf_float+0x2e4>)
 80103c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80103c4:	bf94      	ite	ls
 80103c6:	4698      	movls	r8, r3
 80103c8:	4680      	movhi	r8, r0
 80103ca:	2303      	movs	r3, #3
 80103cc:	6123      	str	r3, [r4, #16]
 80103ce:	9b05      	ldr	r3, [sp, #20]
 80103d0:	f023 0204 	bic.w	r2, r3, #4
 80103d4:	6022      	str	r2, [r4, #0]
 80103d6:	f04f 0900 	mov.w	r9, #0
 80103da:	9700      	str	r7, [sp, #0]
 80103dc:	4633      	mov	r3, r6
 80103de:	aa0b      	add	r2, sp, #44	; 0x2c
 80103e0:	4621      	mov	r1, r4
 80103e2:	4628      	mov	r0, r5
 80103e4:	f000 f9d8 	bl	8010798 <_printf_common>
 80103e8:	3001      	adds	r0, #1
 80103ea:	f040 8090 	bne.w	801050e <_printf_float+0x1e2>
 80103ee:	f04f 30ff 	mov.w	r0, #4294967295
 80103f2:	b00d      	add	sp, #52	; 0x34
 80103f4:	ecbd 8b02 	vpop	{d8}
 80103f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103fc:	4642      	mov	r2, r8
 80103fe:	464b      	mov	r3, r9
 8010400:	4640      	mov	r0, r8
 8010402:	4649      	mov	r1, r9
 8010404:	f7f0 fb92 	bl	8000b2c <__aeabi_dcmpun>
 8010408:	b140      	cbz	r0, 801041c <_printf_float+0xf0>
 801040a:	464b      	mov	r3, r9
 801040c:	2b00      	cmp	r3, #0
 801040e:	bfbc      	itt	lt
 8010410:	232d      	movlt	r3, #45	; 0x2d
 8010412:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010416:	487f      	ldr	r0, [pc, #508]	; (8010614 <_printf_float+0x2e8>)
 8010418:	4b7f      	ldr	r3, [pc, #508]	; (8010618 <_printf_float+0x2ec>)
 801041a:	e7d1      	b.n	80103c0 <_printf_float+0x94>
 801041c:	6863      	ldr	r3, [r4, #4]
 801041e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010422:	9206      	str	r2, [sp, #24]
 8010424:	1c5a      	adds	r2, r3, #1
 8010426:	d13f      	bne.n	80104a8 <_printf_float+0x17c>
 8010428:	2306      	movs	r3, #6
 801042a:	6063      	str	r3, [r4, #4]
 801042c:	9b05      	ldr	r3, [sp, #20]
 801042e:	6861      	ldr	r1, [r4, #4]
 8010430:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010434:	2300      	movs	r3, #0
 8010436:	9303      	str	r3, [sp, #12]
 8010438:	ab0a      	add	r3, sp, #40	; 0x28
 801043a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801043e:	ab09      	add	r3, sp, #36	; 0x24
 8010440:	ec49 8b10 	vmov	d0, r8, r9
 8010444:	9300      	str	r3, [sp, #0]
 8010446:	6022      	str	r2, [r4, #0]
 8010448:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801044c:	4628      	mov	r0, r5
 801044e:	f7ff fecd 	bl	80101ec <__cvt>
 8010452:	9b06      	ldr	r3, [sp, #24]
 8010454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010456:	2b47      	cmp	r3, #71	; 0x47
 8010458:	4680      	mov	r8, r0
 801045a:	d108      	bne.n	801046e <_printf_float+0x142>
 801045c:	1cc8      	adds	r0, r1, #3
 801045e:	db02      	blt.n	8010466 <_printf_float+0x13a>
 8010460:	6863      	ldr	r3, [r4, #4]
 8010462:	4299      	cmp	r1, r3
 8010464:	dd41      	ble.n	80104ea <_printf_float+0x1be>
 8010466:	f1ab 0b02 	sub.w	fp, fp, #2
 801046a:	fa5f fb8b 	uxtb.w	fp, fp
 801046e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010472:	d820      	bhi.n	80104b6 <_printf_float+0x18a>
 8010474:	3901      	subs	r1, #1
 8010476:	465a      	mov	r2, fp
 8010478:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801047c:	9109      	str	r1, [sp, #36]	; 0x24
 801047e:	f7ff ff17 	bl	80102b0 <__exponent>
 8010482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010484:	1813      	adds	r3, r2, r0
 8010486:	2a01      	cmp	r2, #1
 8010488:	4681      	mov	r9, r0
 801048a:	6123      	str	r3, [r4, #16]
 801048c:	dc02      	bgt.n	8010494 <_printf_float+0x168>
 801048e:	6822      	ldr	r2, [r4, #0]
 8010490:	07d2      	lsls	r2, r2, #31
 8010492:	d501      	bpl.n	8010498 <_printf_float+0x16c>
 8010494:	3301      	adds	r3, #1
 8010496:	6123      	str	r3, [r4, #16]
 8010498:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801049c:	2b00      	cmp	r3, #0
 801049e:	d09c      	beq.n	80103da <_printf_float+0xae>
 80104a0:	232d      	movs	r3, #45	; 0x2d
 80104a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104a6:	e798      	b.n	80103da <_printf_float+0xae>
 80104a8:	9a06      	ldr	r2, [sp, #24]
 80104aa:	2a47      	cmp	r2, #71	; 0x47
 80104ac:	d1be      	bne.n	801042c <_printf_float+0x100>
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d1bc      	bne.n	801042c <_printf_float+0x100>
 80104b2:	2301      	movs	r3, #1
 80104b4:	e7b9      	b.n	801042a <_printf_float+0xfe>
 80104b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80104ba:	d118      	bne.n	80104ee <_printf_float+0x1c2>
 80104bc:	2900      	cmp	r1, #0
 80104be:	6863      	ldr	r3, [r4, #4]
 80104c0:	dd0b      	ble.n	80104da <_printf_float+0x1ae>
 80104c2:	6121      	str	r1, [r4, #16]
 80104c4:	b913      	cbnz	r3, 80104cc <_printf_float+0x1a0>
 80104c6:	6822      	ldr	r2, [r4, #0]
 80104c8:	07d0      	lsls	r0, r2, #31
 80104ca:	d502      	bpl.n	80104d2 <_printf_float+0x1a6>
 80104cc:	3301      	adds	r3, #1
 80104ce:	440b      	add	r3, r1
 80104d0:	6123      	str	r3, [r4, #16]
 80104d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80104d4:	f04f 0900 	mov.w	r9, #0
 80104d8:	e7de      	b.n	8010498 <_printf_float+0x16c>
 80104da:	b913      	cbnz	r3, 80104e2 <_printf_float+0x1b6>
 80104dc:	6822      	ldr	r2, [r4, #0]
 80104de:	07d2      	lsls	r2, r2, #31
 80104e0:	d501      	bpl.n	80104e6 <_printf_float+0x1ba>
 80104e2:	3302      	adds	r3, #2
 80104e4:	e7f4      	b.n	80104d0 <_printf_float+0x1a4>
 80104e6:	2301      	movs	r3, #1
 80104e8:	e7f2      	b.n	80104d0 <_printf_float+0x1a4>
 80104ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80104ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104f0:	4299      	cmp	r1, r3
 80104f2:	db05      	blt.n	8010500 <_printf_float+0x1d4>
 80104f4:	6823      	ldr	r3, [r4, #0]
 80104f6:	6121      	str	r1, [r4, #16]
 80104f8:	07d8      	lsls	r0, r3, #31
 80104fa:	d5ea      	bpl.n	80104d2 <_printf_float+0x1a6>
 80104fc:	1c4b      	adds	r3, r1, #1
 80104fe:	e7e7      	b.n	80104d0 <_printf_float+0x1a4>
 8010500:	2900      	cmp	r1, #0
 8010502:	bfd4      	ite	le
 8010504:	f1c1 0202 	rsble	r2, r1, #2
 8010508:	2201      	movgt	r2, #1
 801050a:	4413      	add	r3, r2
 801050c:	e7e0      	b.n	80104d0 <_printf_float+0x1a4>
 801050e:	6823      	ldr	r3, [r4, #0]
 8010510:	055a      	lsls	r2, r3, #21
 8010512:	d407      	bmi.n	8010524 <_printf_float+0x1f8>
 8010514:	6923      	ldr	r3, [r4, #16]
 8010516:	4642      	mov	r2, r8
 8010518:	4631      	mov	r1, r6
 801051a:	4628      	mov	r0, r5
 801051c:	47b8      	blx	r7
 801051e:	3001      	adds	r0, #1
 8010520:	d12c      	bne.n	801057c <_printf_float+0x250>
 8010522:	e764      	b.n	80103ee <_printf_float+0xc2>
 8010524:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010528:	f240 80e0 	bls.w	80106ec <_printf_float+0x3c0>
 801052c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010530:	2200      	movs	r2, #0
 8010532:	2300      	movs	r3, #0
 8010534:	f7f0 fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8010538:	2800      	cmp	r0, #0
 801053a:	d034      	beq.n	80105a6 <_printf_float+0x27a>
 801053c:	4a37      	ldr	r2, [pc, #220]	; (801061c <_printf_float+0x2f0>)
 801053e:	2301      	movs	r3, #1
 8010540:	4631      	mov	r1, r6
 8010542:	4628      	mov	r0, r5
 8010544:	47b8      	blx	r7
 8010546:	3001      	adds	r0, #1
 8010548:	f43f af51 	beq.w	80103ee <_printf_float+0xc2>
 801054c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010550:	429a      	cmp	r2, r3
 8010552:	db02      	blt.n	801055a <_printf_float+0x22e>
 8010554:	6823      	ldr	r3, [r4, #0]
 8010556:	07d8      	lsls	r0, r3, #31
 8010558:	d510      	bpl.n	801057c <_printf_float+0x250>
 801055a:	ee18 3a10 	vmov	r3, s16
 801055e:	4652      	mov	r2, sl
 8010560:	4631      	mov	r1, r6
 8010562:	4628      	mov	r0, r5
 8010564:	47b8      	blx	r7
 8010566:	3001      	adds	r0, #1
 8010568:	f43f af41 	beq.w	80103ee <_printf_float+0xc2>
 801056c:	f04f 0800 	mov.w	r8, #0
 8010570:	f104 091a 	add.w	r9, r4, #26
 8010574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010576:	3b01      	subs	r3, #1
 8010578:	4543      	cmp	r3, r8
 801057a:	dc09      	bgt.n	8010590 <_printf_float+0x264>
 801057c:	6823      	ldr	r3, [r4, #0]
 801057e:	079b      	lsls	r3, r3, #30
 8010580:	f100 8105 	bmi.w	801078e <_printf_float+0x462>
 8010584:	68e0      	ldr	r0, [r4, #12]
 8010586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010588:	4298      	cmp	r0, r3
 801058a:	bfb8      	it	lt
 801058c:	4618      	movlt	r0, r3
 801058e:	e730      	b.n	80103f2 <_printf_float+0xc6>
 8010590:	2301      	movs	r3, #1
 8010592:	464a      	mov	r2, r9
 8010594:	4631      	mov	r1, r6
 8010596:	4628      	mov	r0, r5
 8010598:	47b8      	blx	r7
 801059a:	3001      	adds	r0, #1
 801059c:	f43f af27 	beq.w	80103ee <_printf_float+0xc2>
 80105a0:	f108 0801 	add.w	r8, r8, #1
 80105a4:	e7e6      	b.n	8010574 <_printf_float+0x248>
 80105a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	dc39      	bgt.n	8010620 <_printf_float+0x2f4>
 80105ac:	4a1b      	ldr	r2, [pc, #108]	; (801061c <_printf_float+0x2f0>)
 80105ae:	2301      	movs	r3, #1
 80105b0:	4631      	mov	r1, r6
 80105b2:	4628      	mov	r0, r5
 80105b4:	47b8      	blx	r7
 80105b6:	3001      	adds	r0, #1
 80105b8:	f43f af19 	beq.w	80103ee <_printf_float+0xc2>
 80105bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80105c0:	4313      	orrs	r3, r2
 80105c2:	d102      	bne.n	80105ca <_printf_float+0x29e>
 80105c4:	6823      	ldr	r3, [r4, #0]
 80105c6:	07d9      	lsls	r1, r3, #31
 80105c8:	d5d8      	bpl.n	801057c <_printf_float+0x250>
 80105ca:	ee18 3a10 	vmov	r3, s16
 80105ce:	4652      	mov	r2, sl
 80105d0:	4631      	mov	r1, r6
 80105d2:	4628      	mov	r0, r5
 80105d4:	47b8      	blx	r7
 80105d6:	3001      	adds	r0, #1
 80105d8:	f43f af09 	beq.w	80103ee <_printf_float+0xc2>
 80105dc:	f04f 0900 	mov.w	r9, #0
 80105e0:	f104 0a1a 	add.w	sl, r4, #26
 80105e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105e6:	425b      	negs	r3, r3
 80105e8:	454b      	cmp	r3, r9
 80105ea:	dc01      	bgt.n	80105f0 <_printf_float+0x2c4>
 80105ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105ee:	e792      	b.n	8010516 <_printf_float+0x1ea>
 80105f0:	2301      	movs	r3, #1
 80105f2:	4652      	mov	r2, sl
 80105f4:	4631      	mov	r1, r6
 80105f6:	4628      	mov	r0, r5
 80105f8:	47b8      	blx	r7
 80105fa:	3001      	adds	r0, #1
 80105fc:	f43f aef7 	beq.w	80103ee <_printf_float+0xc2>
 8010600:	f109 0901 	add.w	r9, r9, #1
 8010604:	e7ee      	b.n	80105e4 <_printf_float+0x2b8>
 8010606:	bf00      	nop
 8010608:	7fefffff 	.word	0x7fefffff
 801060c:	0801498c 	.word	0x0801498c
 8010610:	08014990 	.word	0x08014990
 8010614:	08014998 	.word	0x08014998
 8010618:	08014994 	.word	0x08014994
 801061c:	08014c21 	.word	0x08014c21
 8010620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010624:	429a      	cmp	r2, r3
 8010626:	bfa8      	it	ge
 8010628:	461a      	movge	r2, r3
 801062a:	2a00      	cmp	r2, #0
 801062c:	4691      	mov	r9, r2
 801062e:	dc37      	bgt.n	80106a0 <_printf_float+0x374>
 8010630:	f04f 0b00 	mov.w	fp, #0
 8010634:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010638:	f104 021a 	add.w	r2, r4, #26
 801063c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801063e:	9305      	str	r3, [sp, #20]
 8010640:	eba3 0309 	sub.w	r3, r3, r9
 8010644:	455b      	cmp	r3, fp
 8010646:	dc33      	bgt.n	80106b0 <_printf_float+0x384>
 8010648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801064c:	429a      	cmp	r2, r3
 801064e:	db3b      	blt.n	80106c8 <_printf_float+0x39c>
 8010650:	6823      	ldr	r3, [r4, #0]
 8010652:	07da      	lsls	r2, r3, #31
 8010654:	d438      	bmi.n	80106c8 <_printf_float+0x39c>
 8010656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010658:	9a05      	ldr	r2, [sp, #20]
 801065a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801065c:	1a9a      	subs	r2, r3, r2
 801065e:	eba3 0901 	sub.w	r9, r3, r1
 8010662:	4591      	cmp	r9, r2
 8010664:	bfa8      	it	ge
 8010666:	4691      	movge	r9, r2
 8010668:	f1b9 0f00 	cmp.w	r9, #0
 801066c:	dc35      	bgt.n	80106da <_printf_float+0x3ae>
 801066e:	f04f 0800 	mov.w	r8, #0
 8010672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010676:	f104 0a1a 	add.w	sl, r4, #26
 801067a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801067e:	1a9b      	subs	r3, r3, r2
 8010680:	eba3 0309 	sub.w	r3, r3, r9
 8010684:	4543      	cmp	r3, r8
 8010686:	f77f af79 	ble.w	801057c <_printf_float+0x250>
 801068a:	2301      	movs	r3, #1
 801068c:	4652      	mov	r2, sl
 801068e:	4631      	mov	r1, r6
 8010690:	4628      	mov	r0, r5
 8010692:	47b8      	blx	r7
 8010694:	3001      	adds	r0, #1
 8010696:	f43f aeaa 	beq.w	80103ee <_printf_float+0xc2>
 801069a:	f108 0801 	add.w	r8, r8, #1
 801069e:	e7ec      	b.n	801067a <_printf_float+0x34e>
 80106a0:	4613      	mov	r3, r2
 80106a2:	4631      	mov	r1, r6
 80106a4:	4642      	mov	r2, r8
 80106a6:	4628      	mov	r0, r5
 80106a8:	47b8      	blx	r7
 80106aa:	3001      	adds	r0, #1
 80106ac:	d1c0      	bne.n	8010630 <_printf_float+0x304>
 80106ae:	e69e      	b.n	80103ee <_printf_float+0xc2>
 80106b0:	2301      	movs	r3, #1
 80106b2:	4631      	mov	r1, r6
 80106b4:	4628      	mov	r0, r5
 80106b6:	9205      	str	r2, [sp, #20]
 80106b8:	47b8      	blx	r7
 80106ba:	3001      	adds	r0, #1
 80106bc:	f43f ae97 	beq.w	80103ee <_printf_float+0xc2>
 80106c0:	9a05      	ldr	r2, [sp, #20]
 80106c2:	f10b 0b01 	add.w	fp, fp, #1
 80106c6:	e7b9      	b.n	801063c <_printf_float+0x310>
 80106c8:	ee18 3a10 	vmov	r3, s16
 80106cc:	4652      	mov	r2, sl
 80106ce:	4631      	mov	r1, r6
 80106d0:	4628      	mov	r0, r5
 80106d2:	47b8      	blx	r7
 80106d4:	3001      	adds	r0, #1
 80106d6:	d1be      	bne.n	8010656 <_printf_float+0x32a>
 80106d8:	e689      	b.n	80103ee <_printf_float+0xc2>
 80106da:	9a05      	ldr	r2, [sp, #20]
 80106dc:	464b      	mov	r3, r9
 80106de:	4442      	add	r2, r8
 80106e0:	4631      	mov	r1, r6
 80106e2:	4628      	mov	r0, r5
 80106e4:	47b8      	blx	r7
 80106e6:	3001      	adds	r0, #1
 80106e8:	d1c1      	bne.n	801066e <_printf_float+0x342>
 80106ea:	e680      	b.n	80103ee <_printf_float+0xc2>
 80106ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106ee:	2a01      	cmp	r2, #1
 80106f0:	dc01      	bgt.n	80106f6 <_printf_float+0x3ca>
 80106f2:	07db      	lsls	r3, r3, #31
 80106f4:	d538      	bpl.n	8010768 <_printf_float+0x43c>
 80106f6:	2301      	movs	r3, #1
 80106f8:	4642      	mov	r2, r8
 80106fa:	4631      	mov	r1, r6
 80106fc:	4628      	mov	r0, r5
 80106fe:	47b8      	blx	r7
 8010700:	3001      	adds	r0, #1
 8010702:	f43f ae74 	beq.w	80103ee <_printf_float+0xc2>
 8010706:	ee18 3a10 	vmov	r3, s16
 801070a:	4652      	mov	r2, sl
 801070c:	4631      	mov	r1, r6
 801070e:	4628      	mov	r0, r5
 8010710:	47b8      	blx	r7
 8010712:	3001      	adds	r0, #1
 8010714:	f43f ae6b 	beq.w	80103ee <_printf_float+0xc2>
 8010718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801071c:	2200      	movs	r2, #0
 801071e:	2300      	movs	r3, #0
 8010720:	f7f0 f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010724:	b9d8      	cbnz	r0, 801075e <_printf_float+0x432>
 8010726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010728:	f108 0201 	add.w	r2, r8, #1
 801072c:	3b01      	subs	r3, #1
 801072e:	4631      	mov	r1, r6
 8010730:	4628      	mov	r0, r5
 8010732:	47b8      	blx	r7
 8010734:	3001      	adds	r0, #1
 8010736:	d10e      	bne.n	8010756 <_printf_float+0x42a>
 8010738:	e659      	b.n	80103ee <_printf_float+0xc2>
 801073a:	2301      	movs	r3, #1
 801073c:	4652      	mov	r2, sl
 801073e:	4631      	mov	r1, r6
 8010740:	4628      	mov	r0, r5
 8010742:	47b8      	blx	r7
 8010744:	3001      	adds	r0, #1
 8010746:	f43f ae52 	beq.w	80103ee <_printf_float+0xc2>
 801074a:	f108 0801 	add.w	r8, r8, #1
 801074e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010750:	3b01      	subs	r3, #1
 8010752:	4543      	cmp	r3, r8
 8010754:	dcf1      	bgt.n	801073a <_printf_float+0x40e>
 8010756:	464b      	mov	r3, r9
 8010758:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801075c:	e6dc      	b.n	8010518 <_printf_float+0x1ec>
 801075e:	f04f 0800 	mov.w	r8, #0
 8010762:	f104 0a1a 	add.w	sl, r4, #26
 8010766:	e7f2      	b.n	801074e <_printf_float+0x422>
 8010768:	2301      	movs	r3, #1
 801076a:	4642      	mov	r2, r8
 801076c:	e7df      	b.n	801072e <_printf_float+0x402>
 801076e:	2301      	movs	r3, #1
 8010770:	464a      	mov	r2, r9
 8010772:	4631      	mov	r1, r6
 8010774:	4628      	mov	r0, r5
 8010776:	47b8      	blx	r7
 8010778:	3001      	adds	r0, #1
 801077a:	f43f ae38 	beq.w	80103ee <_printf_float+0xc2>
 801077e:	f108 0801 	add.w	r8, r8, #1
 8010782:	68e3      	ldr	r3, [r4, #12]
 8010784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010786:	1a5b      	subs	r3, r3, r1
 8010788:	4543      	cmp	r3, r8
 801078a:	dcf0      	bgt.n	801076e <_printf_float+0x442>
 801078c:	e6fa      	b.n	8010584 <_printf_float+0x258>
 801078e:	f04f 0800 	mov.w	r8, #0
 8010792:	f104 0919 	add.w	r9, r4, #25
 8010796:	e7f4      	b.n	8010782 <_printf_float+0x456>

08010798 <_printf_common>:
 8010798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801079c:	4616      	mov	r6, r2
 801079e:	4699      	mov	r9, r3
 80107a0:	688a      	ldr	r2, [r1, #8]
 80107a2:	690b      	ldr	r3, [r1, #16]
 80107a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80107a8:	4293      	cmp	r3, r2
 80107aa:	bfb8      	it	lt
 80107ac:	4613      	movlt	r3, r2
 80107ae:	6033      	str	r3, [r6, #0]
 80107b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107b4:	4607      	mov	r7, r0
 80107b6:	460c      	mov	r4, r1
 80107b8:	b10a      	cbz	r2, 80107be <_printf_common+0x26>
 80107ba:	3301      	adds	r3, #1
 80107bc:	6033      	str	r3, [r6, #0]
 80107be:	6823      	ldr	r3, [r4, #0]
 80107c0:	0699      	lsls	r1, r3, #26
 80107c2:	bf42      	ittt	mi
 80107c4:	6833      	ldrmi	r3, [r6, #0]
 80107c6:	3302      	addmi	r3, #2
 80107c8:	6033      	strmi	r3, [r6, #0]
 80107ca:	6825      	ldr	r5, [r4, #0]
 80107cc:	f015 0506 	ands.w	r5, r5, #6
 80107d0:	d106      	bne.n	80107e0 <_printf_common+0x48>
 80107d2:	f104 0a19 	add.w	sl, r4, #25
 80107d6:	68e3      	ldr	r3, [r4, #12]
 80107d8:	6832      	ldr	r2, [r6, #0]
 80107da:	1a9b      	subs	r3, r3, r2
 80107dc:	42ab      	cmp	r3, r5
 80107de:	dc26      	bgt.n	801082e <_printf_common+0x96>
 80107e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80107e4:	1e13      	subs	r3, r2, #0
 80107e6:	6822      	ldr	r2, [r4, #0]
 80107e8:	bf18      	it	ne
 80107ea:	2301      	movne	r3, #1
 80107ec:	0692      	lsls	r2, r2, #26
 80107ee:	d42b      	bmi.n	8010848 <_printf_common+0xb0>
 80107f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107f4:	4649      	mov	r1, r9
 80107f6:	4638      	mov	r0, r7
 80107f8:	47c0      	blx	r8
 80107fa:	3001      	adds	r0, #1
 80107fc:	d01e      	beq.n	801083c <_printf_common+0xa4>
 80107fe:	6823      	ldr	r3, [r4, #0]
 8010800:	68e5      	ldr	r5, [r4, #12]
 8010802:	6832      	ldr	r2, [r6, #0]
 8010804:	f003 0306 	and.w	r3, r3, #6
 8010808:	2b04      	cmp	r3, #4
 801080a:	bf08      	it	eq
 801080c:	1aad      	subeq	r5, r5, r2
 801080e:	68a3      	ldr	r3, [r4, #8]
 8010810:	6922      	ldr	r2, [r4, #16]
 8010812:	bf0c      	ite	eq
 8010814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010818:	2500      	movne	r5, #0
 801081a:	4293      	cmp	r3, r2
 801081c:	bfc4      	itt	gt
 801081e:	1a9b      	subgt	r3, r3, r2
 8010820:	18ed      	addgt	r5, r5, r3
 8010822:	2600      	movs	r6, #0
 8010824:	341a      	adds	r4, #26
 8010826:	42b5      	cmp	r5, r6
 8010828:	d11a      	bne.n	8010860 <_printf_common+0xc8>
 801082a:	2000      	movs	r0, #0
 801082c:	e008      	b.n	8010840 <_printf_common+0xa8>
 801082e:	2301      	movs	r3, #1
 8010830:	4652      	mov	r2, sl
 8010832:	4649      	mov	r1, r9
 8010834:	4638      	mov	r0, r7
 8010836:	47c0      	blx	r8
 8010838:	3001      	adds	r0, #1
 801083a:	d103      	bne.n	8010844 <_printf_common+0xac>
 801083c:	f04f 30ff 	mov.w	r0, #4294967295
 8010840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010844:	3501      	adds	r5, #1
 8010846:	e7c6      	b.n	80107d6 <_printf_common+0x3e>
 8010848:	18e1      	adds	r1, r4, r3
 801084a:	1c5a      	adds	r2, r3, #1
 801084c:	2030      	movs	r0, #48	; 0x30
 801084e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010852:	4422      	add	r2, r4
 8010854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801085c:	3302      	adds	r3, #2
 801085e:	e7c7      	b.n	80107f0 <_printf_common+0x58>
 8010860:	2301      	movs	r3, #1
 8010862:	4622      	mov	r2, r4
 8010864:	4649      	mov	r1, r9
 8010866:	4638      	mov	r0, r7
 8010868:	47c0      	blx	r8
 801086a:	3001      	adds	r0, #1
 801086c:	d0e6      	beq.n	801083c <_printf_common+0xa4>
 801086e:	3601      	adds	r6, #1
 8010870:	e7d9      	b.n	8010826 <_printf_common+0x8e>
	...

08010874 <_printf_i>:
 8010874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010878:	7e0f      	ldrb	r7, [r1, #24]
 801087a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801087c:	2f78      	cmp	r7, #120	; 0x78
 801087e:	4691      	mov	r9, r2
 8010880:	4680      	mov	r8, r0
 8010882:	460c      	mov	r4, r1
 8010884:	469a      	mov	sl, r3
 8010886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801088a:	d807      	bhi.n	801089c <_printf_i+0x28>
 801088c:	2f62      	cmp	r7, #98	; 0x62
 801088e:	d80a      	bhi.n	80108a6 <_printf_i+0x32>
 8010890:	2f00      	cmp	r7, #0
 8010892:	f000 80d8 	beq.w	8010a46 <_printf_i+0x1d2>
 8010896:	2f58      	cmp	r7, #88	; 0x58
 8010898:	f000 80a3 	beq.w	80109e2 <_printf_i+0x16e>
 801089c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80108a4:	e03a      	b.n	801091c <_printf_i+0xa8>
 80108a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80108aa:	2b15      	cmp	r3, #21
 80108ac:	d8f6      	bhi.n	801089c <_printf_i+0x28>
 80108ae:	a101      	add	r1, pc, #4	; (adr r1, 80108b4 <_printf_i+0x40>)
 80108b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108b4:	0801090d 	.word	0x0801090d
 80108b8:	08010921 	.word	0x08010921
 80108bc:	0801089d 	.word	0x0801089d
 80108c0:	0801089d 	.word	0x0801089d
 80108c4:	0801089d 	.word	0x0801089d
 80108c8:	0801089d 	.word	0x0801089d
 80108cc:	08010921 	.word	0x08010921
 80108d0:	0801089d 	.word	0x0801089d
 80108d4:	0801089d 	.word	0x0801089d
 80108d8:	0801089d 	.word	0x0801089d
 80108dc:	0801089d 	.word	0x0801089d
 80108e0:	08010a2d 	.word	0x08010a2d
 80108e4:	08010951 	.word	0x08010951
 80108e8:	08010a0f 	.word	0x08010a0f
 80108ec:	0801089d 	.word	0x0801089d
 80108f0:	0801089d 	.word	0x0801089d
 80108f4:	08010a4f 	.word	0x08010a4f
 80108f8:	0801089d 	.word	0x0801089d
 80108fc:	08010951 	.word	0x08010951
 8010900:	0801089d 	.word	0x0801089d
 8010904:	0801089d 	.word	0x0801089d
 8010908:	08010a17 	.word	0x08010a17
 801090c:	682b      	ldr	r3, [r5, #0]
 801090e:	1d1a      	adds	r2, r3, #4
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	602a      	str	r2, [r5, #0]
 8010914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801091c:	2301      	movs	r3, #1
 801091e:	e0a3      	b.n	8010a68 <_printf_i+0x1f4>
 8010920:	6820      	ldr	r0, [r4, #0]
 8010922:	6829      	ldr	r1, [r5, #0]
 8010924:	0606      	lsls	r6, r0, #24
 8010926:	f101 0304 	add.w	r3, r1, #4
 801092a:	d50a      	bpl.n	8010942 <_printf_i+0xce>
 801092c:	680e      	ldr	r6, [r1, #0]
 801092e:	602b      	str	r3, [r5, #0]
 8010930:	2e00      	cmp	r6, #0
 8010932:	da03      	bge.n	801093c <_printf_i+0xc8>
 8010934:	232d      	movs	r3, #45	; 0x2d
 8010936:	4276      	negs	r6, r6
 8010938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801093c:	485e      	ldr	r0, [pc, #376]	; (8010ab8 <_printf_i+0x244>)
 801093e:	230a      	movs	r3, #10
 8010940:	e019      	b.n	8010976 <_printf_i+0x102>
 8010942:	680e      	ldr	r6, [r1, #0]
 8010944:	602b      	str	r3, [r5, #0]
 8010946:	f010 0f40 	tst.w	r0, #64	; 0x40
 801094a:	bf18      	it	ne
 801094c:	b236      	sxthne	r6, r6
 801094e:	e7ef      	b.n	8010930 <_printf_i+0xbc>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	6820      	ldr	r0, [r4, #0]
 8010954:	1d19      	adds	r1, r3, #4
 8010956:	6029      	str	r1, [r5, #0]
 8010958:	0601      	lsls	r1, r0, #24
 801095a:	d501      	bpl.n	8010960 <_printf_i+0xec>
 801095c:	681e      	ldr	r6, [r3, #0]
 801095e:	e002      	b.n	8010966 <_printf_i+0xf2>
 8010960:	0646      	lsls	r6, r0, #25
 8010962:	d5fb      	bpl.n	801095c <_printf_i+0xe8>
 8010964:	881e      	ldrh	r6, [r3, #0]
 8010966:	4854      	ldr	r0, [pc, #336]	; (8010ab8 <_printf_i+0x244>)
 8010968:	2f6f      	cmp	r7, #111	; 0x6f
 801096a:	bf0c      	ite	eq
 801096c:	2308      	moveq	r3, #8
 801096e:	230a      	movne	r3, #10
 8010970:	2100      	movs	r1, #0
 8010972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010976:	6865      	ldr	r5, [r4, #4]
 8010978:	60a5      	str	r5, [r4, #8]
 801097a:	2d00      	cmp	r5, #0
 801097c:	bfa2      	ittt	ge
 801097e:	6821      	ldrge	r1, [r4, #0]
 8010980:	f021 0104 	bicge.w	r1, r1, #4
 8010984:	6021      	strge	r1, [r4, #0]
 8010986:	b90e      	cbnz	r6, 801098c <_printf_i+0x118>
 8010988:	2d00      	cmp	r5, #0
 801098a:	d04d      	beq.n	8010a28 <_printf_i+0x1b4>
 801098c:	4615      	mov	r5, r2
 801098e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010992:	fb03 6711 	mls	r7, r3, r1, r6
 8010996:	5dc7      	ldrb	r7, [r0, r7]
 8010998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801099c:	4637      	mov	r7, r6
 801099e:	42bb      	cmp	r3, r7
 80109a0:	460e      	mov	r6, r1
 80109a2:	d9f4      	bls.n	801098e <_printf_i+0x11a>
 80109a4:	2b08      	cmp	r3, #8
 80109a6:	d10b      	bne.n	80109c0 <_printf_i+0x14c>
 80109a8:	6823      	ldr	r3, [r4, #0]
 80109aa:	07de      	lsls	r6, r3, #31
 80109ac:	d508      	bpl.n	80109c0 <_printf_i+0x14c>
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	6861      	ldr	r1, [r4, #4]
 80109b2:	4299      	cmp	r1, r3
 80109b4:	bfde      	ittt	le
 80109b6:	2330      	movle	r3, #48	; 0x30
 80109b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80109bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80109c0:	1b52      	subs	r2, r2, r5
 80109c2:	6122      	str	r2, [r4, #16]
 80109c4:	f8cd a000 	str.w	sl, [sp]
 80109c8:	464b      	mov	r3, r9
 80109ca:	aa03      	add	r2, sp, #12
 80109cc:	4621      	mov	r1, r4
 80109ce:	4640      	mov	r0, r8
 80109d0:	f7ff fee2 	bl	8010798 <_printf_common>
 80109d4:	3001      	adds	r0, #1
 80109d6:	d14c      	bne.n	8010a72 <_printf_i+0x1fe>
 80109d8:	f04f 30ff 	mov.w	r0, #4294967295
 80109dc:	b004      	add	sp, #16
 80109de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109e2:	4835      	ldr	r0, [pc, #212]	; (8010ab8 <_printf_i+0x244>)
 80109e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80109e8:	6829      	ldr	r1, [r5, #0]
 80109ea:	6823      	ldr	r3, [r4, #0]
 80109ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80109f0:	6029      	str	r1, [r5, #0]
 80109f2:	061d      	lsls	r5, r3, #24
 80109f4:	d514      	bpl.n	8010a20 <_printf_i+0x1ac>
 80109f6:	07df      	lsls	r7, r3, #31
 80109f8:	bf44      	itt	mi
 80109fa:	f043 0320 	orrmi.w	r3, r3, #32
 80109fe:	6023      	strmi	r3, [r4, #0]
 8010a00:	b91e      	cbnz	r6, 8010a0a <_printf_i+0x196>
 8010a02:	6823      	ldr	r3, [r4, #0]
 8010a04:	f023 0320 	bic.w	r3, r3, #32
 8010a08:	6023      	str	r3, [r4, #0]
 8010a0a:	2310      	movs	r3, #16
 8010a0c:	e7b0      	b.n	8010970 <_printf_i+0xfc>
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	f043 0320 	orr.w	r3, r3, #32
 8010a14:	6023      	str	r3, [r4, #0]
 8010a16:	2378      	movs	r3, #120	; 0x78
 8010a18:	4828      	ldr	r0, [pc, #160]	; (8010abc <_printf_i+0x248>)
 8010a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a1e:	e7e3      	b.n	80109e8 <_printf_i+0x174>
 8010a20:	0659      	lsls	r1, r3, #25
 8010a22:	bf48      	it	mi
 8010a24:	b2b6      	uxthmi	r6, r6
 8010a26:	e7e6      	b.n	80109f6 <_printf_i+0x182>
 8010a28:	4615      	mov	r5, r2
 8010a2a:	e7bb      	b.n	80109a4 <_printf_i+0x130>
 8010a2c:	682b      	ldr	r3, [r5, #0]
 8010a2e:	6826      	ldr	r6, [r4, #0]
 8010a30:	6961      	ldr	r1, [r4, #20]
 8010a32:	1d18      	adds	r0, r3, #4
 8010a34:	6028      	str	r0, [r5, #0]
 8010a36:	0635      	lsls	r5, r6, #24
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	d501      	bpl.n	8010a40 <_printf_i+0x1cc>
 8010a3c:	6019      	str	r1, [r3, #0]
 8010a3e:	e002      	b.n	8010a46 <_printf_i+0x1d2>
 8010a40:	0670      	lsls	r0, r6, #25
 8010a42:	d5fb      	bpl.n	8010a3c <_printf_i+0x1c8>
 8010a44:	8019      	strh	r1, [r3, #0]
 8010a46:	2300      	movs	r3, #0
 8010a48:	6123      	str	r3, [r4, #16]
 8010a4a:	4615      	mov	r5, r2
 8010a4c:	e7ba      	b.n	80109c4 <_printf_i+0x150>
 8010a4e:	682b      	ldr	r3, [r5, #0]
 8010a50:	1d1a      	adds	r2, r3, #4
 8010a52:	602a      	str	r2, [r5, #0]
 8010a54:	681d      	ldr	r5, [r3, #0]
 8010a56:	6862      	ldr	r2, [r4, #4]
 8010a58:	2100      	movs	r1, #0
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	f7ef fbc0 	bl	80001e0 <memchr>
 8010a60:	b108      	cbz	r0, 8010a66 <_printf_i+0x1f2>
 8010a62:	1b40      	subs	r0, r0, r5
 8010a64:	6060      	str	r0, [r4, #4]
 8010a66:	6863      	ldr	r3, [r4, #4]
 8010a68:	6123      	str	r3, [r4, #16]
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a70:	e7a8      	b.n	80109c4 <_printf_i+0x150>
 8010a72:	6923      	ldr	r3, [r4, #16]
 8010a74:	462a      	mov	r2, r5
 8010a76:	4649      	mov	r1, r9
 8010a78:	4640      	mov	r0, r8
 8010a7a:	47d0      	blx	sl
 8010a7c:	3001      	adds	r0, #1
 8010a7e:	d0ab      	beq.n	80109d8 <_printf_i+0x164>
 8010a80:	6823      	ldr	r3, [r4, #0]
 8010a82:	079b      	lsls	r3, r3, #30
 8010a84:	d413      	bmi.n	8010aae <_printf_i+0x23a>
 8010a86:	68e0      	ldr	r0, [r4, #12]
 8010a88:	9b03      	ldr	r3, [sp, #12]
 8010a8a:	4298      	cmp	r0, r3
 8010a8c:	bfb8      	it	lt
 8010a8e:	4618      	movlt	r0, r3
 8010a90:	e7a4      	b.n	80109dc <_printf_i+0x168>
 8010a92:	2301      	movs	r3, #1
 8010a94:	4632      	mov	r2, r6
 8010a96:	4649      	mov	r1, r9
 8010a98:	4640      	mov	r0, r8
 8010a9a:	47d0      	blx	sl
 8010a9c:	3001      	adds	r0, #1
 8010a9e:	d09b      	beq.n	80109d8 <_printf_i+0x164>
 8010aa0:	3501      	adds	r5, #1
 8010aa2:	68e3      	ldr	r3, [r4, #12]
 8010aa4:	9903      	ldr	r1, [sp, #12]
 8010aa6:	1a5b      	subs	r3, r3, r1
 8010aa8:	42ab      	cmp	r3, r5
 8010aaa:	dcf2      	bgt.n	8010a92 <_printf_i+0x21e>
 8010aac:	e7eb      	b.n	8010a86 <_printf_i+0x212>
 8010aae:	2500      	movs	r5, #0
 8010ab0:	f104 0619 	add.w	r6, r4, #25
 8010ab4:	e7f5      	b.n	8010aa2 <_printf_i+0x22e>
 8010ab6:	bf00      	nop
 8010ab8:	0801499c 	.word	0x0801499c
 8010abc:	080149ad 	.word	0x080149ad

08010ac0 <iprintf>:
 8010ac0:	b40f      	push	{r0, r1, r2, r3}
 8010ac2:	4b0a      	ldr	r3, [pc, #40]	; (8010aec <iprintf+0x2c>)
 8010ac4:	b513      	push	{r0, r1, r4, lr}
 8010ac6:	681c      	ldr	r4, [r3, #0]
 8010ac8:	b124      	cbz	r4, 8010ad4 <iprintf+0x14>
 8010aca:	69a3      	ldr	r3, [r4, #24]
 8010acc:	b913      	cbnz	r3, 8010ad4 <iprintf+0x14>
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f001 f984 	bl	8011ddc <__sinit>
 8010ad4:	ab05      	add	r3, sp, #20
 8010ad6:	9a04      	ldr	r2, [sp, #16]
 8010ad8:	68a1      	ldr	r1, [r4, #8]
 8010ada:	9301      	str	r3, [sp, #4]
 8010adc:	4620      	mov	r0, r4
 8010ade:	f001 ffcf 	bl	8012a80 <_vfiprintf_r>
 8010ae2:	b002      	add	sp, #8
 8010ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ae8:	b004      	add	sp, #16
 8010aea:	4770      	bx	lr
 8010aec:	20000044 	.word	0x20000044

08010af0 <_sbrk_r>:
 8010af0:	b538      	push	{r3, r4, r5, lr}
 8010af2:	4d06      	ldr	r5, [pc, #24]	; (8010b0c <_sbrk_r+0x1c>)
 8010af4:	2300      	movs	r3, #0
 8010af6:	4604      	mov	r4, r0
 8010af8:	4608      	mov	r0, r1
 8010afa:	602b      	str	r3, [r5, #0]
 8010afc:	f7f4 f902 	bl	8004d04 <_sbrk>
 8010b00:	1c43      	adds	r3, r0, #1
 8010b02:	d102      	bne.n	8010b0a <_sbrk_r+0x1a>
 8010b04:	682b      	ldr	r3, [r5, #0]
 8010b06:	b103      	cbz	r3, 8010b0a <_sbrk_r+0x1a>
 8010b08:	6023      	str	r3, [r4, #0]
 8010b0a:	bd38      	pop	{r3, r4, r5, pc}
 8010b0c:	20000930 	.word	0x20000930

08010b10 <iscanf>:
 8010b10:	b40f      	push	{r0, r1, r2, r3}
 8010b12:	4b0a      	ldr	r3, [pc, #40]	; (8010b3c <iscanf+0x2c>)
 8010b14:	b513      	push	{r0, r1, r4, lr}
 8010b16:	681c      	ldr	r4, [r3, #0]
 8010b18:	b124      	cbz	r4, 8010b24 <iscanf+0x14>
 8010b1a:	69a3      	ldr	r3, [r4, #24]
 8010b1c:	b913      	cbnz	r3, 8010b24 <iscanf+0x14>
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f001 f95c 	bl	8011ddc <__sinit>
 8010b24:	ab05      	add	r3, sp, #20
 8010b26:	9a04      	ldr	r2, [sp, #16]
 8010b28:	6861      	ldr	r1, [r4, #4]
 8010b2a:	9301      	str	r3, [sp, #4]
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	f002 fa7d 	bl	801302c <_vfiscanf_r>
 8010b32:	b002      	add	sp, #8
 8010b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b38:	b004      	add	sp, #16
 8010b3a:	4770      	bx	lr
 8010b3c:	20000044 	.word	0x20000044

08010b40 <setvbuf>:
 8010b40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b44:	461d      	mov	r5, r3
 8010b46:	4b5d      	ldr	r3, [pc, #372]	; (8010cbc <setvbuf+0x17c>)
 8010b48:	681f      	ldr	r7, [r3, #0]
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	460e      	mov	r6, r1
 8010b4e:	4690      	mov	r8, r2
 8010b50:	b127      	cbz	r7, 8010b5c <setvbuf+0x1c>
 8010b52:	69bb      	ldr	r3, [r7, #24]
 8010b54:	b913      	cbnz	r3, 8010b5c <setvbuf+0x1c>
 8010b56:	4638      	mov	r0, r7
 8010b58:	f001 f940 	bl	8011ddc <__sinit>
 8010b5c:	4b58      	ldr	r3, [pc, #352]	; (8010cc0 <setvbuf+0x180>)
 8010b5e:	429c      	cmp	r4, r3
 8010b60:	d167      	bne.n	8010c32 <setvbuf+0xf2>
 8010b62:	687c      	ldr	r4, [r7, #4]
 8010b64:	f1b8 0f02 	cmp.w	r8, #2
 8010b68:	d006      	beq.n	8010b78 <setvbuf+0x38>
 8010b6a:	f1b8 0f01 	cmp.w	r8, #1
 8010b6e:	f200 809f 	bhi.w	8010cb0 <setvbuf+0x170>
 8010b72:	2d00      	cmp	r5, #0
 8010b74:	f2c0 809c 	blt.w	8010cb0 <setvbuf+0x170>
 8010b78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b7a:	07db      	lsls	r3, r3, #31
 8010b7c:	d405      	bmi.n	8010b8a <setvbuf+0x4a>
 8010b7e:	89a3      	ldrh	r3, [r4, #12]
 8010b80:	0598      	lsls	r0, r3, #22
 8010b82:	d402      	bmi.n	8010b8a <setvbuf+0x4a>
 8010b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b86:	f001 f9e8 	bl	8011f5a <__retarget_lock_acquire_recursive>
 8010b8a:	4621      	mov	r1, r4
 8010b8c:	4638      	mov	r0, r7
 8010b8e:	f001 f87f 	bl	8011c90 <_fflush_r>
 8010b92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b94:	b141      	cbz	r1, 8010ba8 <setvbuf+0x68>
 8010b96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b9a:	4299      	cmp	r1, r3
 8010b9c:	d002      	beq.n	8010ba4 <setvbuf+0x64>
 8010b9e:	4638      	mov	r0, r7
 8010ba0:	f7ff fa44 	bl	801002c <_free_r>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	6363      	str	r3, [r4, #52]	; 0x34
 8010ba8:	2300      	movs	r3, #0
 8010baa:	61a3      	str	r3, [r4, #24]
 8010bac:	6063      	str	r3, [r4, #4]
 8010bae:	89a3      	ldrh	r3, [r4, #12]
 8010bb0:	0619      	lsls	r1, r3, #24
 8010bb2:	d503      	bpl.n	8010bbc <setvbuf+0x7c>
 8010bb4:	6921      	ldr	r1, [r4, #16]
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	f7ff fa38 	bl	801002c <_free_r>
 8010bbc:	89a3      	ldrh	r3, [r4, #12]
 8010bbe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8010bc2:	f023 0303 	bic.w	r3, r3, #3
 8010bc6:	f1b8 0f02 	cmp.w	r8, #2
 8010bca:	81a3      	strh	r3, [r4, #12]
 8010bcc:	d06c      	beq.n	8010ca8 <setvbuf+0x168>
 8010bce:	ab01      	add	r3, sp, #4
 8010bd0:	466a      	mov	r2, sp
 8010bd2:	4621      	mov	r1, r4
 8010bd4:	4638      	mov	r0, r7
 8010bd6:	f001 f9c2 	bl	8011f5e <__swhatbuf_r>
 8010bda:	89a3      	ldrh	r3, [r4, #12]
 8010bdc:	4318      	orrs	r0, r3
 8010bde:	81a0      	strh	r0, [r4, #12]
 8010be0:	2d00      	cmp	r5, #0
 8010be2:	d130      	bne.n	8010c46 <setvbuf+0x106>
 8010be4:	9d00      	ldr	r5, [sp, #0]
 8010be6:	4628      	mov	r0, r5
 8010be8:	f7ff fa02 	bl	800fff0 <malloc>
 8010bec:	4606      	mov	r6, r0
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	d155      	bne.n	8010c9e <setvbuf+0x15e>
 8010bf2:	f8dd 9000 	ldr.w	r9, [sp]
 8010bf6:	45a9      	cmp	r9, r5
 8010bf8:	d14a      	bne.n	8010c90 <setvbuf+0x150>
 8010bfa:	f04f 35ff 	mov.w	r5, #4294967295
 8010bfe:	2200      	movs	r2, #0
 8010c00:	60a2      	str	r2, [r4, #8]
 8010c02:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8010c06:	6022      	str	r2, [r4, #0]
 8010c08:	6122      	str	r2, [r4, #16]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c10:	6162      	str	r2, [r4, #20]
 8010c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010c14:	f043 0302 	orr.w	r3, r3, #2
 8010c18:	07d2      	lsls	r2, r2, #31
 8010c1a:	81a3      	strh	r3, [r4, #12]
 8010c1c:	d405      	bmi.n	8010c2a <setvbuf+0xea>
 8010c1e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8010c22:	d102      	bne.n	8010c2a <setvbuf+0xea>
 8010c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c26:	f001 f999 	bl	8011f5c <__retarget_lock_release_recursive>
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	b003      	add	sp, #12
 8010c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c32:	4b24      	ldr	r3, [pc, #144]	; (8010cc4 <setvbuf+0x184>)
 8010c34:	429c      	cmp	r4, r3
 8010c36:	d101      	bne.n	8010c3c <setvbuf+0xfc>
 8010c38:	68bc      	ldr	r4, [r7, #8]
 8010c3a:	e793      	b.n	8010b64 <setvbuf+0x24>
 8010c3c:	4b22      	ldr	r3, [pc, #136]	; (8010cc8 <setvbuf+0x188>)
 8010c3e:	429c      	cmp	r4, r3
 8010c40:	bf08      	it	eq
 8010c42:	68fc      	ldreq	r4, [r7, #12]
 8010c44:	e78e      	b.n	8010b64 <setvbuf+0x24>
 8010c46:	2e00      	cmp	r6, #0
 8010c48:	d0cd      	beq.n	8010be6 <setvbuf+0xa6>
 8010c4a:	69bb      	ldr	r3, [r7, #24]
 8010c4c:	b913      	cbnz	r3, 8010c54 <setvbuf+0x114>
 8010c4e:	4638      	mov	r0, r7
 8010c50:	f001 f8c4 	bl	8011ddc <__sinit>
 8010c54:	f1b8 0f01 	cmp.w	r8, #1
 8010c58:	bf08      	it	eq
 8010c5a:	89a3      	ldrheq	r3, [r4, #12]
 8010c5c:	6026      	str	r6, [r4, #0]
 8010c5e:	bf04      	itt	eq
 8010c60:	f043 0301 	orreq.w	r3, r3, #1
 8010c64:	81a3      	strheq	r3, [r4, #12]
 8010c66:	89a2      	ldrh	r2, [r4, #12]
 8010c68:	f012 0308 	ands.w	r3, r2, #8
 8010c6c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8010c70:	d01c      	beq.n	8010cac <setvbuf+0x16c>
 8010c72:	07d3      	lsls	r3, r2, #31
 8010c74:	bf41      	itttt	mi
 8010c76:	2300      	movmi	r3, #0
 8010c78:	426d      	negmi	r5, r5
 8010c7a:	60a3      	strmi	r3, [r4, #8]
 8010c7c:	61a5      	strmi	r5, [r4, #24]
 8010c7e:	bf58      	it	pl
 8010c80:	60a5      	strpl	r5, [r4, #8]
 8010c82:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8010c84:	f015 0501 	ands.w	r5, r5, #1
 8010c88:	d115      	bne.n	8010cb6 <setvbuf+0x176>
 8010c8a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010c8e:	e7c8      	b.n	8010c22 <setvbuf+0xe2>
 8010c90:	4648      	mov	r0, r9
 8010c92:	f7ff f9ad 	bl	800fff0 <malloc>
 8010c96:	4606      	mov	r6, r0
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d0ae      	beq.n	8010bfa <setvbuf+0xba>
 8010c9c:	464d      	mov	r5, r9
 8010c9e:	89a3      	ldrh	r3, [r4, #12]
 8010ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ca4:	81a3      	strh	r3, [r4, #12]
 8010ca6:	e7d0      	b.n	8010c4a <setvbuf+0x10a>
 8010ca8:	2500      	movs	r5, #0
 8010caa:	e7a8      	b.n	8010bfe <setvbuf+0xbe>
 8010cac:	60a3      	str	r3, [r4, #8]
 8010cae:	e7e8      	b.n	8010c82 <setvbuf+0x142>
 8010cb0:	f04f 35ff 	mov.w	r5, #4294967295
 8010cb4:	e7b9      	b.n	8010c2a <setvbuf+0xea>
 8010cb6:	2500      	movs	r5, #0
 8010cb8:	e7b7      	b.n	8010c2a <setvbuf+0xea>
 8010cba:	bf00      	nop
 8010cbc:	20000044 	.word	0x20000044
 8010cc0:	08014a70 	.word	0x08014a70
 8010cc4:	08014a90 	.word	0x08014a90
 8010cc8:	08014a50 	.word	0x08014a50

08010ccc <siprintf>:
 8010ccc:	b40e      	push	{r1, r2, r3}
 8010cce:	b500      	push	{lr}
 8010cd0:	b09c      	sub	sp, #112	; 0x70
 8010cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8010cd4:	9002      	str	r0, [sp, #8]
 8010cd6:	9006      	str	r0, [sp, #24]
 8010cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010cdc:	4809      	ldr	r0, [pc, #36]	; (8010d04 <siprintf+0x38>)
 8010cde:	9107      	str	r1, [sp, #28]
 8010ce0:	9104      	str	r1, [sp, #16]
 8010ce2:	4909      	ldr	r1, [pc, #36]	; (8010d08 <siprintf+0x3c>)
 8010ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ce8:	9105      	str	r1, [sp, #20]
 8010cea:	6800      	ldr	r0, [r0, #0]
 8010cec:	9301      	str	r3, [sp, #4]
 8010cee:	a902      	add	r1, sp, #8
 8010cf0:	f001 fd9c 	bl	801282c <_svfiprintf_r>
 8010cf4:	9b02      	ldr	r3, [sp, #8]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	701a      	strb	r2, [r3, #0]
 8010cfa:	b01c      	add	sp, #112	; 0x70
 8010cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d00:	b003      	add	sp, #12
 8010d02:	4770      	bx	lr
 8010d04:	20000044 	.word	0x20000044
 8010d08:	ffff0208 	.word	0xffff0208

08010d0c <__swbuf_r>:
 8010d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d0e:	460e      	mov	r6, r1
 8010d10:	4614      	mov	r4, r2
 8010d12:	4605      	mov	r5, r0
 8010d14:	b118      	cbz	r0, 8010d1e <__swbuf_r+0x12>
 8010d16:	6983      	ldr	r3, [r0, #24]
 8010d18:	b90b      	cbnz	r3, 8010d1e <__swbuf_r+0x12>
 8010d1a:	f001 f85f 	bl	8011ddc <__sinit>
 8010d1e:	4b21      	ldr	r3, [pc, #132]	; (8010da4 <__swbuf_r+0x98>)
 8010d20:	429c      	cmp	r4, r3
 8010d22:	d12b      	bne.n	8010d7c <__swbuf_r+0x70>
 8010d24:	686c      	ldr	r4, [r5, #4]
 8010d26:	69a3      	ldr	r3, [r4, #24]
 8010d28:	60a3      	str	r3, [r4, #8]
 8010d2a:	89a3      	ldrh	r3, [r4, #12]
 8010d2c:	071a      	lsls	r2, r3, #28
 8010d2e:	d52f      	bpl.n	8010d90 <__swbuf_r+0x84>
 8010d30:	6923      	ldr	r3, [r4, #16]
 8010d32:	b36b      	cbz	r3, 8010d90 <__swbuf_r+0x84>
 8010d34:	6923      	ldr	r3, [r4, #16]
 8010d36:	6820      	ldr	r0, [r4, #0]
 8010d38:	1ac0      	subs	r0, r0, r3
 8010d3a:	6963      	ldr	r3, [r4, #20]
 8010d3c:	b2f6      	uxtb	r6, r6
 8010d3e:	4283      	cmp	r3, r0
 8010d40:	4637      	mov	r7, r6
 8010d42:	dc04      	bgt.n	8010d4e <__swbuf_r+0x42>
 8010d44:	4621      	mov	r1, r4
 8010d46:	4628      	mov	r0, r5
 8010d48:	f000 ffa2 	bl	8011c90 <_fflush_r>
 8010d4c:	bb30      	cbnz	r0, 8010d9c <__swbuf_r+0x90>
 8010d4e:	68a3      	ldr	r3, [r4, #8]
 8010d50:	3b01      	subs	r3, #1
 8010d52:	60a3      	str	r3, [r4, #8]
 8010d54:	6823      	ldr	r3, [r4, #0]
 8010d56:	1c5a      	adds	r2, r3, #1
 8010d58:	6022      	str	r2, [r4, #0]
 8010d5a:	701e      	strb	r6, [r3, #0]
 8010d5c:	6963      	ldr	r3, [r4, #20]
 8010d5e:	3001      	adds	r0, #1
 8010d60:	4283      	cmp	r3, r0
 8010d62:	d004      	beq.n	8010d6e <__swbuf_r+0x62>
 8010d64:	89a3      	ldrh	r3, [r4, #12]
 8010d66:	07db      	lsls	r3, r3, #31
 8010d68:	d506      	bpl.n	8010d78 <__swbuf_r+0x6c>
 8010d6a:	2e0a      	cmp	r6, #10
 8010d6c:	d104      	bne.n	8010d78 <__swbuf_r+0x6c>
 8010d6e:	4621      	mov	r1, r4
 8010d70:	4628      	mov	r0, r5
 8010d72:	f000 ff8d 	bl	8011c90 <_fflush_r>
 8010d76:	b988      	cbnz	r0, 8010d9c <__swbuf_r+0x90>
 8010d78:	4638      	mov	r0, r7
 8010d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d7c:	4b0a      	ldr	r3, [pc, #40]	; (8010da8 <__swbuf_r+0x9c>)
 8010d7e:	429c      	cmp	r4, r3
 8010d80:	d101      	bne.n	8010d86 <__swbuf_r+0x7a>
 8010d82:	68ac      	ldr	r4, [r5, #8]
 8010d84:	e7cf      	b.n	8010d26 <__swbuf_r+0x1a>
 8010d86:	4b09      	ldr	r3, [pc, #36]	; (8010dac <__swbuf_r+0xa0>)
 8010d88:	429c      	cmp	r4, r3
 8010d8a:	bf08      	it	eq
 8010d8c:	68ec      	ldreq	r4, [r5, #12]
 8010d8e:	e7ca      	b.n	8010d26 <__swbuf_r+0x1a>
 8010d90:	4621      	mov	r1, r4
 8010d92:	4628      	mov	r0, r5
 8010d94:	f000 f80c 	bl	8010db0 <__swsetup_r>
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	d0cb      	beq.n	8010d34 <__swbuf_r+0x28>
 8010d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8010da0:	e7ea      	b.n	8010d78 <__swbuf_r+0x6c>
 8010da2:	bf00      	nop
 8010da4:	08014a70 	.word	0x08014a70
 8010da8:	08014a90 	.word	0x08014a90
 8010dac:	08014a50 	.word	0x08014a50

08010db0 <__swsetup_r>:
 8010db0:	4b32      	ldr	r3, [pc, #200]	; (8010e7c <__swsetup_r+0xcc>)
 8010db2:	b570      	push	{r4, r5, r6, lr}
 8010db4:	681d      	ldr	r5, [r3, #0]
 8010db6:	4606      	mov	r6, r0
 8010db8:	460c      	mov	r4, r1
 8010dba:	b125      	cbz	r5, 8010dc6 <__swsetup_r+0x16>
 8010dbc:	69ab      	ldr	r3, [r5, #24]
 8010dbe:	b913      	cbnz	r3, 8010dc6 <__swsetup_r+0x16>
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	f001 f80b 	bl	8011ddc <__sinit>
 8010dc6:	4b2e      	ldr	r3, [pc, #184]	; (8010e80 <__swsetup_r+0xd0>)
 8010dc8:	429c      	cmp	r4, r3
 8010dca:	d10f      	bne.n	8010dec <__swsetup_r+0x3c>
 8010dcc:	686c      	ldr	r4, [r5, #4]
 8010dce:	89a3      	ldrh	r3, [r4, #12]
 8010dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010dd4:	0719      	lsls	r1, r3, #28
 8010dd6:	d42c      	bmi.n	8010e32 <__swsetup_r+0x82>
 8010dd8:	06dd      	lsls	r5, r3, #27
 8010dda:	d411      	bmi.n	8010e00 <__swsetup_r+0x50>
 8010ddc:	2309      	movs	r3, #9
 8010dde:	6033      	str	r3, [r6, #0]
 8010de0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010de4:	81a3      	strh	r3, [r4, #12]
 8010de6:	f04f 30ff 	mov.w	r0, #4294967295
 8010dea:	e03e      	b.n	8010e6a <__swsetup_r+0xba>
 8010dec:	4b25      	ldr	r3, [pc, #148]	; (8010e84 <__swsetup_r+0xd4>)
 8010dee:	429c      	cmp	r4, r3
 8010df0:	d101      	bne.n	8010df6 <__swsetup_r+0x46>
 8010df2:	68ac      	ldr	r4, [r5, #8]
 8010df4:	e7eb      	b.n	8010dce <__swsetup_r+0x1e>
 8010df6:	4b24      	ldr	r3, [pc, #144]	; (8010e88 <__swsetup_r+0xd8>)
 8010df8:	429c      	cmp	r4, r3
 8010dfa:	bf08      	it	eq
 8010dfc:	68ec      	ldreq	r4, [r5, #12]
 8010dfe:	e7e6      	b.n	8010dce <__swsetup_r+0x1e>
 8010e00:	0758      	lsls	r0, r3, #29
 8010e02:	d512      	bpl.n	8010e2a <__swsetup_r+0x7a>
 8010e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e06:	b141      	cbz	r1, 8010e1a <__swsetup_r+0x6a>
 8010e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e0c:	4299      	cmp	r1, r3
 8010e0e:	d002      	beq.n	8010e16 <__swsetup_r+0x66>
 8010e10:	4630      	mov	r0, r6
 8010e12:	f7ff f90b 	bl	801002c <_free_r>
 8010e16:	2300      	movs	r3, #0
 8010e18:	6363      	str	r3, [r4, #52]	; 0x34
 8010e1a:	89a3      	ldrh	r3, [r4, #12]
 8010e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010e20:	81a3      	strh	r3, [r4, #12]
 8010e22:	2300      	movs	r3, #0
 8010e24:	6063      	str	r3, [r4, #4]
 8010e26:	6923      	ldr	r3, [r4, #16]
 8010e28:	6023      	str	r3, [r4, #0]
 8010e2a:	89a3      	ldrh	r3, [r4, #12]
 8010e2c:	f043 0308 	orr.w	r3, r3, #8
 8010e30:	81a3      	strh	r3, [r4, #12]
 8010e32:	6923      	ldr	r3, [r4, #16]
 8010e34:	b94b      	cbnz	r3, 8010e4a <__swsetup_r+0x9a>
 8010e36:	89a3      	ldrh	r3, [r4, #12]
 8010e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e40:	d003      	beq.n	8010e4a <__swsetup_r+0x9a>
 8010e42:	4621      	mov	r1, r4
 8010e44:	4630      	mov	r0, r6
 8010e46:	f001 f8af 	bl	8011fa8 <__smakebuf_r>
 8010e4a:	89a0      	ldrh	r0, [r4, #12]
 8010e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e50:	f010 0301 	ands.w	r3, r0, #1
 8010e54:	d00a      	beq.n	8010e6c <__swsetup_r+0xbc>
 8010e56:	2300      	movs	r3, #0
 8010e58:	60a3      	str	r3, [r4, #8]
 8010e5a:	6963      	ldr	r3, [r4, #20]
 8010e5c:	425b      	negs	r3, r3
 8010e5e:	61a3      	str	r3, [r4, #24]
 8010e60:	6923      	ldr	r3, [r4, #16]
 8010e62:	b943      	cbnz	r3, 8010e76 <__swsetup_r+0xc6>
 8010e64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010e68:	d1ba      	bne.n	8010de0 <__swsetup_r+0x30>
 8010e6a:	bd70      	pop	{r4, r5, r6, pc}
 8010e6c:	0781      	lsls	r1, r0, #30
 8010e6e:	bf58      	it	pl
 8010e70:	6963      	ldrpl	r3, [r4, #20]
 8010e72:	60a3      	str	r3, [r4, #8]
 8010e74:	e7f4      	b.n	8010e60 <__swsetup_r+0xb0>
 8010e76:	2000      	movs	r0, #0
 8010e78:	e7f7      	b.n	8010e6a <__swsetup_r+0xba>
 8010e7a:	bf00      	nop
 8010e7c:	20000044 	.word	0x20000044
 8010e80:	08014a70 	.word	0x08014a70
 8010e84:	08014a90 	.word	0x08014a90
 8010e88:	08014a50 	.word	0x08014a50

08010e8c <quorem>:
 8010e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e90:	6903      	ldr	r3, [r0, #16]
 8010e92:	690c      	ldr	r4, [r1, #16]
 8010e94:	42a3      	cmp	r3, r4
 8010e96:	4607      	mov	r7, r0
 8010e98:	f2c0 8081 	blt.w	8010f9e <quorem+0x112>
 8010e9c:	3c01      	subs	r4, #1
 8010e9e:	f101 0814 	add.w	r8, r1, #20
 8010ea2:	f100 0514 	add.w	r5, r0, #20
 8010ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010eaa:	9301      	str	r3, [sp, #4]
 8010eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010ec0:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ec4:	d331      	bcc.n	8010f2a <quorem+0x9e>
 8010ec6:	f04f 0e00 	mov.w	lr, #0
 8010eca:	4640      	mov	r0, r8
 8010ecc:	46ac      	mov	ip, r5
 8010ece:	46f2      	mov	sl, lr
 8010ed0:	f850 2b04 	ldr.w	r2, [r0], #4
 8010ed4:	b293      	uxth	r3, r2
 8010ed6:	fb06 e303 	mla	r3, r6, r3, lr
 8010eda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8010ee4:	f8dc a000 	ldr.w	sl, [ip]
 8010ee8:	0c12      	lsrs	r2, r2, #16
 8010eea:	fa13 f38a 	uxtah	r3, r3, sl
 8010eee:	fb06 e202 	mla	r2, r6, r2, lr
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	9b00      	ldr	r3, [sp, #0]
 8010ef6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010efa:	b292      	uxth	r2, r2
 8010efc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010f04:	f8bd 3000 	ldrh.w	r3, [sp]
 8010f08:	4581      	cmp	r9, r0
 8010f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f0e:	f84c 3b04 	str.w	r3, [ip], #4
 8010f12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010f16:	d2db      	bcs.n	8010ed0 <quorem+0x44>
 8010f18:	f855 300b 	ldr.w	r3, [r5, fp]
 8010f1c:	b92b      	cbnz	r3, 8010f2a <quorem+0x9e>
 8010f1e:	9b01      	ldr	r3, [sp, #4]
 8010f20:	3b04      	subs	r3, #4
 8010f22:	429d      	cmp	r5, r3
 8010f24:	461a      	mov	r2, r3
 8010f26:	d32e      	bcc.n	8010f86 <quorem+0xfa>
 8010f28:	613c      	str	r4, [r7, #16]
 8010f2a:	4638      	mov	r0, r7
 8010f2c:	f001 fb0a 	bl	8012544 <__mcmp>
 8010f30:	2800      	cmp	r0, #0
 8010f32:	db24      	blt.n	8010f7e <quorem+0xf2>
 8010f34:	3601      	adds	r6, #1
 8010f36:	4628      	mov	r0, r5
 8010f38:	f04f 0c00 	mov.w	ip, #0
 8010f3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f40:	f8d0 e000 	ldr.w	lr, [r0]
 8010f44:	b293      	uxth	r3, r2
 8010f46:	ebac 0303 	sub.w	r3, ip, r3
 8010f4a:	0c12      	lsrs	r2, r2, #16
 8010f4c:	fa13 f38e 	uxtah	r3, r3, lr
 8010f50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f5e:	45c1      	cmp	r9, r8
 8010f60:	f840 3b04 	str.w	r3, [r0], #4
 8010f64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010f68:	d2e8      	bcs.n	8010f3c <quorem+0xb0>
 8010f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f72:	b922      	cbnz	r2, 8010f7e <quorem+0xf2>
 8010f74:	3b04      	subs	r3, #4
 8010f76:	429d      	cmp	r5, r3
 8010f78:	461a      	mov	r2, r3
 8010f7a:	d30a      	bcc.n	8010f92 <quorem+0x106>
 8010f7c:	613c      	str	r4, [r7, #16]
 8010f7e:	4630      	mov	r0, r6
 8010f80:	b003      	add	sp, #12
 8010f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f86:	6812      	ldr	r2, [r2, #0]
 8010f88:	3b04      	subs	r3, #4
 8010f8a:	2a00      	cmp	r2, #0
 8010f8c:	d1cc      	bne.n	8010f28 <quorem+0x9c>
 8010f8e:	3c01      	subs	r4, #1
 8010f90:	e7c7      	b.n	8010f22 <quorem+0x96>
 8010f92:	6812      	ldr	r2, [r2, #0]
 8010f94:	3b04      	subs	r3, #4
 8010f96:	2a00      	cmp	r2, #0
 8010f98:	d1f0      	bne.n	8010f7c <quorem+0xf0>
 8010f9a:	3c01      	subs	r4, #1
 8010f9c:	e7eb      	b.n	8010f76 <quorem+0xea>
 8010f9e:	2000      	movs	r0, #0
 8010fa0:	e7ee      	b.n	8010f80 <quorem+0xf4>
 8010fa2:	0000      	movs	r0, r0
 8010fa4:	0000      	movs	r0, r0
	...

08010fa8 <_dtoa_r>:
 8010fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fac:	ed2d 8b04 	vpush	{d8-d9}
 8010fb0:	ec57 6b10 	vmov	r6, r7, d0
 8010fb4:	b093      	sub	sp, #76	; 0x4c
 8010fb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010fb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010fbc:	9106      	str	r1, [sp, #24]
 8010fbe:	ee10 aa10 	vmov	sl, s0
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8010fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8010fc8:	46bb      	mov	fp, r7
 8010fca:	b975      	cbnz	r5, 8010fea <_dtoa_r+0x42>
 8010fcc:	2010      	movs	r0, #16
 8010fce:	f7ff f80f 	bl	800fff0 <malloc>
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	6260      	str	r0, [r4, #36]	; 0x24
 8010fd6:	b920      	cbnz	r0, 8010fe2 <_dtoa_r+0x3a>
 8010fd8:	4ba7      	ldr	r3, [pc, #668]	; (8011278 <_dtoa_r+0x2d0>)
 8010fda:	21ea      	movs	r1, #234	; 0xea
 8010fdc:	48a7      	ldr	r0, [pc, #668]	; (801127c <_dtoa_r+0x2d4>)
 8010fde:	f002 fc8b 	bl	80138f8 <__assert_func>
 8010fe2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010fe6:	6005      	str	r5, [r0, #0]
 8010fe8:	60c5      	str	r5, [r0, #12]
 8010fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fec:	6819      	ldr	r1, [r3, #0]
 8010fee:	b151      	cbz	r1, 8011006 <_dtoa_r+0x5e>
 8010ff0:	685a      	ldr	r2, [r3, #4]
 8010ff2:	604a      	str	r2, [r1, #4]
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	4093      	lsls	r3, r2
 8010ff8:	608b      	str	r3, [r1, #8]
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f001 f860 	bl	80120c0 <_Bfree>
 8011000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011002:	2200      	movs	r2, #0
 8011004:	601a      	str	r2, [r3, #0]
 8011006:	1e3b      	subs	r3, r7, #0
 8011008:	bfaa      	itet	ge
 801100a:	2300      	movge	r3, #0
 801100c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011010:	f8c8 3000 	strge.w	r3, [r8]
 8011014:	4b9a      	ldr	r3, [pc, #616]	; (8011280 <_dtoa_r+0x2d8>)
 8011016:	bfbc      	itt	lt
 8011018:	2201      	movlt	r2, #1
 801101a:	f8c8 2000 	strlt.w	r2, [r8]
 801101e:	ea33 030b 	bics.w	r3, r3, fp
 8011022:	d11b      	bne.n	801105c <_dtoa_r+0xb4>
 8011024:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011026:	f242 730f 	movw	r3, #9999	; 0x270f
 801102a:	6013      	str	r3, [r2, #0]
 801102c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011030:	4333      	orrs	r3, r6
 8011032:	f000 8592 	beq.w	8011b5a <_dtoa_r+0xbb2>
 8011036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011038:	b963      	cbnz	r3, 8011054 <_dtoa_r+0xac>
 801103a:	4b92      	ldr	r3, [pc, #584]	; (8011284 <_dtoa_r+0x2dc>)
 801103c:	e022      	b.n	8011084 <_dtoa_r+0xdc>
 801103e:	4b92      	ldr	r3, [pc, #584]	; (8011288 <_dtoa_r+0x2e0>)
 8011040:	9301      	str	r3, [sp, #4]
 8011042:	3308      	adds	r3, #8
 8011044:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011046:	6013      	str	r3, [r2, #0]
 8011048:	9801      	ldr	r0, [sp, #4]
 801104a:	b013      	add	sp, #76	; 0x4c
 801104c:	ecbd 8b04 	vpop	{d8-d9}
 8011050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011054:	4b8b      	ldr	r3, [pc, #556]	; (8011284 <_dtoa_r+0x2dc>)
 8011056:	9301      	str	r3, [sp, #4]
 8011058:	3303      	adds	r3, #3
 801105a:	e7f3      	b.n	8011044 <_dtoa_r+0x9c>
 801105c:	2200      	movs	r2, #0
 801105e:	2300      	movs	r3, #0
 8011060:	4650      	mov	r0, sl
 8011062:	4659      	mov	r1, fp
 8011064:	f7ef fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 8011068:	ec4b ab19 	vmov	d9, sl, fp
 801106c:	4680      	mov	r8, r0
 801106e:	b158      	cbz	r0, 8011088 <_dtoa_r+0xe0>
 8011070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011072:	2301      	movs	r3, #1
 8011074:	6013      	str	r3, [r2, #0]
 8011076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011078:	2b00      	cmp	r3, #0
 801107a:	f000 856b 	beq.w	8011b54 <_dtoa_r+0xbac>
 801107e:	4883      	ldr	r0, [pc, #524]	; (801128c <_dtoa_r+0x2e4>)
 8011080:	6018      	str	r0, [r3, #0]
 8011082:	1e43      	subs	r3, r0, #1
 8011084:	9301      	str	r3, [sp, #4]
 8011086:	e7df      	b.n	8011048 <_dtoa_r+0xa0>
 8011088:	ec4b ab10 	vmov	d0, sl, fp
 801108c:	aa10      	add	r2, sp, #64	; 0x40
 801108e:	a911      	add	r1, sp, #68	; 0x44
 8011090:	4620      	mov	r0, r4
 8011092:	f001 fafd 	bl	8012690 <__d2b>
 8011096:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801109a:	ee08 0a10 	vmov	s16, r0
 801109e:	2d00      	cmp	r5, #0
 80110a0:	f000 8084 	beq.w	80111ac <_dtoa_r+0x204>
 80110a4:	ee19 3a90 	vmov	r3, s19
 80110a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80110b0:	4656      	mov	r6, sl
 80110b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80110b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80110ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80110be:	4b74      	ldr	r3, [pc, #464]	; (8011290 <_dtoa_r+0x2e8>)
 80110c0:	2200      	movs	r2, #0
 80110c2:	4630      	mov	r0, r6
 80110c4:	4639      	mov	r1, r7
 80110c6:	f7ef f8df 	bl	8000288 <__aeabi_dsub>
 80110ca:	a365      	add	r3, pc, #404	; (adr r3, 8011260 <_dtoa_r+0x2b8>)
 80110cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d0:	f7ef fa92 	bl	80005f8 <__aeabi_dmul>
 80110d4:	a364      	add	r3, pc, #400	; (adr r3, 8011268 <_dtoa_r+0x2c0>)
 80110d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110da:	f7ef f8d7 	bl	800028c <__adddf3>
 80110de:	4606      	mov	r6, r0
 80110e0:	4628      	mov	r0, r5
 80110e2:	460f      	mov	r7, r1
 80110e4:	f7ef fa1e 	bl	8000524 <__aeabi_i2d>
 80110e8:	a361      	add	r3, pc, #388	; (adr r3, 8011270 <_dtoa_r+0x2c8>)
 80110ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ee:	f7ef fa83 	bl	80005f8 <__aeabi_dmul>
 80110f2:	4602      	mov	r2, r0
 80110f4:	460b      	mov	r3, r1
 80110f6:	4630      	mov	r0, r6
 80110f8:	4639      	mov	r1, r7
 80110fa:	f7ef f8c7 	bl	800028c <__adddf3>
 80110fe:	4606      	mov	r6, r0
 8011100:	460f      	mov	r7, r1
 8011102:	f7ef fd29 	bl	8000b58 <__aeabi_d2iz>
 8011106:	2200      	movs	r2, #0
 8011108:	9000      	str	r0, [sp, #0]
 801110a:	2300      	movs	r3, #0
 801110c:	4630      	mov	r0, r6
 801110e:	4639      	mov	r1, r7
 8011110:	f7ef fce4 	bl	8000adc <__aeabi_dcmplt>
 8011114:	b150      	cbz	r0, 801112c <_dtoa_r+0x184>
 8011116:	9800      	ldr	r0, [sp, #0]
 8011118:	f7ef fa04 	bl	8000524 <__aeabi_i2d>
 801111c:	4632      	mov	r2, r6
 801111e:	463b      	mov	r3, r7
 8011120:	f7ef fcd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8011124:	b910      	cbnz	r0, 801112c <_dtoa_r+0x184>
 8011126:	9b00      	ldr	r3, [sp, #0]
 8011128:	3b01      	subs	r3, #1
 801112a:	9300      	str	r3, [sp, #0]
 801112c:	9b00      	ldr	r3, [sp, #0]
 801112e:	2b16      	cmp	r3, #22
 8011130:	d85a      	bhi.n	80111e8 <_dtoa_r+0x240>
 8011132:	9a00      	ldr	r2, [sp, #0]
 8011134:	4b57      	ldr	r3, [pc, #348]	; (8011294 <_dtoa_r+0x2ec>)
 8011136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113e:	ec51 0b19 	vmov	r0, r1, d9
 8011142:	f7ef fccb 	bl	8000adc <__aeabi_dcmplt>
 8011146:	2800      	cmp	r0, #0
 8011148:	d050      	beq.n	80111ec <_dtoa_r+0x244>
 801114a:	9b00      	ldr	r3, [sp, #0]
 801114c:	3b01      	subs	r3, #1
 801114e:	9300      	str	r3, [sp, #0]
 8011150:	2300      	movs	r3, #0
 8011152:	930b      	str	r3, [sp, #44]	; 0x2c
 8011154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011156:	1b5d      	subs	r5, r3, r5
 8011158:	1e6b      	subs	r3, r5, #1
 801115a:	9305      	str	r3, [sp, #20]
 801115c:	bf45      	ittet	mi
 801115e:	f1c5 0301 	rsbmi	r3, r5, #1
 8011162:	9304      	strmi	r3, [sp, #16]
 8011164:	2300      	movpl	r3, #0
 8011166:	2300      	movmi	r3, #0
 8011168:	bf4c      	ite	mi
 801116a:	9305      	strmi	r3, [sp, #20]
 801116c:	9304      	strpl	r3, [sp, #16]
 801116e:	9b00      	ldr	r3, [sp, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	db3d      	blt.n	80111f0 <_dtoa_r+0x248>
 8011174:	9b05      	ldr	r3, [sp, #20]
 8011176:	9a00      	ldr	r2, [sp, #0]
 8011178:	920a      	str	r2, [sp, #40]	; 0x28
 801117a:	4413      	add	r3, r2
 801117c:	9305      	str	r3, [sp, #20]
 801117e:	2300      	movs	r3, #0
 8011180:	9307      	str	r3, [sp, #28]
 8011182:	9b06      	ldr	r3, [sp, #24]
 8011184:	2b09      	cmp	r3, #9
 8011186:	f200 8089 	bhi.w	801129c <_dtoa_r+0x2f4>
 801118a:	2b05      	cmp	r3, #5
 801118c:	bfc4      	itt	gt
 801118e:	3b04      	subgt	r3, #4
 8011190:	9306      	strgt	r3, [sp, #24]
 8011192:	9b06      	ldr	r3, [sp, #24]
 8011194:	f1a3 0302 	sub.w	r3, r3, #2
 8011198:	bfcc      	ite	gt
 801119a:	2500      	movgt	r5, #0
 801119c:	2501      	movle	r5, #1
 801119e:	2b03      	cmp	r3, #3
 80111a0:	f200 8087 	bhi.w	80112b2 <_dtoa_r+0x30a>
 80111a4:	e8df f003 	tbb	[pc, r3]
 80111a8:	59383a2d 	.word	0x59383a2d
 80111ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80111b0:	441d      	add	r5, r3
 80111b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80111b6:	2b20      	cmp	r3, #32
 80111b8:	bfc1      	itttt	gt
 80111ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80111be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80111c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80111c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80111ca:	bfda      	itte	le
 80111cc:	f1c3 0320 	rsble	r3, r3, #32
 80111d0:	fa06 f003 	lslle.w	r0, r6, r3
 80111d4:	4318      	orrgt	r0, r3
 80111d6:	f7ef f995 	bl	8000504 <__aeabi_ui2d>
 80111da:	2301      	movs	r3, #1
 80111dc:	4606      	mov	r6, r0
 80111de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80111e2:	3d01      	subs	r5, #1
 80111e4:	930e      	str	r3, [sp, #56]	; 0x38
 80111e6:	e76a      	b.n	80110be <_dtoa_r+0x116>
 80111e8:	2301      	movs	r3, #1
 80111ea:	e7b2      	b.n	8011152 <_dtoa_r+0x1aa>
 80111ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80111ee:	e7b1      	b.n	8011154 <_dtoa_r+0x1ac>
 80111f0:	9b04      	ldr	r3, [sp, #16]
 80111f2:	9a00      	ldr	r2, [sp, #0]
 80111f4:	1a9b      	subs	r3, r3, r2
 80111f6:	9304      	str	r3, [sp, #16]
 80111f8:	4253      	negs	r3, r2
 80111fa:	9307      	str	r3, [sp, #28]
 80111fc:	2300      	movs	r3, #0
 80111fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011200:	e7bf      	b.n	8011182 <_dtoa_r+0x1da>
 8011202:	2300      	movs	r3, #0
 8011204:	9308      	str	r3, [sp, #32]
 8011206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011208:	2b00      	cmp	r3, #0
 801120a:	dc55      	bgt.n	80112b8 <_dtoa_r+0x310>
 801120c:	2301      	movs	r3, #1
 801120e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011212:	461a      	mov	r2, r3
 8011214:	9209      	str	r2, [sp, #36]	; 0x24
 8011216:	e00c      	b.n	8011232 <_dtoa_r+0x28a>
 8011218:	2301      	movs	r3, #1
 801121a:	e7f3      	b.n	8011204 <_dtoa_r+0x25c>
 801121c:	2300      	movs	r3, #0
 801121e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011220:	9308      	str	r3, [sp, #32]
 8011222:	9b00      	ldr	r3, [sp, #0]
 8011224:	4413      	add	r3, r2
 8011226:	9302      	str	r3, [sp, #8]
 8011228:	3301      	adds	r3, #1
 801122a:	2b01      	cmp	r3, #1
 801122c:	9303      	str	r3, [sp, #12]
 801122e:	bfb8      	it	lt
 8011230:	2301      	movlt	r3, #1
 8011232:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011234:	2200      	movs	r2, #0
 8011236:	6042      	str	r2, [r0, #4]
 8011238:	2204      	movs	r2, #4
 801123a:	f102 0614 	add.w	r6, r2, #20
 801123e:	429e      	cmp	r6, r3
 8011240:	6841      	ldr	r1, [r0, #4]
 8011242:	d93d      	bls.n	80112c0 <_dtoa_r+0x318>
 8011244:	4620      	mov	r0, r4
 8011246:	f000 fefb 	bl	8012040 <_Balloc>
 801124a:	9001      	str	r0, [sp, #4]
 801124c:	2800      	cmp	r0, #0
 801124e:	d13b      	bne.n	80112c8 <_dtoa_r+0x320>
 8011250:	4b11      	ldr	r3, [pc, #68]	; (8011298 <_dtoa_r+0x2f0>)
 8011252:	4602      	mov	r2, r0
 8011254:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011258:	e6c0      	b.n	8010fdc <_dtoa_r+0x34>
 801125a:	2301      	movs	r3, #1
 801125c:	e7df      	b.n	801121e <_dtoa_r+0x276>
 801125e:	bf00      	nop
 8011260:	636f4361 	.word	0x636f4361
 8011264:	3fd287a7 	.word	0x3fd287a7
 8011268:	8b60c8b3 	.word	0x8b60c8b3
 801126c:	3fc68a28 	.word	0x3fc68a28
 8011270:	509f79fb 	.word	0x509f79fb
 8011274:	3fd34413 	.word	0x3fd34413
 8011278:	080149cb 	.word	0x080149cb
 801127c:	080149e2 	.word	0x080149e2
 8011280:	7ff00000 	.word	0x7ff00000
 8011284:	080149c7 	.word	0x080149c7
 8011288:	080149be 	.word	0x080149be
 801128c:	08014c22 	.word	0x08014c22
 8011290:	3ff80000 	.word	0x3ff80000
 8011294:	08014b38 	.word	0x08014b38
 8011298:	08014a3d 	.word	0x08014a3d
 801129c:	2501      	movs	r5, #1
 801129e:	2300      	movs	r3, #0
 80112a0:	9306      	str	r3, [sp, #24]
 80112a2:	9508      	str	r5, [sp, #32]
 80112a4:	f04f 33ff 	mov.w	r3, #4294967295
 80112a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80112ac:	2200      	movs	r2, #0
 80112ae:	2312      	movs	r3, #18
 80112b0:	e7b0      	b.n	8011214 <_dtoa_r+0x26c>
 80112b2:	2301      	movs	r3, #1
 80112b4:	9308      	str	r3, [sp, #32]
 80112b6:	e7f5      	b.n	80112a4 <_dtoa_r+0x2fc>
 80112b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80112be:	e7b8      	b.n	8011232 <_dtoa_r+0x28a>
 80112c0:	3101      	adds	r1, #1
 80112c2:	6041      	str	r1, [r0, #4]
 80112c4:	0052      	lsls	r2, r2, #1
 80112c6:	e7b8      	b.n	801123a <_dtoa_r+0x292>
 80112c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112ca:	9a01      	ldr	r2, [sp, #4]
 80112cc:	601a      	str	r2, [r3, #0]
 80112ce:	9b03      	ldr	r3, [sp, #12]
 80112d0:	2b0e      	cmp	r3, #14
 80112d2:	f200 809d 	bhi.w	8011410 <_dtoa_r+0x468>
 80112d6:	2d00      	cmp	r5, #0
 80112d8:	f000 809a 	beq.w	8011410 <_dtoa_r+0x468>
 80112dc:	9b00      	ldr	r3, [sp, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	dd32      	ble.n	8011348 <_dtoa_r+0x3a0>
 80112e2:	4ab7      	ldr	r2, [pc, #732]	; (80115c0 <_dtoa_r+0x618>)
 80112e4:	f003 030f 	and.w	r3, r3, #15
 80112e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80112ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112f0:	9b00      	ldr	r3, [sp, #0]
 80112f2:	05d8      	lsls	r0, r3, #23
 80112f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80112f8:	d516      	bpl.n	8011328 <_dtoa_r+0x380>
 80112fa:	4bb2      	ldr	r3, [pc, #712]	; (80115c4 <_dtoa_r+0x61c>)
 80112fc:	ec51 0b19 	vmov	r0, r1, d9
 8011300:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011304:	f7ef faa2 	bl	800084c <__aeabi_ddiv>
 8011308:	f007 070f 	and.w	r7, r7, #15
 801130c:	4682      	mov	sl, r0
 801130e:	468b      	mov	fp, r1
 8011310:	2503      	movs	r5, #3
 8011312:	4eac      	ldr	r6, [pc, #688]	; (80115c4 <_dtoa_r+0x61c>)
 8011314:	b957      	cbnz	r7, 801132c <_dtoa_r+0x384>
 8011316:	4642      	mov	r2, r8
 8011318:	464b      	mov	r3, r9
 801131a:	4650      	mov	r0, sl
 801131c:	4659      	mov	r1, fp
 801131e:	f7ef fa95 	bl	800084c <__aeabi_ddiv>
 8011322:	4682      	mov	sl, r0
 8011324:	468b      	mov	fp, r1
 8011326:	e028      	b.n	801137a <_dtoa_r+0x3d2>
 8011328:	2502      	movs	r5, #2
 801132a:	e7f2      	b.n	8011312 <_dtoa_r+0x36a>
 801132c:	07f9      	lsls	r1, r7, #31
 801132e:	d508      	bpl.n	8011342 <_dtoa_r+0x39a>
 8011330:	4640      	mov	r0, r8
 8011332:	4649      	mov	r1, r9
 8011334:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011338:	f7ef f95e 	bl	80005f8 <__aeabi_dmul>
 801133c:	3501      	adds	r5, #1
 801133e:	4680      	mov	r8, r0
 8011340:	4689      	mov	r9, r1
 8011342:	107f      	asrs	r7, r7, #1
 8011344:	3608      	adds	r6, #8
 8011346:	e7e5      	b.n	8011314 <_dtoa_r+0x36c>
 8011348:	f000 809b 	beq.w	8011482 <_dtoa_r+0x4da>
 801134c:	9b00      	ldr	r3, [sp, #0]
 801134e:	4f9d      	ldr	r7, [pc, #628]	; (80115c4 <_dtoa_r+0x61c>)
 8011350:	425e      	negs	r6, r3
 8011352:	4b9b      	ldr	r3, [pc, #620]	; (80115c0 <_dtoa_r+0x618>)
 8011354:	f006 020f 	and.w	r2, r6, #15
 8011358:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011360:	ec51 0b19 	vmov	r0, r1, d9
 8011364:	f7ef f948 	bl	80005f8 <__aeabi_dmul>
 8011368:	1136      	asrs	r6, r6, #4
 801136a:	4682      	mov	sl, r0
 801136c:	468b      	mov	fp, r1
 801136e:	2300      	movs	r3, #0
 8011370:	2502      	movs	r5, #2
 8011372:	2e00      	cmp	r6, #0
 8011374:	d17a      	bne.n	801146c <_dtoa_r+0x4c4>
 8011376:	2b00      	cmp	r3, #0
 8011378:	d1d3      	bne.n	8011322 <_dtoa_r+0x37a>
 801137a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801137c:	2b00      	cmp	r3, #0
 801137e:	f000 8082 	beq.w	8011486 <_dtoa_r+0x4de>
 8011382:	4b91      	ldr	r3, [pc, #580]	; (80115c8 <_dtoa_r+0x620>)
 8011384:	2200      	movs	r2, #0
 8011386:	4650      	mov	r0, sl
 8011388:	4659      	mov	r1, fp
 801138a:	f7ef fba7 	bl	8000adc <__aeabi_dcmplt>
 801138e:	2800      	cmp	r0, #0
 8011390:	d079      	beq.n	8011486 <_dtoa_r+0x4de>
 8011392:	9b03      	ldr	r3, [sp, #12]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d076      	beq.n	8011486 <_dtoa_r+0x4de>
 8011398:	9b02      	ldr	r3, [sp, #8]
 801139a:	2b00      	cmp	r3, #0
 801139c:	dd36      	ble.n	801140c <_dtoa_r+0x464>
 801139e:	9b00      	ldr	r3, [sp, #0]
 80113a0:	4650      	mov	r0, sl
 80113a2:	4659      	mov	r1, fp
 80113a4:	1e5f      	subs	r7, r3, #1
 80113a6:	2200      	movs	r2, #0
 80113a8:	4b88      	ldr	r3, [pc, #544]	; (80115cc <_dtoa_r+0x624>)
 80113aa:	f7ef f925 	bl	80005f8 <__aeabi_dmul>
 80113ae:	9e02      	ldr	r6, [sp, #8]
 80113b0:	4682      	mov	sl, r0
 80113b2:	468b      	mov	fp, r1
 80113b4:	3501      	adds	r5, #1
 80113b6:	4628      	mov	r0, r5
 80113b8:	f7ef f8b4 	bl	8000524 <__aeabi_i2d>
 80113bc:	4652      	mov	r2, sl
 80113be:	465b      	mov	r3, fp
 80113c0:	f7ef f91a 	bl	80005f8 <__aeabi_dmul>
 80113c4:	4b82      	ldr	r3, [pc, #520]	; (80115d0 <_dtoa_r+0x628>)
 80113c6:	2200      	movs	r2, #0
 80113c8:	f7ee ff60 	bl	800028c <__adddf3>
 80113cc:	46d0      	mov	r8, sl
 80113ce:	46d9      	mov	r9, fp
 80113d0:	4682      	mov	sl, r0
 80113d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80113d6:	2e00      	cmp	r6, #0
 80113d8:	d158      	bne.n	801148c <_dtoa_r+0x4e4>
 80113da:	4b7e      	ldr	r3, [pc, #504]	; (80115d4 <_dtoa_r+0x62c>)
 80113dc:	2200      	movs	r2, #0
 80113de:	4640      	mov	r0, r8
 80113e0:	4649      	mov	r1, r9
 80113e2:	f7ee ff51 	bl	8000288 <__aeabi_dsub>
 80113e6:	4652      	mov	r2, sl
 80113e8:	465b      	mov	r3, fp
 80113ea:	4680      	mov	r8, r0
 80113ec:	4689      	mov	r9, r1
 80113ee:	f7ef fb93 	bl	8000b18 <__aeabi_dcmpgt>
 80113f2:	2800      	cmp	r0, #0
 80113f4:	f040 8295 	bne.w	8011922 <_dtoa_r+0x97a>
 80113f8:	4652      	mov	r2, sl
 80113fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80113fe:	4640      	mov	r0, r8
 8011400:	4649      	mov	r1, r9
 8011402:	f7ef fb6b 	bl	8000adc <__aeabi_dcmplt>
 8011406:	2800      	cmp	r0, #0
 8011408:	f040 8289 	bne.w	801191e <_dtoa_r+0x976>
 801140c:	ec5b ab19 	vmov	sl, fp, d9
 8011410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011412:	2b00      	cmp	r3, #0
 8011414:	f2c0 8148 	blt.w	80116a8 <_dtoa_r+0x700>
 8011418:	9a00      	ldr	r2, [sp, #0]
 801141a:	2a0e      	cmp	r2, #14
 801141c:	f300 8144 	bgt.w	80116a8 <_dtoa_r+0x700>
 8011420:	4b67      	ldr	r3, [pc, #412]	; (80115c0 <_dtoa_r+0x618>)
 8011422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011426:	e9d3 8900 	ldrd	r8, r9, [r3]
 801142a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801142c:	2b00      	cmp	r3, #0
 801142e:	f280 80d5 	bge.w	80115dc <_dtoa_r+0x634>
 8011432:	9b03      	ldr	r3, [sp, #12]
 8011434:	2b00      	cmp	r3, #0
 8011436:	f300 80d1 	bgt.w	80115dc <_dtoa_r+0x634>
 801143a:	f040 826f 	bne.w	801191c <_dtoa_r+0x974>
 801143e:	4b65      	ldr	r3, [pc, #404]	; (80115d4 <_dtoa_r+0x62c>)
 8011440:	2200      	movs	r2, #0
 8011442:	4640      	mov	r0, r8
 8011444:	4649      	mov	r1, r9
 8011446:	f7ef f8d7 	bl	80005f8 <__aeabi_dmul>
 801144a:	4652      	mov	r2, sl
 801144c:	465b      	mov	r3, fp
 801144e:	f7ef fb59 	bl	8000b04 <__aeabi_dcmpge>
 8011452:	9e03      	ldr	r6, [sp, #12]
 8011454:	4637      	mov	r7, r6
 8011456:	2800      	cmp	r0, #0
 8011458:	f040 8245 	bne.w	80118e6 <_dtoa_r+0x93e>
 801145c:	9d01      	ldr	r5, [sp, #4]
 801145e:	2331      	movs	r3, #49	; 0x31
 8011460:	f805 3b01 	strb.w	r3, [r5], #1
 8011464:	9b00      	ldr	r3, [sp, #0]
 8011466:	3301      	adds	r3, #1
 8011468:	9300      	str	r3, [sp, #0]
 801146a:	e240      	b.n	80118ee <_dtoa_r+0x946>
 801146c:	07f2      	lsls	r2, r6, #31
 801146e:	d505      	bpl.n	801147c <_dtoa_r+0x4d4>
 8011470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011474:	f7ef f8c0 	bl	80005f8 <__aeabi_dmul>
 8011478:	3501      	adds	r5, #1
 801147a:	2301      	movs	r3, #1
 801147c:	1076      	asrs	r6, r6, #1
 801147e:	3708      	adds	r7, #8
 8011480:	e777      	b.n	8011372 <_dtoa_r+0x3ca>
 8011482:	2502      	movs	r5, #2
 8011484:	e779      	b.n	801137a <_dtoa_r+0x3d2>
 8011486:	9f00      	ldr	r7, [sp, #0]
 8011488:	9e03      	ldr	r6, [sp, #12]
 801148a:	e794      	b.n	80113b6 <_dtoa_r+0x40e>
 801148c:	9901      	ldr	r1, [sp, #4]
 801148e:	4b4c      	ldr	r3, [pc, #304]	; (80115c0 <_dtoa_r+0x618>)
 8011490:	4431      	add	r1, r6
 8011492:	910d      	str	r1, [sp, #52]	; 0x34
 8011494:	9908      	ldr	r1, [sp, #32]
 8011496:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801149a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801149e:	2900      	cmp	r1, #0
 80114a0:	d043      	beq.n	801152a <_dtoa_r+0x582>
 80114a2:	494d      	ldr	r1, [pc, #308]	; (80115d8 <_dtoa_r+0x630>)
 80114a4:	2000      	movs	r0, #0
 80114a6:	f7ef f9d1 	bl	800084c <__aeabi_ddiv>
 80114aa:	4652      	mov	r2, sl
 80114ac:	465b      	mov	r3, fp
 80114ae:	f7ee feeb 	bl	8000288 <__aeabi_dsub>
 80114b2:	9d01      	ldr	r5, [sp, #4]
 80114b4:	4682      	mov	sl, r0
 80114b6:	468b      	mov	fp, r1
 80114b8:	4649      	mov	r1, r9
 80114ba:	4640      	mov	r0, r8
 80114bc:	f7ef fb4c 	bl	8000b58 <__aeabi_d2iz>
 80114c0:	4606      	mov	r6, r0
 80114c2:	f7ef f82f 	bl	8000524 <__aeabi_i2d>
 80114c6:	4602      	mov	r2, r0
 80114c8:	460b      	mov	r3, r1
 80114ca:	4640      	mov	r0, r8
 80114cc:	4649      	mov	r1, r9
 80114ce:	f7ee fedb 	bl	8000288 <__aeabi_dsub>
 80114d2:	3630      	adds	r6, #48	; 0x30
 80114d4:	f805 6b01 	strb.w	r6, [r5], #1
 80114d8:	4652      	mov	r2, sl
 80114da:	465b      	mov	r3, fp
 80114dc:	4680      	mov	r8, r0
 80114de:	4689      	mov	r9, r1
 80114e0:	f7ef fafc 	bl	8000adc <__aeabi_dcmplt>
 80114e4:	2800      	cmp	r0, #0
 80114e6:	d163      	bne.n	80115b0 <_dtoa_r+0x608>
 80114e8:	4642      	mov	r2, r8
 80114ea:	464b      	mov	r3, r9
 80114ec:	4936      	ldr	r1, [pc, #216]	; (80115c8 <_dtoa_r+0x620>)
 80114ee:	2000      	movs	r0, #0
 80114f0:	f7ee feca 	bl	8000288 <__aeabi_dsub>
 80114f4:	4652      	mov	r2, sl
 80114f6:	465b      	mov	r3, fp
 80114f8:	f7ef faf0 	bl	8000adc <__aeabi_dcmplt>
 80114fc:	2800      	cmp	r0, #0
 80114fe:	f040 80b5 	bne.w	801166c <_dtoa_r+0x6c4>
 8011502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011504:	429d      	cmp	r5, r3
 8011506:	d081      	beq.n	801140c <_dtoa_r+0x464>
 8011508:	4b30      	ldr	r3, [pc, #192]	; (80115cc <_dtoa_r+0x624>)
 801150a:	2200      	movs	r2, #0
 801150c:	4650      	mov	r0, sl
 801150e:	4659      	mov	r1, fp
 8011510:	f7ef f872 	bl	80005f8 <__aeabi_dmul>
 8011514:	4b2d      	ldr	r3, [pc, #180]	; (80115cc <_dtoa_r+0x624>)
 8011516:	4682      	mov	sl, r0
 8011518:	468b      	mov	fp, r1
 801151a:	4640      	mov	r0, r8
 801151c:	4649      	mov	r1, r9
 801151e:	2200      	movs	r2, #0
 8011520:	f7ef f86a 	bl	80005f8 <__aeabi_dmul>
 8011524:	4680      	mov	r8, r0
 8011526:	4689      	mov	r9, r1
 8011528:	e7c6      	b.n	80114b8 <_dtoa_r+0x510>
 801152a:	4650      	mov	r0, sl
 801152c:	4659      	mov	r1, fp
 801152e:	f7ef f863 	bl	80005f8 <__aeabi_dmul>
 8011532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011534:	9d01      	ldr	r5, [sp, #4]
 8011536:	930f      	str	r3, [sp, #60]	; 0x3c
 8011538:	4682      	mov	sl, r0
 801153a:	468b      	mov	fp, r1
 801153c:	4649      	mov	r1, r9
 801153e:	4640      	mov	r0, r8
 8011540:	f7ef fb0a 	bl	8000b58 <__aeabi_d2iz>
 8011544:	4606      	mov	r6, r0
 8011546:	f7ee ffed 	bl	8000524 <__aeabi_i2d>
 801154a:	3630      	adds	r6, #48	; 0x30
 801154c:	4602      	mov	r2, r0
 801154e:	460b      	mov	r3, r1
 8011550:	4640      	mov	r0, r8
 8011552:	4649      	mov	r1, r9
 8011554:	f7ee fe98 	bl	8000288 <__aeabi_dsub>
 8011558:	f805 6b01 	strb.w	r6, [r5], #1
 801155c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801155e:	429d      	cmp	r5, r3
 8011560:	4680      	mov	r8, r0
 8011562:	4689      	mov	r9, r1
 8011564:	f04f 0200 	mov.w	r2, #0
 8011568:	d124      	bne.n	80115b4 <_dtoa_r+0x60c>
 801156a:	4b1b      	ldr	r3, [pc, #108]	; (80115d8 <_dtoa_r+0x630>)
 801156c:	4650      	mov	r0, sl
 801156e:	4659      	mov	r1, fp
 8011570:	f7ee fe8c 	bl	800028c <__adddf3>
 8011574:	4602      	mov	r2, r0
 8011576:	460b      	mov	r3, r1
 8011578:	4640      	mov	r0, r8
 801157a:	4649      	mov	r1, r9
 801157c:	f7ef facc 	bl	8000b18 <__aeabi_dcmpgt>
 8011580:	2800      	cmp	r0, #0
 8011582:	d173      	bne.n	801166c <_dtoa_r+0x6c4>
 8011584:	4652      	mov	r2, sl
 8011586:	465b      	mov	r3, fp
 8011588:	4913      	ldr	r1, [pc, #76]	; (80115d8 <_dtoa_r+0x630>)
 801158a:	2000      	movs	r0, #0
 801158c:	f7ee fe7c 	bl	8000288 <__aeabi_dsub>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	4640      	mov	r0, r8
 8011596:	4649      	mov	r1, r9
 8011598:	f7ef faa0 	bl	8000adc <__aeabi_dcmplt>
 801159c:	2800      	cmp	r0, #0
 801159e:	f43f af35 	beq.w	801140c <_dtoa_r+0x464>
 80115a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80115a4:	1e6b      	subs	r3, r5, #1
 80115a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80115a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80115ac:	2b30      	cmp	r3, #48	; 0x30
 80115ae:	d0f8      	beq.n	80115a2 <_dtoa_r+0x5fa>
 80115b0:	9700      	str	r7, [sp, #0]
 80115b2:	e049      	b.n	8011648 <_dtoa_r+0x6a0>
 80115b4:	4b05      	ldr	r3, [pc, #20]	; (80115cc <_dtoa_r+0x624>)
 80115b6:	f7ef f81f 	bl	80005f8 <__aeabi_dmul>
 80115ba:	4680      	mov	r8, r0
 80115bc:	4689      	mov	r9, r1
 80115be:	e7bd      	b.n	801153c <_dtoa_r+0x594>
 80115c0:	08014b38 	.word	0x08014b38
 80115c4:	08014b10 	.word	0x08014b10
 80115c8:	3ff00000 	.word	0x3ff00000
 80115cc:	40240000 	.word	0x40240000
 80115d0:	401c0000 	.word	0x401c0000
 80115d4:	40140000 	.word	0x40140000
 80115d8:	3fe00000 	.word	0x3fe00000
 80115dc:	9d01      	ldr	r5, [sp, #4]
 80115de:	4656      	mov	r6, sl
 80115e0:	465f      	mov	r7, fp
 80115e2:	4642      	mov	r2, r8
 80115e4:	464b      	mov	r3, r9
 80115e6:	4630      	mov	r0, r6
 80115e8:	4639      	mov	r1, r7
 80115ea:	f7ef f92f 	bl	800084c <__aeabi_ddiv>
 80115ee:	f7ef fab3 	bl	8000b58 <__aeabi_d2iz>
 80115f2:	4682      	mov	sl, r0
 80115f4:	f7ee ff96 	bl	8000524 <__aeabi_i2d>
 80115f8:	4642      	mov	r2, r8
 80115fa:	464b      	mov	r3, r9
 80115fc:	f7ee fffc 	bl	80005f8 <__aeabi_dmul>
 8011600:	4602      	mov	r2, r0
 8011602:	460b      	mov	r3, r1
 8011604:	4630      	mov	r0, r6
 8011606:	4639      	mov	r1, r7
 8011608:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801160c:	f7ee fe3c 	bl	8000288 <__aeabi_dsub>
 8011610:	f805 6b01 	strb.w	r6, [r5], #1
 8011614:	9e01      	ldr	r6, [sp, #4]
 8011616:	9f03      	ldr	r7, [sp, #12]
 8011618:	1bae      	subs	r6, r5, r6
 801161a:	42b7      	cmp	r7, r6
 801161c:	4602      	mov	r2, r0
 801161e:	460b      	mov	r3, r1
 8011620:	d135      	bne.n	801168e <_dtoa_r+0x6e6>
 8011622:	f7ee fe33 	bl	800028c <__adddf3>
 8011626:	4642      	mov	r2, r8
 8011628:	464b      	mov	r3, r9
 801162a:	4606      	mov	r6, r0
 801162c:	460f      	mov	r7, r1
 801162e:	f7ef fa73 	bl	8000b18 <__aeabi_dcmpgt>
 8011632:	b9d0      	cbnz	r0, 801166a <_dtoa_r+0x6c2>
 8011634:	4642      	mov	r2, r8
 8011636:	464b      	mov	r3, r9
 8011638:	4630      	mov	r0, r6
 801163a:	4639      	mov	r1, r7
 801163c:	f7ef fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 8011640:	b110      	cbz	r0, 8011648 <_dtoa_r+0x6a0>
 8011642:	f01a 0f01 	tst.w	sl, #1
 8011646:	d110      	bne.n	801166a <_dtoa_r+0x6c2>
 8011648:	4620      	mov	r0, r4
 801164a:	ee18 1a10 	vmov	r1, s16
 801164e:	f000 fd37 	bl	80120c0 <_Bfree>
 8011652:	2300      	movs	r3, #0
 8011654:	9800      	ldr	r0, [sp, #0]
 8011656:	702b      	strb	r3, [r5, #0]
 8011658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801165a:	3001      	adds	r0, #1
 801165c:	6018      	str	r0, [r3, #0]
 801165e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011660:	2b00      	cmp	r3, #0
 8011662:	f43f acf1 	beq.w	8011048 <_dtoa_r+0xa0>
 8011666:	601d      	str	r5, [r3, #0]
 8011668:	e4ee      	b.n	8011048 <_dtoa_r+0xa0>
 801166a:	9f00      	ldr	r7, [sp, #0]
 801166c:	462b      	mov	r3, r5
 801166e:	461d      	mov	r5, r3
 8011670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011674:	2a39      	cmp	r2, #57	; 0x39
 8011676:	d106      	bne.n	8011686 <_dtoa_r+0x6de>
 8011678:	9a01      	ldr	r2, [sp, #4]
 801167a:	429a      	cmp	r2, r3
 801167c:	d1f7      	bne.n	801166e <_dtoa_r+0x6c6>
 801167e:	9901      	ldr	r1, [sp, #4]
 8011680:	2230      	movs	r2, #48	; 0x30
 8011682:	3701      	adds	r7, #1
 8011684:	700a      	strb	r2, [r1, #0]
 8011686:	781a      	ldrb	r2, [r3, #0]
 8011688:	3201      	adds	r2, #1
 801168a:	701a      	strb	r2, [r3, #0]
 801168c:	e790      	b.n	80115b0 <_dtoa_r+0x608>
 801168e:	4ba6      	ldr	r3, [pc, #664]	; (8011928 <_dtoa_r+0x980>)
 8011690:	2200      	movs	r2, #0
 8011692:	f7ee ffb1 	bl	80005f8 <__aeabi_dmul>
 8011696:	2200      	movs	r2, #0
 8011698:	2300      	movs	r3, #0
 801169a:	4606      	mov	r6, r0
 801169c:	460f      	mov	r7, r1
 801169e:	f7ef fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80116a2:	2800      	cmp	r0, #0
 80116a4:	d09d      	beq.n	80115e2 <_dtoa_r+0x63a>
 80116a6:	e7cf      	b.n	8011648 <_dtoa_r+0x6a0>
 80116a8:	9a08      	ldr	r2, [sp, #32]
 80116aa:	2a00      	cmp	r2, #0
 80116ac:	f000 80d7 	beq.w	801185e <_dtoa_r+0x8b6>
 80116b0:	9a06      	ldr	r2, [sp, #24]
 80116b2:	2a01      	cmp	r2, #1
 80116b4:	f300 80ba 	bgt.w	801182c <_dtoa_r+0x884>
 80116b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116ba:	2a00      	cmp	r2, #0
 80116bc:	f000 80b2 	beq.w	8011824 <_dtoa_r+0x87c>
 80116c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80116c4:	9e07      	ldr	r6, [sp, #28]
 80116c6:	9d04      	ldr	r5, [sp, #16]
 80116c8:	9a04      	ldr	r2, [sp, #16]
 80116ca:	441a      	add	r2, r3
 80116cc:	9204      	str	r2, [sp, #16]
 80116ce:	9a05      	ldr	r2, [sp, #20]
 80116d0:	2101      	movs	r1, #1
 80116d2:	441a      	add	r2, r3
 80116d4:	4620      	mov	r0, r4
 80116d6:	9205      	str	r2, [sp, #20]
 80116d8:	f000 fdaa 	bl	8012230 <__i2b>
 80116dc:	4607      	mov	r7, r0
 80116de:	2d00      	cmp	r5, #0
 80116e0:	dd0c      	ble.n	80116fc <_dtoa_r+0x754>
 80116e2:	9b05      	ldr	r3, [sp, #20]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	dd09      	ble.n	80116fc <_dtoa_r+0x754>
 80116e8:	42ab      	cmp	r3, r5
 80116ea:	9a04      	ldr	r2, [sp, #16]
 80116ec:	bfa8      	it	ge
 80116ee:	462b      	movge	r3, r5
 80116f0:	1ad2      	subs	r2, r2, r3
 80116f2:	9204      	str	r2, [sp, #16]
 80116f4:	9a05      	ldr	r2, [sp, #20]
 80116f6:	1aed      	subs	r5, r5, r3
 80116f8:	1ad3      	subs	r3, r2, r3
 80116fa:	9305      	str	r3, [sp, #20]
 80116fc:	9b07      	ldr	r3, [sp, #28]
 80116fe:	b31b      	cbz	r3, 8011748 <_dtoa_r+0x7a0>
 8011700:	9b08      	ldr	r3, [sp, #32]
 8011702:	2b00      	cmp	r3, #0
 8011704:	f000 80af 	beq.w	8011866 <_dtoa_r+0x8be>
 8011708:	2e00      	cmp	r6, #0
 801170a:	dd13      	ble.n	8011734 <_dtoa_r+0x78c>
 801170c:	4639      	mov	r1, r7
 801170e:	4632      	mov	r2, r6
 8011710:	4620      	mov	r0, r4
 8011712:	f000 fe4d 	bl	80123b0 <__pow5mult>
 8011716:	ee18 2a10 	vmov	r2, s16
 801171a:	4601      	mov	r1, r0
 801171c:	4607      	mov	r7, r0
 801171e:	4620      	mov	r0, r4
 8011720:	f000 fd9c 	bl	801225c <__multiply>
 8011724:	ee18 1a10 	vmov	r1, s16
 8011728:	4680      	mov	r8, r0
 801172a:	4620      	mov	r0, r4
 801172c:	f000 fcc8 	bl	80120c0 <_Bfree>
 8011730:	ee08 8a10 	vmov	s16, r8
 8011734:	9b07      	ldr	r3, [sp, #28]
 8011736:	1b9a      	subs	r2, r3, r6
 8011738:	d006      	beq.n	8011748 <_dtoa_r+0x7a0>
 801173a:	ee18 1a10 	vmov	r1, s16
 801173e:	4620      	mov	r0, r4
 8011740:	f000 fe36 	bl	80123b0 <__pow5mult>
 8011744:	ee08 0a10 	vmov	s16, r0
 8011748:	2101      	movs	r1, #1
 801174a:	4620      	mov	r0, r4
 801174c:	f000 fd70 	bl	8012230 <__i2b>
 8011750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011752:	2b00      	cmp	r3, #0
 8011754:	4606      	mov	r6, r0
 8011756:	f340 8088 	ble.w	801186a <_dtoa_r+0x8c2>
 801175a:	461a      	mov	r2, r3
 801175c:	4601      	mov	r1, r0
 801175e:	4620      	mov	r0, r4
 8011760:	f000 fe26 	bl	80123b0 <__pow5mult>
 8011764:	9b06      	ldr	r3, [sp, #24]
 8011766:	2b01      	cmp	r3, #1
 8011768:	4606      	mov	r6, r0
 801176a:	f340 8081 	ble.w	8011870 <_dtoa_r+0x8c8>
 801176e:	f04f 0800 	mov.w	r8, #0
 8011772:	6933      	ldr	r3, [r6, #16]
 8011774:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011778:	6918      	ldr	r0, [r3, #16]
 801177a:	f000 fd09 	bl	8012190 <__hi0bits>
 801177e:	f1c0 0020 	rsb	r0, r0, #32
 8011782:	9b05      	ldr	r3, [sp, #20]
 8011784:	4418      	add	r0, r3
 8011786:	f010 001f 	ands.w	r0, r0, #31
 801178a:	f000 8092 	beq.w	80118b2 <_dtoa_r+0x90a>
 801178e:	f1c0 0320 	rsb	r3, r0, #32
 8011792:	2b04      	cmp	r3, #4
 8011794:	f340 808a 	ble.w	80118ac <_dtoa_r+0x904>
 8011798:	f1c0 001c 	rsb	r0, r0, #28
 801179c:	9b04      	ldr	r3, [sp, #16]
 801179e:	4403      	add	r3, r0
 80117a0:	9304      	str	r3, [sp, #16]
 80117a2:	9b05      	ldr	r3, [sp, #20]
 80117a4:	4403      	add	r3, r0
 80117a6:	4405      	add	r5, r0
 80117a8:	9305      	str	r3, [sp, #20]
 80117aa:	9b04      	ldr	r3, [sp, #16]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	dd07      	ble.n	80117c0 <_dtoa_r+0x818>
 80117b0:	ee18 1a10 	vmov	r1, s16
 80117b4:	461a      	mov	r2, r3
 80117b6:	4620      	mov	r0, r4
 80117b8:	f000 fe54 	bl	8012464 <__lshift>
 80117bc:	ee08 0a10 	vmov	s16, r0
 80117c0:	9b05      	ldr	r3, [sp, #20]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	dd05      	ble.n	80117d2 <_dtoa_r+0x82a>
 80117c6:	4631      	mov	r1, r6
 80117c8:	461a      	mov	r2, r3
 80117ca:	4620      	mov	r0, r4
 80117cc:	f000 fe4a 	bl	8012464 <__lshift>
 80117d0:	4606      	mov	r6, r0
 80117d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d06e      	beq.n	80118b6 <_dtoa_r+0x90e>
 80117d8:	ee18 0a10 	vmov	r0, s16
 80117dc:	4631      	mov	r1, r6
 80117de:	f000 feb1 	bl	8012544 <__mcmp>
 80117e2:	2800      	cmp	r0, #0
 80117e4:	da67      	bge.n	80118b6 <_dtoa_r+0x90e>
 80117e6:	9b00      	ldr	r3, [sp, #0]
 80117e8:	3b01      	subs	r3, #1
 80117ea:	ee18 1a10 	vmov	r1, s16
 80117ee:	9300      	str	r3, [sp, #0]
 80117f0:	220a      	movs	r2, #10
 80117f2:	2300      	movs	r3, #0
 80117f4:	4620      	mov	r0, r4
 80117f6:	f000 fc85 	bl	8012104 <__multadd>
 80117fa:	9b08      	ldr	r3, [sp, #32]
 80117fc:	ee08 0a10 	vmov	s16, r0
 8011800:	2b00      	cmp	r3, #0
 8011802:	f000 81b1 	beq.w	8011b68 <_dtoa_r+0xbc0>
 8011806:	2300      	movs	r3, #0
 8011808:	4639      	mov	r1, r7
 801180a:	220a      	movs	r2, #10
 801180c:	4620      	mov	r0, r4
 801180e:	f000 fc79 	bl	8012104 <__multadd>
 8011812:	9b02      	ldr	r3, [sp, #8]
 8011814:	2b00      	cmp	r3, #0
 8011816:	4607      	mov	r7, r0
 8011818:	f300 808e 	bgt.w	8011938 <_dtoa_r+0x990>
 801181c:	9b06      	ldr	r3, [sp, #24]
 801181e:	2b02      	cmp	r3, #2
 8011820:	dc51      	bgt.n	80118c6 <_dtoa_r+0x91e>
 8011822:	e089      	b.n	8011938 <_dtoa_r+0x990>
 8011824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801182a:	e74b      	b.n	80116c4 <_dtoa_r+0x71c>
 801182c:	9b03      	ldr	r3, [sp, #12]
 801182e:	1e5e      	subs	r6, r3, #1
 8011830:	9b07      	ldr	r3, [sp, #28]
 8011832:	42b3      	cmp	r3, r6
 8011834:	bfbf      	itttt	lt
 8011836:	9b07      	ldrlt	r3, [sp, #28]
 8011838:	9607      	strlt	r6, [sp, #28]
 801183a:	1af2      	sublt	r2, r6, r3
 801183c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801183e:	bfb6      	itet	lt
 8011840:	189b      	addlt	r3, r3, r2
 8011842:	1b9e      	subge	r6, r3, r6
 8011844:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011846:	9b03      	ldr	r3, [sp, #12]
 8011848:	bfb8      	it	lt
 801184a:	2600      	movlt	r6, #0
 801184c:	2b00      	cmp	r3, #0
 801184e:	bfb7      	itett	lt
 8011850:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011854:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011858:	1a9d      	sublt	r5, r3, r2
 801185a:	2300      	movlt	r3, #0
 801185c:	e734      	b.n	80116c8 <_dtoa_r+0x720>
 801185e:	9e07      	ldr	r6, [sp, #28]
 8011860:	9d04      	ldr	r5, [sp, #16]
 8011862:	9f08      	ldr	r7, [sp, #32]
 8011864:	e73b      	b.n	80116de <_dtoa_r+0x736>
 8011866:	9a07      	ldr	r2, [sp, #28]
 8011868:	e767      	b.n	801173a <_dtoa_r+0x792>
 801186a:	9b06      	ldr	r3, [sp, #24]
 801186c:	2b01      	cmp	r3, #1
 801186e:	dc18      	bgt.n	80118a2 <_dtoa_r+0x8fa>
 8011870:	f1ba 0f00 	cmp.w	sl, #0
 8011874:	d115      	bne.n	80118a2 <_dtoa_r+0x8fa>
 8011876:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801187a:	b993      	cbnz	r3, 80118a2 <_dtoa_r+0x8fa>
 801187c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011880:	0d1b      	lsrs	r3, r3, #20
 8011882:	051b      	lsls	r3, r3, #20
 8011884:	b183      	cbz	r3, 80118a8 <_dtoa_r+0x900>
 8011886:	9b04      	ldr	r3, [sp, #16]
 8011888:	3301      	adds	r3, #1
 801188a:	9304      	str	r3, [sp, #16]
 801188c:	9b05      	ldr	r3, [sp, #20]
 801188e:	3301      	adds	r3, #1
 8011890:	9305      	str	r3, [sp, #20]
 8011892:	f04f 0801 	mov.w	r8, #1
 8011896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011898:	2b00      	cmp	r3, #0
 801189a:	f47f af6a 	bne.w	8011772 <_dtoa_r+0x7ca>
 801189e:	2001      	movs	r0, #1
 80118a0:	e76f      	b.n	8011782 <_dtoa_r+0x7da>
 80118a2:	f04f 0800 	mov.w	r8, #0
 80118a6:	e7f6      	b.n	8011896 <_dtoa_r+0x8ee>
 80118a8:	4698      	mov	r8, r3
 80118aa:	e7f4      	b.n	8011896 <_dtoa_r+0x8ee>
 80118ac:	f43f af7d 	beq.w	80117aa <_dtoa_r+0x802>
 80118b0:	4618      	mov	r0, r3
 80118b2:	301c      	adds	r0, #28
 80118b4:	e772      	b.n	801179c <_dtoa_r+0x7f4>
 80118b6:	9b03      	ldr	r3, [sp, #12]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	dc37      	bgt.n	801192c <_dtoa_r+0x984>
 80118bc:	9b06      	ldr	r3, [sp, #24]
 80118be:	2b02      	cmp	r3, #2
 80118c0:	dd34      	ble.n	801192c <_dtoa_r+0x984>
 80118c2:	9b03      	ldr	r3, [sp, #12]
 80118c4:	9302      	str	r3, [sp, #8]
 80118c6:	9b02      	ldr	r3, [sp, #8]
 80118c8:	b96b      	cbnz	r3, 80118e6 <_dtoa_r+0x93e>
 80118ca:	4631      	mov	r1, r6
 80118cc:	2205      	movs	r2, #5
 80118ce:	4620      	mov	r0, r4
 80118d0:	f000 fc18 	bl	8012104 <__multadd>
 80118d4:	4601      	mov	r1, r0
 80118d6:	4606      	mov	r6, r0
 80118d8:	ee18 0a10 	vmov	r0, s16
 80118dc:	f000 fe32 	bl	8012544 <__mcmp>
 80118e0:	2800      	cmp	r0, #0
 80118e2:	f73f adbb 	bgt.w	801145c <_dtoa_r+0x4b4>
 80118e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118e8:	9d01      	ldr	r5, [sp, #4]
 80118ea:	43db      	mvns	r3, r3
 80118ec:	9300      	str	r3, [sp, #0]
 80118ee:	f04f 0800 	mov.w	r8, #0
 80118f2:	4631      	mov	r1, r6
 80118f4:	4620      	mov	r0, r4
 80118f6:	f000 fbe3 	bl	80120c0 <_Bfree>
 80118fa:	2f00      	cmp	r7, #0
 80118fc:	f43f aea4 	beq.w	8011648 <_dtoa_r+0x6a0>
 8011900:	f1b8 0f00 	cmp.w	r8, #0
 8011904:	d005      	beq.n	8011912 <_dtoa_r+0x96a>
 8011906:	45b8      	cmp	r8, r7
 8011908:	d003      	beq.n	8011912 <_dtoa_r+0x96a>
 801190a:	4641      	mov	r1, r8
 801190c:	4620      	mov	r0, r4
 801190e:	f000 fbd7 	bl	80120c0 <_Bfree>
 8011912:	4639      	mov	r1, r7
 8011914:	4620      	mov	r0, r4
 8011916:	f000 fbd3 	bl	80120c0 <_Bfree>
 801191a:	e695      	b.n	8011648 <_dtoa_r+0x6a0>
 801191c:	2600      	movs	r6, #0
 801191e:	4637      	mov	r7, r6
 8011920:	e7e1      	b.n	80118e6 <_dtoa_r+0x93e>
 8011922:	9700      	str	r7, [sp, #0]
 8011924:	4637      	mov	r7, r6
 8011926:	e599      	b.n	801145c <_dtoa_r+0x4b4>
 8011928:	40240000 	.word	0x40240000
 801192c:	9b08      	ldr	r3, [sp, #32]
 801192e:	2b00      	cmp	r3, #0
 8011930:	f000 80ca 	beq.w	8011ac8 <_dtoa_r+0xb20>
 8011934:	9b03      	ldr	r3, [sp, #12]
 8011936:	9302      	str	r3, [sp, #8]
 8011938:	2d00      	cmp	r5, #0
 801193a:	dd05      	ble.n	8011948 <_dtoa_r+0x9a0>
 801193c:	4639      	mov	r1, r7
 801193e:	462a      	mov	r2, r5
 8011940:	4620      	mov	r0, r4
 8011942:	f000 fd8f 	bl	8012464 <__lshift>
 8011946:	4607      	mov	r7, r0
 8011948:	f1b8 0f00 	cmp.w	r8, #0
 801194c:	d05b      	beq.n	8011a06 <_dtoa_r+0xa5e>
 801194e:	6879      	ldr	r1, [r7, #4]
 8011950:	4620      	mov	r0, r4
 8011952:	f000 fb75 	bl	8012040 <_Balloc>
 8011956:	4605      	mov	r5, r0
 8011958:	b928      	cbnz	r0, 8011966 <_dtoa_r+0x9be>
 801195a:	4b87      	ldr	r3, [pc, #540]	; (8011b78 <_dtoa_r+0xbd0>)
 801195c:	4602      	mov	r2, r0
 801195e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011962:	f7ff bb3b 	b.w	8010fdc <_dtoa_r+0x34>
 8011966:	693a      	ldr	r2, [r7, #16]
 8011968:	3202      	adds	r2, #2
 801196a:	0092      	lsls	r2, r2, #2
 801196c:	f107 010c 	add.w	r1, r7, #12
 8011970:	300c      	adds	r0, #12
 8011972:	f7fe fb45 	bl	8010000 <memcpy>
 8011976:	2201      	movs	r2, #1
 8011978:	4629      	mov	r1, r5
 801197a:	4620      	mov	r0, r4
 801197c:	f000 fd72 	bl	8012464 <__lshift>
 8011980:	9b01      	ldr	r3, [sp, #4]
 8011982:	f103 0901 	add.w	r9, r3, #1
 8011986:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801198a:	4413      	add	r3, r2
 801198c:	9305      	str	r3, [sp, #20]
 801198e:	f00a 0301 	and.w	r3, sl, #1
 8011992:	46b8      	mov	r8, r7
 8011994:	9304      	str	r3, [sp, #16]
 8011996:	4607      	mov	r7, r0
 8011998:	4631      	mov	r1, r6
 801199a:	ee18 0a10 	vmov	r0, s16
 801199e:	f7ff fa75 	bl	8010e8c <quorem>
 80119a2:	4641      	mov	r1, r8
 80119a4:	9002      	str	r0, [sp, #8]
 80119a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80119aa:	ee18 0a10 	vmov	r0, s16
 80119ae:	f000 fdc9 	bl	8012544 <__mcmp>
 80119b2:	463a      	mov	r2, r7
 80119b4:	9003      	str	r0, [sp, #12]
 80119b6:	4631      	mov	r1, r6
 80119b8:	4620      	mov	r0, r4
 80119ba:	f000 fddf 	bl	801257c <__mdiff>
 80119be:	68c2      	ldr	r2, [r0, #12]
 80119c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80119c4:	4605      	mov	r5, r0
 80119c6:	bb02      	cbnz	r2, 8011a0a <_dtoa_r+0xa62>
 80119c8:	4601      	mov	r1, r0
 80119ca:	ee18 0a10 	vmov	r0, s16
 80119ce:	f000 fdb9 	bl	8012544 <__mcmp>
 80119d2:	4602      	mov	r2, r0
 80119d4:	4629      	mov	r1, r5
 80119d6:	4620      	mov	r0, r4
 80119d8:	9207      	str	r2, [sp, #28]
 80119da:	f000 fb71 	bl	80120c0 <_Bfree>
 80119de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80119e2:	ea43 0102 	orr.w	r1, r3, r2
 80119e6:	9b04      	ldr	r3, [sp, #16]
 80119e8:	430b      	orrs	r3, r1
 80119ea:	464d      	mov	r5, r9
 80119ec:	d10f      	bne.n	8011a0e <_dtoa_r+0xa66>
 80119ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80119f2:	d02a      	beq.n	8011a4a <_dtoa_r+0xaa2>
 80119f4:	9b03      	ldr	r3, [sp, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	dd02      	ble.n	8011a00 <_dtoa_r+0xa58>
 80119fa:	9b02      	ldr	r3, [sp, #8]
 80119fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011a00:	f88b a000 	strb.w	sl, [fp]
 8011a04:	e775      	b.n	80118f2 <_dtoa_r+0x94a>
 8011a06:	4638      	mov	r0, r7
 8011a08:	e7ba      	b.n	8011980 <_dtoa_r+0x9d8>
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	e7e2      	b.n	80119d4 <_dtoa_r+0xa2c>
 8011a0e:	9b03      	ldr	r3, [sp, #12]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	db04      	blt.n	8011a1e <_dtoa_r+0xa76>
 8011a14:	9906      	ldr	r1, [sp, #24]
 8011a16:	430b      	orrs	r3, r1
 8011a18:	9904      	ldr	r1, [sp, #16]
 8011a1a:	430b      	orrs	r3, r1
 8011a1c:	d122      	bne.n	8011a64 <_dtoa_r+0xabc>
 8011a1e:	2a00      	cmp	r2, #0
 8011a20:	ddee      	ble.n	8011a00 <_dtoa_r+0xa58>
 8011a22:	ee18 1a10 	vmov	r1, s16
 8011a26:	2201      	movs	r2, #1
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f000 fd1b 	bl	8012464 <__lshift>
 8011a2e:	4631      	mov	r1, r6
 8011a30:	ee08 0a10 	vmov	s16, r0
 8011a34:	f000 fd86 	bl	8012544 <__mcmp>
 8011a38:	2800      	cmp	r0, #0
 8011a3a:	dc03      	bgt.n	8011a44 <_dtoa_r+0xa9c>
 8011a3c:	d1e0      	bne.n	8011a00 <_dtoa_r+0xa58>
 8011a3e:	f01a 0f01 	tst.w	sl, #1
 8011a42:	d0dd      	beq.n	8011a00 <_dtoa_r+0xa58>
 8011a44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011a48:	d1d7      	bne.n	80119fa <_dtoa_r+0xa52>
 8011a4a:	2339      	movs	r3, #57	; 0x39
 8011a4c:	f88b 3000 	strb.w	r3, [fp]
 8011a50:	462b      	mov	r3, r5
 8011a52:	461d      	mov	r5, r3
 8011a54:	3b01      	subs	r3, #1
 8011a56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011a5a:	2a39      	cmp	r2, #57	; 0x39
 8011a5c:	d071      	beq.n	8011b42 <_dtoa_r+0xb9a>
 8011a5e:	3201      	adds	r2, #1
 8011a60:	701a      	strb	r2, [r3, #0]
 8011a62:	e746      	b.n	80118f2 <_dtoa_r+0x94a>
 8011a64:	2a00      	cmp	r2, #0
 8011a66:	dd07      	ble.n	8011a78 <_dtoa_r+0xad0>
 8011a68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011a6c:	d0ed      	beq.n	8011a4a <_dtoa_r+0xaa2>
 8011a6e:	f10a 0301 	add.w	r3, sl, #1
 8011a72:	f88b 3000 	strb.w	r3, [fp]
 8011a76:	e73c      	b.n	80118f2 <_dtoa_r+0x94a>
 8011a78:	9b05      	ldr	r3, [sp, #20]
 8011a7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011a7e:	4599      	cmp	r9, r3
 8011a80:	d047      	beq.n	8011b12 <_dtoa_r+0xb6a>
 8011a82:	ee18 1a10 	vmov	r1, s16
 8011a86:	2300      	movs	r3, #0
 8011a88:	220a      	movs	r2, #10
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	f000 fb3a 	bl	8012104 <__multadd>
 8011a90:	45b8      	cmp	r8, r7
 8011a92:	ee08 0a10 	vmov	s16, r0
 8011a96:	f04f 0300 	mov.w	r3, #0
 8011a9a:	f04f 020a 	mov.w	r2, #10
 8011a9e:	4641      	mov	r1, r8
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	d106      	bne.n	8011ab2 <_dtoa_r+0xb0a>
 8011aa4:	f000 fb2e 	bl	8012104 <__multadd>
 8011aa8:	4680      	mov	r8, r0
 8011aaa:	4607      	mov	r7, r0
 8011aac:	f109 0901 	add.w	r9, r9, #1
 8011ab0:	e772      	b.n	8011998 <_dtoa_r+0x9f0>
 8011ab2:	f000 fb27 	bl	8012104 <__multadd>
 8011ab6:	4639      	mov	r1, r7
 8011ab8:	4680      	mov	r8, r0
 8011aba:	2300      	movs	r3, #0
 8011abc:	220a      	movs	r2, #10
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f000 fb20 	bl	8012104 <__multadd>
 8011ac4:	4607      	mov	r7, r0
 8011ac6:	e7f1      	b.n	8011aac <_dtoa_r+0xb04>
 8011ac8:	9b03      	ldr	r3, [sp, #12]
 8011aca:	9302      	str	r3, [sp, #8]
 8011acc:	9d01      	ldr	r5, [sp, #4]
 8011ace:	ee18 0a10 	vmov	r0, s16
 8011ad2:	4631      	mov	r1, r6
 8011ad4:	f7ff f9da 	bl	8010e8c <quorem>
 8011ad8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011adc:	9b01      	ldr	r3, [sp, #4]
 8011ade:	f805 ab01 	strb.w	sl, [r5], #1
 8011ae2:	1aea      	subs	r2, r5, r3
 8011ae4:	9b02      	ldr	r3, [sp, #8]
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	dd09      	ble.n	8011afe <_dtoa_r+0xb56>
 8011aea:	ee18 1a10 	vmov	r1, s16
 8011aee:	2300      	movs	r3, #0
 8011af0:	220a      	movs	r2, #10
 8011af2:	4620      	mov	r0, r4
 8011af4:	f000 fb06 	bl	8012104 <__multadd>
 8011af8:	ee08 0a10 	vmov	s16, r0
 8011afc:	e7e7      	b.n	8011ace <_dtoa_r+0xb26>
 8011afe:	9b02      	ldr	r3, [sp, #8]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	bfc8      	it	gt
 8011b04:	461d      	movgt	r5, r3
 8011b06:	9b01      	ldr	r3, [sp, #4]
 8011b08:	bfd8      	it	le
 8011b0a:	2501      	movle	r5, #1
 8011b0c:	441d      	add	r5, r3
 8011b0e:	f04f 0800 	mov.w	r8, #0
 8011b12:	ee18 1a10 	vmov	r1, s16
 8011b16:	2201      	movs	r2, #1
 8011b18:	4620      	mov	r0, r4
 8011b1a:	f000 fca3 	bl	8012464 <__lshift>
 8011b1e:	4631      	mov	r1, r6
 8011b20:	ee08 0a10 	vmov	s16, r0
 8011b24:	f000 fd0e 	bl	8012544 <__mcmp>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	dc91      	bgt.n	8011a50 <_dtoa_r+0xaa8>
 8011b2c:	d102      	bne.n	8011b34 <_dtoa_r+0xb8c>
 8011b2e:	f01a 0f01 	tst.w	sl, #1
 8011b32:	d18d      	bne.n	8011a50 <_dtoa_r+0xaa8>
 8011b34:	462b      	mov	r3, r5
 8011b36:	461d      	mov	r5, r3
 8011b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b3c:	2a30      	cmp	r2, #48	; 0x30
 8011b3e:	d0fa      	beq.n	8011b36 <_dtoa_r+0xb8e>
 8011b40:	e6d7      	b.n	80118f2 <_dtoa_r+0x94a>
 8011b42:	9a01      	ldr	r2, [sp, #4]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d184      	bne.n	8011a52 <_dtoa_r+0xaaa>
 8011b48:	9b00      	ldr	r3, [sp, #0]
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	9300      	str	r3, [sp, #0]
 8011b4e:	2331      	movs	r3, #49	; 0x31
 8011b50:	7013      	strb	r3, [r2, #0]
 8011b52:	e6ce      	b.n	80118f2 <_dtoa_r+0x94a>
 8011b54:	4b09      	ldr	r3, [pc, #36]	; (8011b7c <_dtoa_r+0xbd4>)
 8011b56:	f7ff ba95 	b.w	8011084 <_dtoa_r+0xdc>
 8011b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	f47f aa6e 	bne.w	801103e <_dtoa_r+0x96>
 8011b62:	4b07      	ldr	r3, [pc, #28]	; (8011b80 <_dtoa_r+0xbd8>)
 8011b64:	f7ff ba8e 	b.w	8011084 <_dtoa_r+0xdc>
 8011b68:	9b02      	ldr	r3, [sp, #8]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	dcae      	bgt.n	8011acc <_dtoa_r+0xb24>
 8011b6e:	9b06      	ldr	r3, [sp, #24]
 8011b70:	2b02      	cmp	r3, #2
 8011b72:	f73f aea8 	bgt.w	80118c6 <_dtoa_r+0x91e>
 8011b76:	e7a9      	b.n	8011acc <_dtoa_r+0xb24>
 8011b78:	08014a3d 	.word	0x08014a3d
 8011b7c:	08014c21 	.word	0x08014c21
 8011b80:	080149be 	.word	0x080149be

08011b84 <__sflush_r>:
 8011b84:	898a      	ldrh	r2, [r1, #12]
 8011b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	0710      	lsls	r0, r2, #28
 8011b8e:	460c      	mov	r4, r1
 8011b90:	d458      	bmi.n	8011c44 <__sflush_r+0xc0>
 8011b92:	684b      	ldr	r3, [r1, #4]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	dc05      	bgt.n	8011ba4 <__sflush_r+0x20>
 8011b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	dc02      	bgt.n	8011ba4 <__sflush_r+0x20>
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ba6:	2e00      	cmp	r6, #0
 8011ba8:	d0f9      	beq.n	8011b9e <__sflush_r+0x1a>
 8011baa:	2300      	movs	r3, #0
 8011bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bb0:	682f      	ldr	r7, [r5, #0]
 8011bb2:	602b      	str	r3, [r5, #0]
 8011bb4:	d032      	beq.n	8011c1c <__sflush_r+0x98>
 8011bb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011bb8:	89a3      	ldrh	r3, [r4, #12]
 8011bba:	075a      	lsls	r2, r3, #29
 8011bbc:	d505      	bpl.n	8011bca <__sflush_r+0x46>
 8011bbe:	6863      	ldr	r3, [r4, #4]
 8011bc0:	1ac0      	subs	r0, r0, r3
 8011bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bc4:	b10b      	cbz	r3, 8011bca <__sflush_r+0x46>
 8011bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011bc8:	1ac0      	subs	r0, r0, r3
 8011bca:	2300      	movs	r3, #0
 8011bcc:	4602      	mov	r2, r0
 8011bce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bd0:	6a21      	ldr	r1, [r4, #32]
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	47b0      	blx	r6
 8011bd6:	1c43      	adds	r3, r0, #1
 8011bd8:	89a3      	ldrh	r3, [r4, #12]
 8011bda:	d106      	bne.n	8011bea <__sflush_r+0x66>
 8011bdc:	6829      	ldr	r1, [r5, #0]
 8011bde:	291d      	cmp	r1, #29
 8011be0:	d82c      	bhi.n	8011c3c <__sflush_r+0xb8>
 8011be2:	4a2a      	ldr	r2, [pc, #168]	; (8011c8c <__sflush_r+0x108>)
 8011be4:	40ca      	lsrs	r2, r1
 8011be6:	07d6      	lsls	r6, r2, #31
 8011be8:	d528      	bpl.n	8011c3c <__sflush_r+0xb8>
 8011bea:	2200      	movs	r2, #0
 8011bec:	6062      	str	r2, [r4, #4]
 8011bee:	04d9      	lsls	r1, r3, #19
 8011bf0:	6922      	ldr	r2, [r4, #16]
 8011bf2:	6022      	str	r2, [r4, #0]
 8011bf4:	d504      	bpl.n	8011c00 <__sflush_r+0x7c>
 8011bf6:	1c42      	adds	r2, r0, #1
 8011bf8:	d101      	bne.n	8011bfe <__sflush_r+0x7a>
 8011bfa:	682b      	ldr	r3, [r5, #0]
 8011bfc:	b903      	cbnz	r3, 8011c00 <__sflush_r+0x7c>
 8011bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8011c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c02:	602f      	str	r7, [r5, #0]
 8011c04:	2900      	cmp	r1, #0
 8011c06:	d0ca      	beq.n	8011b9e <__sflush_r+0x1a>
 8011c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c0c:	4299      	cmp	r1, r3
 8011c0e:	d002      	beq.n	8011c16 <__sflush_r+0x92>
 8011c10:	4628      	mov	r0, r5
 8011c12:	f7fe fa0b 	bl	801002c <_free_r>
 8011c16:	2000      	movs	r0, #0
 8011c18:	6360      	str	r0, [r4, #52]	; 0x34
 8011c1a:	e7c1      	b.n	8011ba0 <__sflush_r+0x1c>
 8011c1c:	6a21      	ldr	r1, [r4, #32]
 8011c1e:	2301      	movs	r3, #1
 8011c20:	4628      	mov	r0, r5
 8011c22:	47b0      	blx	r6
 8011c24:	1c41      	adds	r1, r0, #1
 8011c26:	d1c7      	bne.n	8011bb8 <__sflush_r+0x34>
 8011c28:	682b      	ldr	r3, [r5, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d0c4      	beq.n	8011bb8 <__sflush_r+0x34>
 8011c2e:	2b1d      	cmp	r3, #29
 8011c30:	d001      	beq.n	8011c36 <__sflush_r+0xb2>
 8011c32:	2b16      	cmp	r3, #22
 8011c34:	d101      	bne.n	8011c3a <__sflush_r+0xb6>
 8011c36:	602f      	str	r7, [r5, #0]
 8011c38:	e7b1      	b.n	8011b9e <__sflush_r+0x1a>
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c40:	81a3      	strh	r3, [r4, #12]
 8011c42:	e7ad      	b.n	8011ba0 <__sflush_r+0x1c>
 8011c44:	690f      	ldr	r7, [r1, #16]
 8011c46:	2f00      	cmp	r7, #0
 8011c48:	d0a9      	beq.n	8011b9e <__sflush_r+0x1a>
 8011c4a:	0793      	lsls	r3, r2, #30
 8011c4c:	680e      	ldr	r6, [r1, #0]
 8011c4e:	bf08      	it	eq
 8011c50:	694b      	ldreq	r3, [r1, #20]
 8011c52:	600f      	str	r7, [r1, #0]
 8011c54:	bf18      	it	ne
 8011c56:	2300      	movne	r3, #0
 8011c58:	eba6 0807 	sub.w	r8, r6, r7
 8011c5c:	608b      	str	r3, [r1, #8]
 8011c5e:	f1b8 0f00 	cmp.w	r8, #0
 8011c62:	dd9c      	ble.n	8011b9e <__sflush_r+0x1a>
 8011c64:	6a21      	ldr	r1, [r4, #32]
 8011c66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c68:	4643      	mov	r3, r8
 8011c6a:	463a      	mov	r2, r7
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	47b0      	blx	r6
 8011c70:	2800      	cmp	r0, #0
 8011c72:	dc06      	bgt.n	8011c82 <__sflush_r+0xfe>
 8011c74:	89a3      	ldrh	r3, [r4, #12]
 8011c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c7a:	81a3      	strh	r3, [r4, #12]
 8011c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c80:	e78e      	b.n	8011ba0 <__sflush_r+0x1c>
 8011c82:	4407      	add	r7, r0
 8011c84:	eba8 0800 	sub.w	r8, r8, r0
 8011c88:	e7e9      	b.n	8011c5e <__sflush_r+0xda>
 8011c8a:	bf00      	nop
 8011c8c:	20400001 	.word	0x20400001

08011c90 <_fflush_r>:
 8011c90:	b538      	push	{r3, r4, r5, lr}
 8011c92:	690b      	ldr	r3, [r1, #16]
 8011c94:	4605      	mov	r5, r0
 8011c96:	460c      	mov	r4, r1
 8011c98:	b913      	cbnz	r3, 8011ca0 <_fflush_r+0x10>
 8011c9a:	2500      	movs	r5, #0
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	bd38      	pop	{r3, r4, r5, pc}
 8011ca0:	b118      	cbz	r0, 8011caa <_fflush_r+0x1a>
 8011ca2:	6983      	ldr	r3, [r0, #24]
 8011ca4:	b90b      	cbnz	r3, 8011caa <_fflush_r+0x1a>
 8011ca6:	f000 f899 	bl	8011ddc <__sinit>
 8011caa:	4b14      	ldr	r3, [pc, #80]	; (8011cfc <_fflush_r+0x6c>)
 8011cac:	429c      	cmp	r4, r3
 8011cae:	d11b      	bne.n	8011ce8 <_fflush_r+0x58>
 8011cb0:	686c      	ldr	r4, [r5, #4]
 8011cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d0ef      	beq.n	8011c9a <_fflush_r+0xa>
 8011cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011cbc:	07d0      	lsls	r0, r2, #31
 8011cbe:	d404      	bmi.n	8011cca <_fflush_r+0x3a>
 8011cc0:	0599      	lsls	r1, r3, #22
 8011cc2:	d402      	bmi.n	8011cca <_fflush_r+0x3a>
 8011cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cc6:	f000 f948 	bl	8011f5a <__retarget_lock_acquire_recursive>
 8011cca:	4628      	mov	r0, r5
 8011ccc:	4621      	mov	r1, r4
 8011cce:	f7ff ff59 	bl	8011b84 <__sflush_r>
 8011cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cd4:	07da      	lsls	r2, r3, #31
 8011cd6:	4605      	mov	r5, r0
 8011cd8:	d4e0      	bmi.n	8011c9c <_fflush_r+0xc>
 8011cda:	89a3      	ldrh	r3, [r4, #12]
 8011cdc:	059b      	lsls	r3, r3, #22
 8011cde:	d4dd      	bmi.n	8011c9c <_fflush_r+0xc>
 8011ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ce2:	f000 f93b 	bl	8011f5c <__retarget_lock_release_recursive>
 8011ce6:	e7d9      	b.n	8011c9c <_fflush_r+0xc>
 8011ce8:	4b05      	ldr	r3, [pc, #20]	; (8011d00 <_fflush_r+0x70>)
 8011cea:	429c      	cmp	r4, r3
 8011cec:	d101      	bne.n	8011cf2 <_fflush_r+0x62>
 8011cee:	68ac      	ldr	r4, [r5, #8]
 8011cf0:	e7df      	b.n	8011cb2 <_fflush_r+0x22>
 8011cf2:	4b04      	ldr	r3, [pc, #16]	; (8011d04 <_fflush_r+0x74>)
 8011cf4:	429c      	cmp	r4, r3
 8011cf6:	bf08      	it	eq
 8011cf8:	68ec      	ldreq	r4, [r5, #12]
 8011cfa:	e7da      	b.n	8011cb2 <_fflush_r+0x22>
 8011cfc:	08014a70 	.word	0x08014a70
 8011d00:	08014a90 	.word	0x08014a90
 8011d04:	08014a50 	.word	0x08014a50

08011d08 <fflush>:
 8011d08:	4601      	mov	r1, r0
 8011d0a:	b920      	cbnz	r0, 8011d16 <fflush+0xe>
 8011d0c:	4b04      	ldr	r3, [pc, #16]	; (8011d20 <fflush+0x18>)
 8011d0e:	4905      	ldr	r1, [pc, #20]	; (8011d24 <fflush+0x1c>)
 8011d10:	6818      	ldr	r0, [r3, #0]
 8011d12:	f000 b8fe 	b.w	8011f12 <_fwalk_reent>
 8011d16:	4b04      	ldr	r3, [pc, #16]	; (8011d28 <fflush+0x20>)
 8011d18:	6818      	ldr	r0, [r3, #0]
 8011d1a:	f7ff bfb9 	b.w	8011c90 <_fflush_r>
 8011d1e:	bf00      	nop
 8011d20:	08014988 	.word	0x08014988
 8011d24:	08011c91 	.word	0x08011c91
 8011d28:	20000044 	.word	0x20000044

08011d2c <std>:
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	b510      	push	{r4, lr}
 8011d30:	4604      	mov	r4, r0
 8011d32:	e9c0 3300 	strd	r3, r3, [r0]
 8011d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d3a:	6083      	str	r3, [r0, #8]
 8011d3c:	8181      	strh	r1, [r0, #12]
 8011d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8011d40:	81c2      	strh	r2, [r0, #14]
 8011d42:	6183      	str	r3, [r0, #24]
 8011d44:	4619      	mov	r1, r3
 8011d46:	2208      	movs	r2, #8
 8011d48:	305c      	adds	r0, #92	; 0x5c
 8011d4a:	f7fe f967 	bl	801001c <memset>
 8011d4e:	4b05      	ldr	r3, [pc, #20]	; (8011d64 <std+0x38>)
 8011d50:	6263      	str	r3, [r4, #36]	; 0x24
 8011d52:	4b05      	ldr	r3, [pc, #20]	; (8011d68 <std+0x3c>)
 8011d54:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d56:	4b05      	ldr	r3, [pc, #20]	; (8011d6c <std+0x40>)
 8011d58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d5a:	4b05      	ldr	r3, [pc, #20]	; (8011d70 <std+0x44>)
 8011d5c:	6224      	str	r4, [r4, #32]
 8011d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8011d60:	bd10      	pop	{r4, pc}
 8011d62:	bf00      	nop
 8011d64:	080134b9 	.word	0x080134b9
 8011d68:	080134db 	.word	0x080134db
 8011d6c:	08013513 	.word	0x08013513
 8011d70:	08013537 	.word	0x08013537

08011d74 <_cleanup_r>:
 8011d74:	4901      	ldr	r1, [pc, #4]	; (8011d7c <_cleanup_r+0x8>)
 8011d76:	f000 b8cc 	b.w	8011f12 <_fwalk_reent>
 8011d7a:	bf00      	nop
 8011d7c:	08011c91 	.word	0x08011c91

08011d80 <__sfmoreglue>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	2268      	movs	r2, #104	; 0x68
 8011d84:	1e4d      	subs	r5, r1, #1
 8011d86:	4355      	muls	r5, r2
 8011d88:	460e      	mov	r6, r1
 8011d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d8e:	f7fe f9b9 	bl	8010104 <_malloc_r>
 8011d92:	4604      	mov	r4, r0
 8011d94:	b140      	cbz	r0, 8011da8 <__sfmoreglue+0x28>
 8011d96:	2100      	movs	r1, #0
 8011d98:	e9c0 1600 	strd	r1, r6, [r0]
 8011d9c:	300c      	adds	r0, #12
 8011d9e:	60a0      	str	r0, [r4, #8]
 8011da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011da4:	f7fe f93a 	bl	801001c <memset>
 8011da8:	4620      	mov	r0, r4
 8011daa:	bd70      	pop	{r4, r5, r6, pc}

08011dac <__sfp_lock_acquire>:
 8011dac:	4801      	ldr	r0, [pc, #4]	; (8011db4 <__sfp_lock_acquire+0x8>)
 8011dae:	f000 b8d4 	b.w	8011f5a <__retarget_lock_acquire_recursive>
 8011db2:	bf00      	nop
 8011db4:	2000092d 	.word	0x2000092d

08011db8 <__sfp_lock_release>:
 8011db8:	4801      	ldr	r0, [pc, #4]	; (8011dc0 <__sfp_lock_release+0x8>)
 8011dba:	f000 b8cf 	b.w	8011f5c <__retarget_lock_release_recursive>
 8011dbe:	bf00      	nop
 8011dc0:	2000092d 	.word	0x2000092d

08011dc4 <__sinit_lock_acquire>:
 8011dc4:	4801      	ldr	r0, [pc, #4]	; (8011dcc <__sinit_lock_acquire+0x8>)
 8011dc6:	f000 b8c8 	b.w	8011f5a <__retarget_lock_acquire_recursive>
 8011dca:	bf00      	nop
 8011dcc:	2000092e 	.word	0x2000092e

08011dd0 <__sinit_lock_release>:
 8011dd0:	4801      	ldr	r0, [pc, #4]	; (8011dd8 <__sinit_lock_release+0x8>)
 8011dd2:	f000 b8c3 	b.w	8011f5c <__retarget_lock_release_recursive>
 8011dd6:	bf00      	nop
 8011dd8:	2000092e 	.word	0x2000092e

08011ddc <__sinit>:
 8011ddc:	b510      	push	{r4, lr}
 8011dde:	4604      	mov	r4, r0
 8011de0:	f7ff fff0 	bl	8011dc4 <__sinit_lock_acquire>
 8011de4:	69a3      	ldr	r3, [r4, #24]
 8011de6:	b11b      	cbz	r3, 8011df0 <__sinit+0x14>
 8011de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dec:	f7ff bff0 	b.w	8011dd0 <__sinit_lock_release>
 8011df0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011df4:	6523      	str	r3, [r4, #80]	; 0x50
 8011df6:	4b13      	ldr	r3, [pc, #76]	; (8011e44 <__sinit+0x68>)
 8011df8:	4a13      	ldr	r2, [pc, #76]	; (8011e48 <__sinit+0x6c>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8011dfe:	42a3      	cmp	r3, r4
 8011e00:	bf04      	itt	eq
 8011e02:	2301      	moveq	r3, #1
 8011e04:	61a3      	streq	r3, [r4, #24]
 8011e06:	4620      	mov	r0, r4
 8011e08:	f000 f820 	bl	8011e4c <__sfp>
 8011e0c:	6060      	str	r0, [r4, #4]
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f000 f81c 	bl	8011e4c <__sfp>
 8011e14:	60a0      	str	r0, [r4, #8]
 8011e16:	4620      	mov	r0, r4
 8011e18:	f000 f818 	bl	8011e4c <__sfp>
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	60e0      	str	r0, [r4, #12]
 8011e20:	2104      	movs	r1, #4
 8011e22:	6860      	ldr	r0, [r4, #4]
 8011e24:	f7ff ff82 	bl	8011d2c <std>
 8011e28:	68a0      	ldr	r0, [r4, #8]
 8011e2a:	2201      	movs	r2, #1
 8011e2c:	2109      	movs	r1, #9
 8011e2e:	f7ff ff7d 	bl	8011d2c <std>
 8011e32:	68e0      	ldr	r0, [r4, #12]
 8011e34:	2202      	movs	r2, #2
 8011e36:	2112      	movs	r1, #18
 8011e38:	f7ff ff78 	bl	8011d2c <std>
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	61a3      	str	r3, [r4, #24]
 8011e40:	e7d2      	b.n	8011de8 <__sinit+0xc>
 8011e42:	bf00      	nop
 8011e44:	08014988 	.word	0x08014988
 8011e48:	08011d75 	.word	0x08011d75

08011e4c <__sfp>:
 8011e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e4e:	4607      	mov	r7, r0
 8011e50:	f7ff ffac 	bl	8011dac <__sfp_lock_acquire>
 8011e54:	4b1e      	ldr	r3, [pc, #120]	; (8011ed0 <__sfp+0x84>)
 8011e56:	681e      	ldr	r6, [r3, #0]
 8011e58:	69b3      	ldr	r3, [r6, #24]
 8011e5a:	b913      	cbnz	r3, 8011e62 <__sfp+0x16>
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f7ff ffbd 	bl	8011ddc <__sinit>
 8011e62:	3648      	adds	r6, #72	; 0x48
 8011e64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	d503      	bpl.n	8011e74 <__sfp+0x28>
 8011e6c:	6833      	ldr	r3, [r6, #0]
 8011e6e:	b30b      	cbz	r3, 8011eb4 <__sfp+0x68>
 8011e70:	6836      	ldr	r6, [r6, #0]
 8011e72:	e7f7      	b.n	8011e64 <__sfp+0x18>
 8011e74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e78:	b9d5      	cbnz	r5, 8011eb0 <__sfp+0x64>
 8011e7a:	4b16      	ldr	r3, [pc, #88]	; (8011ed4 <__sfp+0x88>)
 8011e7c:	60e3      	str	r3, [r4, #12]
 8011e7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e82:	6665      	str	r5, [r4, #100]	; 0x64
 8011e84:	f000 f868 	bl	8011f58 <__retarget_lock_init_recursive>
 8011e88:	f7ff ff96 	bl	8011db8 <__sfp_lock_release>
 8011e8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e94:	6025      	str	r5, [r4, #0]
 8011e96:	61a5      	str	r5, [r4, #24]
 8011e98:	2208      	movs	r2, #8
 8011e9a:	4629      	mov	r1, r5
 8011e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ea0:	f7fe f8bc 	bl	801001c <memset>
 8011ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011eac:	4620      	mov	r0, r4
 8011eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eb0:	3468      	adds	r4, #104	; 0x68
 8011eb2:	e7d9      	b.n	8011e68 <__sfp+0x1c>
 8011eb4:	2104      	movs	r1, #4
 8011eb6:	4638      	mov	r0, r7
 8011eb8:	f7ff ff62 	bl	8011d80 <__sfmoreglue>
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	6030      	str	r0, [r6, #0]
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	d1d5      	bne.n	8011e70 <__sfp+0x24>
 8011ec4:	f7ff ff78 	bl	8011db8 <__sfp_lock_release>
 8011ec8:	230c      	movs	r3, #12
 8011eca:	603b      	str	r3, [r7, #0]
 8011ecc:	e7ee      	b.n	8011eac <__sfp+0x60>
 8011ece:	bf00      	nop
 8011ed0:	08014988 	.word	0x08014988
 8011ed4:	ffff0001 	.word	0xffff0001

08011ed8 <_fwalk>:
 8011ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011edc:	460f      	mov	r7, r1
 8011ede:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ee2:	2600      	movs	r6, #0
 8011ee4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8011ee8:	f1b8 0801 	subs.w	r8, r8, #1
 8011eec:	d505      	bpl.n	8011efa <_fwalk+0x22>
 8011eee:	6824      	ldr	r4, [r4, #0]
 8011ef0:	2c00      	cmp	r4, #0
 8011ef2:	d1f7      	bne.n	8011ee4 <_fwalk+0xc>
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011efa:	89ab      	ldrh	r3, [r5, #12]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	d906      	bls.n	8011f0e <_fwalk+0x36>
 8011f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f04:	3301      	adds	r3, #1
 8011f06:	d002      	beq.n	8011f0e <_fwalk+0x36>
 8011f08:	4628      	mov	r0, r5
 8011f0a:	47b8      	blx	r7
 8011f0c:	4306      	orrs	r6, r0
 8011f0e:	3568      	adds	r5, #104	; 0x68
 8011f10:	e7ea      	b.n	8011ee8 <_fwalk+0x10>

08011f12 <_fwalk_reent>:
 8011f12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f16:	4606      	mov	r6, r0
 8011f18:	4688      	mov	r8, r1
 8011f1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011f1e:	2700      	movs	r7, #0
 8011f20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011f24:	f1b9 0901 	subs.w	r9, r9, #1
 8011f28:	d505      	bpl.n	8011f36 <_fwalk_reent+0x24>
 8011f2a:	6824      	ldr	r4, [r4, #0]
 8011f2c:	2c00      	cmp	r4, #0
 8011f2e:	d1f7      	bne.n	8011f20 <_fwalk_reent+0xe>
 8011f30:	4638      	mov	r0, r7
 8011f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f36:	89ab      	ldrh	r3, [r5, #12]
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d907      	bls.n	8011f4c <_fwalk_reent+0x3a>
 8011f3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f40:	3301      	adds	r3, #1
 8011f42:	d003      	beq.n	8011f4c <_fwalk_reent+0x3a>
 8011f44:	4629      	mov	r1, r5
 8011f46:	4630      	mov	r0, r6
 8011f48:	47c0      	blx	r8
 8011f4a:	4307      	orrs	r7, r0
 8011f4c:	3568      	adds	r5, #104	; 0x68
 8011f4e:	e7e9      	b.n	8011f24 <_fwalk_reent+0x12>

08011f50 <_localeconv_r>:
 8011f50:	4800      	ldr	r0, [pc, #0]	; (8011f54 <_localeconv_r+0x4>)
 8011f52:	4770      	bx	lr
 8011f54:	20000198 	.word	0x20000198

08011f58 <__retarget_lock_init_recursive>:
 8011f58:	4770      	bx	lr

08011f5a <__retarget_lock_acquire_recursive>:
 8011f5a:	4770      	bx	lr

08011f5c <__retarget_lock_release_recursive>:
 8011f5c:	4770      	bx	lr

08011f5e <__swhatbuf_r>:
 8011f5e:	b570      	push	{r4, r5, r6, lr}
 8011f60:	460e      	mov	r6, r1
 8011f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f66:	2900      	cmp	r1, #0
 8011f68:	b096      	sub	sp, #88	; 0x58
 8011f6a:	4614      	mov	r4, r2
 8011f6c:	461d      	mov	r5, r3
 8011f6e:	da08      	bge.n	8011f82 <__swhatbuf_r+0x24>
 8011f70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011f74:	2200      	movs	r2, #0
 8011f76:	602a      	str	r2, [r5, #0]
 8011f78:	061a      	lsls	r2, r3, #24
 8011f7a:	d410      	bmi.n	8011f9e <__swhatbuf_r+0x40>
 8011f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f80:	e00e      	b.n	8011fa0 <__swhatbuf_r+0x42>
 8011f82:	466a      	mov	r2, sp
 8011f84:	f001 fcf8 	bl	8013978 <_fstat_r>
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	dbf1      	blt.n	8011f70 <__swhatbuf_r+0x12>
 8011f8c:	9a01      	ldr	r2, [sp, #4]
 8011f8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f96:	425a      	negs	r2, r3
 8011f98:	415a      	adcs	r2, r3
 8011f9a:	602a      	str	r2, [r5, #0]
 8011f9c:	e7ee      	b.n	8011f7c <__swhatbuf_r+0x1e>
 8011f9e:	2340      	movs	r3, #64	; 0x40
 8011fa0:	2000      	movs	r0, #0
 8011fa2:	6023      	str	r3, [r4, #0]
 8011fa4:	b016      	add	sp, #88	; 0x58
 8011fa6:	bd70      	pop	{r4, r5, r6, pc}

08011fa8 <__smakebuf_r>:
 8011fa8:	898b      	ldrh	r3, [r1, #12]
 8011faa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fac:	079d      	lsls	r5, r3, #30
 8011fae:	4606      	mov	r6, r0
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	d507      	bpl.n	8011fc4 <__smakebuf_r+0x1c>
 8011fb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011fb8:	6023      	str	r3, [r4, #0]
 8011fba:	6123      	str	r3, [r4, #16]
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	6163      	str	r3, [r4, #20]
 8011fc0:	b002      	add	sp, #8
 8011fc2:	bd70      	pop	{r4, r5, r6, pc}
 8011fc4:	ab01      	add	r3, sp, #4
 8011fc6:	466a      	mov	r2, sp
 8011fc8:	f7ff ffc9 	bl	8011f5e <__swhatbuf_r>
 8011fcc:	9900      	ldr	r1, [sp, #0]
 8011fce:	4605      	mov	r5, r0
 8011fd0:	4630      	mov	r0, r6
 8011fd2:	f7fe f897 	bl	8010104 <_malloc_r>
 8011fd6:	b948      	cbnz	r0, 8011fec <__smakebuf_r+0x44>
 8011fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fdc:	059a      	lsls	r2, r3, #22
 8011fde:	d4ef      	bmi.n	8011fc0 <__smakebuf_r+0x18>
 8011fe0:	f023 0303 	bic.w	r3, r3, #3
 8011fe4:	f043 0302 	orr.w	r3, r3, #2
 8011fe8:	81a3      	strh	r3, [r4, #12]
 8011fea:	e7e3      	b.n	8011fb4 <__smakebuf_r+0xc>
 8011fec:	4b0d      	ldr	r3, [pc, #52]	; (8012024 <__smakebuf_r+0x7c>)
 8011fee:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ff0:	89a3      	ldrh	r3, [r4, #12]
 8011ff2:	6020      	str	r0, [r4, #0]
 8011ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ff8:	81a3      	strh	r3, [r4, #12]
 8011ffa:	9b00      	ldr	r3, [sp, #0]
 8011ffc:	6163      	str	r3, [r4, #20]
 8011ffe:	9b01      	ldr	r3, [sp, #4]
 8012000:	6120      	str	r0, [r4, #16]
 8012002:	b15b      	cbz	r3, 801201c <__smakebuf_r+0x74>
 8012004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012008:	4630      	mov	r0, r6
 801200a:	f001 fcc7 	bl	801399c <_isatty_r>
 801200e:	b128      	cbz	r0, 801201c <__smakebuf_r+0x74>
 8012010:	89a3      	ldrh	r3, [r4, #12]
 8012012:	f023 0303 	bic.w	r3, r3, #3
 8012016:	f043 0301 	orr.w	r3, r3, #1
 801201a:	81a3      	strh	r3, [r4, #12]
 801201c:	89a0      	ldrh	r0, [r4, #12]
 801201e:	4305      	orrs	r5, r0
 8012020:	81a5      	strh	r5, [r4, #12]
 8012022:	e7cd      	b.n	8011fc0 <__smakebuf_r+0x18>
 8012024:	08011d75 	.word	0x08011d75

08012028 <__malloc_lock>:
 8012028:	4801      	ldr	r0, [pc, #4]	; (8012030 <__malloc_lock+0x8>)
 801202a:	f7ff bf96 	b.w	8011f5a <__retarget_lock_acquire_recursive>
 801202e:	bf00      	nop
 8012030:	2000092c 	.word	0x2000092c

08012034 <__malloc_unlock>:
 8012034:	4801      	ldr	r0, [pc, #4]	; (801203c <__malloc_unlock+0x8>)
 8012036:	f7ff bf91 	b.w	8011f5c <__retarget_lock_release_recursive>
 801203a:	bf00      	nop
 801203c:	2000092c 	.word	0x2000092c

08012040 <_Balloc>:
 8012040:	b570      	push	{r4, r5, r6, lr}
 8012042:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012044:	4604      	mov	r4, r0
 8012046:	460d      	mov	r5, r1
 8012048:	b976      	cbnz	r6, 8012068 <_Balloc+0x28>
 801204a:	2010      	movs	r0, #16
 801204c:	f7fd ffd0 	bl	800fff0 <malloc>
 8012050:	4602      	mov	r2, r0
 8012052:	6260      	str	r0, [r4, #36]	; 0x24
 8012054:	b920      	cbnz	r0, 8012060 <_Balloc+0x20>
 8012056:	4b18      	ldr	r3, [pc, #96]	; (80120b8 <_Balloc+0x78>)
 8012058:	4818      	ldr	r0, [pc, #96]	; (80120bc <_Balloc+0x7c>)
 801205a:	2166      	movs	r1, #102	; 0x66
 801205c:	f001 fc4c 	bl	80138f8 <__assert_func>
 8012060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012064:	6006      	str	r6, [r0, #0]
 8012066:	60c6      	str	r6, [r0, #12]
 8012068:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801206a:	68f3      	ldr	r3, [r6, #12]
 801206c:	b183      	cbz	r3, 8012090 <_Balloc+0x50>
 801206e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012070:	68db      	ldr	r3, [r3, #12]
 8012072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012076:	b9b8      	cbnz	r0, 80120a8 <_Balloc+0x68>
 8012078:	2101      	movs	r1, #1
 801207a:	fa01 f605 	lsl.w	r6, r1, r5
 801207e:	1d72      	adds	r2, r6, #5
 8012080:	0092      	lsls	r2, r2, #2
 8012082:	4620      	mov	r0, r4
 8012084:	f000 fb60 	bl	8012748 <_calloc_r>
 8012088:	b160      	cbz	r0, 80120a4 <_Balloc+0x64>
 801208a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801208e:	e00e      	b.n	80120ae <_Balloc+0x6e>
 8012090:	2221      	movs	r2, #33	; 0x21
 8012092:	2104      	movs	r1, #4
 8012094:	4620      	mov	r0, r4
 8012096:	f000 fb57 	bl	8012748 <_calloc_r>
 801209a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801209c:	60f0      	str	r0, [r6, #12]
 801209e:	68db      	ldr	r3, [r3, #12]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d1e4      	bne.n	801206e <_Balloc+0x2e>
 80120a4:	2000      	movs	r0, #0
 80120a6:	bd70      	pop	{r4, r5, r6, pc}
 80120a8:	6802      	ldr	r2, [r0, #0]
 80120aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80120ae:	2300      	movs	r3, #0
 80120b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80120b4:	e7f7      	b.n	80120a6 <_Balloc+0x66>
 80120b6:	bf00      	nop
 80120b8:	080149cb 	.word	0x080149cb
 80120bc:	08014ab0 	.word	0x08014ab0

080120c0 <_Bfree>:
 80120c0:	b570      	push	{r4, r5, r6, lr}
 80120c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120c4:	4605      	mov	r5, r0
 80120c6:	460c      	mov	r4, r1
 80120c8:	b976      	cbnz	r6, 80120e8 <_Bfree+0x28>
 80120ca:	2010      	movs	r0, #16
 80120cc:	f7fd ff90 	bl	800fff0 <malloc>
 80120d0:	4602      	mov	r2, r0
 80120d2:	6268      	str	r0, [r5, #36]	; 0x24
 80120d4:	b920      	cbnz	r0, 80120e0 <_Bfree+0x20>
 80120d6:	4b09      	ldr	r3, [pc, #36]	; (80120fc <_Bfree+0x3c>)
 80120d8:	4809      	ldr	r0, [pc, #36]	; (8012100 <_Bfree+0x40>)
 80120da:	218a      	movs	r1, #138	; 0x8a
 80120dc:	f001 fc0c 	bl	80138f8 <__assert_func>
 80120e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120e4:	6006      	str	r6, [r0, #0]
 80120e6:	60c6      	str	r6, [r0, #12]
 80120e8:	b13c      	cbz	r4, 80120fa <_Bfree+0x3a>
 80120ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80120ec:	6862      	ldr	r2, [r4, #4]
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80120f4:	6021      	str	r1, [r4, #0]
 80120f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80120fa:	bd70      	pop	{r4, r5, r6, pc}
 80120fc:	080149cb 	.word	0x080149cb
 8012100:	08014ab0 	.word	0x08014ab0

08012104 <__multadd>:
 8012104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012108:	690d      	ldr	r5, [r1, #16]
 801210a:	4607      	mov	r7, r0
 801210c:	460c      	mov	r4, r1
 801210e:	461e      	mov	r6, r3
 8012110:	f101 0c14 	add.w	ip, r1, #20
 8012114:	2000      	movs	r0, #0
 8012116:	f8dc 3000 	ldr.w	r3, [ip]
 801211a:	b299      	uxth	r1, r3
 801211c:	fb02 6101 	mla	r1, r2, r1, r6
 8012120:	0c1e      	lsrs	r6, r3, #16
 8012122:	0c0b      	lsrs	r3, r1, #16
 8012124:	fb02 3306 	mla	r3, r2, r6, r3
 8012128:	b289      	uxth	r1, r1
 801212a:	3001      	adds	r0, #1
 801212c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012130:	4285      	cmp	r5, r0
 8012132:	f84c 1b04 	str.w	r1, [ip], #4
 8012136:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801213a:	dcec      	bgt.n	8012116 <__multadd+0x12>
 801213c:	b30e      	cbz	r6, 8012182 <__multadd+0x7e>
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	42ab      	cmp	r3, r5
 8012142:	dc19      	bgt.n	8012178 <__multadd+0x74>
 8012144:	6861      	ldr	r1, [r4, #4]
 8012146:	4638      	mov	r0, r7
 8012148:	3101      	adds	r1, #1
 801214a:	f7ff ff79 	bl	8012040 <_Balloc>
 801214e:	4680      	mov	r8, r0
 8012150:	b928      	cbnz	r0, 801215e <__multadd+0x5a>
 8012152:	4602      	mov	r2, r0
 8012154:	4b0c      	ldr	r3, [pc, #48]	; (8012188 <__multadd+0x84>)
 8012156:	480d      	ldr	r0, [pc, #52]	; (801218c <__multadd+0x88>)
 8012158:	21b5      	movs	r1, #181	; 0xb5
 801215a:	f001 fbcd 	bl	80138f8 <__assert_func>
 801215e:	6922      	ldr	r2, [r4, #16]
 8012160:	3202      	adds	r2, #2
 8012162:	f104 010c 	add.w	r1, r4, #12
 8012166:	0092      	lsls	r2, r2, #2
 8012168:	300c      	adds	r0, #12
 801216a:	f7fd ff49 	bl	8010000 <memcpy>
 801216e:	4621      	mov	r1, r4
 8012170:	4638      	mov	r0, r7
 8012172:	f7ff ffa5 	bl	80120c0 <_Bfree>
 8012176:	4644      	mov	r4, r8
 8012178:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801217c:	3501      	adds	r5, #1
 801217e:	615e      	str	r6, [r3, #20]
 8012180:	6125      	str	r5, [r4, #16]
 8012182:	4620      	mov	r0, r4
 8012184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012188:	08014a3d 	.word	0x08014a3d
 801218c:	08014ab0 	.word	0x08014ab0

08012190 <__hi0bits>:
 8012190:	0c03      	lsrs	r3, r0, #16
 8012192:	041b      	lsls	r3, r3, #16
 8012194:	b9d3      	cbnz	r3, 80121cc <__hi0bits+0x3c>
 8012196:	0400      	lsls	r0, r0, #16
 8012198:	2310      	movs	r3, #16
 801219a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801219e:	bf04      	itt	eq
 80121a0:	0200      	lsleq	r0, r0, #8
 80121a2:	3308      	addeq	r3, #8
 80121a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80121a8:	bf04      	itt	eq
 80121aa:	0100      	lsleq	r0, r0, #4
 80121ac:	3304      	addeq	r3, #4
 80121ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80121b2:	bf04      	itt	eq
 80121b4:	0080      	lsleq	r0, r0, #2
 80121b6:	3302      	addeq	r3, #2
 80121b8:	2800      	cmp	r0, #0
 80121ba:	db05      	blt.n	80121c8 <__hi0bits+0x38>
 80121bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80121c0:	f103 0301 	add.w	r3, r3, #1
 80121c4:	bf08      	it	eq
 80121c6:	2320      	moveq	r3, #32
 80121c8:	4618      	mov	r0, r3
 80121ca:	4770      	bx	lr
 80121cc:	2300      	movs	r3, #0
 80121ce:	e7e4      	b.n	801219a <__hi0bits+0xa>

080121d0 <__lo0bits>:
 80121d0:	6803      	ldr	r3, [r0, #0]
 80121d2:	f013 0207 	ands.w	r2, r3, #7
 80121d6:	4601      	mov	r1, r0
 80121d8:	d00b      	beq.n	80121f2 <__lo0bits+0x22>
 80121da:	07da      	lsls	r2, r3, #31
 80121dc:	d423      	bmi.n	8012226 <__lo0bits+0x56>
 80121de:	0798      	lsls	r0, r3, #30
 80121e0:	bf49      	itett	mi
 80121e2:	085b      	lsrmi	r3, r3, #1
 80121e4:	089b      	lsrpl	r3, r3, #2
 80121e6:	2001      	movmi	r0, #1
 80121e8:	600b      	strmi	r3, [r1, #0]
 80121ea:	bf5c      	itt	pl
 80121ec:	600b      	strpl	r3, [r1, #0]
 80121ee:	2002      	movpl	r0, #2
 80121f0:	4770      	bx	lr
 80121f2:	b298      	uxth	r0, r3
 80121f4:	b9a8      	cbnz	r0, 8012222 <__lo0bits+0x52>
 80121f6:	0c1b      	lsrs	r3, r3, #16
 80121f8:	2010      	movs	r0, #16
 80121fa:	b2da      	uxtb	r2, r3
 80121fc:	b90a      	cbnz	r2, 8012202 <__lo0bits+0x32>
 80121fe:	3008      	adds	r0, #8
 8012200:	0a1b      	lsrs	r3, r3, #8
 8012202:	071a      	lsls	r2, r3, #28
 8012204:	bf04      	itt	eq
 8012206:	091b      	lsreq	r3, r3, #4
 8012208:	3004      	addeq	r0, #4
 801220a:	079a      	lsls	r2, r3, #30
 801220c:	bf04      	itt	eq
 801220e:	089b      	lsreq	r3, r3, #2
 8012210:	3002      	addeq	r0, #2
 8012212:	07da      	lsls	r2, r3, #31
 8012214:	d403      	bmi.n	801221e <__lo0bits+0x4e>
 8012216:	085b      	lsrs	r3, r3, #1
 8012218:	f100 0001 	add.w	r0, r0, #1
 801221c:	d005      	beq.n	801222a <__lo0bits+0x5a>
 801221e:	600b      	str	r3, [r1, #0]
 8012220:	4770      	bx	lr
 8012222:	4610      	mov	r0, r2
 8012224:	e7e9      	b.n	80121fa <__lo0bits+0x2a>
 8012226:	2000      	movs	r0, #0
 8012228:	4770      	bx	lr
 801222a:	2020      	movs	r0, #32
 801222c:	4770      	bx	lr
	...

08012230 <__i2b>:
 8012230:	b510      	push	{r4, lr}
 8012232:	460c      	mov	r4, r1
 8012234:	2101      	movs	r1, #1
 8012236:	f7ff ff03 	bl	8012040 <_Balloc>
 801223a:	4602      	mov	r2, r0
 801223c:	b928      	cbnz	r0, 801224a <__i2b+0x1a>
 801223e:	4b05      	ldr	r3, [pc, #20]	; (8012254 <__i2b+0x24>)
 8012240:	4805      	ldr	r0, [pc, #20]	; (8012258 <__i2b+0x28>)
 8012242:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012246:	f001 fb57 	bl	80138f8 <__assert_func>
 801224a:	2301      	movs	r3, #1
 801224c:	6144      	str	r4, [r0, #20]
 801224e:	6103      	str	r3, [r0, #16]
 8012250:	bd10      	pop	{r4, pc}
 8012252:	bf00      	nop
 8012254:	08014a3d 	.word	0x08014a3d
 8012258:	08014ab0 	.word	0x08014ab0

0801225c <__multiply>:
 801225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012260:	4691      	mov	r9, r2
 8012262:	690a      	ldr	r2, [r1, #16]
 8012264:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012268:	429a      	cmp	r2, r3
 801226a:	bfb8      	it	lt
 801226c:	460b      	movlt	r3, r1
 801226e:	460c      	mov	r4, r1
 8012270:	bfbc      	itt	lt
 8012272:	464c      	movlt	r4, r9
 8012274:	4699      	movlt	r9, r3
 8012276:	6927      	ldr	r7, [r4, #16]
 8012278:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801227c:	68a3      	ldr	r3, [r4, #8]
 801227e:	6861      	ldr	r1, [r4, #4]
 8012280:	eb07 060a 	add.w	r6, r7, sl
 8012284:	42b3      	cmp	r3, r6
 8012286:	b085      	sub	sp, #20
 8012288:	bfb8      	it	lt
 801228a:	3101      	addlt	r1, #1
 801228c:	f7ff fed8 	bl	8012040 <_Balloc>
 8012290:	b930      	cbnz	r0, 80122a0 <__multiply+0x44>
 8012292:	4602      	mov	r2, r0
 8012294:	4b44      	ldr	r3, [pc, #272]	; (80123a8 <__multiply+0x14c>)
 8012296:	4845      	ldr	r0, [pc, #276]	; (80123ac <__multiply+0x150>)
 8012298:	f240 115d 	movw	r1, #349	; 0x15d
 801229c:	f001 fb2c 	bl	80138f8 <__assert_func>
 80122a0:	f100 0514 	add.w	r5, r0, #20
 80122a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80122a8:	462b      	mov	r3, r5
 80122aa:	2200      	movs	r2, #0
 80122ac:	4543      	cmp	r3, r8
 80122ae:	d321      	bcc.n	80122f4 <__multiply+0x98>
 80122b0:	f104 0314 	add.w	r3, r4, #20
 80122b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80122b8:	f109 0314 	add.w	r3, r9, #20
 80122bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80122c0:	9202      	str	r2, [sp, #8]
 80122c2:	1b3a      	subs	r2, r7, r4
 80122c4:	3a15      	subs	r2, #21
 80122c6:	f022 0203 	bic.w	r2, r2, #3
 80122ca:	3204      	adds	r2, #4
 80122cc:	f104 0115 	add.w	r1, r4, #21
 80122d0:	428f      	cmp	r7, r1
 80122d2:	bf38      	it	cc
 80122d4:	2204      	movcc	r2, #4
 80122d6:	9201      	str	r2, [sp, #4]
 80122d8:	9a02      	ldr	r2, [sp, #8]
 80122da:	9303      	str	r3, [sp, #12]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d80c      	bhi.n	80122fa <__multiply+0x9e>
 80122e0:	2e00      	cmp	r6, #0
 80122e2:	dd03      	ble.n	80122ec <__multiply+0x90>
 80122e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d05a      	beq.n	80123a2 <__multiply+0x146>
 80122ec:	6106      	str	r6, [r0, #16]
 80122ee:	b005      	add	sp, #20
 80122f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f4:	f843 2b04 	str.w	r2, [r3], #4
 80122f8:	e7d8      	b.n	80122ac <__multiply+0x50>
 80122fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80122fe:	f1ba 0f00 	cmp.w	sl, #0
 8012302:	d024      	beq.n	801234e <__multiply+0xf2>
 8012304:	f104 0e14 	add.w	lr, r4, #20
 8012308:	46a9      	mov	r9, r5
 801230a:	f04f 0c00 	mov.w	ip, #0
 801230e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012312:	f8d9 1000 	ldr.w	r1, [r9]
 8012316:	fa1f fb82 	uxth.w	fp, r2
 801231a:	b289      	uxth	r1, r1
 801231c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012320:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012324:	f8d9 2000 	ldr.w	r2, [r9]
 8012328:	4461      	add	r1, ip
 801232a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801232e:	fb0a c20b 	mla	r2, sl, fp, ip
 8012332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012336:	b289      	uxth	r1, r1
 8012338:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801233c:	4577      	cmp	r7, lr
 801233e:	f849 1b04 	str.w	r1, [r9], #4
 8012342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012346:	d8e2      	bhi.n	801230e <__multiply+0xb2>
 8012348:	9a01      	ldr	r2, [sp, #4]
 801234a:	f845 c002 	str.w	ip, [r5, r2]
 801234e:	9a03      	ldr	r2, [sp, #12]
 8012350:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012354:	3304      	adds	r3, #4
 8012356:	f1b9 0f00 	cmp.w	r9, #0
 801235a:	d020      	beq.n	801239e <__multiply+0x142>
 801235c:	6829      	ldr	r1, [r5, #0]
 801235e:	f104 0c14 	add.w	ip, r4, #20
 8012362:	46ae      	mov	lr, r5
 8012364:	f04f 0a00 	mov.w	sl, #0
 8012368:	f8bc b000 	ldrh.w	fp, [ip]
 801236c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012370:	fb09 220b 	mla	r2, r9, fp, r2
 8012374:	4492      	add	sl, r2
 8012376:	b289      	uxth	r1, r1
 8012378:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801237c:	f84e 1b04 	str.w	r1, [lr], #4
 8012380:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012384:	f8be 1000 	ldrh.w	r1, [lr]
 8012388:	0c12      	lsrs	r2, r2, #16
 801238a:	fb09 1102 	mla	r1, r9, r2, r1
 801238e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012392:	4567      	cmp	r7, ip
 8012394:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012398:	d8e6      	bhi.n	8012368 <__multiply+0x10c>
 801239a:	9a01      	ldr	r2, [sp, #4]
 801239c:	50a9      	str	r1, [r5, r2]
 801239e:	3504      	adds	r5, #4
 80123a0:	e79a      	b.n	80122d8 <__multiply+0x7c>
 80123a2:	3e01      	subs	r6, #1
 80123a4:	e79c      	b.n	80122e0 <__multiply+0x84>
 80123a6:	bf00      	nop
 80123a8:	08014a3d 	.word	0x08014a3d
 80123ac:	08014ab0 	.word	0x08014ab0

080123b0 <__pow5mult>:
 80123b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123b4:	4615      	mov	r5, r2
 80123b6:	f012 0203 	ands.w	r2, r2, #3
 80123ba:	4606      	mov	r6, r0
 80123bc:	460f      	mov	r7, r1
 80123be:	d007      	beq.n	80123d0 <__pow5mult+0x20>
 80123c0:	4c25      	ldr	r4, [pc, #148]	; (8012458 <__pow5mult+0xa8>)
 80123c2:	3a01      	subs	r2, #1
 80123c4:	2300      	movs	r3, #0
 80123c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80123ca:	f7ff fe9b 	bl	8012104 <__multadd>
 80123ce:	4607      	mov	r7, r0
 80123d0:	10ad      	asrs	r5, r5, #2
 80123d2:	d03d      	beq.n	8012450 <__pow5mult+0xa0>
 80123d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80123d6:	b97c      	cbnz	r4, 80123f8 <__pow5mult+0x48>
 80123d8:	2010      	movs	r0, #16
 80123da:	f7fd fe09 	bl	800fff0 <malloc>
 80123de:	4602      	mov	r2, r0
 80123e0:	6270      	str	r0, [r6, #36]	; 0x24
 80123e2:	b928      	cbnz	r0, 80123f0 <__pow5mult+0x40>
 80123e4:	4b1d      	ldr	r3, [pc, #116]	; (801245c <__pow5mult+0xac>)
 80123e6:	481e      	ldr	r0, [pc, #120]	; (8012460 <__pow5mult+0xb0>)
 80123e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80123ec:	f001 fa84 	bl	80138f8 <__assert_func>
 80123f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80123f4:	6004      	str	r4, [r0, #0]
 80123f6:	60c4      	str	r4, [r0, #12]
 80123f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80123fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012400:	b94c      	cbnz	r4, 8012416 <__pow5mult+0x66>
 8012402:	f240 2171 	movw	r1, #625	; 0x271
 8012406:	4630      	mov	r0, r6
 8012408:	f7ff ff12 	bl	8012230 <__i2b>
 801240c:	2300      	movs	r3, #0
 801240e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012412:	4604      	mov	r4, r0
 8012414:	6003      	str	r3, [r0, #0]
 8012416:	f04f 0900 	mov.w	r9, #0
 801241a:	07eb      	lsls	r3, r5, #31
 801241c:	d50a      	bpl.n	8012434 <__pow5mult+0x84>
 801241e:	4639      	mov	r1, r7
 8012420:	4622      	mov	r2, r4
 8012422:	4630      	mov	r0, r6
 8012424:	f7ff ff1a 	bl	801225c <__multiply>
 8012428:	4639      	mov	r1, r7
 801242a:	4680      	mov	r8, r0
 801242c:	4630      	mov	r0, r6
 801242e:	f7ff fe47 	bl	80120c0 <_Bfree>
 8012432:	4647      	mov	r7, r8
 8012434:	106d      	asrs	r5, r5, #1
 8012436:	d00b      	beq.n	8012450 <__pow5mult+0xa0>
 8012438:	6820      	ldr	r0, [r4, #0]
 801243a:	b938      	cbnz	r0, 801244c <__pow5mult+0x9c>
 801243c:	4622      	mov	r2, r4
 801243e:	4621      	mov	r1, r4
 8012440:	4630      	mov	r0, r6
 8012442:	f7ff ff0b 	bl	801225c <__multiply>
 8012446:	6020      	str	r0, [r4, #0]
 8012448:	f8c0 9000 	str.w	r9, [r0]
 801244c:	4604      	mov	r4, r0
 801244e:	e7e4      	b.n	801241a <__pow5mult+0x6a>
 8012450:	4638      	mov	r0, r7
 8012452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012456:	bf00      	nop
 8012458:	08014c00 	.word	0x08014c00
 801245c:	080149cb 	.word	0x080149cb
 8012460:	08014ab0 	.word	0x08014ab0

08012464 <__lshift>:
 8012464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012468:	460c      	mov	r4, r1
 801246a:	6849      	ldr	r1, [r1, #4]
 801246c:	6923      	ldr	r3, [r4, #16]
 801246e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012472:	68a3      	ldr	r3, [r4, #8]
 8012474:	4607      	mov	r7, r0
 8012476:	4691      	mov	r9, r2
 8012478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801247c:	f108 0601 	add.w	r6, r8, #1
 8012480:	42b3      	cmp	r3, r6
 8012482:	db0b      	blt.n	801249c <__lshift+0x38>
 8012484:	4638      	mov	r0, r7
 8012486:	f7ff fddb 	bl	8012040 <_Balloc>
 801248a:	4605      	mov	r5, r0
 801248c:	b948      	cbnz	r0, 80124a2 <__lshift+0x3e>
 801248e:	4602      	mov	r2, r0
 8012490:	4b2a      	ldr	r3, [pc, #168]	; (801253c <__lshift+0xd8>)
 8012492:	482b      	ldr	r0, [pc, #172]	; (8012540 <__lshift+0xdc>)
 8012494:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012498:	f001 fa2e 	bl	80138f8 <__assert_func>
 801249c:	3101      	adds	r1, #1
 801249e:	005b      	lsls	r3, r3, #1
 80124a0:	e7ee      	b.n	8012480 <__lshift+0x1c>
 80124a2:	2300      	movs	r3, #0
 80124a4:	f100 0114 	add.w	r1, r0, #20
 80124a8:	f100 0210 	add.w	r2, r0, #16
 80124ac:	4618      	mov	r0, r3
 80124ae:	4553      	cmp	r3, sl
 80124b0:	db37      	blt.n	8012522 <__lshift+0xbe>
 80124b2:	6920      	ldr	r0, [r4, #16]
 80124b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80124b8:	f104 0314 	add.w	r3, r4, #20
 80124bc:	f019 091f 	ands.w	r9, r9, #31
 80124c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80124c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80124c8:	d02f      	beq.n	801252a <__lshift+0xc6>
 80124ca:	f1c9 0e20 	rsb	lr, r9, #32
 80124ce:	468a      	mov	sl, r1
 80124d0:	f04f 0c00 	mov.w	ip, #0
 80124d4:	681a      	ldr	r2, [r3, #0]
 80124d6:	fa02 f209 	lsl.w	r2, r2, r9
 80124da:	ea42 020c 	orr.w	r2, r2, ip
 80124de:	f84a 2b04 	str.w	r2, [sl], #4
 80124e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80124e6:	4298      	cmp	r0, r3
 80124e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80124ec:	d8f2      	bhi.n	80124d4 <__lshift+0x70>
 80124ee:	1b03      	subs	r3, r0, r4
 80124f0:	3b15      	subs	r3, #21
 80124f2:	f023 0303 	bic.w	r3, r3, #3
 80124f6:	3304      	adds	r3, #4
 80124f8:	f104 0215 	add.w	r2, r4, #21
 80124fc:	4290      	cmp	r0, r2
 80124fe:	bf38      	it	cc
 8012500:	2304      	movcc	r3, #4
 8012502:	f841 c003 	str.w	ip, [r1, r3]
 8012506:	f1bc 0f00 	cmp.w	ip, #0
 801250a:	d001      	beq.n	8012510 <__lshift+0xac>
 801250c:	f108 0602 	add.w	r6, r8, #2
 8012510:	3e01      	subs	r6, #1
 8012512:	4638      	mov	r0, r7
 8012514:	612e      	str	r6, [r5, #16]
 8012516:	4621      	mov	r1, r4
 8012518:	f7ff fdd2 	bl	80120c0 <_Bfree>
 801251c:	4628      	mov	r0, r5
 801251e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012522:	f842 0f04 	str.w	r0, [r2, #4]!
 8012526:	3301      	adds	r3, #1
 8012528:	e7c1      	b.n	80124ae <__lshift+0x4a>
 801252a:	3904      	subs	r1, #4
 801252c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012530:	f841 2f04 	str.w	r2, [r1, #4]!
 8012534:	4298      	cmp	r0, r3
 8012536:	d8f9      	bhi.n	801252c <__lshift+0xc8>
 8012538:	e7ea      	b.n	8012510 <__lshift+0xac>
 801253a:	bf00      	nop
 801253c:	08014a3d 	.word	0x08014a3d
 8012540:	08014ab0 	.word	0x08014ab0

08012544 <__mcmp>:
 8012544:	b530      	push	{r4, r5, lr}
 8012546:	6902      	ldr	r2, [r0, #16]
 8012548:	690c      	ldr	r4, [r1, #16]
 801254a:	1b12      	subs	r2, r2, r4
 801254c:	d10e      	bne.n	801256c <__mcmp+0x28>
 801254e:	f100 0314 	add.w	r3, r0, #20
 8012552:	3114      	adds	r1, #20
 8012554:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012558:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801255c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012560:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012564:	42a5      	cmp	r5, r4
 8012566:	d003      	beq.n	8012570 <__mcmp+0x2c>
 8012568:	d305      	bcc.n	8012576 <__mcmp+0x32>
 801256a:	2201      	movs	r2, #1
 801256c:	4610      	mov	r0, r2
 801256e:	bd30      	pop	{r4, r5, pc}
 8012570:	4283      	cmp	r3, r0
 8012572:	d3f3      	bcc.n	801255c <__mcmp+0x18>
 8012574:	e7fa      	b.n	801256c <__mcmp+0x28>
 8012576:	f04f 32ff 	mov.w	r2, #4294967295
 801257a:	e7f7      	b.n	801256c <__mcmp+0x28>

0801257c <__mdiff>:
 801257c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012580:	460c      	mov	r4, r1
 8012582:	4606      	mov	r6, r0
 8012584:	4611      	mov	r1, r2
 8012586:	4620      	mov	r0, r4
 8012588:	4690      	mov	r8, r2
 801258a:	f7ff ffdb 	bl	8012544 <__mcmp>
 801258e:	1e05      	subs	r5, r0, #0
 8012590:	d110      	bne.n	80125b4 <__mdiff+0x38>
 8012592:	4629      	mov	r1, r5
 8012594:	4630      	mov	r0, r6
 8012596:	f7ff fd53 	bl	8012040 <_Balloc>
 801259a:	b930      	cbnz	r0, 80125aa <__mdiff+0x2e>
 801259c:	4b3a      	ldr	r3, [pc, #232]	; (8012688 <__mdiff+0x10c>)
 801259e:	4602      	mov	r2, r0
 80125a0:	f240 2132 	movw	r1, #562	; 0x232
 80125a4:	4839      	ldr	r0, [pc, #228]	; (801268c <__mdiff+0x110>)
 80125a6:	f001 f9a7 	bl	80138f8 <__assert_func>
 80125aa:	2301      	movs	r3, #1
 80125ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80125b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b4:	bfa4      	itt	ge
 80125b6:	4643      	movge	r3, r8
 80125b8:	46a0      	movge	r8, r4
 80125ba:	4630      	mov	r0, r6
 80125bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80125c0:	bfa6      	itte	ge
 80125c2:	461c      	movge	r4, r3
 80125c4:	2500      	movge	r5, #0
 80125c6:	2501      	movlt	r5, #1
 80125c8:	f7ff fd3a 	bl	8012040 <_Balloc>
 80125cc:	b920      	cbnz	r0, 80125d8 <__mdiff+0x5c>
 80125ce:	4b2e      	ldr	r3, [pc, #184]	; (8012688 <__mdiff+0x10c>)
 80125d0:	4602      	mov	r2, r0
 80125d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80125d6:	e7e5      	b.n	80125a4 <__mdiff+0x28>
 80125d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80125dc:	6926      	ldr	r6, [r4, #16]
 80125de:	60c5      	str	r5, [r0, #12]
 80125e0:	f104 0914 	add.w	r9, r4, #20
 80125e4:	f108 0514 	add.w	r5, r8, #20
 80125e8:	f100 0e14 	add.w	lr, r0, #20
 80125ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80125f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80125f4:	f108 0210 	add.w	r2, r8, #16
 80125f8:	46f2      	mov	sl, lr
 80125fa:	2100      	movs	r1, #0
 80125fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8012600:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012604:	fa1f f883 	uxth.w	r8, r3
 8012608:	fa11 f18b 	uxtah	r1, r1, fp
 801260c:	0c1b      	lsrs	r3, r3, #16
 801260e:	eba1 0808 	sub.w	r8, r1, r8
 8012612:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012616:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801261a:	fa1f f888 	uxth.w	r8, r8
 801261e:	1419      	asrs	r1, r3, #16
 8012620:	454e      	cmp	r6, r9
 8012622:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012626:	f84a 3b04 	str.w	r3, [sl], #4
 801262a:	d8e7      	bhi.n	80125fc <__mdiff+0x80>
 801262c:	1b33      	subs	r3, r6, r4
 801262e:	3b15      	subs	r3, #21
 8012630:	f023 0303 	bic.w	r3, r3, #3
 8012634:	3304      	adds	r3, #4
 8012636:	3415      	adds	r4, #21
 8012638:	42a6      	cmp	r6, r4
 801263a:	bf38      	it	cc
 801263c:	2304      	movcc	r3, #4
 801263e:	441d      	add	r5, r3
 8012640:	4473      	add	r3, lr
 8012642:	469e      	mov	lr, r3
 8012644:	462e      	mov	r6, r5
 8012646:	4566      	cmp	r6, ip
 8012648:	d30e      	bcc.n	8012668 <__mdiff+0xec>
 801264a:	f10c 0203 	add.w	r2, ip, #3
 801264e:	1b52      	subs	r2, r2, r5
 8012650:	f022 0203 	bic.w	r2, r2, #3
 8012654:	3d03      	subs	r5, #3
 8012656:	45ac      	cmp	ip, r5
 8012658:	bf38      	it	cc
 801265a:	2200      	movcc	r2, #0
 801265c:	441a      	add	r2, r3
 801265e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012662:	b17b      	cbz	r3, 8012684 <__mdiff+0x108>
 8012664:	6107      	str	r7, [r0, #16]
 8012666:	e7a3      	b.n	80125b0 <__mdiff+0x34>
 8012668:	f856 8b04 	ldr.w	r8, [r6], #4
 801266c:	fa11 f288 	uxtah	r2, r1, r8
 8012670:	1414      	asrs	r4, r2, #16
 8012672:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012676:	b292      	uxth	r2, r2
 8012678:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801267c:	f84e 2b04 	str.w	r2, [lr], #4
 8012680:	1421      	asrs	r1, r4, #16
 8012682:	e7e0      	b.n	8012646 <__mdiff+0xca>
 8012684:	3f01      	subs	r7, #1
 8012686:	e7ea      	b.n	801265e <__mdiff+0xe2>
 8012688:	08014a3d 	.word	0x08014a3d
 801268c:	08014ab0 	.word	0x08014ab0

08012690 <__d2b>:
 8012690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012694:	4689      	mov	r9, r1
 8012696:	2101      	movs	r1, #1
 8012698:	ec57 6b10 	vmov	r6, r7, d0
 801269c:	4690      	mov	r8, r2
 801269e:	f7ff fccf 	bl	8012040 <_Balloc>
 80126a2:	4604      	mov	r4, r0
 80126a4:	b930      	cbnz	r0, 80126b4 <__d2b+0x24>
 80126a6:	4602      	mov	r2, r0
 80126a8:	4b25      	ldr	r3, [pc, #148]	; (8012740 <__d2b+0xb0>)
 80126aa:	4826      	ldr	r0, [pc, #152]	; (8012744 <__d2b+0xb4>)
 80126ac:	f240 310a 	movw	r1, #778	; 0x30a
 80126b0:	f001 f922 	bl	80138f8 <__assert_func>
 80126b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80126b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80126bc:	bb35      	cbnz	r5, 801270c <__d2b+0x7c>
 80126be:	2e00      	cmp	r6, #0
 80126c0:	9301      	str	r3, [sp, #4]
 80126c2:	d028      	beq.n	8012716 <__d2b+0x86>
 80126c4:	4668      	mov	r0, sp
 80126c6:	9600      	str	r6, [sp, #0]
 80126c8:	f7ff fd82 	bl	80121d0 <__lo0bits>
 80126cc:	9900      	ldr	r1, [sp, #0]
 80126ce:	b300      	cbz	r0, 8012712 <__d2b+0x82>
 80126d0:	9a01      	ldr	r2, [sp, #4]
 80126d2:	f1c0 0320 	rsb	r3, r0, #32
 80126d6:	fa02 f303 	lsl.w	r3, r2, r3
 80126da:	430b      	orrs	r3, r1
 80126dc:	40c2      	lsrs	r2, r0
 80126de:	6163      	str	r3, [r4, #20]
 80126e0:	9201      	str	r2, [sp, #4]
 80126e2:	9b01      	ldr	r3, [sp, #4]
 80126e4:	61a3      	str	r3, [r4, #24]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	bf14      	ite	ne
 80126ea:	2202      	movne	r2, #2
 80126ec:	2201      	moveq	r2, #1
 80126ee:	6122      	str	r2, [r4, #16]
 80126f0:	b1d5      	cbz	r5, 8012728 <__d2b+0x98>
 80126f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80126f6:	4405      	add	r5, r0
 80126f8:	f8c9 5000 	str.w	r5, [r9]
 80126fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012700:	f8c8 0000 	str.w	r0, [r8]
 8012704:	4620      	mov	r0, r4
 8012706:	b003      	add	sp, #12
 8012708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801270c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012710:	e7d5      	b.n	80126be <__d2b+0x2e>
 8012712:	6161      	str	r1, [r4, #20]
 8012714:	e7e5      	b.n	80126e2 <__d2b+0x52>
 8012716:	a801      	add	r0, sp, #4
 8012718:	f7ff fd5a 	bl	80121d0 <__lo0bits>
 801271c:	9b01      	ldr	r3, [sp, #4]
 801271e:	6163      	str	r3, [r4, #20]
 8012720:	2201      	movs	r2, #1
 8012722:	6122      	str	r2, [r4, #16]
 8012724:	3020      	adds	r0, #32
 8012726:	e7e3      	b.n	80126f0 <__d2b+0x60>
 8012728:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801272c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012730:	f8c9 0000 	str.w	r0, [r9]
 8012734:	6918      	ldr	r0, [r3, #16]
 8012736:	f7ff fd2b 	bl	8012190 <__hi0bits>
 801273a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801273e:	e7df      	b.n	8012700 <__d2b+0x70>
 8012740:	08014a3d 	.word	0x08014a3d
 8012744:	08014ab0 	.word	0x08014ab0

08012748 <_calloc_r>:
 8012748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801274a:	fba1 2402 	umull	r2, r4, r1, r2
 801274e:	b94c      	cbnz	r4, 8012764 <_calloc_r+0x1c>
 8012750:	4611      	mov	r1, r2
 8012752:	9201      	str	r2, [sp, #4]
 8012754:	f7fd fcd6 	bl	8010104 <_malloc_r>
 8012758:	9a01      	ldr	r2, [sp, #4]
 801275a:	4605      	mov	r5, r0
 801275c:	b930      	cbnz	r0, 801276c <_calloc_r+0x24>
 801275e:	4628      	mov	r0, r5
 8012760:	b003      	add	sp, #12
 8012762:	bd30      	pop	{r4, r5, pc}
 8012764:	220c      	movs	r2, #12
 8012766:	6002      	str	r2, [r0, #0]
 8012768:	2500      	movs	r5, #0
 801276a:	e7f8      	b.n	801275e <_calloc_r+0x16>
 801276c:	4621      	mov	r1, r4
 801276e:	f7fd fc55 	bl	801001c <memset>
 8012772:	e7f4      	b.n	801275e <_calloc_r+0x16>

08012774 <__ssputs_r>:
 8012774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012778:	688e      	ldr	r6, [r1, #8]
 801277a:	429e      	cmp	r6, r3
 801277c:	4682      	mov	sl, r0
 801277e:	460c      	mov	r4, r1
 8012780:	4690      	mov	r8, r2
 8012782:	461f      	mov	r7, r3
 8012784:	d838      	bhi.n	80127f8 <__ssputs_r+0x84>
 8012786:	898a      	ldrh	r2, [r1, #12]
 8012788:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801278c:	d032      	beq.n	80127f4 <__ssputs_r+0x80>
 801278e:	6825      	ldr	r5, [r4, #0]
 8012790:	6909      	ldr	r1, [r1, #16]
 8012792:	eba5 0901 	sub.w	r9, r5, r1
 8012796:	6965      	ldr	r5, [r4, #20]
 8012798:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801279c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80127a0:	3301      	adds	r3, #1
 80127a2:	444b      	add	r3, r9
 80127a4:	106d      	asrs	r5, r5, #1
 80127a6:	429d      	cmp	r5, r3
 80127a8:	bf38      	it	cc
 80127aa:	461d      	movcc	r5, r3
 80127ac:	0553      	lsls	r3, r2, #21
 80127ae:	d531      	bpl.n	8012814 <__ssputs_r+0xa0>
 80127b0:	4629      	mov	r1, r5
 80127b2:	f7fd fca7 	bl	8010104 <_malloc_r>
 80127b6:	4606      	mov	r6, r0
 80127b8:	b950      	cbnz	r0, 80127d0 <__ssputs_r+0x5c>
 80127ba:	230c      	movs	r3, #12
 80127bc:	f8ca 3000 	str.w	r3, [sl]
 80127c0:	89a3      	ldrh	r3, [r4, #12]
 80127c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127c6:	81a3      	strh	r3, [r4, #12]
 80127c8:	f04f 30ff 	mov.w	r0, #4294967295
 80127cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127d0:	6921      	ldr	r1, [r4, #16]
 80127d2:	464a      	mov	r2, r9
 80127d4:	f7fd fc14 	bl	8010000 <memcpy>
 80127d8:	89a3      	ldrh	r3, [r4, #12]
 80127da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80127de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127e2:	81a3      	strh	r3, [r4, #12]
 80127e4:	6126      	str	r6, [r4, #16]
 80127e6:	6165      	str	r5, [r4, #20]
 80127e8:	444e      	add	r6, r9
 80127ea:	eba5 0509 	sub.w	r5, r5, r9
 80127ee:	6026      	str	r6, [r4, #0]
 80127f0:	60a5      	str	r5, [r4, #8]
 80127f2:	463e      	mov	r6, r7
 80127f4:	42be      	cmp	r6, r7
 80127f6:	d900      	bls.n	80127fa <__ssputs_r+0x86>
 80127f8:	463e      	mov	r6, r7
 80127fa:	6820      	ldr	r0, [r4, #0]
 80127fc:	4632      	mov	r2, r6
 80127fe:	4641      	mov	r1, r8
 8012800:	f001 f900 	bl	8013a04 <memmove>
 8012804:	68a3      	ldr	r3, [r4, #8]
 8012806:	1b9b      	subs	r3, r3, r6
 8012808:	60a3      	str	r3, [r4, #8]
 801280a:	6823      	ldr	r3, [r4, #0]
 801280c:	4433      	add	r3, r6
 801280e:	6023      	str	r3, [r4, #0]
 8012810:	2000      	movs	r0, #0
 8012812:	e7db      	b.n	80127cc <__ssputs_r+0x58>
 8012814:	462a      	mov	r2, r5
 8012816:	f001 f90f 	bl	8013a38 <_realloc_r>
 801281a:	4606      	mov	r6, r0
 801281c:	2800      	cmp	r0, #0
 801281e:	d1e1      	bne.n	80127e4 <__ssputs_r+0x70>
 8012820:	6921      	ldr	r1, [r4, #16]
 8012822:	4650      	mov	r0, sl
 8012824:	f7fd fc02 	bl	801002c <_free_r>
 8012828:	e7c7      	b.n	80127ba <__ssputs_r+0x46>
	...

0801282c <_svfiprintf_r>:
 801282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012830:	4698      	mov	r8, r3
 8012832:	898b      	ldrh	r3, [r1, #12]
 8012834:	061b      	lsls	r3, r3, #24
 8012836:	b09d      	sub	sp, #116	; 0x74
 8012838:	4607      	mov	r7, r0
 801283a:	460d      	mov	r5, r1
 801283c:	4614      	mov	r4, r2
 801283e:	d50e      	bpl.n	801285e <_svfiprintf_r+0x32>
 8012840:	690b      	ldr	r3, [r1, #16]
 8012842:	b963      	cbnz	r3, 801285e <_svfiprintf_r+0x32>
 8012844:	2140      	movs	r1, #64	; 0x40
 8012846:	f7fd fc5d 	bl	8010104 <_malloc_r>
 801284a:	6028      	str	r0, [r5, #0]
 801284c:	6128      	str	r0, [r5, #16]
 801284e:	b920      	cbnz	r0, 801285a <_svfiprintf_r+0x2e>
 8012850:	230c      	movs	r3, #12
 8012852:	603b      	str	r3, [r7, #0]
 8012854:	f04f 30ff 	mov.w	r0, #4294967295
 8012858:	e0d1      	b.n	80129fe <_svfiprintf_r+0x1d2>
 801285a:	2340      	movs	r3, #64	; 0x40
 801285c:	616b      	str	r3, [r5, #20]
 801285e:	2300      	movs	r3, #0
 8012860:	9309      	str	r3, [sp, #36]	; 0x24
 8012862:	2320      	movs	r3, #32
 8012864:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012868:	f8cd 800c 	str.w	r8, [sp, #12]
 801286c:	2330      	movs	r3, #48	; 0x30
 801286e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012a18 <_svfiprintf_r+0x1ec>
 8012872:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012876:	f04f 0901 	mov.w	r9, #1
 801287a:	4623      	mov	r3, r4
 801287c:	469a      	mov	sl, r3
 801287e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012882:	b10a      	cbz	r2, 8012888 <_svfiprintf_r+0x5c>
 8012884:	2a25      	cmp	r2, #37	; 0x25
 8012886:	d1f9      	bne.n	801287c <_svfiprintf_r+0x50>
 8012888:	ebba 0b04 	subs.w	fp, sl, r4
 801288c:	d00b      	beq.n	80128a6 <_svfiprintf_r+0x7a>
 801288e:	465b      	mov	r3, fp
 8012890:	4622      	mov	r2, r4
 8012892:	4629      	mov	r1, r5
 8012894:	4638      	mov	r0, r7
 8012896:	f7ff ff6d 	bl	8012774 <__ssputs_r>
 801289a:	3001      	adds	r0, #1
 801289c:	f000 80aa 	beq.w	80129f4 <_svfiprintf_r+0x1c8>
 80128a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128a2:	445a      	add	r2, fp
 80128a4:	9209      	str	r2, [sp, #36]	; 0x24
 80128a6:	f89a 3000 	ldrb.w	r3, [sl]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	f000 80a2 	beq.w	80129f4 <_svfiprintf_r+0x1c8>
 80128b0:	2300      	movs	r3, #0
 80128b2:	f04f 32ff 	mov.w	r2, #4294967295
 80128b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128ba:	f10a 0a01 	add.w	sl, sl, #1
 80128be:	9304      	str	r3, [sp, #16]
 80128c0:	9307      	str	r3, [sp, #28]
 80128c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128c6:	931a      	str	r3, [sp, #104]	; 0x68
 80128c8:	4654      	mov	r4, sl
 80128ca:	2205      	movs	r2, #5
 80128cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128d0:	4851      	ldr	r0, [pc, #324]	; (8012a18 <_svfiprintf_r+0x1ec>)
 80128d2:	f7ed fc85 	bl	80001e0 <memchr>
 80128d6:	9a04      	ldr	r2, [sp, #16]
 80128d8:	b9d8      	cbnz	r0, 8012912 <_svfiprintf_r+0xe6>
 80128da:	06d0      	lsls	r0, r2, #27
 80128dc:	bf44      	itt	mi
 80128de:	2320      	movmi	r3, #32
 80128e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128e4:	0711      	lsls	r1, r2, #28
 80128e6:	bf44      	itt	mi
 80128e8:	232b      	movmi	r3, #43	; 0x2b
 80128ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128ee:	f89a 3000 	ldrb.w	r3, [sl]
 80128f2:	2b2a      	cmp	r3, #42	; 0x2a
 80128f4:	d015      	beq.n	8012922 <_svfiprintf_r+0xf6>
 80128f6:	9a07      	ldr	r2, [sp, #28]
 80128f8:	4654      	mov	r4, sl
 80128fa:	2000      	movs	r0, #0
 80128fc:	f04f 0c0a 	mov.w	ip, #10
 8012900:	4621      	mov	r1, r4
 8012902:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012906:	3b30      	subs	r3, #48	; 0x30
 8012908:	2b09      	cmp	r3, #9
 801290a:	d94e      	bls.n	80129aa <_svfiprintf_r+0x17e>
 801290c:	b1b0      	cbz	r0, 801293c <_svfiprintf_r+0x110>
 801290e:	9207      	str	r2, [sp, #28]
 8012910:	e014      	b.n	801293c <_svfiprintf_r+0x110>
 8012912:	eba0 0308 	sub.w	r3, r0, r8
 8012916:	fa09 f303 	lsl.w	r3, r9, r3
 801291a:	4313      	orrs	r3, r2
 801291c:	9304      	str	r3, [sp, #16]
 801291e:	46a2      	mov	sl, r4
 8012920:	e7d2      	b.n	80128c8 <_svfiprintf_r+0x9c>
 8012922:	9b03      	ldr	r3, [sp, #12]
 8012924:	1d19      	adds	r1, r3, #4
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	9103      	str	r1, [sp, #12]
 801292a:	2b00      	cmp	r3, #0
 801292c:	bfbb      	ittet	lt
 801292e:	425b      	neglt	r3, r3
 8012930:	f042 0202 	orrlt.w	r2, r2, #2
 8012934:	9307      	strge	r3, [sp, #28]
 8012936:	9307      	strlt	r3, [sp, #28]
 8012938:	bfb8      	it	lt
 801293a:	9204      	strlt	r2, [sp, #16]
 801293c:	7823      	ldrb	r3, [r4, #0]
 801293e:	2b2e      	cmp	r3, #46	; 0x2e
 8012940:	d10c      	bne.n	801295c <_svfiprintf_r+0x130>
 8012942:	7863      	ldrb	r3, [r4, #1]
 8012944:	2b2a      	cmp	r3, #42	; 0x2a
 8012946:	d135      	bne.n	80129b4 <_svfiprintf_r+0x188>
 8012948:	9b03      	ldr	r3, [sp, #12]
 801294a:	1d1a      	adds	r2, r3, #4
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	9203      	str	r2, [sp, #12]
 8012950:	2b00      	cmp	r3, #0
 8012952:	bfb8      	it	lt
 8012954:	f04f 33ff 	movlt.w	r3, #4294967295
 8012958:	3402      	adds	r4, #2
 801295a:	9305      	str	r3, [sp, #20]
 801295c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012a28 <_svfiprintf_r+0x1fc>
 8012960:	7821      	ldrb	r1, [r4, #0]
 8012962:	2203      	movs	r2, #3
 8012964:	4650      	mov	r0, sl
 8012966:	f7ed fc3b 	bl	80001e0 <memchr>
 801296a:	b140      	cbz	r0, 801297e <_svfiprintf_r+0x152>
 801296c:	2340      	movs	r3, #64	; 0x40
 801296e:	eba0 000a 	sub.w	r0, r0, sl
 8012972:	fa03 f000 	lsl.w	r0, r3, r0
 8012976:	9b04      	ldr	r3, [sp, #16]
 8012978:	4303      	orrs	r3, r0
 801297a:	3401      	adds	r4, #1
 801297c:	9304      	str	r3, [sp, #16]
 801297e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012982:	4826      	ldr	r0, [pc, #152]	; (8012a1c <_svfiprintf_r+0x1f0>)
 8012984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012988:	2206      	movs	r2, #6
 801298a:	f7ed fc29 	bl	80001e0 <memchr>
 801298e:	2800      	cmp	r0, #0
 8012990:	d038      	beq.n	8012a04 <_svfiprintf_r+0x1d8>
 8012992:	4b23      	ldr	r3, [pc, #140]	; (8012a20 <_svfiprintf_r+0x1f4>)
 8012994:	bb1b      	cbnz	r3, 80129de <_svfiprintf_r+0x1b2>
 8012996:	9b03      	ldr	r3, [sp, #12]
 8012998:	3307      	adds	r3, #7
 801299a:	f023 0307 	bic.w	r3, r3, #7
 801299e:	3308      	adds	r3, #8
 80129a0:	9303      	str	r3, [sp, #12]
 80129a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129a4:	4433      	add	r3, r6
 80129a6:	9309      	str	r3, [sp, #36]	; 0x24
 80129a8:	e767      	b.n	801287a <_svfiprintf_r+0x4e>
 80129aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80129ae:	460c      	mov	r4, r1
 80129b0:	2001      	movs	r0, #1
 80129b2:	e7a5      	b.n	8012900 <_svfiprintf_r+0xd4>
 80129b4:	2300      	movs	r3, #0
 80129b6:	3401      	adds	r4, #1
 80129b8:	9305      	str	r3, [sp, #20]
 80129ba:	4619      	mov	r1, r3
 80129bc:	f04f 0c0a 	mov.w	ip, #10
 80129c0:	4620      	mov	r0, r4
 80129c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129c6:	3a30      	subs	r2, #48	; 0x30
 80129c8:	2a09      	cmp	r2, #9
 80129ca:	d903      	bls.n	80129d4 <_svfiprintf_r+0x1a8>
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d0c5      	beq.n	801295c <_svfiprintf_r+0x130>
 80129d0:	9105      	str	r1, [sp, #20]
 80129d2:	e7c3      	b.n	801295c <_svfiprintf_r+0x130>
 80129d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80129d8:	4604      	mov	r4, r0
 80129da:	2301      	movs	r3, #1
 80129dc:	e7f0      	b.n	80129c0 <_svfiprintf_r+0x194>
 80129de:	ab03      	add	r3, sp, #12
 80129e0:	9300      	str	r3, [sp, #0]
 80129e2:	462a      	mov	r2, r5
 80129e4:	4b0f      	ldr	r3, [pc, #60]	; (8012a24 <_svfiprintf_r+0x1f8>)
 80129e6:	a904      	add	r1, sp, #16
 80129e8:	4638      	mov	r0, r7
 80129ea:	f7fd fc9f 	bl	801032c <_printf_float>
 80129ee:	1c42      	adds	r2, r0, #1
 80129f0:	4606      	mov	r6, r0
 80129f2:	d1d6      	bne.n	80129a2 <_svfiprintf_r+0x176>
 80129f4:	89ab      	ldrh	r3, [r5, #12]
 80129f6:	065b      	lsls	r3, r3, #25
 80129f8:	f53f af2c 	bmi.w	8012854 <_svfiprintf_r+0x28>
 80129fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129fe:	b01d      	add	sp, #116	; 0x74
 8012a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a04:	ab03      	add	r3, sp, #12
 8012a06:	9300      	str	r3, [sp, #0]
 8012a08:	462a      	mov	r2, r5
 8012a0a:	4b06      	ldr	r3, [pc, #24]	; (8012a24 <_svfiprintf_r+0x1f8>)
 8012a0c:	a904      	add	r1, sp, #16
 8012a0e:	4638      	mov	r0, r7
 8012a10:	f7fd ff30 	bl	8010874 <_printf_i>
 8012a14:	e7eb      	b.n	80129ee <_svfiprintf_r+0x1c2>
 8012a16:	bf00      	nop
 8012a18:	08014c0c 	.word	0x08014c0c
 8012a1c:	08014c16 	.word	0x08014c16
 8012a20:	0801032d 	.word	0x0801032d
 8012a24:	08012775 	.word	0x08012775
 8012a28:	08014c12 	.word	0x08014c12

08012a2c <__sfputc_r>:
 8012a2c:	6893      	ldr	r3, [r2, #8]
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	b410      	push	{r4}
 8012a34:	6093      	str	r3, [r2, #8]
 8012a36:	da08      	bge.n	8012a4a <__sfputc_r+0x1e>
 8012a38:	6994      	ldr	r4, [r2, #24]
 8012a3a:	42a3      	cmp	r3, r4
 8012a3c:	db01      	blt.n	8012a42 <__sfputc_r+0x16>
 8012a3e:	290a      	cmp	r1, #10
 8012a40:	d103      	bne.n	8012a4a <__sfputc_r+0x1e>
 8012a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a46:	f7fe b961 	b.w	8010d0c <__swbuf_r>
 8012a4a:	6813      	ldr	r3, [r2, #0]
 8012a4c:	1c58      	adds	r0, r3, #1
 8012a4e:	6010      	str	r0, [r2, #0]
 8012a50:	7019      	strb	r1, [r3, #0]
 8012a52:	4608      	mov	r0, r1
 8012a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a58:	4770      	bx	lr

08012a5a <__sfputs_r>:
 8012a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a5c:	4606      	mov	r6, r0
 8012a5e:	460f      	mov	r7, r1
 8012a60:	4614      	mov	r4, r2
 8012a62:	18d5      	adds	r5, r2, r3
 8012a64:	42ac      	cmp	r4, r5
 8012a66:	d101      	bne.n	8012a6c <__sfputs_r+0x12>
 8012a68:	2000      	movs	r0, #0
 8012a6a:	e007      	b.n	8012a7c <__sfputs_r+0x22>
 8012a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a70:	463a      	mov	r2, r7
 8012a72:	4630      	mov	r0, r6
 8012a74:	f7ff ffda 	bl	8012a2c <__sfputc_r>
 8012a78:	1c43      	adds	r3, r0, #1
 8012a7a:	d1f3      	bne.n	8012a64 <__sfputs_r+0xa>
 8012a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a80 <_vfiprintf_r>:
 8012a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a84:	460d      	mov	r5, r1
 8012a86:	b09d      	sub	sp, #116	; 0x74
 8012a88:	4614      	mov	r4, r2
 8012a8a:	4698      	mov	r8, r3
 8012a8c:	4606      	mov	r6, r0
 8012a8e:	b118      	cbz	r0, 8012a98 <_vfiprintf_r+0x18>
 8012a90:	6983      	ldr	r3, [r0, #24]
 8012a92:	b90b      	cbnz	r3, 8012a98 <_vfiprintf_r+0x18>
 8012a94:	f7ff f9a2 	bl	8011ddc <__sinit>
 8012a98:	4b89      	ldr	r3, [pc, #548]	; (8012cc0 <_vfiprintf_r+0x240>)
 8012a9a:	429d      	cmp	r5, r3
 8012a9c:	d11b      	bne.n	8012ad6 <_vfiprintf_r+0x56>
 8012a9e:	6875      	ldr	r5, [r6, #4]
 8012aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012aa2:	07d9      	lsls	r1, r3, #31
 8012aa4:	d405      	bmi.n	8012ab2 <_vfiprintf_r+0x32>
 8012aa6:	89ab      	ldrh	r3, [r5, #12]
 8012aa8:	059a      	lsls	r2, r3, #22
 8012aaa:	d402      	bmi.n	8012ab2 <_vfiprintf_r+0x32>
 8012aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012aae:	f7ff fa54 	bl	8011f5a <__retarget_lock_acquire_recursive>
 8012ab2:	89ab      	ldrh	r3, [r5, #12]
 8012ab4:	071b      	lsls	r3, r3, #28
 8012ab6:	d501      	bpl.n	8012abc <_vfiprintf_r+0x3c>
 8012ab8:	692b      	ldr	r3, [r5, #16]
 8012aba:	b9eb      	cbnz	r3, 8012af8 <_vfiprintf_r+0x78>
 8012abc:	4629      	mov	r1, r5
 8012abe:	4630      	mov	r0, r6
 8012ac0:	f7fe f976 	bl	8010db0 <__swsetup_r>
 8012ac4:	b1c0      	cbz	r0, 8012af8 <_vfiprintf_r+0x78>
 8012ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ac8:	07dc      	lsls	r4, r3, #31
 8012aca:	d50e      	bpl.n	8012aea <_vfiprintf_r+0x6a>
 8012acc:	f04f 30ff 	mov.w	r0, #4294967295
 8012ad0:	b01d      	add	sp, #116	; 0x74
 8012ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ad6:	4b7b      	ldr	r3, [pc, #492]	; (8012cc4 <_vfiprintf_r+0x244>)
 8012ad8:	429d      	cmp	r5, r3
 8012ada:	d101      	bne.n	8012ae0 <_vfiprintf_r+0x60>
 8012adc:	68b5      	ldr	r5, [r6, #8]
 8012ade:	e7df      	b.n	8012aa0 <_vfiprintf_r+0x20>
 8012ae0:	4b79      	ldr	r3, [pc, #484]	; (8012cc8 <_vfiprintf_r+0x248>)
 8012ae2:	429d      	cmp	r5, r3
 8012ae4:	bf08      	it	eq
 8012ae6:	68f5      	ldreq	r5, [r6, #12]
 8012ae8:	e7da      	b.n	8012aa0 <_vfiprintf_r+0x20>
 8012aea:	89ab      	ldrh	r3, [r5, #12]
 8012aec:	0598      	lsls	r0, r3, #22
 8012aee:	d4ed      	bmi.n	8012acc <_vfiprintf_r+0x4c>
 8012af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012af2:	f7ff fa33 	bl	8011f5c <__retarget_lock_release_recursive>
 8012af6:	e7e9      	b.n	8012acc <_vfiprintf_r+0x4c>
 8012af8:	2300      	movs	r3, #0
 8012afa:	9309      	str	r3, [sp, #36]	; 0x24
 8012afc:	2320      	movs	r3, #32
 8012afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b06:	2330      	movs	r3, #48	; 0x30
 8012b08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012ccc <_vfiprintf_r+0x24c>
 8012b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b10:	f04f 0901 	mov.w	r9, #1
 8012b14:	4623      	mov	r3, r4
 8012b16:	469a      	mov	sl, r3
 8012b18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b1c:	b10a      	cbz	r2, 8012b22 <_vfiprintf_r+0xa2>
 8012b1e:	2a25      	cmp	r2, #37	; 0x25
 8012b20:	d1f9      	bne.n	8012b16 <_vfiprintf_r+0x96>
 8012b22:	ebba 0b04 	subs.w	fp, sl, r4
 8012b26:	d00b      	beq.n	8012b40 <_vfiprintf_r+0xc0>
 8012b28:	465b      	mov	r3, fp
 8012b2a:	4622      	mov	r2, r4
 8012b2c:	4629      	mov	r1, r5
 8012b2e:	4630      	mov	r0, r6
 8012b30:	f7ff ff93 	bl	8012a5a <__sfputs_r>
 8012b34:	3001      	adds	r0, #1
 8012b36:	f000 80aa 	beq.w	8012c8e <_vfiprintf_r+0x20e>
 8012b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b3c:	445a      	add	r2, fp
 8012b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8012b40:	f89a 3000 	ldrb.w	r3, [sl]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	f000 80a2 	beq.w	8012c8e <_vfiprintf_r+0x20e>
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b54:	f10a 0a01 	add.w	sl, sl, #1
 8012b58:	9304      	str	r3, [sp, #16]
 8012b5a:	9307      	str	r3, [sp, #28]
 8012b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b60:	931a      	str	r3, [sp, #104]	; 0x68
 8012b62:	4654      	mov	r4, sl
 8012b64:	2205      	movs	r2, #5
 8012b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b6a:	4858      	ldr	r0, [pc, #352]	; (8012ccc <_vfiprintf_r+0x24c>)
 8012b6c:	f7ed fb38 	bl	80001e0 <memchr>
 8012b70:	9a04      	ldr	r2, [sp, #16]
 8012b72:	b9d8      	cbnz	r0, 8012bac <_vfiprintf_r+0x12c>
 8012b74:	06d1      	lsls	r1, r2, #27
 8012b76:	bf44      	itt	mi
 8012b78:	2320      	movmi	r3, #32
 8012b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b7e:	0713      	lsls	r3, r2, #28
 8012b80:	bf44      	itt	mi
 8012b82:	232b      	movmi	r3, #43	; 0x2b
 8012b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b88:	f89a 3000 	ldrb.w	r3, [sl]
 8012b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8012b8e:	d015      	beq.n	8012bbc <_vfiprintf_r+0x13c>
 8012b90:	9a07      	ldr	r2, [sp, #28]
 8012b92:	4654      	mov	r4, sl
 8012b94:	2000      	movs	r0, #0
 8012b96:	f04f 0c0a 	mov.w	ip, #10
 8012b9a:	4621      	mov	r1, r4
 8012b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ba0:	3b30      	subs	r3, #48	; 0x30
 8012ba2:	2b09      	cmp	r3, #9
 8012ba4:	d94e      	bls.n	8012c44 <_vfiprintf_r+0x1c4>
 8012ba6:	b1b0      	cbz	r0, 8012bd6 <_vfiprintf_r+0x156>
 8012ba8:	9207      	str	r2, [sp, #28]
 8012baa:	e014      	b.n	8012bd6 <_vfiprintf_r+0x156>
 8012bac:	eba0 0308 	sub.w	r3, r0, r8
 8012bb0:	fa09 f303 	lsl.w	r3, r9, r3
 8012bb4:	4313      	orrs	r3, r2
 8012bb6:	9304      	str	r3, [sp, #16]
 8012bb8:	46a2      	mov	sl, r4
 8012bba:	e7d2      	b.n	8012b62 <_vfiprintf_r+0xe2>
 8012bbc:	9b03      	ldr	r3, [sp, #12]
 8012bbe:	1d19      	adds	r1, r3, #4
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	9103      	str	r1, [sp, #12]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	bfbb      	ittet	lt
 8012bc8:	425b      	neglt	r3, r3
 8012bca:	f042 0202 	orrlt.w	r2, r2, #2
 8012bce:	9307      	strge	r3, [sp, #28]
 8012bd0:	9307      	strlt	r3, [sp, #28]
 8012bd2:	bfb8      	it	lt
 8012bd4:	9204      	strlt	r2, [sp, #16]
 8012bd6:	7823      	ldrb	r3, [r4, #0]
 8012bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8012bda:	d10c      	bne.n	8012bf6 <_vfiprintf_r+0x176>
 8012bdc:	7863      	ldrb	r3, [r4, #1]
 8012bde:	2b2a      	cmp	r3, #42	; 0x2a
 8012be0:	d135      	bne.n	8012c4e <_vfiprintf_r+0x1ce>
 8012be2:	9b03      	ldr	r3, [sp, #12]
 8012be4:	1d1a      	adds	r2, r3, #4
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	9203      	str	r2, [sp, #12]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	bfb8      	it	lt
 8012bee:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bf2:	3402      	adds	r4, #2
 8012bf4:	9305      	str	r3, [sp, #20]
 8012bf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012cdc <_vfiprintf_r+0x25c>
 8012bfa:	7821      	ldrb	r1, [r4, #0]
 8012bfc:	2203      	movs	r2, #3
 8012bfe:	4650      	mov	r0, sl
 8012c00:	f7ed faee 	bl	80001e0 <memchr>
 8012c04:	b140      	cbz	r0, 8012c18 <_vfiprintf_r+0x198>
 8012c06:	2340      	movs	r3, #64	; 0x40
 8012c08:	eba0 000a 	sub.w	r0, r0, sl
 8012c0c:	fa03 f000 	lsl.w	r0, r3, r0
 8012c10:	9b04      	ldr	r3, [sp, #16]
 8012c12:	4303      	orrs	r3, r0
 8012c14:	3401      	adds	r4, #1
 8012c16:	9304      	str	r3, [sp, #16]
 8012c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c1c:	482c      	ldr	r0, [pc, #176]	; (8012cd0 <_vfiprintf_r+0x250>)
 8012c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c22:	2206      	movs	r2, #6
 8012c24:	f7ed fadc 	bl	80001e0 <memchr>
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	d03f      	beq.n	8012cac <_vfiprintf_r+0x22c>
 8012c2c:	4b29      	ldr	r3, [pc, #164]	; (8012cd4 <_vfiprintf_r+0x254>)
 8012c2e:	bb1b      	cbnz	r3, 8012c78 <_vfiprintf_r+0x1f8>
 8012c30:	9b03      	ldr	r3, [sp, #12]
 8012c32:	3307      	adds	r3, #7
 8012c34:	f023 0307 	bic.w	r3, r3, #7
 8012c38:	3308      	adds	r3, #8
 8012c3a:	9303      	str	r3, [sp, #12]
 8012c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c3e:	443b      	add	r3, r7
 8012c40:	9309      	str	r3, [sp, #36]	; 0x24
 8012c42:	e767      	b.n	8012b14 <_vfiprintf_r+0x94>
 8012c44:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c48:	460c      	mov	r4, r1
 8012c4a:	2001      	movs	r0, #1
 8012c4c:	e7a5      	b.n	8012b9a <_vfiprintf_r+0x11a>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	3401      	adds	r4, #1
 8012c52:	9305      	str	r3, [sp, #20]
 8012c54:	4619      	mov	r1, r3
 8012c56:	f04f 0c0a 	mov.w	ip, #10
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c60:	3a30      	subs	r2, #48	; 0x30
 8012c62:	2a09      	cmp	r2, #9
 8012c64:	d903      	bls.n	8012c6e <_vfiprintf_r+0x1ee>
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d0c5      	beq.n	8012bf6 <_vfiprintf_r+0x176>
 8012c6a:	9105      	str	r1, [sp, #20]
 8012c6c:	e7c3      	b.n	8012bf6 <_vfiprintf_r+0x176>
 8012c6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c72:	4604      	mov	r4, r0
 8012c74:	2301      	movs	r3, #1
 8012c76:	e7f0      	b.n	8012c5a <_vfiprintf_r+0x1da>
 8012c78:	ab03      	add	r3, sp, #12
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	462a      	mov	r2, r5
 8012c7e:	4b16      	ldr	r3, [pc, #88]	; (8012cd8 <_vfiprintf_r+0x258>)
 8012c80:	a904      	add	r1, sp, #16
 8012c82:	4630      	mov	r0, r6
 8012c84:	f7fd fb52 	bl	801032c <_printf_float>
 8012c88:	4607      	mov	r7, r0
 8012c8a:	1c78      	adds	r0, r7, #1
 8012c8c:	d1d6      	bne.n	8012c3c <_vfiprintf_r+0x1bc>
 8012c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c90:	07d9      	lsls	r1, r3, #31
 8012c92:	d405      	bmi.n	8012ca0 <_vfiprintf_r+0x220>
 8012c94:	89ab      	ldrh	r3, [r5, #12]
 8012c96:	059a      	lsls	r2, r3, #22
 8012c98:	d402      	bmi.n	8012ca0 <_vfiprintf_r+0x220>
 8012c9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c9c:	f7ff f95e 	bl	8011f5c <__retarget_lock_release_recursive>
 8012ca0:	89ab      	ldrh	r3, [r5, #12]
 8012ca2:	065b      	lsls	r3, r3, #25
 8012ca4:	f53f af12 	bmi.w	8012acc <_vfiprintf_r+0x4c>
 8012ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012caa:	e711      	b.n	8012ad0 <_vfiprintf_r+0x50>
 8012cac:	ab03      	add	r3, sp, #12
 8012cae:	9300      	str	r3, [sp, #0]
 8012cb0:	462a      	mov	r2, r5
 8012cb2:	4b09      	ldr	r3, [pc, #36]	; (8012cd8 <_vfiprintf_r+0x258>)
 8012cb4:	a904      	add	r1, sp, #16
 8012cb6:	4630      	mov	r0, r6
 8012cb8:	f7fd fddc 	bl	8010874 <_printf_i>
 8012cbc:	e7e4      	b.n	8012c88 <_vfiprintf_r+0x208>
 8012cbe:	bf00      	nop
 8012cc0:	08014a70 	.word	0x08014a70
 8012cc4:	08014a90 	.word	0x08014a90
 8012cc8:	08014a50 	.word	0x08014a50
 8012ccc:	08014c0c 	.word	0x08014c0c
 8012cd0:	08014c16 	.word	0x08014c16
 8012cd4:	0801032d 	.word	0x0801032d
 8012cd8:	08012a5b 	.word	0x08012a5b
 8012cdc:	08014c12 	.word	0x08014c12

08012ce0 <__svfiscanf_r>:
 8012ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce4:	461d      	mov	r5, r3
 8012ce6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012ce8:	07df      	lsls	r7, r3, #31
 8012cea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012cee:	4606      	mov	r6, r0
 8012cf0:	460c      	mov	r4, r1
 8012cf2:	4692      	mov	sl, r2
 8012cf4:	d405      	bmi.n	8012d02 <__svfiscanf_r+0x22>
 8012cf6:	898b      	ldrh	r3, [r1, #12]
 8012cf8:	0598      	lsls	r0, r3, #22
 8012cfa:	d402      	bmi.n	8012d02 <__svfiscanf_r+0x22>
 8012cfc:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8012cfe:	f7ff f92c 	bl	8011f5a <__retarget_lock_acquire_recursive>
 8012d02:	2300      	movs	r3, #0
 8012d04:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8012d08:	4ba6      	ldr	r3, [pc, #664]	; (8012fa4 <__svfiscanf_r+0x2c4>)
 8012d0a:	93a0      	str	r3, [sp, #640]	; 0x280
 8012d0c:	f10d 0804 	add.w	r8, sp, #4
 8012d10:	4ba5      	ldr	r3, [pc, #660]	; (8012fa8 <__svfiscanf_r+0x2c8>)
 8012d12:	4fa6      	ldr	r7, [pc, #664]	; (8012fac <__svfiscanf_r+0x2cc>)
 8012d14:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8012fb0 <__svfiscanf_r+0x2d0>
 8012d18:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012d1c:	93a1      	str	r3, [sp, #644]	; 0x284
 8012d1e:	9500      	str	r5, [sp, #0]
 8012d20:	f89a 3000 	ldrb.w	r3, [sl]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	f000 8173 	beq.w	8013010 <__svfiscanf_r+0x330>
 8012d2a:	5dd9      	ldrb	r1, [r3, r7]
 8012d2c:	f011 0108 	ands.w	r1, r1, #8
 8012d30:	f10a 0501 	add.w	r5, sl, #1
 8012d34:	d019      	beq.n	8012d6a <__svfiscanf_r+0x8a>
 8012d36:	6863      	ldr	r3, [r4, #4]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	dd0f      	ble.n	8012d5c <__svfiscanf_r+0x7c>
 8012d3c:	6823      	ldr	r3, [r4, #0]
 8012d3e:	781a      	ldrb	r2, [r3, #0]
 8012d40:	5cba      	ldrb	r2, [r7, r2]
 8012d42:	0711      	lsls	r1, r2, #28
 8012d44:	d401      	bmi.n	8012d4a <__svfiscanf_r+0x6a>
 8012d46:	46aa      	mov	sl, r5
 8012d48:	e7ea      	b.n	8012d20 <__svfiscanf_r+0x40>
 8012d4a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012d4c:	3201      	adds	r2, #1
 8012d4e:	9245      	str	r2, [sp, #276]	; 0x114
 8012d50:	6862      	ldr	r2, [r4, #4]
 8012d52:	3301      	adds	r3, #1
 8012d54:	3a01      	subs	r2, #1
 8012d56:	6062      	str	r2, [r4, #4]
 8012d58:	6023      	str	r3, [r4, #0]
 8012d5a:	e7ec      	b.n	8012d36 <__svfiscanf_r+0x56>
 8012d5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012d5e:	4621      	mov	r1, r4
 8012d60:	4630      	mov	r0, r6
 8012d62:	4798      	blx	r3
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d0e9      	beq.n	8012d3c <__svfiscanf_r+0x5c>
 8012d68:	e7ed      	b.n	8012d46 <__svfiscanf_r+0x66>
 8012d6a:	2b25      	cmp	r3, #37	; 0x25
 8012d6c:	d012      	beq.n	8012d94 <__svfiscanf_r+0xb4>
 8012d6e:	469a      	mov	sl, r3
 8012d70:	6863      	ldr	r3, [r4, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	f340 8095 	ble.w	8012ea2 <__svfiscanf_r+0x1c2>
 8012d78:	6822      	ldr	r2, [r4, #0]
 8012d7a:	7813      	ldrb	r3, [r2, #0]
 8012d7c:	4553      	cmp	r3, sl
 8012d7e:	f040 8147 	bne.w	8013010 <__svfiscanf_r+0x330>
 8012d82:	6863      	ldr	r3, [r4, #4]
 8012d84:	3b01      	subs	r3, #1
 8012d86:	6063      	str	r3, [r4, #4]
 8012d88:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012d8a:	3201      	adds	r2, #1
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	6022      	str	r2, [r4, #0]
 8012d90:	9345      	str	r3, [sp, #276]	; 0x114
 8012d92:	e7d8      	b.n	8012d46 <__svfiscanf_r+0x66>
 8012d94:	9141      	str	r1, [sp, #260]	; 0x104
 8012d96:	9143      	str	r1, [sp, #268]	; 0x10c
 8012d98:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8012d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8012d9e:	bf02      	ittt	eq
 8012da0:	2310      	moveq	r3, #16
 8012da2:	9341      	streq	r3, [sp, #260]	; 0x104
 8012da4:	f10a 0502 	addeq.w	r5, sl, #2
 8012da8:	220a      	movs	r2, #10
 8012daa:	46aa      	mov	sl, r5
 8012dac:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012db0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012db4:	2b09      	cmp	r3, #9
 8012db6:	d91e      	bls.n	8012df6 <__svfiscanf_r+0x116>
 8012db8:	487d      	ldr	r0, [pc, #500]	; (8012fb0 <__svfiscanf_r+0x2d0>)
 8012dba:	2203      	movs	r2, #3
 8012dbc:	f7ed fa10 	bl	80001e0 <memchr>
 8012dc0:	b140      	cbz	r0, 8012dd4 <__svfiscanf_r+0xf4>
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	eba0 0009 	sub.w	r0, r0, r9
 8012dc8:	fa03 f000 	lsl.w	r0, r3, r0
 8012dcc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012dce:	4318      	orrs	r0, r3
 8012dd0:	9041      	str	r0, [sp, #260]	; 0x104
 8012dd2:	4655      	mov	r5, sl
 8012dd4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012dd8:	2b78      	cmp	r3, #120	; 0x78
 8012dda:	d807      	bhi.n	8012dec <__svfiscanf_r+0x10c>
 8012ddc:	2b57      	cmp	r3, #87	; 0x57
 8012dde:	d811      	bhi.n	8012e04 <__svfiscanf_r+0x124>
 8012de0:	2b25      	cmp	r3, #37	; 0x25
 8012de2:	d0c4      	beq.n	8012d6e <__svfiscanf_r+0x8e>
 8012de4:	d858      	bhi.n	8012e98 <__svfiscanf_r+0x1b8>
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	f000 80c8 	beq.w	8012f7c <__svfiscanf_r+0x29c>
 8012dec:	2303      	movs	r3, #3
 8012dee:	9347      	str	r3, [sp, #284]	; 0x11c
 8012df0:	230a      	movs	r3, #10
 8012df2:	9342      	str	r3, [sp, #264]	; 0x108
 8012df4:	e07c      	b.n	8012ef0 <__svfiscanf_r+0x210>
 8012df6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012df8:	fb02 1103 	mla	r1, r2, r3, r1
 8012dfc:	3930      	subs	r1, #48	; 0x30
 8012dfe:	9143      	str	r1, [sp, #268]	; 0x10c
 8012e00:	4655      	mov	r5, sl
 8012e02:	e7d2      	b.n	8012daa <__svfiscanf_r+0xca>
 8012e04:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012e08:	2a20      	cmp	r2, #32
 8012e0a:	d8ef      	bhi.n	8012dec <__svfiscanf_r+0x10c>
 8012e0c:	a101      	add	r1, pc, #4	; (adr r1, 8012e14 <__svfiscanf_r+0x134>)
 8012e0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012e12:	bf00      	nop
 8012e14:	08012edb 	.word	0x08012edb
 8012e18:	08012ded 	.word	0x08012ded
 8012e1c:	08012ded 	.word	0x08012ded
 8012e20:	08012f39 	.word	0x08012f39
 8012e24:	08012ded 	.word	0x08012ded
 8012e28:	08012ded 	.word	0x08012ded
 8012e2c:	08012ded 	.word	0x08012ded
 8012e30:	08012ded 	.word	0x08012ded
 8012e34:	08012ded 	.word	0x08012ded
 8012e38:	08012ded 	.word	0x08012ded
 8012e3c:	08012ded 	.word	0x08012ded
 8012e40:	08012f4f 	.word	0x08012f4f
 8012e44:	08012f25 	.word	0x08012f25
 8012e48:	08012e9f 	.word	0x08012e9f
 8012e4c:	08012e9f 	.word	0x08012e9f
 8012e50:	08012e9f 	.word	0x08012e9f
 8012e54:	08012ded 	.word	0x08012ded
 8012e58:	08012f29 	.word	0x08012f29
 8012e5c:	08012ded 	.word	0x08012ded
 8012e60:	08012ded 	.word	0x08012ded
 8012e64:	08012ded 	.word	0x08012ded
 8012e68:	08012ded 	.word	0x08012ded
 8012e6c:	08012f5f 	.word	0x08012f5f
 8012e70:	08012f31 	.word	0x08012f31
 8012e74:	08012ed3 	.word	0x08012ed3
 8012e78:	08012ded 	.word	0x08012ded
 8012e7c:	08012ded 	.word	0x08012ded
 8012e80:	08012f5b 	.word	0x08012f5b
 8012e84:	08012ded 	.word	0x08012ded
 8012e88:	08012f25 	.word	0x08012f25
 8012e8c:	08012ded 	.word	0x08012ded
 8012e90:	08012ded 	.word	0x08012ded
 8012e94:	08012edb 	.word	0x08012edb
 8012e98:	3b45      	subs	r3, #69	; 0x45
 8012e9a:	2b02      	cmp	r3, #2
 8012e9c:	d8a6      	bhi.n	8012dec <__svfiscanf_r+0x10c>
 8012e9e:	2305      	movs	r3, #5
 8012ea0:	e025      	b.n	8012eee <__svfiscanf_r+0x20e>
 8012ea2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012ea4:	4621      	mov	r1, r4
 8012ea6:	4630      	mov	r0, r6
 8012ea8:	4798      	blx	r3
 8012eaa:	2800      	cmp	r0, #0
 8012eac:	f43f af64 	beq.w	8012d78 <__svfiscanf_r+0x98>
 8012eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012eb2:	07da      	lsls	r2, r3, #31
 8012eb4:	f140 80a4 	bpl.w	8013000 <__svfiscanf_r+0x320>
 8012eb8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d067      	beq.n	8012f8e <__svfiscanf_r+0x2ae>
 8012ebe:	89a3      	ldrh	r3, [r4, #12]
 8012ec0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012ec4:	bf18      	it	ne
 8012ec6:	f04f 30ff 	movne.w	r0, #4294967295
 8012eca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8012ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ed2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012ed4:	f042 0220 	orr.w	r2, r2, #32
 8012ed8:	9241      	str	r2, [sp, #260]	; 0x104
 8012eda:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012ee0:	9241      	str	r2, [sp, #260]	; 0x104
 8012ee2:	2210      	movs	r2, #16
 8012ee4:	2b6f      	cmp	r3, #111	; 0x6f
 8012ee6:	9242      	str	r2, [sp, #264]	; 0x108
 8012ee8:	bf34      	ite	cc
 8012eea:	2303      	movcc	r3, #3
 8012eec:	2304      	movcs	r3, #4
 8012eee:	9347      	str	r3, [sp, #284]	; 0x11c
 8012ef0:	6863      	ldr	r3, [r4, #4]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	dd4e      	ble.n	8012f94 <__svfiscanf_r+0x2b4>
 8012ef6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012ef8:	065b      	lsls	r3, r3, #25
 8012efa:	d404      	bmi.n	8012f06 <__svfiscanf_r+0x226>
 8012efc:	6823      	ldr	r3, [r4, #0]
 8012efe:	781a      	ldrb	r2, [r3, #0]
 8012f00:	5cba      	ldrb	r2, [r7, r2]
 8012f02:	0710      	lsls	r0, r2, #28
 8012f04:	d456      	bmi.n	8012fb4 <__svfiscanf_r+0x2d4>
 8012f06:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012f08:	2b02      	cmp	r3, #2
 8012f0a:	dc65      	bgt.n	8012fd8 <__svfiscanf_r+0x2f8>
 8012f0c:	466b      	mov	r3, sp
 8012f0e:	4622      	mov	r2, r4
 8012f10:	a941      	add	r1, sp, #260	; 0x104
 8012f12:	4630      	mov	r0, r6
 8012f14:	f000 f8b2 	bl	801307c <_scanf_chars>
 8012f18:	2801      	cmp	r0, #1
 8012f1a:	d079      	beq.n	8013010 <__svfiscanf_r+0x330>
 8012f1c:	2802      	cmp	r0, #2
 8012f1e:	f47f af12 	bne.w	8012d46 <__svfiscanf_r+0x66>
 8012f22:	e7c5      	b.n	8012eb0 <__svfiscanf_r+0x1d0>
 8012f24:	220a      	movs	r2, #10
 8012f26:	e7dd      	b.n	8012ee4 <__svfiscanf_r+0x204>
 8012f28:	2300      	movs	r3, #0
 8012f2a:	9342      	str	r3, [sp, #264]	; 0x108
 8012f2c:	2303      	movs	r3, #3
 8012f2e:	e7de      	b.n	8012eee <__svfiscanf_r+0x20e>
 8012f30:	2308      	movs	r3, #8
 8012f32:	9342      	str	r3, [sp, #264]	; 0x108
 8012f34:	2304      	movs	r3, #4
 8012f36:	e7da      	b.n	8012eee <__svfiscanf_r+0x20e>
 8012f38:	4629      	mov	r1, r5
 8012f3a:	4640      	mov	r0, r8
 8012f3c:	f000 fa84 	bl	8013448 <__sccl>
 8012f40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f46:	9341      	str	r3, [sp, #260]	; 0x104
 8012f48:	4605      	mov	r5, r0
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	e7cf      	b.n	8012eee <__svfiscanf_r+0x20e>
 8012f4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f54:	9341      	str	r3, [sp, #260]	; 0x104
 8012f56:	2300      	movs	r3, #0
 8012f58:	e7c9      	b.n	8012eee <__svfiscanf_r+0x20e>
 8012f5a:	2302      	movs	r3, #2
 8012f5c:	e7c7      	b.n	8012eee <__svfiscanf_r+0x20e>
 8012f5e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012f60:	06c3      	lsls	r3, r0, #27
 8012f62:	f53f aef0 	bmi.w	8012d46 <__svfiscanf_r+0x66>
 8012f66:	9b00      	ldr	r3, [sp, #0]
 8012f68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012f6a:	1d19      	adds	r1, r3, #4
 8012f6c:	9100      	str	r1, [sp, #0]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	f010 0f01 	tst.w	r0, #1
 8012f74:	bf14      	ite	ne
 8012f76:	801a      	strhne	r2, [r3, #0]
 8012f78:	601a      	streq	r2, [r3, #0]
 8012f7a:	e6e4      	b.n	8012d46 <__svfiscanf_r+0x66>
 8012f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f7e:	07d8      	lsls	r0, r3, #31
 8012f80:	d405      	bmi.n	8012f8e <__svfiscanf_r+0x2ae>
 8012f82:	89a3      	ldrh	r3, [r4, #12]
 8012f84:	0599      	lsls	r1, r3, #22
 8012f86:	d402      	bmi.n	8012f8e <__svfiscanf_r+0x2ae>
 8012f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f8a:	f7fe ffe7 	bl	8011f5c <__retarget_lock_release_recursive>
 8012f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f92:	e79a      	b.n	8012eca <__svfiscanf_r+0x1ea>
 8012f94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012f96:	4621      	mov	r1, r4
 8012f98:	4630      	mov	r0, r6
 8012f9a:	4798      	blx	r3
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	d0aa      	beq.n	8012ef6 <__svfiscanf_r+0x216>
 8012fa0:	e786      	b.n	8012eb0 <__svfiscanf_r+0x1d0>
 8012fa2:	bf00      	nop
 8012fa4:	080137a5 	.word	0x080137a5
 8012fa8:	08013335 	.word	0x08013335
 8012fac:	08014885 	.word	0x08014885
 8012fb0:	08014c12 	.word	0x08014c12
 8012fb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012fb6:	3201      	adds	r2, #1
 8012fb8:	9245      	str	r2, [sp, #276]	; 0x114
 8012fba:	6862      	ldr	r2, [r4, #4]
 8012fbc:	3a01      	subs	r2, #1
 8012fbe:	2a00      	cmp	r2, #0
 8012fc0:	6062      	str	r2, [r4, #4]
 8012fc2:	dd02      	ble.n	8012fca <__svfiscanf_r+0x2ea>
 8012fc4:	3301      	adds	r3, #1
 8012fc6:	6023      	str	r3, [r4, #0]
 8012fc8:	e798      	b.n	8012efc <__svfiscanf_r+0x21c>
 8012fca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012fcc:	4621      	mov	r1, r4
 8012fce:	4630      	mov	r0, r6
 8012fd0:	4798      	blx	r3
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	d092      	beq.n	8012efc <__svfiscanf_r+0x21c>
 8012fd6:	e76b      	b.n	8012eb0 <__svfiscanf_r+0x1d0>
 8012fd8:	2b04      	cmp	r3, #4
 8012fda:	dc06      	bgt.n	8012fea <__svfiscanf_r+0x30a>
 8012fdc:	466b      	mov	r3, sp
 8012fde:	4622      	mov	r2, r4
 8012fe0:	a941      	add	r1, sp, #260	; 0x104
 8012fe2:	4630      	mov	r0, r6
 8012fe4:	f000 f8a4 	bl	8013130 <_scanf_i>
 8012fe8:	e796      	b.n	8012f18 <__svfiscanf_r+0x238>
 8012fea:	4b0f      	ldr	r3, [pc, #60]	; (8013028 <__svfiscanf_r+0x348>)
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	f43f aeaa 	beq.w	8012d46 <__svfiscanf_r+0x66>
 8012ff2:	466b      	mov	r3, sp
 8012ff4:	4622      	mov	r2, r4
 8012ff6:	a941      	add	r1, sp, #260	; 0x104
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	f3af 8000 	nop.w
 8012ffe:	e78b      	b.n	8012f18 <__svfiscanf_r+0x238>
 8013000:	89a3      	ldrh	r3, [r4, #12]
 8013002:	0599      	lsls	r1, r3, #22
 8013004:	f53f af58 	bmi.w	8012eb8 <__svfiscanf_r+0x1d8>
 8013008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801300a:	f7fe ffa7 	bl	8011f5c <__retarget_lock_release_recursive>
 801300e:	e753      	b.n	8012eb8 <__svfiscanf_r+0x1d8>
 8013010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013012:	07da      	lsls	r2, r3, #31
 8013014:	d405      	bmi.n	8013022 <__svfiscanf_r+0x342>
 8013016:	89a3      	ldrh	r3, [r4, #12]
 8013018:	059b      	lsls	r3, r3, #22
 801301a:	d402      	bmi.n	8013022 <__svfiscanf_r+0x342>
 801301c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801301e:	f7fe ff9d 	bl	8011f5c <__retarget_lock_release_recursive>
 8013022:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013024:	e751      	b.n	8012eca <__svfiscanf_r+0x1ea>
 8013026:	bf00      	nop
 8013028:	00000000 	.word	0x00000000

0801302c <_vfiscanf_r>:
 801302c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801302e:	460c      	mov	r4, r1
 8013030:	4605      	mov	r5, r0
 8013032:	b138      	cbz	r0, 8013044 <_vfiscanf_r+0x18>
 8013034:	6981      	ldr	r1, [r0, #24]
 8013036:	b929      	cbnz	r1, 8013044 <_vfiscanf_r+0x18>
 8013038:	e9cd 2300 	strd	r2, r3, [sp]
 801303c:	f7fe fece 	bl	8011ddc <__sinit>
 8013040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013044:	490a      	ldr	r1, [pc, #40]	; (8013070 <_vfiscanf_r+0x44>)
 8013046:	428c      	cmp	r4, r1
 8013048:	d107      	bne.n	801305a <_vfiscanf_r+0x2e>
 801304a:	686c      	ldr	r4, [r5, #4]
 801304c:	4621      	mov	r1, r4
 801304e:	4628      	mov	r0, r5
 8013050:	b003      	add	sp, #12
 8013052:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013056:	f7ff be43 	b.w	8012ce0 <__svfiscanf_r>
 801305a:	4906      	ldr	r1, [pc, #24]	; (8013074 <_vfiscanf_r+0x48>)
 801305c:	428c      	cmp	r4, r1
 801305e:	d101      	bne.n	8013064 <_vfiscanf_r+0x38>
 8013060:	68ac      	ldr	r4, [r5, #8]
 8013062:	e7f3      	b.n	801304c <_vfiscanf_r+0x20>
 8013064:	4904      	ldr	r1, [pc, #16]	; (8013078 <_vfiscanf_r+0x4c>)
 8013066:	428c      	cmp	r4, r1
 8013068:	bf08      	it	eq
 801306a:	68ec      	ldreq	r4, [r5, #12]
 801306c:	e7ee      	b.n	801304c <_vfiscanf_r+0x20>
 801306e:	bf00      	nop
 8013070:	08014a70 	.word	0x08014a70
 8013074:	08014a90 	.word	0x08014a90
 8013078:	08014a50 	.word	0x08014a50

0801307c <_scanf_chars>:
 801307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013080:	4615      	mov	r5, r2
 8013082:	688a      	ldr	r2, [r1, #8]
 8013084:	4680      	mov	r8, r0
 8013086:	460c      	mov	r4, r1
 8013088:	b932      	cbnz	r2, 8013098 <_scanf_chars+0x1c>
 801308a:	698a      	ldr	r2, [r1, #24]
 801308c:	2a00      	cmp	r2, #0
 801308e:	bf0c      	ite	eq
 8013090:	2201      	moveq	r2, #1
 8013092:	f04f 32ff 	movne.w	r2, #4294967295
 8013096:	608a      	str	r2, [r1, #8]
 8013098:	6822      	ldr	r2, [r4, #0]
 801309a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801312c <_scanf_chars+0xb0>
 801309e:	06d1      	lsls	r1, r2, #27
 80130a0:	bf5f      	itttt	pl
 80130a2:	681a      	ldrpl	r2, [r3, #0]
 80130a4:	1d11      	addpl	r1, r2, #4
 80130a6:	6019      	strpl	r1, [r3, #0]
 80130a8:	6816      	ldrpl	r6, [r2, #0]
 80130aa:	2700      	movs	r7, #0
 80130ac:	69a0      	ldr	r0, [r4, #24]
 80130ae:	b188      	cbz	r0, 80130d4 <_scanf_chars+0x58>
 80130b0:	2801      	cmp	r0, #1
 80130b2:	d107      	bne.n	80130c4 <_scanf_chars+0x48>
 80130b4:	682a      	ldr	r2, [r5, #0]
 80130b6:	7811      	ldrb	r1, [r2, #0]
 80130b8:	6962      	ldr	r2, [r4, #20]
 80130ba:	5c52      	ldrb	r2, [r2, r1]
 80130bc:	b952      	cbnz	r2, 80130d4 <_scanf_chars+0x58>
 80130be:	2f00      	cmp	r7, #0
 80130c0:	d031      	beq.n	8013126 <_scanf_chars+0xaa>
 80130c2:	e022      	b.n	801310a <_scanf_chars+0x8e>
 80130c4:	2802      	cmp	r0, #2
 80130c6:	d120      	bne.n	801310a <_scanf_chars+0x8e>
 80130c8:	682b      	ldr	r3, [r5, #0]
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80130d0:	071b      	lsls	r3, r3, #28
 80130d2:	d41a      	bmi.n	801310a <_scanf_chars+0x8e>
 80130d4:	6823      	ldr	r3, [r4, #0]
 80130d6:	06da      	lsls	r2, r3, #27
 80130d8:	bf5e      	ittt	pl
 80130da:	682b      	ldrpl	r3, [r5, #0]
 80130dc:	781b      	ldrbpl	r3, [r3, #0]
 80130de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80130e2:	682a      	ldr	r2, [r5, #0]
 80130e4:	686b      	ldr	r3, [r5, #4]
 80130e6:	3201      	adds	r2, #1
 80130e8:	602a      	str	r2, [r5, #0]
 80130ea:	68a2      	ldr	r2, [r4, #8]
 80130ec:	3b01      	subs	r3, #1
 80130ee:	3a01      	subs	r2, #1
 80130f0:	606b      	str	r3, [r5, #4]
 80130f2:	3701      	adds	r7, #1
 80130f4:	60a2      	str	r2, [r4, #8]
 80130f6:	b142      	cbz	r2, 801310a <_scanf_chars+0x8e>
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	dcd7      	bgt.n	80130ac <_scanf_chars+0x30>
 80130fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013100:	4629      	mov	r1, r5
 8013102:	4640      	mov	r0, r8
 8013104:	4798      	blx	r3
 8013106:	2800      	cmp	r0, #0
 8013108:	d0d0      	beq.n	80130ac <_scanf_chars+0x30>
 801310a:	6823      	ldr	r3, [r4, #0]
 801310c:	f013 0310 	ands.w	r3, r3, #16
 8013110:	d105      	bne.n	801311e <_scanf_chars+0xa2>
 8013112:	68e2      	ldr	r2, [r4, #12]
 8013114:	3201      	adds	r2, #1
 8013116:	60e2      	str	r2, [r4, #12]
 8013118:	69a2      	ldr	r2, [r4, #24]
 801311a:	b102      	cbz	r2, 801311e <_scanf_chars+0xa2>
 801311c:	7033      	strb	r3, [r6, #0]
 801311e:	6923      	ldr	r3, [r4, #16]
 8013120:	443b      	add	r3, r7
 8013122:	6123      	str	r3, [r4, #16]
 8013124:	2000      	movs	r0, #0
 8013126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801312a:	bf00      	nop
 801312c:	08014885 	.word	0x08014885

08013130 <_scanf_i>:
 8013130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013134:	4698      	mov	r8, r3
 8013136:	4b76      	ldr	r3, [pc, #472]	; (8013310 <_scanf_i+0x1e0>)
 8013138:	460c      	mov	r4, r1
 801313a:	4682      	mov	sl, r0
 801313c:	4616      	mov	r6, r2
 801313e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013142:	b087      	sub	sp, #28
 8013144:	ab03      	add	r3, sp, #12
 8013146:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801314a:	4b72      	ldr	r3, [pc, #456]	; (8013314 <_scanf_i+0x1e4>)
 801314c:	69a1      	ldr	r1, [r4, #24]
 801314e:	4a72      	ldr	r2, [pc, #456]	; (8013318 <_scanf_i+0x1e8>)
 8013150:	2903      	cmp	r1, #3
 8013152:	bf18      	it	ne
 8013154:	461a      	movne	r2, r3
 8013156:	68a3      	ldr	r3, [r4, #8]
 8013158:	9201      	str	r2, [sp, #4]
 801315a:	1e5a      	subs	r2, r3, #1
 801315c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013160:	bf88      	it	hi
 8013162:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013166:	4627      	mov	r7, r4
 8013168:	bf82      	ittt	hi
 801316a:	eb03 0905 	addhi.w	r9, r3, r5
 801316e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013172:	60a3      	strhi	r3, [r4, #8]
 8013174:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013178:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801317c:	bf98      	it	ls
 801317e:	f04f 0900 	movls.w	r9, #0
 8013182:	6023      	str	r3, [r4, #0]
 8013184:	463d      	mov	r5, r7
 8013186:	f04f 0b00 	mov.w	fp, #0
 801318a:	6831      	ldr	r1, [r6, #0]
 801318c:	ab03      	add	r3, sp, #12
 801318e:	7809      	ldrb	r1, [r1, #0]
 8013190:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013194:	2202      	movs	r2, #2
 8013196:	f7ed f823 	bl	80001e0 <memchr>
 801319a:	b328      	cbz	r0, 80131e8 <_scanf_i+0xb8>
 801319c:	f1bb 0f01 	cmp.w	fp, #1
 80131a0:	d159      	bne.n	8013256 <_scanf_i+0x126>
 80131a2:	6862      	ldr	r2, [r4, #4]
 80131a4:	b92a      	cbnz	r2, 80131b2 <_scanf_i+0x82>
 80131a6:	6822      	ldr	r2, [r4, #0]
 80131a8:	2308      	movs	r3, #8
 80131aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80131ae:	6063      	str	r3, [r4, #4]
 80131b0:	6022      	str	r2, [r4, #0]
 80131b2:	6822      	ldr	r2, [r4, #0]
 80131b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80131b8:	6022      	str	r2, [r4, #0]
 80131ba:	68a2      	ldr	r2, [r4, #8]
 80131bc:	1e51      	subs	r1, r2, #1
 80131be:	60a1      	str	r1, [r4, #8]
 80131c0:	b192      	cbz	r2, 80131e8 <_scanf_i+0xb8>
 80131c2:	6832      	ldr	r2, [r6, #0]
 80131c4:	1c51      	adds	r1, r2, #1
 80131c6:	6031      	str	r1, [r6, #0]
 80131c8:	7812      	ldrb	r2, [r2, #0]
 80131ca:	f805 2b01 	strb.w	r2, [r5], #1
 80131ce:	6872      	ldr	r2, [r6, #4]
 80131d0:	3a01      	subs	r2, #1
 80131d2:	2a00      	cmp	r2, #0
 80131d4:	6072      	str	r2, [r6, #4]
 80131d6:	dc07      	bgt.n	80131e8 <_scanf_i+0xb8>
 80131d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80131dc:	4631      	mov	r1, r6
 80131de:	4650      	mov	r0, sl
 80131e0:	4790      	blx	r2
 80131e2:	2800      	cmp	r0, #0
 80131e4:	f040 8085 	bne.w	80132f2 <_scanf_i+0x1c2>
 80131e8:	f10b 0b01 	add.w	fp, fp, #1
 80131ec:	f1bb 0f03 	cmp.w	fp, #3
 80131f0:	d1cb      	bne.n	801318a <_scanf_i+0x5a>
 80131f2:	6863      	ldr	r3, [r4, #4]
 80131f4:	b90b      	cbnz	r3, 80131fa <_scanf_i+0xca>
 80131f6:	230a      	movs	r3, #10
 80131f8:	6063      	str	r3, [r4, #4]
 80131fa:	6863      	ldr	r3, [r4, #4]
 80131fc:	4947      	ldr	r1, [pc, #284]	; (801331c <_scanf_i+0x1ec>)
 80131fe:	6960      	ldr	r0, [r4, #20]
 8013200:	1ac9      	subs	r1, r1, r3
 8013202:	f000 f921 	bl	8013448 <__sccl>
 8013206:	f04f 0b00 	mov.w	fp, #0
 801320a:	68a3      	ldr	r3, [r4, #8]
 801320c:	6822      	ldr	r2, [r4, #0]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d03d      	beq.n	801328e <_scanf_i+0x15e>
 8013212:	6831      	ldr	r1, [r6, #0]
 8013214:	6960      	ldr	r0, [r4, #20]
 8013216:	f891 c000 	ldrb.w	ip, [r1]
 801321a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801321e:	2800      	cmp	r0, #0
 8013220:	d035      	beq.n	801328e <_scanf_i+0x15e>
 8013222:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013226:	d124      	bne.n	8013272 <_scanf_i+0x142>
 8013228:	0510      	lsls	r0, r2, #20
 801322a:	d522      	bpl.n	8013272 <_scanf_i+0x142>
 801322c:	f10b 0b01 	add.w	fp, fp, #1
 8013230:	f1b9 0f00 	cmp.w	r9, #0
 8013234:	d003      	beq.n	801323e <_scanf_i+0x10e>
 8013236:	3301      	adds	r3, #1
 8013238:	f109 39ff 	add.w	r9, r9, #4294967295
 801323c:	60a3      	str	r3, [r4, #8]
 801323e:	6873      	ldr	r3, [r6, #4]
 8013240:	3b01      	subs	r3, #1
 8013242:	2b00      	cmp	r3, #0
 8013244:	6073      	str	r3, [r6, #4]
 8013246:	dd1b      	ble.n	8013280 <_scanf_i+0x150>
 8013248:	6833      	ldr	r3, [r6, #0]
 801324a:	3301      	adds	r3, #1
 801324c:	6033      	str	r3, [r6, #0]
 801324e:	68a3      	ldr	r3, [r4, #8]
 8013250:	3b01      	subs	r3, #1
 8013252:	60a3      	str	r3, [r4, #8]
 8013254:	e7d9      	b.n	801320a <_scanf_i+0xda>
 8013256:	f1bb 0f02 	cmp.w	fp, #2
 801325a:	d1ae      	bne.n	80131ba <_scanf_i+0x8a>
 801325c:	6822      	ldr	r2, [r4, #0]
 801325e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013262:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013266:	d1bf      	bne.n	80131e8 <_scanf_i+0xb8>
 8013268:	2310      	movs	r3, #16
 801326a:	6063      	str	r3, [r4, #4]
 801326c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013270:	e7a2      	b.n	80131b8 <_scanf_i+0x88>
 8013272:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013276:	6022      	str	r2, [r4, #0]
 8013278:	780b      	ldrb	r3, [r1, #0]
 801327a:	f805 3b01 	strb.w	r3, [r5], #1
 801327e:	e7de      	b.n	801323e <_scanf_i+0x10e>
 8013280:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013284:	4631      	mov	r1, r6
 8013286:	4650      	mov	r0, sl
 8013288:	4798      	blx	r3
 801328a:	2800      	cmp	r0, #0
 801328c:	d0df      	beq.n	801324e <_scanf_i+0x11e>
 801328e:	6823      	ldr	r3, [r4, #0]
 8013290:	05db      	lsls	r3, r3, #23
 8013292:	d50d      	bpl.n	80132b0 <_scanf_i+0x180>
 8013294:	42bd      	cmp	r5, r7
 8013296:	d909      	bls.n	80132ac <_scanf_i+0x17c>
 8013298:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801329c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132a0:	4632      	mov	r2, r6
 80132a2:	4650      	mov	r0, sl
 80132a4:	4798      	blx	r3
 80132a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80132aa:	464d      	mov	r5, r9
 80132ac:	42bd      	cmp	r5, r7
 80132ae:	d02d      	beq.n	801330c <_scanf_i+0x1dc>
 80132b0:	6822      	ldr	r2, [r4, #0]
 80132b2:	f012 0210 	ands.w	r2, r2, #16
 80132b6:	d113      	bne.n	80132e0 <_scanf_i+0x1b0>
 80132b8:	702a      	strb	r2, [r5, #0]
 80132ba:	6863      	ldr	r3, [r4, #4]
 80132bc:	9e01      	ldr	r6, [sp, #4]
 80132be:	4639      	mov	r1, r7
 80132c0:	4650      	mov	r0, sl
 80132c2:	47b0      	blx	r6
 80132c4:	6821      	ldr	r1, [r4, #0]
 80132c6:	f8d8 3000 	ldr.w	r3, [r8]
 80132ca:	f011 0f20 	tst.w	r1, #32
 80132ce:	d013      	beq.n	80132f8 <_scanf_i+0x1c8>
 80132d0:	1d1a      	adds	r2, r3, #4
 80132d2:	f8c8 2000 	str.w	r2, [r8]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	6018      	str	r0, [r3, #0]
 80132da:	68e3      	ldr	r3, [r4, #12]
 80132dc:	3301      	adds	r3, #1
 80132de:	60e3      	str	r3, [r4, #12]
 80132e0:	1bed      	subs	r5, r5, r7
 80132e2:	44ab      	add	fp, r5
 80132e4:	6925      	ldr	r5, [r4, #16]
 80132e6:	445d      	add	r5, fp
 80132e8:	6125      	str	r5, [r4, #16]
 80132ea:	2000      	movs	r0, #0
 80132ec:	b007      	add	sp, #28
 80132ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f2:	f04f 0b00 	mov.w	fp, #0
 80132f6:	e7ca      	b.n	801328e <_scanf_i+0x15e>
 80132f8:	1d1a      	adds	r2, r3, #4
 80132fa:	f8c8 2000 	str.w	r2, [r8]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f011 0f01 	tst.w	r1, #1
 8013304:	bf14      	ite	ne
 8013306:	8018      	strhne	r0, [r3, #0]
 8013308:	6018      	streq	r0, [r3, #0]
 801330a:	e7e6      	b.n	80132da <_scanf_i+0x1aa>
 801330c:	2001      	movs	r0, #1
 801330e:	e7ed      	b.n	80132ec <_scanf_i+0x1bc>
 8013310:	080143f0 	.word	0x080143f0
 8013314:	0801372d 	.word	0x0801372d
 8013318:	08013645 	.word	0x08013645
 801331c:	08014c36 	.word	0x08014c36

08013320 <lflush>:
 8013320:	8983      	ldrh	r3, [r0, #12]
 8013322:	f003 0309 	and.w	r3, r3, #9
 8013326:	2b09      	cmp	r3, #9
 8013328:	d101      	bne.n	801332e <lflush+0xe>
 801332a:	f7fe bced 	b.w	8011d08 <fflush>
 801332e:	2000      	movs	r0, #0
 8013330:	4770      	bx	lr
	...

08013334 <__srefill_r>:
 8013334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013336:	460c      	mov	r4, r1
 8013338:	4605      	mov	r5, r0
 801333a:	b118      	cbz	r0, 8013344 <__srefill_r+0x10>
 801333c:	6983      	ldr	r3, [r0, #24]
 801333e:	b90b      	cbnz	r3, 8013344 <__srefill_r+0x10>
 8013340:	f7fe fd4c 	bl	8011ddc <__sinit>
 8013344:	4b3b      	ldr	r3, [pc, #236]	; (8013434 <__srefill_r+0x100>)
 8013346:	429c      	cmp	r4, r3
 8013348:	d10a      	bne.n	8013360 <__srefill_r+0x2c>
 801334a:	686c      	ldr	r4, [r5, #4]
 801334c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013350:	2300      	movs	r3, #0
 8013352:	6063      	str	r3, [r4, #4]
 8013354:	89a3      	ldrh	r3, [r4, #12]
 8013356:	069e      	lsls	r6, r3, #26
 8013358:	d50c      	bpl.n	8013374 <__srefill_r+0x40>
 801335a:	f04f 30ff 	mov.w	r0, #4294967295
 801335e:	e066      	b.n	801342e <__srefill_r+0xfa>
 8013360:	4b35      	ldr	r3, [pc, #212]	; (8013438 <__srefill_r+0x104>)
 8013362:	429c      	cmp	r4, r3
 8013364:	d101      	bne.n	801336a <__srefill_r+0x36>
 8013366:	68ac      	ldr	r4, [r5, #8]
 8013368:	e7f0      	b.n	801334c <__srefill_r+0x18>
 801336a:	4b34      	ldr	r3, [pc, #208]	; (801343c <__srefill_r+0x108>)
 801336c:	429c      	cmp	r4, r3
 801336e:	bf08      	it	eq
 8013370:	68ec      	ldreq	r4, [r5, #12]
 8013372:	e7eb      	b.n	801334c <__srefill_r+0x18>
 8013374:	0758      	lsls	r0, r3, #29
 8013376:	d448      	bmi.n	801340a <__srefill_r+0xd6>
 8013378:	06d9      	lsls	r1, r3, #27
 801337a:	d405      	bmi.n	8013388 <__srefill_r+0x54>
 801337c:	2309      	movs	r3, #9
 801337e:	602b      	str	r3, [r5, #0]
 8013380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013384:	81a3      	strh	r3, [r4, #12]
 8013386:	e7e8      	b.n	801335a <__srefill_r+0x26>
 8013388:	071a      	lsls	r2, r3, #28
 801338a:	d50b      	bpl.n	80133a4 <__srefill_r+0x70>
 801338c:	4621      	mov	r1, r4
 801338e:	4628      	mov	r0, r5
 8013390:	f7fe fc7e 	bl	8011c90 <_fflush_r>
 8013394:	2800      	cmp	r0, #0
 8013396:	d1e0      	bne.n	801335a <__srefill_r+0x26>
 8013398:	89a3      	ldrh	r3, [r4, #12]
 801339a:	60a0      	str	r0, [r4, #8]
 801339c:	f023 0308 	bic.w	r3, r3, #8
 80133a0:	81a3      	strh	r3, [r4, #12]
 80133a2:	61a0      	str	r0, [r4, #24]
 80133a4:	89a3      	ldrh	r3, [r4, #12]
 80133a6:	f043 0304 	orr.w	r3, r3, #4
 80133aa:	81a3      	strh	r3, [r4, #12]
 80133ac:	6923      	ldr	r3, [r4, #16]
 80133ae:	b91b      	cbnz	r3, 80133b8 <__srefill_r+0x84>
 80133b0:	4621      	mov	r1, r4
 80133b2:	4628      	mov	r0, r5
 80133b4:	f7fe fdf8 	bl	8011fa8 <__smakebuf_r>
 80133b8:	89a6      	ldrh	r6, [r4, #12]
 80133ba:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80133be:	07b3      	lsls	r3, r6, #30
 80133c0:	d00f      	beq.n	80133e2 <__srefill_r+0xae>
 80133c2:	2301      	movs	r3, #1
 80133c4:	81a3      	strh	r3, [r4, #12]
 80133c6:	4b1e      	ldr	r3, [pc, #120]	; (8013440 <__srefill_r+0x10c>)
 80133c8:	491e      	ldr	r1, [pc, #120]	; (8013444 <__srefill_r+0x110>)
 80133ca:	6818      	ldr	r0, [r3, #0]
 80133cc:	f006 0609 	and.w	r6, r6, #9
 80133d0:	f7fe fd82 	bl	8011ed8 <_fwalk>
 80133d4:	2e09      	cmp	r6, #9
 80133d6:	81a7      	strh	r7, [r4, #12]
 80133d8:	d103      	bne.n	80133e2 <__srefill_r+0xae>
 80133da:	4621      	mov	r1, r4
 80133dc:	4628      	mov	r0, r5
 80133de:	f7fe fbd1 	bl	8011b84 <__sflush_r>
 80133e2:	6922      	ldr	r2, [r4, #16]
 80133e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80133e6:	6963      	ldr	r3, [r4, #20]
 80133e8:	6a21      	ldr	r1, [r4, #32]
 80133ea:	6022      	str	r2, [r4, #0]
 80133ec:	4628      	mov	r0, r5
 80133ee:	47b0      	blx	r6
 80133f0:	2800      	cmp	r0, #0
 80133f2:	6060      	str	r0, [r4, #4]
 80133f4:	dc1c      	bgt.n	8013430 <__srefill_r+0xfc>
 80133f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133fa:	bf17      	itett	ne
 80133fc:	2200      	movne	r2, #0
 80133fe:	f043 0320 	orreq.w	r3, r3, #32
 8013402:	6062      	strne	r2, [r4, #4]
 8013404:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8013408:	e7bc      	b.n	8013384 <__srefill_r+0x50>
 801340a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801340c:	2900      	cmp	r1, #0
 801340e:	d0cd      	beq.n	80133ac <__srefill_r+0x78>
 8013410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013414:	4299      	cmp	r1, r3
 8013416:	d002      	beq.n	801341e <__srefill_r+0xea>
 8013418:	4628      	mov	r0, r5
 801341a:	f7fc fe07 	bl	801002c <_free_r>
 801341e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013420:	6063      	str	r3, [r4, #4]
 8013422:	2000      	movs	r0, #0
 8013424:	6360      	str	r0, [r4, #52]	; 0x34
 8013426:	2b00      	cmp	r3, #0
 8013428:	d0c0      	beq.n	80133ac <__srefill_r+0x78>
 801342a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801342c:	6023      	str	r3, [r4, #0]
 801342e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013430:	2000      	movs	r0, #0
 8013432:	e7fc      	b.n	801342e <__srefill_r+0xfa>
 8013434:	08014a70 	.word	0x08014a70
 8013438:	08014a90 	.word	0x08014a90
 801343c:	08014a50 	.word	0x08014a50
 8013440:	08014988 	.word	0x08014988
 8013444:	08013321 	.word	0x08013321

08013448 <__sccl>:
 8013448:	b570      	push	{r4, r5, r6, lr}
 801344a:	780b      	ldrb	r3, [r1, #0]
 801344c:	4604      	mov	r4, r0
 801344e:	2b5e      	cmp	r3, #94	; 0x5e
 8013450:	bf0b      	itete	eq
 8013452:	784b      	ldrbeq	r3, [r1, #1]
 8013454:	1c48      	addne	r0, r1, #1
 8013456:	1c88      	addeq	r0, r1, #2
 8013458:	2200      	movne	r2, #0
 801345a:	bf08      	it	eq
 801345c:	2201      	moveq	r2, #1
 801345e:	1e61      	subs	r1, r4, #1
 8013460:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013464:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013468:	42a9      	cmp	r1, r5
 801346a:	d1fb      	bne.n	8013464 <__sccl+0x1c>
 801346c:	b90b      	cbnz	r3, 8013472 <__sccl+0x2a>
 801346e:	3801      	subs	r0, #1
 8013470:	bd70      	pop	{r4, r5, r6, pc}
 8013472:	f082 0201 	eor.w	r2, r2, #1
 8013476:	54e2      	strb	r2, [r4, r3]
 8013478:	4605      	mov	r5, r0
 801347a:	4628      	mov	r0, r5
 801347c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013480:	292d      	cmp	r1, #45	; 0x2d
 8013482:	d006      	beq.n	8013492 <__sccl+0x4a>
 8013484:	295d      	cmp	r1, #93	; 0x5d
 8013486:	d0f3      	beq.n	8013470 <__sccl+0x28>
 8013488:	b909      	cbnz	r1, 801348e <__sccl+0x46>
 801348a:	4628      	mov	r0, r5
 801348c:	e7f0      	b.n	8013470 <__sccl+0x28>
 801348e:	460b      	mov	r3, r1
 8013490:	e7f1      	b.n	8013476 <__sccl+0x2e>
 8013492:	786e      	ldrb	r6, [r5, #1]
 8013494:	2e5d      	cmp	r6, #93	; 0x5d
 8013496:	d0fa      	beq.n	801348e <__sccl+0x46>
 8013498:	42b3      	cmp	r3, r6
 801349a:	dcf8      	bgt.n	801348e <__sccl+0x46>
 801349c:	3502      	adds	r5, #2
 801349e:	4619      	mov	r1, r3
 80134a0:	3101      	adds	r1, #1
 80134a2:	428e      	cmp	r6, r1
 80134a4:	5462      	strb	r2, [r4, r1]
 80134a6:	dcfb      	bgt.n	80134a0 <__sccl+0x58>
 80134a8:	1af1      	subs	r1, r6, r3
 80134aa:	3901      	subs	r1, #1
 80134ac:	1c58      	adds	r0, r3, #1
 80134ae:	42b3      	cmp	r3, r6
 80134b0:	bfa8      	it	ge
 80134b2:	2100      	movge	r1, #0
 80134b4:	1843      	adds	r3, r0, r1
 80134b6:	e7e0      	b.n	801347a <__sccl+0x32>

080134b8 <__sread>:
 80134b8:	b510      	push	{r4, lr}
 80134ba:	460c      	mov	r4, r1
 80134bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134c0:	f000 faea 	bl	8013a98 <_read_r>
 80134c4:	2800      	cmp	r0, #0
 80134c6:	bfab      	itete	ge
 80134c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80134ca:	89a3      	ldrhlt	r3, [r4, #12]
 80134cc:	181b      	addge	r3, r3, r0
 80134ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80134d2:	bfac      	ite	ge
 80134d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80134d6:	81a3      	strhlt	r3, [r4, #12]
 80134d8:	bd10      	pop	{r4, pc}

080134da <__swrite>:
 80134da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134de:	461f      	mov	r7, r3
 80134e0:	898b      	ldrh	r3, [r1, #12]
 80134e2:	05db      	lsls	r3, r3, #23
 80134e4:	4605      	mov	r5, r0
 80134e6:	460c      	mov	r4, r1
 80134e8:	4616      	mov	r6, r2
 80134ea:	d505      	bpl.n	80134f8 <__swrite+0x1e>
 80134ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134f0:	2302      	movs	r3, #2
 80134f2:	2200      	movs	r2, #0
 80134f4:	f000 fa62 	bl	80139bc <_lseek_r>
 80134f8:	89a3      	ldrh	r3, [r4, #12]
 80134fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013502:	81a3      	strh	r3, [r4, #12]
 8013504:	4632      	mov	r2, r6
 8013506:	463b      	mov	r3, r7
 8013508:	4628      	mov	r0, r5
 801350a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801350e:	f000 b9e1 	b.w	80138d4 <_write_r>

08013512 <__sseek>:
 8013512:	b510      	push	{r4, lr}
 8013514:	460c      	mov	r4, r1
 8013516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801351a:	f000 fa4f 	bl	80139bc <_lseek_r>
 801351e:	1c43      	adds	r3, r0, #1
 8013520:	89a3      	ldrh	r3, [r4, #12]
 8013522:	bf15      	itete	ne
 8013524:	6560      	strne	r0, [r4, #84]	; 0x54
 8013526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801352a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801352e:	81a3      	strheq	r3, [r4, #12]
 8013530:	bf18      	it	ne
 8013532:	81a3      	strhne	r3, [r4, #12]
 8013534:	bd10      	pop	{r4, pc}

08013536 <__sclose>:
 8013536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801353a:	f000 b9fb 	b.w	8013934 <_close_r>
	...

08013540 <_strtol_l.constprop.0>:
 8013540:	2b01      	cmp	r3, #1
 8013542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013546:	d001      	beq.n	801354c <_strtol_l.constprop.0+0xc>
 8013548:	2b24      	cmp	r3, #36	; 0x24
 801354a:	d906      	bls.n	801355a <_strtol_l.constprop.0+0x1a>
 801354c:	f7fc fd26 	bl	800ff9c <__errno>
 8013550:	2316      	movs	r3, #22
 8013552:	6003      	str	r3, [r0, #0]
 8013554:	2000      	movs	r0, #0
 8013556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801355a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013640 <_strtol_l.constprop.0+0x100>
 801355e:	460d      	mov	r5, r1
 8013560:	462e      	mov	r6, r5
 8013562:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013566:	f814 700c 	ldrb.w	r7, [r4, ip]
 801356a:	f017 0708 	ands.w	r7, r7, #8
 801356e:	d1f7      	bne.n	8013560 <_strtol_l.constprop.0+0x20>
 8013570:	2c2d      	cmp	r4, #45	; 0x2d
 8013572:	d132      	bne.n	80135da <_strtol_l.constprop.0+0x9a>
 8013574:	782c      	ldrb	r4, [r5, #0]
 8013576:	2701      	movs	r7, #1
 8013578:	1cb5      	adds	r5, r6, #2
 801357a:	2b00      	cmp	r3, #0
 801357c:	d05b      	beq.n	8013636 <_strtol_l.constprop.0+0xf6>
 801357e:	2b10      	cmp	r3, #16
 8013580:	d109      	bne.n	8013596 <_strtol_l.constprop.0+0x56>
 8013582:	2c30      	cmp	r4, #48	; 0x30
 8013584:	d107      	bne.n	8013596 <_strtol_l.constprop.0+0x56>
 8013586:	782c      	ldrb	r4, [r5, #0]
 8013588:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801358c:	2c58      	cmp	r4, #88	; 0x58
 801358e:	d14d      	bne.n	801362c <_strtol_l.constprop.0+0xec>
 8013590:	786c      	ldrb	r4, [r5, #1]
 8013592:	2310      	movs	r3, #16
 8013594:	3502      	adds	r5, #2
 8013596:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801359a:	f108 38ff 	add.w	r8, r8, #4294967295
 801359e:	f04f 0c00 	mov.w	ip, #0
 80135a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80135a6:	4666      	mov	r6, ip
 80135a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80135ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80135b0:	f1be 0f09 	cmp.w	lr, #9
 80135b4:	d816      	bhi.n	80135e4 <_strtol_l.constprop.0+0xa4>
 80135b6:	4674      	mov	r4, lr
 80135b8:	42a3      	cmp	r3, r4
 80135ba:	dd24      	ble.n	8013606 <_strtol_l.constprop.0+0xc6>
 80135bc:	f1bc 0f00 	cmp.w	ip, #0
 80135c0:	db1e      	blt.n	8013600 <_strtol_l.constprop.0+0xc0>
 80135c2:	45b1      	cmp	r9, r6
 80135c4:	d31c      	bcc.n	8013600 <_strtol_l.constprop.0+0xc0>
 80135c6:	d101      	bne.n	80135cc <_strtol_l.constprop.0+0x8c>
 80135c8:	45a2      	cmp	sl, r4
 80135ca:	db19      	blt.n	8013600 <_strtol_l.constprop.0+0xc0>
 80135cc:	fb06 4603 	mla	r6, r6, r3, r4
 80135d0:	f04f 0c01 	mov.w	ip, #1
 80135d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80135d8:	e7e8      	b.n	80135ac <_strtol_l.constprop.0+0x6c>
 80135da:	2c2b      	cmp	r4, #43	; 0x2b
 80135dc:	bf04      	itt	eq
 80135de:	782c      	ldrbeq	r4, [r5, #0]
 80135e0:	1cb5      	addeq	r5, r6, #2
 80135e2:	e7ca      	b.n	801357a <_strtol_l.constprop.0+0x3a>
 80135e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80135e8:	f1be 0f19 	cmp.w	lr, #25
 80135ec:	d801      	bhi.n	80135f2 <_strtol_l.constprop.0+0xb2>
 80135ee:	3c37      	subs	r4, #55	; 0x37
 80135f0:	e7e2      	b.n	80135b8 <_strtol_l.constprop.0+0x78>
 80135f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80135f6:	f1be 0f19 	cmp.w	lr, #25
 80135fa:	d804      	bhi.n	8013606 <_strtol_l.constprop.0+0xc6>
 80135fc:	3c57      	subs	r4, #87	; 0x57
 80135fe:	e7db      	b.n	80135b8 <_strtol_l.constprop.0+0x78>
 8013600:	f04f 3cff 	mov.w	ip, #4294967295
 8013604:	e7e6      	b.n	80135d4 <_strtol_l.constprop.0+0x94>
 8013606:	f1bc 0f00 	cmp.w	ip, #0
 801360a:	da05      	bge.n	8013618 <_strtol_l.constprop.0+0xd8>
 801360c:	2322      	movs	r3, #34	; 0x22
 801360e:	6003      	str	r3, [r0, #0]
 8013610:	4646      	mov	r6, r8
 8013612:	b942      	cbnz	r2, 8013626 <_strtol_l.constprop.0+0xe6>
 8013614:	4630      	mov	r0, r6
 8013616:	e79e      	b.n	8013556 <_strtol_l.constprop.0+0x16>
 8013618:	b107      	cbz	r7, 801361c <_strtol_l.constprop.0+0xdc>
 801361a:	4276      	negs	r6, r6
 801361c:	2a00      	cmp	r2, #0
 801361e:	d0f9      	beq.n	8013614 <_strtol_l.constprop.0+0xd4>
 8013620:	f1bc 0f00 	cmp.w	ip, #0
 8013624:	d000      	beq.n	8013628 <_strtol_l.constprop.0+0xe8>
 8013626:	1e69      	subs	r1, r5, #1
 8013628:	6011      	str	r1, [r2, #0]
 801362a:	e7f3      	b.n	8013614 <_strtol_l.constprop.0+0xd4>
 801362c:	2430      	movs	r4, #48	; 0x30
 801362e:	2b00      	cmp	r3, #0
 8013630:	d1b1      	bne.n	8013596 <_strtol_l.constprop.0+0x56>
 8013632:	2308      	movs	r3, #8
 8013634:	e7af      	b.n	8013596 <_strtol_l.constprop.0+0x56>
 8013636:	2c30      	cmp	r4, #48	; 0x30
 8013638:	d0a5      	beq.n	8013586 <_strtol_l.constprop.0+0x46>
 801363a:	230a      	movs	r3, #10
 801363c:	e7ab      	b.n	8013596 <_strtol_l.constprop.0+0x56>
 801363e:	bf00      	nop
 8013640:	08014885 	.word	0x08014885

08013644 <_strtol_r>:
 8013644:	f7ff bf7c 	b.w	8013540 <_strtol_l.constprop.0>

08013648 <_strtoul_l.constprop.0>:
 8013648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801364c:	4f36      	ldr	r7, [pc, #216]	; (8013728 <_strtoul_l.constprop.0+0xe0>)
 801364e:	4686      	mov	lr, r0
 8013650:	460d      	mov	r5, r1
 8013652:	4628      	mov	r0, r5
 8013654:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013658:	5de6      	ldrb	r6, [r4, r7]
 801365a:	f016 0608 	ands.w	r6, r6, #8
 801365e:	d1f8      	bne.n	8013652 <_strtoul_l.constprop.0+0xa>
 8013660:	2c2d      	cmp	r4, #45	; 0x2d
 8013662:	d12f      	bne.n	80136c4 <_strtoul_l.constprop.0+0x7c>
 8013664:	782c      	ldrb	r4, [r5, #0]
 8013666:	2601      	movs	r6, #1
 8013668:	1c85      	adds	r5, r0, #2
 801366a:	2b00      	cmp	r3, #0
 801366c:	d057      	beq.n	801371e <_strtoul_l.constprop.0+0xd6>
 801366e:	2b10      	cmp	r3, #16
 8013670:	d109      	bne.n	8013686 <_strtoul_l.constprop.0+0x3e>
 8013672:	2c30      	cmp	r4, #48	; 0x30
 8013674:	d107      	bne.n	8013686 <_strtoul_l.constprop.0+0x3e>
 8013676:	7828      	ldrb	r0, [r5, #0]
 8013678:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801367c:	2858      	cmp	r0, #88	; 0x58
 801367e:	d149      	bne.n	8013714 <_strtoul_l.constprop.0+0xcc>
 8013680:	786c      	ldrb	r4, [r5, #1]
 8013682:	2310      	movs	r3, #16
 8013684:	3502      	adds	r5, #2
 8013686:	f04f 38ff 	mov.w	r8, #4294967295
 801368a:	2700      	movs	r7, #0
 801368c:	fbb8 f8f3 	udiv	r8, r8, r3
 8013690:	fb03 f908 	mul.w	r9, r3, r8
 8013694:	ea6f 0909 	mvn.w	r9, r9
 8013698:	4638      	mov	r0, r7
 801369a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801369e:	f1bc 0f09 	cmp.w	ip, #9
 80136a2:	d814      	bhi.n	80136ce <_strtoul_l.constprop.0+0x86>
 80136a4:	4664      	mov	r4, ip
 80136a6:	42a3      	cmp	r3, r4
 80136a8:	dd22      	ble.n	80136f0 <_strtoul_l.constprop.0+0xa8>
 80136aa:	2f00      	cmp	r7, #0
 80136ac:	db1d      	blt.n	80136ea <_strtoul_l.constprop.0+0xa2>
 80136ae:	4580      	cmp	r8, r0
 80136b0:	d31b      	bcc.n	80136ea <_strtoul_l.constprop.0+0xa2>
 80136b2:	d101      	bne.n	80136b8 <_strtoul_l.constprop.0+0x70>
 80136b4:	45a1      	cmp	r9, r4
 80136b6:	db18      	blt.n	80136ea <_strtoul_l.constprop.0+0xa2>
 80136b8:	fb00 4003 	mla	r0, r0, r3, r4
 80136bc:	2701      	movs	r7, #1
 80136be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80136c2:	e7ea      	b.n	801369a <_strtoul_l.constprop.0+0x52>
 80136c4:	2c2b      	cmp	r4, #43	; 0x2b
 80136c6:	bf04      	itt	eq
 80136c8:	782c      	ldrbeq	r4, [r5, #0]
 80136ca:	1c85      	addeq	r5, r0, #2
 80136cc:	e7cd      	b.n	801366a <_strtoul_l.constprop.0+0x22>
 80136ce:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80136d2:	f1bc 0f19 	cmp.w	ip, #25
 80136d6:	d801      	bhi.n	80136dc <_strtoul_l.constprop.0+0x94>
 80136d8:	3c37      	subs	r4, #55	; 0x37
 80136da:	e7e4      	b.n	80136a6 <_strtoul_l.constprop.0+0x5e>
 80136dc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80136e0:	f1bc 0f19 	cmp.w	ip, #25
 80136e4:	d804      	bhi.n	80136f0 <_strtoul_l.constprop.0+0xa8>
 80136e6:	3c57      	subs	r4, #87	; 0x57
 80136e8:	e7dd      	b.n	80136a6 <_strtoul_l.constprop.0+0x5e>
 80136ea:	f04f 37ff 	mov.w	r7, #4294967295
 80136ee:	e7e6      	b.n	80136be <_strtoul_l.constprop.0+0x76>
 80136f0:	2f00      	cmp	r7, #0
 80136f2:	da07      	bge.n	8013704 <_strtoul_l.constprop.0+0xbc>
 80136f4:	2322      	movs	r3, #34	; 0x22
 80136f6:	f8ce 3000 	str.w	r3, [lr]
 80136fa:	f04f 30ff 	mov.w	r0, #4294967295
 80136fe:	b932      	cbnz	r2, 801370e <_strtoul_l.constprop.0+0xc6>
 8013700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013704:	b106      	cbz	r6, 8013708 <_strtoul_l.constprop.0+0xc0>
 8013706:	4240      	negs	r0, r0
 8013708:	2a00      	cmp	r2, #0
 801370a:	d0f9      	beq.n	8013700 <_strtoul_l.constprop.0+0xb8>
 801370c:	b107      	cbz	r7, 8013710 <_strtoul_l.constprop.0+0xc8>
 801370e:	1e69      	subs	r1, r5, #1
 8013710:	6011      	str	r1, [r2, #0]
 8013712:	e7f5      	b.n	8013700 <_strtoul_l.constprop.0+0xb8>
 8013714:	2430      	movs	r4, #48	; 0x30
 8013716:	2b00      	cmp	r3, #0
 8013718:	d1b5      	bne.n	8013686 <_strtoul_l.constprop.0+0x3e>
 801371a:	2308      	movs	r3, #8
 801371c:	e7b3      	b.n	8013686 <_strtoul_l.constprop.0+0x3e>
 801371e:	2c30      	cmp	r4, #48	; 0x30
 8013720:	d0a9      	beq.n	8013676 <_strtoul_l.constprop.0+0x2e>
 8013722:	230a      	movs	r3, #10
 8013724:	e7af      	b.n	8013686 <_strtoul_l.constprop.0+0x3e>
 8013726:	bf00      	nop
 8013728:	08014885 	.word	0x08014885

0801372c <_strtoul_r>:
 801372c:	f7ff bf8c 	b.w	8013648 <_strtoul_l.constprop.0>

08013730 <__submore>:
 8013730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013734:	460c      	mov	r4, r1
 8013736:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801373c:	4299      	cmp	r1, r3
 801373e:	d11d      	bne.n	801377c <__submore+0x4c>
 8013740:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013744:	f7fc fcde 	bl	8010104 <_malloc_r>
 8013748:	b918      	cbnz	r0, 8013752 <__submore+0x22>
 801374a:	f04f 30ff 	mov.w	r0, #4294967295
 801374e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013756:	63a3      	str	r3, [r4, #56]	; 0x38
 8013758:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801375c:	6360      	str	r0, [r4, #52]	; 0x34
 801375e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013762:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013766:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801376a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801376e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013772:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013776:	6020      	str	r0, [r4, #0]
 8013778:	2000      	movs	r0, #0
 801377a:	e7e8      	b.n	801374e <__submore+0x1e>
 801377c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801377e:	0077      	lsls	r7, r6, #1
 8013780:	463a      	mov	r2, r7
 8013782:	f000 f959 	bl	8013a38 <_realloc_r>
 8013786:	4605      	mov	r5, r0
 8013788:	2800      	cmp	r0, #0
 801378a:	d0de      	beq.n	801374a <__submore+0x1a>
 801378c:	eb00 0806 	add.w	r8, r0, r6
 8013790:	4601      	mov	r1, r0
 8013792:	4632      	mov	r2, r6
 8013794:	4640      	mov	r0, r8
 8013796:	f7fc fc33 	bl	8010000 <memcpy>
 801379a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801379e:	f8c4 8000 	str.w	r8, [r4]
 80137a2:	e7e9      	b.n	8013778 <__submore+0x48>

080137a4 <_ungetc_r>:
 80137a4:	b570      	push	{r4, r5, r6, lr}
 80137a6:	4614      	mov	r4, r2
 80137a8:	1c4a      	adds	r2, r1, #1
 80137aa:	4606      	mov	r6, r0
 80137ac:	460d      	mov	r5, r1
 80137ae:	d103      	bne.n	80137b8 <_ungetc_r+0x14>
 80137b0:	f04f 35ff 	mov.w	r5, #4294967295
 80137b4:	4628      	mov	r0, r5
 80137b6:	bd70      	pop	{r4, r5, r6, pc}
 80137b8:	b118      	cbz	r0, 80137c2 <_ungetc_r+0x1e>
 80137ba:	6983      	ldr	r3, [r0, #24]
 80137bc:	b90b      	cbnz	r3, 80137c2 <_ungetc_r+0x1e>
 80137be:	f7fe fb0d 	bl	8011ddc <__sinit>
 80137c2:	4b41      	ldr	r3, [pc, #260]	; (80138c8 <_ungetc_r+0x124>)
 80137c4:	429c      	cmp	r4, r3
 80137c6:	d11d      	bne.n	8013804 <_ungetc_r+0x60>
 80137c8:	6874      	ldr	r4, [r6, #4]
 80137ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80137cc:	07db      	lsls	r3, r3, #31
 80137ce:	d405      	bmi.n	80137dc <_ungetc_r+0x38>
 80137d0:	89a3      	ldrh	r3, [r4, #12]
 80137d2:	0598      	lsls	r0, r3, #22
 80137d4:	d402      	bmi.n	80137dc <_ungetc_r+0x38>
 80137d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80137d8:	f7fe fbbf 	bl	8011f5a <__retarget_lock_acquire_recursive>
 80137dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137e0:	f023 0320 	bic.w	r3, r3, #32
 80137e4:	0759      	lsls	r1, r3, #29
 80137e6:	81a3      	strh	r3, [r4, #12]
 80137e8:	b29a      	uxth	r2, r3
 80137ea:	d42d      	bmi.n	8013848 <_ungetc_r+0xa4>
 80137ec:	06d3      	lsls	r3, r2, #27
 80137ee:	d413      	bmi.n	8013818 <_ungetc_r+0x74>
 80137f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80137f2:	07dd      	lsls	r5, r3, #31
 80137f4:	d4dc      	bmi.n	80137b0 <_ungetc_r+0xc>
 80137f6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80137fa:	d1d9      	bne.n	80137b0 <_ungetc_r+0xc>
 80137fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80137fe:	f7fe fbad 	bl	8011f5c <__retarget_lock_release_recursive>
 8013802:	e7d5      	b.n	80137b0 <_ungetc_r+0xc>
 8013804:	4b31      	ldr	r3, [pc, #196]	; (80138cc <_ungetc_r+0x128>)
 8013806:	429c      	cmp	r4, r3
 8013808:	d101      	bne.n	801380e <_ungetc_r+0x6a>
 801380a:	68b4      	ldr	r4, [r6, #8]
 801380c:	e7dd      	b.n	80137ca <_ungetc_r+0x26>
 801380e:	4b30      	ldr	r3, [pc, #192]	; (80138d0 <_ungetc_r+0x12c>)
 8013810:	429c      	cmp	r4, r3
 8013812:	bf08      	it	eq
 8013814:	68f4      	ldreq	r4, [r6, #12]
 8013816:	e7d8      	b.n	80137ca <_ungetc_r+0x26>
 8013818:	0710      	lsls	r0, r2, #28
 801381a:	d511      	bpl.n	8013840 <_ungetc_r+0x9c>
 801381c:	4621      	mov	r1, r4
 801381e:	4630      	mov	r0, r6
 8013820:	f7fe fa36 	bl	8011c90 <_fflush_r>
 8013824:	b130      	cbz	r0, 8013834 <_ungetc_r+0x90>
 8013826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013828:	07d9      	lsls	r1, r3, #31
 801382a:	d4c1      	bmi.n	80137b0 <_ungetc_r+0xc>
 801382c:	89a3      	ldrh	r3, [r4, #12]
 801382e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8013832:	e7e2      	b.n	80137fa <_ungetc_r+0x56>
 8013834:	89a3      	ldrh	r3, [r4, #12]
 8013836:	60a0      	str	r0, [r4, #8]
 8013838:	f023 0308 	bic.w	r3, r3, #8
 801383c:	81a3      	strh	r3, [r4, #12]
 801383e:	61a0      	str	r0, [r4, #24]
 8013840:	89a3      	ldrh	r3, [r4, #12]
 8013842:	f043 0304 	orr.w	r3, r3, #4
 8013846:	81a3      	strh	r3, [r4, #12]
 8013848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801384a:	6862      	ldr	r2, [r4, #4]
 801384c:	b2ed      	uxtb	r5, r5
 801384e:	b1d3      	cbz	r3, 8013886 <_ungetc_r+0xe2>
 8013850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013852:	4293      	cmp	r3, r2
 8013854:	dc05      	bgt.n	8013862 <_ungetc_r+0xbe>
 8013856:	4621      	mov	r1, r4
 8013858:	4630      	mov	r0, r6
 801385a:	f7ff ff69 	bl	8013730 <__submore>
 801385e:	2800      	cmp	r0, #0
 8013860:	d1e1      	bne.n	8013826 <_ungetc_r+0x82>
 8013862:	6823      	ldr	r3, [r4, #0]
 8013864:	1e5a      	subs	r2, r3, #1
 8013866:	6022      	str	r2, [r4, #0]
 8013868:	f803 5c01 	strb.w	r5, [r3, #-1]
 801386c:	6863      	ldr	r3, [r4, #4]
 801386e:	3301      	adds	r3, #1
 8013870:	6063      	str	r3, [r4, #4]
 8013872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013874:	07da      	lsls	r2, r3, #31
 8013876:	d49d      	bmi.n	80137b4 <_ungetc_r+0x10>
 8013878:	89a3      	ldrh	r3, [r4, #12]
 801387a:	059b      	lsls	r3, r3, #22
 801387c:	d49a      	bmi.n	80137b4 <_ungetc_r+0x10>
 801387e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013880:	f7fe fb6c 	bl	8011f5c <__retarget_lock_release_recursive>
 8013884:	e796      	b.n	80137b4 <_ungetc_r+0x10>
 8013886:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8013888:	6920      	ldr	r0, [r4, #16]
 801388a:	6823      	ldr	r3, [r4, #0]
 801388c:	f001 0101 	and.w	r1, r1, #1
 8013890:	b160      	cbz	r0, 80138ac <_ungetc_r+0x108>
 8013892:	4298      	cmp	r0, r3
 8013894:	d20a      	bcs.n	80138ac <_ungetc_r+0x108>
 8013896:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 801389a:	42a8      	cmp	r0, r5
 801389c:	d106      	bne.n	80138ac <_ungetc_r+0x108>
 801389e:	3b01      	subs	r3, #1
 80138a0:	3201      	adds	r2, #1
 80138a2:	6023      	str	r3, [r4, #0]
 80138a4:	6062      	str	r2, [r4, #4]
 80138a6:	2900      	cmp	r1, #0
 80138a8:	d184      	bne.n	80137b4 <_ungetc_r+0x10>
 80138aa:	e7e5      	b.n	8013878 <_ungetc_r+0xd4>
 80138ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80138b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138b4:	6363      	str	r3, [r4, #52]	; 0x34
 80138b6:	2303      	movs	r3, #3
 80138b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80138ba:	4623      	mov	r3, r4
 80138bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80138c0:	6023      	str	r3, [r4, #0]
 80138c2:	2301      	movs	r3, #1
 80138c4:	6063      	str	r3, [r4, #4]
 80138c6:	e7ee      	b.n	80138a6 <_ungetc_r+0x102>
 80138c8:	08014a70 	.word	0x08014a70
 80138cc:	08014a90 	.word	0x08014a90
 80138d0:	08014a50 	.word	0x08014a50

080138d4 <_write_r>:
 80138d4:	b538      	push	{r3, r4, r5, lr}
 80138d6:	4d07      	ldr	r5, [pc, #28]	; (80138f4 <_write_r+0x20>)
 80138d8:	4604      	mov	r4, r0
 80138da:	4608      	mov	r0, r1
 80138dc:	4611      	mov	r1, r2
 80138de:	2200      	movs	r2, #0
 80138e0:	602a      	str	r2, [r5, #0]
 80138e2:	461a      	mov	r2, r3
 80138e4:	f7f0 ff32 	bl	800474c <_write>
 80138e8:	1c43      	adds	r3, r0, #1
 80138ea:	d102      	bne.n	80138f2 <_write_r+0x1e>
 80138ec:	682b      	ldr	r3, [r5, #0]
 80138ee:	b103      	cbz	r3, 80138f2 <_write_r+0x1e>
 80138f0:	6023      	str	r3, [r4, #0]
 80138f2:	bd38      	pop	{r3, r4, r5, pc}
 80138f4:	20000930 	.word	0x20000930

080138f8 <__assert_func>:
 80138f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80138fa:	4614      	mov	r4, r2
 80138fc:	461a      	mov	r2, r3
 80138fe:	4b09      	ldr	r3, [pc, #36]	; (8013924 <__assert_func+0x2c>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	4605      	mov	r5, r0
 8013904:	68d8      	ldr	r0, [r3, #12]
 8013906:	b14c      	cbz	r4, 801391c <__assert_func+0x24>
 8013908:	4b07      	ldr	r3, [pc, #28]	; (8013928 <__assert_func+0x30>)
 801390a:	9100      	str	r1, [sp, #0]
 801390c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013910:	4906      	ldr	r1, [pc, #24]	; (801392c <__assert_func+0x34>)
 8013912:	462b      	mov	r3, r5
 8013914:	f000 f81e 	bl	8013954 <fiprintf>
 8013918:	f000 f8dd 	bl	8013ad6 <abort>
 801391c:	4b04      	ldr	r3, [pc, #16]	; (8013930 <__assert_func+0x38>)
 801391e:	461c      	mov	r4, r3
 8013920:	e7f3      	b.n	801390a <__assert_func+0x12>
 8013922:	bf00      	nop
 8013924:	20000044 	.word	0x20000044
 8013928:	08014c38 	.word	0x08014c38
 801392c:	08014c45 	.word	0x08014c45
 8013930:	08014c73 	.word	0x08014c73

08013934 <_close_r>:
 8013934:	b538      	push	{r3, r4, r5, lr}
 8013936:	4d06      	ldr	r5, [pc, #24]	; (8013950 <_close_r+0x1c>)
 8013938:	2300      	movs	r3, #0
 801393a:	4604      	mov	r4, r0
 801393c:	4608      	mov	r0, r1
 801393e:	602b      	str	r3, [r5, #0]
 8013940:	f7f0 ff30 	bl	80047a4 <_close>
 8013944:	1c43      	adds	r3, r0, #1
 8013946:	d102      	bne.n	801394e <_close_r+0x1a>
 8013948:	682b      	ldr	r3, [r5, #0]
 801394a:	b103      	cbz	r3, 801394e <_close_r+0x1a>
 801394c:	6023      	str	r3, [r4, #0]
 801394e:	bd38      	pop	{r3, r4, r5, pc}
 8013950:	20000930 	.word	0x20000930

08013954 <fiprintf>:
 8013954:	b40e      	push	{r1, r2, r3}
 8013956:	b503      	push	{r0, r1, lr}
 8013958:	4601      	mov	r1, r0
 801395a:	ab03      	add	r3, sp, #12
 801395c:	4805      	ldr	r0, [pc, #20]	; (8013974 <fiprintf+0x20>)
 801395e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013962:	6800      	ldr	r0, [r0, #0]
 8013964:	9301      	str	r3, [sp, #4]
 8013966:	f7ff f88b 	bl	8012a80 <_vfiprintf_r>
 801396a:	b002      	add	sp, #8
 801396c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013970:	b003      	add	sp, #12
 8013972:	4770      	bx	lr
 8013974:	20000044 	.word	0x20000044

08013978 <_fstat_r>:
 8013978:	b538      	push	{r3, r4, r5, lr}
 801397a:	4d07      	ldr	r5, [pc, #28]	; (8013998 <_fstat_r+0x20>)
 801397c:	2300      	movs	r3, #0
 801397e:	4604      	mov	r4, r0
 8013980:	4608      	mov	r0, r1
 8013982:	4611      	mov	r1, r2
 8013984:	602b      	str	r3, [r5, #0]
 8013986:	f7f0 ff5d 	bl	8004844 <_fstat>
 801398a:	1c43      	adds	r3, r0, #1
 801398c:	d102      	bne.n	8013994 <_fstat_r+0x1c>
 801398e:	682b      	ldr	r3, [r5, #0]
 8013990:	b103      	cbz	r3, 8013994 <_fstat_r+0x1c>
 8013992:	6023      	str	r3, [r4, #0]
 8013994:	bd38      	pop	{r3, r4, r5, pc}
 8013996:	bf00      	nop
 8013998:	20000930 	.word	0x20000930

0801399c <_isatty_r>:
 801399c:	b538      	push	{r3, r4, r5, lr}
 801399e:	4d06      	ldr	r5, [pc, #24]	; (80139b8 <_isatty_r+0x1c>)
 80139a0:	2300      	movs	r3, #0
 80139a2:	4604      	mov	r4, r0
 80139a4:	4608      	mov	r0, r1
 80139a6:	602b      	str	r3, [r5, #0]
 80139a8:	f7f0 feba 	bl	8004720 <_isatty>
 80139ac:	1c43      	adds	r3, r0, #1
 80139ae:	d102      	bne.n	80139b6 <_isatty_r+0x1a>
 80139b0:	682b      	ldr	r3, [r5, #0]
 80139b2:	b103      	cbz	r3, 80139b6 <_isatty_r+0x1a>
 80139b4:	6023      	str	r3, [r4, #0]
 80139b6:	bd38      	pop	{r3, r4, r5, pc}
 80139b8:	20000930 	.word	0x20000930

080139bc <_lseek_r>:
 80139bc:	b538      	push	{r3, r4, r5, lr}
 80139be:	4d07      	ldr	r5, [pc, #28]	; (80139dc <_lseek_r+0x20>)
 80139c0:	4604      	mov	r4, r0
 80139c2:	4608      	mov	r0, r1
 80139c4:	4611      	mov	r1, r2
 80139c6:	2200      	movs	r2, #0
 80139c8:	602a      	str	r2, [r5, #0]
 80139ca:	461a      	mov	r2, r3
 80139cc:	f7f0 ff01 	bl	80047d2 <_lseek>
 80139d0:	1c43      	adds	r3, r0, #1
 80139d2:	d102      	bne.n	80139da <_lseek_r+0x1e>
 80139d4:	682b      	ldr	r3, [r5, #0]
 80139d6:	b103      	cbz	r3, 80139da <_lseek_r+0x1e>
 80139d8:	6023      	str	r3, [r4, #0]
 80139da:	bd38      	pop	{r3, r4, r5, pc}
 80139dc:	20000930 	.word	0x20000930

080139e0 <__ascii_mbtowc>:
 80139e0:	b082      	sub	sp, #8
 80139e2:	b901      	cbnz	r1, 80139e6 <__ascii_mbtowc+0x6>
 80139e4:	a901      	add	r1, sp, #4
 80139e6:	b142      	cbz	r2, 80139fa <__ascii_mbtowc+0x1a>
 80139e8:	b14b      	cbz	r3, 80139fe <__ascii_mbtowc+0x1e>
 80139ea:	7813      	ldrb	r3, [r2, #0]
 80139ec:	600b      	str	r3, [r1, #0]
 80139ee:	7812      	ldrb	r2, [r2, #0]
 80139f0:	1e10      	subs	r0, r2, #0
 80139f2:	bf18      	it	ne
 80139f4:	2001      	movne	r0, #1
 80139f6:	b002      	add	sp, #8
 80139f8:	4770      	bx	lr
 80139fa:	4610      	mov	r0, r2
 80139fc:	e7fb      	b.n	80139f6 <__ascii_mbtowc+0x16>
 80139fe:	f06f 0001 	mvn.w	r0, #1
 8013a02:	e7f8      	b.n	80139f6 <__ascii_mbtowc+0x16>

08013a04 <memmove>:
 8013a04:	4288      	cmp	r0, r1
 8013a06:	b510      	push	{r4, lr}
 8013a08:	eb01 0402 	add.w	r4, r1, r2
 8013a0c:	d902      	bls.n	8013a14 <memmove+0x10>
 8013a0e:	4284      	cmp	r4, r0
 8013a10:	4623      	mov	r3, r4
 8013a12:	d807      	bhi.n	8013a24 <memmove+0x20>
 8013a14:	1e43      	subs	r3, r0, #1
 8013a16:	42a1      	cmp	r1, r4
 8013a18:	d008      	beq.n	8013a2c <memmove+0x28>
 8013a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a22:	e7f8      	b.n	8013a16 <memmove+0x12>
 8013a24:	4402      	add	r2, r0
 8013a26:	4601      	mov	r1, r0
 8013a28:	428a      	cmp	r2, r1
 8013a2a:	d100      	bne.n	8013a2e <memmove+0x2a>
 8013a2c:	bd10      	pop	{r4, pc}
 8013a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a36:	e7f7      	b.n	8013a28 <memmove+0x24>

08013a38 <_realloc_r>:
 8013a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a3c:	4680      	mov	r8, r0
 8013a3e:	4614      	mov	r4, r2
 8013a40:	460e      	mov	r6, r1
 8013a42:	b921      	cbnz	r1, 8013a4e <_realloc_r+0x16>
 8013a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a48:	4611      	mov	r1, r2
 8013a4a:	f7fc bb5b 	b.w	8010104 <_malloc_r>
 8013a4e:	b92a      	cbnz	r2, 8013a5c <_realloc_r+0x24>
 8013a50:	f7fc faec 	bl	801002c <_free_r>
 8013a54:	4625      	mov	r5, r4
 8013a56:	4628      	mov	r0, r5
 8013a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a5c:	f000 f842 	bl	8013ae4 <_malloc_usable_size_r>
 8013a60:	4284      	cmp	r4, r0
 8013a62:	4607      	mov	r7, r0
 8013a64:	d802      	bhi.n	8013a6c <_realloc_r+0x34>
 8013a66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013a6a:	d812      	bhi.n	8013a92 <_realloc_r+0x5a>
 8013a6c:	4621      	mov	r1, r4
 8013a6e:	4640      	mov	r0, r8
 8013a70:	f7fc fb48 	bl	8010104 <_malloc_r>
 8013a74:	4605      	mov	r5, r0
 8013a76:	2800      	cmp	r0, #0
 8013a78:	d0ed      	beq.n	8013a56 <_realloc_r+0x1e>
 8013a7a:	42bc      	cmp	r4, r7
 8013a7c:	4622      	mov	r2, r4
 8013a7e:	4631      	mov	r1, r6
 8013a80:	bf28      	it	cs
 8013a82:	463a      	movcs	r2, r7
 8013a84:	f7fc fabc 	bl	8010000 <memcpy>
 8013a88:	4631      	mov	r1, r6
 8013a8a:	4640      	mov	r0, r8
 8013a8c:	f7fc face 	bl	801002c <_free_r>
 8013a90:	e7e1      	b.n	8013a56 <_realloc_r+0x1e>
 8013a92:	4635      	mov	r5, r6
 8013a94:	e7df      	b.n	8013a56 <_realloc_r+0x1e>
	...

08013a98 <_read_r>:
 8013a98:	b538      	push	{r3, r4, r5, lr}
 8013a9a:	4d07      	ldr	r5, [pc, #28]	; (8013ab8 <_read_r+0x20>)
 8013a9c:	4604      	mov	r4, r0
 8013a9e:	4608      	mov	r0, r1
 8013aa0:	4611      	mov	r1, r2
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	602a      	str	r2, [r5, #0]
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	f7f0 fea4 	bl	80047f4 <_read>
 8013aac:	1c43      	adds	r3, r0, #1
 8013aae:	d102      	bne.n	8013ab6 <_read_r+0x1e>
 8013ab0:	682b      	ldr	r3, [r5, #0]
 8013ab2:	b103      	cbz	r3, 8013ab6 <_read_r+0x1e>
 8013ab4:	6023      	str	r3, [r4, #0]
 8013ab6:	bd38      	pop	{r3, r4, r5, pc}
 8013ab8:	20000930 	.word	0x20000930

08013abc <__ascii_wctomb>:
 8013abc:	b149      	cbz	r1, 8013ad2 <__ascii_wctomb+0x16>
 8013abe:	2aff      	cmp	r2, #255	; 0xff
 8013ac0:	bf85      	ittet	hi
 8013ac2:	238a      	movhi	r3, #138	; 0x8a
 8013ac4:	6003      	strhi	r3, [r0, #0]
 8013ac6:	700a      	strbls	r2, [r1, #0]
 8013ac8:	f04f 30ff 	movhi.w	r0, #4294967295
 8013acc:	bf98      	it	ls
 8013ace:	2001      	movls	r0, #1
 8013ad0:	4770      	bx	lr
 8013ad2:	4608      	mov	r0, r1
 8013ad4:	4770      	bx	lr

08013ad6 <abort>:
 8013ad6:	b508      	push	{r3, lr}
 8013ad8:	2006      	movs	r0, #6
 8013ada:	f000 f833 	bl	8013b44 <raise>
 8013ade:	2001      	movs	r0, #1
 8013ae0:	f000 f85c 	bl	8013b9c <_exit>

08013ae4 <_malloc_usable_size_r>:
 8013ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ae8:	1f18      	subs	r0, r3, #4
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	bfbc      	itt	lt
 8013aee:	580b      	ldrlt	r3, [r1, r0]
 8013af0:	18c0      	addlt	r0, r0, r3
 8013af2:	4770      	bx	lr

08013af4 <_raise_r>:
 8013af4:	291f      	cmp	r1, #31
 8013af6:	b538      	push	{r3, r4, r5, lr}
 8013af8:	4604      	mov	r4, r0
 8013afa:	460d      	mov	r5, r1
 8013afc:	d904      	bls.n	8013b08 <_raise_r+0x14>
 8013afe:	2316      	movs	r3, #22
 8013b00:	6003      	str	r3, [r0, #0]
 8013b02:	f04f 30ff 	mov.w	r0, #4294967295
 8013b06:	bd38      	pop	{r3, r4, r5, pc}
 8013b08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b0a:	b112      	cbz	r2, 8013b12 <_raise_r+0x1e>
 8013b0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b10:	b94b      	cbnz	r3, 8013b26 <_raise_r+0x32>
 8013b12:	4620      	mov	r0, r4
 8013b14:	f000 f830 	bl	8013b78 <_getpid_r>
 8013b18:	462a      	mov	r2, r5
 8013b1a:	4601      	mov	r1, r0
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b22:	f000 b817 	b.w	8013b54 <_kill_r>
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d00a      	beq.n	8013b40 <_raise_r+0x4c>
 8013b2a:	1c59      	adds	r1, r3, #1
 8013b2c:	d103      	bne.n	8013b36 <_raise_r+0x42>
 8013b2e:	2316      	movs	r3, #22
 8013b30:	6003      	str	r3, [r0, #0]
 8013b32:	2001      	movs	r0, #1
 8013b34:	e7e7      	b.n	8013b06 <_raise_r+0x12>
 8013b36:	2400      	movs	r4, #0
 8013b38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	4798      	blx	r3
 8013b40:	2000      	movs	r0, #0
 8013b42:	e7e0      	b.n	8013b06 <_raise_r+0x12>

08013b44 <raise>:
 8013b44:	4b02      	ldr	r3, [pc, #8]	; (8013b50 <raise+0xc>)
 8013b46:	4601      	mov	r1, r0
 8013b48:	6818      	ldr	r0, [r3, #0]
 8013b4a:	f7ff bfd3 	b.w	8013af4 <_raise_r>
 8013b4e:	bf00      	nop
 8013b50:	20000044 	.word	0x20000044

08013b54 <_kill_r>:
 8013b54:	b538      	push	{r3, r4, r5, lr}
 8013b56:	4d07      	ldr	r5, [pc, #28]	; (8013b74 <_kill_r+0x20>)
 8013b58:	2300      	movs	r3, #0
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	4608      	mov	r0, r1
 8013b5e:	4611      	mov	r1, r2
 8013b60:	602b      	str	r3, [r5, #0]
 8013b62:	f000 f813 	bl	8013b8c <_kill>
 8013b66:	1c43      	adds	r3, r0, #1
 8013b68:	d102      	bne.n	8013b70 <_kill_r+0x1c>
 8013b6a:	682b      	ldr	r3, [r5, #0]
 8013b6c:	b103      	cbz	r3, 8013b70 <_kill_r+0x1c>
 8013b6e:	6023      	str	r3, [r4, #0]
 8013b70:	bd38      	pop	{r3, r4, r5, pc}
 8013b72:	bf00      	nop
 8013b74:	20000930 	.word	0x20000930

08013b78 <_getpid_r>:
 8013b78:	f000 b800 	b.w	8013b7c <_getpid>

08013b7c <_getpid>:
 8013b7c:	4b02      	ldr	r3, [pc, #8]	; (8013b88 <_getpid+0xc>)
 8013b7e:	2258      	movs	r2, #88	; 0x58
 8013b80:	601a      	str	r2, [r3, #0]
 8013b82:	f04f 30ff 	mov.w	r0, #4294967295
 8013b86:	4770      	bx	lr
 8013b88:	20000930 	.word	0x20000930

08013b8c <_kill>:
 8013b8c:	4b02      	ldr	r3, [pc, #8]	; (8013b98 <_kill+0xc>)
 8013b8e:	2258      	movs	r2, #88	; 0x58
 8013b90:	601a      	str	r2, [r3, #0]
 8013b92:	f04f 30ff 	mov.w	r0, #4294967295
 8013b96:	4770      	bx	lr
 8013b98:	20000930 	.word	0x20000930

08013b9c <_exit>:
 8013b9c:	e7fe      	b.n	8013b9c <_exit>
	...

08013ba0 <_init>:
 8013ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ba2:	bf00      	nop
 8013ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ba6:	bc08      	pop	{r3}
 8013ba8:	469e      	mov	lr, r3
 8013baa:	4770      	bx	lr

08013bac <_fini>:
 8013bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bae:	bf00      	nop
 8013bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bb2:	bc08      	pop	{r3}
 8013bb4:	469e      	mov	lr, r3
 8013bb6:	4770      	bx	lr
