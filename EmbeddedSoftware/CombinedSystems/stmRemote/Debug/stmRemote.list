
stmRemote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000827c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800840c  0800840c  0001840c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087e8  080087e8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080087e8  080087e8  000187e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087f0  080087f0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087f4  080087f4  000187f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080087f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  20000088  08008880  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08008880  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a5b  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031bd  00000000  00000000  00033b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00036cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c72d  00000000  00000000  00038928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016abd  00000000  00000000  00055055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a73f9  00000000  00000000  0006bb12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112f0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004318  00000000  00000000  00112f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083f4 	.word	0x080083f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080083f4 	.word	0x080083f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <decodeMeasurementData>:

	*dataSize = iterator;
}

//Function to decode measurement data from bytes
void decodeMeasurementData(struct measurementData* data, uint8_t dataArray[], uint8_t dataSize){
 8000574:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000578:	b089      	sub	sp, #36	; 0x24
 800057a:	af00      	add	r7, sp, #0
 800057c:	60f8      	str	r0, [r7, #12]
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	4613      	mov	r3, r2
 8000582:	71fb      	strb	r3, [r7, #7]

	uint64_t measurementValue = 0;
 8000584:	f04f 0200 	mov.w	r2, #0
 8000588:	f04f 0300 	mov.w	r3, #0
 800058c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//add all bytes from array in to the long word
	for(int i = 0;i<dataSize;i++){
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	e022      	b.n	80005dc <decodeMeasurementData+0x68>
		measurementValue = measurementValue | (((uint64_t)dataArray[i])<<i*8);
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2200      	movs	r2, #0
 80005a2:	4698      	mov	r8, r3
 80005a4:	4691      	mov	r9, r2
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	f1a3 0120 	sub.w	r1, r3, #32
 80005ae:	f1c3 0220 	rsb	r2, r3, #32
 80005b2:	fa09 f503 	lsl.w	r5, r9, r3
 80005b6:	fa08 f101 	lsl.w	r1, r8, r1
 80005ba:	430d      	orrs	r5, r1
 80005bc:	fa28 f202 	lsr.w	r2, r8, r2
 80005c0:	4315      	orrs	r5, r2
 80005c2:	fa08 f403 	lsl.w	r4, r8, r3
 80005c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80005ca:	ea42 0a04 	orr.w	sl, r2, r4
 80005ce:	ea43 0b05 	orr.w	fp, r3, r5
 80005d2:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(int i = 0;i<dataSize;i++){
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	697a      	ldr	r2, [r7, #20]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbd8      	blt.n	8000596 <decodeMeasurementData+0x22>
	}

	//decode the depth value
	uint8_t depthSign = ((uint8_t)(measurementValue>>depthValueSignShift))&depthValueSignMask;
 80005e4:	7e3b      	ldrb	r3, [r7, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	74fb      	strb	r3, [r7, #19]
	data->depthValue = ((uint16_t)(measurementValue>>depthValueShift))&depthValueMask;
 80005ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80005f0:	f04f 0200 	mov.w	r2, #0
 80005f4:	f04f 0300 	mov.w	r3, #0
 80005f8:	0842      	lsrs	r2, r0, #1
 80005fa:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80005fe:	084b      	lsrs	r3, r1, #1
 8000600:	b293      	uxth	r3, r2
 8000602:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	601a      	str	r2, [r3, #0]
	if(!depthSign) data->depthValue = data->depthValue * -1;
 800060a:	7cfb      	ldrb	r3, [r7, #19]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d104      	bne.n	800061a <decodeMeasurementData+0xa6>
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	425a      	negs	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	601a      	str	r2, [r3, #0]

	//decode the water pressure value
	data->waterPressureValue = ((uint32_t)(measurementValue>>waterPressureShift))&waterPressureMask;
 800061a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800061e:	f04f 0200 	mov.w	r2, #0
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	0b42      	lsrs	r2, r0, #13
 8000628:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800062c:	0b4b      	lsrs	r3, r1, #13
 800062e:	4613      	mov	r3, r2
 8000630:	f3c3 0210 	ubfx	r2, r3, #0, #17
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	605a      	str	r2, [r3, #4]

	//decode surface temperature value
	uint8_t surfaceTemperatureSign = ((uint8_t)(measurementValue>>surfaceTemperatureSignShift))&surfaceTemperatureSignMask;
 8000638:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800063c:	f04f 0200 	mov.w	r2, #0
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	0f82      	lsrs	r2, r0, #30
 8000646:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800064a:	0f8b      	lsrs	r3, r1, #30
 800064c:	b2d3      	uxtb	r3, r2
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	74bb      	strb	r3, [r7, #18]
	data->surfaceTemperatureValue = ((uint16_t)(measurementValue>>surfaceTemperatureShift))&surfaceTemperatureMask;
 8000654:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000658:	f04f 0200 	mov.w	r2, #0
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	0fc2      	lsrs	r2, r0, #31
 8000662:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000666:	0fcb      	lsrs	r3, r1, #31
 8000668:	b293      	uxth	r3, r2
 800066a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	609a      	str	r2, [r3, #8]
	if(!surfaceTemperatureSign)	data->surfaceTemperatureValue = data->surfaceTemperatureValue * -1;
 8000672:	7cbb      	ldrb	r3, [r7, #18]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d104      	bne.n	8000682 <decodeMeasurementData+0x10e>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	425a      	negs	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	609a      	str	r2, [r3, #8]

	//decode underground temperature value
	uint8_t undergroundTemperatureSign = ((uint8_t)(measurementValue>>undergroundTemperatureSignShift))&undergroundTemperatureSignMask;
 8000682:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	0aca      	lsrs	r2, r1, #11
 8000690:	2300      	movs	r3, #0
 8000692:	b2d3      	uxtb	r3, r2
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	747b      	strb	r3, [r7, #17]
	data->undergroundTemperatureValue = ((uint16_t)(measurementValue>>undergroundTemperatureShift))&undergroundTemperatureMask;
 800069a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800069e:	f04f 0200 	mov.w	r2, #0
 80006a2:	f04f 0300 	mov.w	r3, #0
 80006a6:	0b0a      	lsrs	r2, r1, #12
 80006a8:	2300      	movs	r3, #0
 80006aa:	b293      	uxth	r3, r2
 80006ac:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	60da      	str	r2, [r3, #12]
	if(!undergroundTemperatureSign)	data->undergroundTemperatureValue = data->undergroundTemperatureValue * -1;
 80006b4:	7c7b      	ldrb	r3, [r7, #17]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d104      	bne.n	80006c4 <decodeMeasurementData+0x150>
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	425a      	negs	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	60da      	str	r2, [r3, #12]

	//decode battery state value
	data->batteryStatus = ((uint8_t)(measurementValue>>batteryStatusShift))&batteryStatusMask;
 80006c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	f04f 0300 	mov.w	r3, #0
 80006d0:	0e0a      	lsrs	r2, r1, #24
 80006d2:	2300      	movs	r3, #0
 80006d4:	b2d3      	uxtb	r3, r2
 80006d6:	f003 0201 	and.w	r2, r3, #1
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	611a      	str	r2, [r3, #16]

}
 80006de:	bf00      	nop
 80006e0:	3724      	adds	r7, #36	; 0x24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80006e8:	4770      	bx	lr
	...

080006ec <requestMeasureData>:
		printf("\r\nSD start error");

	}
}

void requestMeasureData(struct deviceData* device, int* deviceNum, struct rfDataStorage* rfData){
 80006ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006f0:	b08c      	sub	sp, #48	; 0x30
 80006f2:	af02      	add	r7, sp, #8
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]

	rfData->activeTxMessageSize = 0;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	22fe      	movs	r2, #254	; 0xfe
 8000706:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_GIVE_MEASUREMENT_DATA;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2253      	movs	r2, #83	; 0x53
 800070e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_TO_ID_POS1] = 0;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = 0;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0x0F;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	889b      	ldrh	r3, [r3, #4]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f003 030f 	and.w	r3, r3, #15
 800072c:	b2da      	uxtb	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = rfData->myDevice.device_id&0xF0;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	889b      	ldrh	r3, [r3, #4]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f023 030f 	bic.w	r3, r3, #15
 800073e:	b2da      	uxtb	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+6);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800076e:	3306      	adds	r3, #6
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4619      	mov	r1, r3
 8000774:	4610      	mov	r0, r2
 8000776:	f001 fdb9 	bl	80022ec <Send>

	int requestSuccessful = false;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
	while(!requestSuccessful){
 800077e:	e0b0      	b.n	80008e2 <requestMeasureData+0x1f6>
		printf("Scanning");
 8000780:	485d      	ldr	r0, [pc, #372]	; (80008f8 <requestMeasureData+0x20c>)
 8000782:	f006 fec3 	bl	800750c <iprintf>

		Comms_Handler(rfData);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f001 f838 	bl	80017fc <Comms_Handler>

		for(int i = 0; i<rfData->messageNum; i++){
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
 8000790:	e09b      	b.n	80008ca <requestMeasureData+0x1de>
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_REMOTE_DONE){
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	6a3a      	ldr	r2, [r7, #32]
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	440b      	add	r3, r1
 80007a0:	33af      	adds	r3, #175	; 0xaf
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b54      	cmp	r3, #84	; 0x54
 80007a6:	d108      	bne.n	80007ba <requestMeasureData+0xce>
				printf("got data request reply from: %d", device->deviceID);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	4853      	ldr	r0, [pc, #332]	; (80008fc <requestMeasureData+0x210>)
 80007b0:	f006 feac 	bl	800750c <iprintf>
				requestSuccessful = true;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61fb      	str	r3, [r7, #28]
 80007b8:	e084      	b.n	80008c4 <requestMeasureData+0x1d8>

			}
			else if(rfData->toID[i] == rfData->myDevice.device_id){
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	3344      	adds	r3, #68	; 0x44
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	88da      	ldrh	r2, [r3, #6]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	889b      	ldrh	r3, [r3, #4]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d17a      	bne.n	80008c4 <requestMeasureData+0x1d8>
 80007ce:	466b      	mov	r3, sp
 80007d0:	469a      	mov	sl, r3

				printf("decoding data");
 80007d2:	484b      	ldr	r0, [pc, #300]	; (8000900 <requestMeasureData+0x214>)
 80007d4:	f006 fe9a 	bl	800750c <iprintf>
				uint8_t allData[rfData->activeRxMessage[i][MSG_SIZE_POS]];
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	6a3a      	ldr	r2, [r7, #32]
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	440b      	add	r3, r1
 80007e6:	33b6      	adds	r3, #182	; 0xb6
 80007e8:	7819      	ldrb	r1, [r3, #0]
 80007ea:	460b      	mov	r3, r1
 80007ec:	3b01      	subs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	b2cb      	uxtb	r3, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	461c      	mov	r4, r3
 80007f6:	4615      	mov	r5, r2
 80007f8:	f04f 0200 	mov.w	r2, #0
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	00eb      	lsls	r3, r5, #3
 8000802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000806:	00e2      	lsls	r2, r4, #3
 8000808:	b2cb      	uxtb	r3, r1
 800080a:	2200      	movs	r2, #0
 800080c:	4698      	mov	r8, r3
 800080e:	4691      	mov	r9, r2
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800081c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000820:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000824:	460b      	mov	r3, r1
 8000826:	3307      	adds	r3, #7
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	ebad 0d03 	sub.w	sp, sp, r3
 8000830:	ab02      	add	r3, sp, #8
 8000832:	3300      	adds	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
				for(int i = 0;i<rfData->activeRxMessage[i][MSG_SIZE_POS];i++){
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
 800083a:	e014      	b.n	8000866 <requestMeasureData+0x17a>

						allData[i] = rfData->activeRxMessage[i][i+MSG_BODY_START];
 800083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083e:	f103 0109 	add.w	r1, r3, #9
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4403      	add	r3, r0
 8000850:	440b      	add	r3, r1
 8000852:	33ae      	adds	r3, #174	; 0xae
 8000854:	7819      	ldrb	r1, [r3, #0]
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085a:	4413      	add	r3, r2
 800085c:	460a      	mov	r2, r1
 800085e:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[i][MSG_SIZE_POS];i++){
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	3301      	adds	r3, #1
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800086a:	4613      	mov	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4413      	add	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	440b      	add	r3, r1
 8000874:	33b6      	adds	r3, #182	; 0xb6
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087c:	4293      	cmp	r3, r2
 800087e:	dbdd      	blt.n	800083c <requestMeasureData+0x150>

				}
				decodeMeasurementData(&(device->measurement), allData, rfData->activeRxMessage[i][MSG_SIZE_POS]);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f103 0008 	add.w	r0, r3, #8
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	6a3a      	ldr	r2, [r7, #32]
 800088a:	4613      	mov	r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4413      	add	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	440b      	add	r3, r1
 8000894:	33b6      	adds	r3, #182	; 0xb6
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	6979      	ldr	r1, [r7, #20]
 800089c:	f7ff fe6a 	bl	8000574 <decodeMeasurementData>

				printf("\r\nResulting measurement data: %d, %d, %d, %d, %d",
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	6899      	ldr	r1, [r3, #8]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	68d8      	ldr	r0, [r3, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	691e      	ldr	r6, [r3, #16]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	6992      	ldr	r2, [r2, #24]
 80008b4:	9201      	str	r2, [sp, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	4633      	mov	r3, r6
 80008ba:	4602      	mov	r2, r0
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <requestMeasureData+0x218>)
 80008be:	f006 fe25 	bl	800750c <iprintf>
 80008c2:	46d5      	mov	sp, sl
		for(int i = 0; i<rfData->messageNum; i++){
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	3301      	adds	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80008d0:	461a      	mov	r2, r3
 80008d2:	6a3b      	ldr	r3, [r7, #32]
 80008d4:	4293      	cmp	r3, r2
 80008d6:	f6ff af5c 	blt.w	8000792 <requestMeasureData+0xa6>
						device->measurement.undergroundTemperatureValue,
						device->measurement.batteryStatus);

			}
		}
		HAL_Delay(1000);
 80008da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008de:	f002 fb85 	bl	8002fec <HAL_Delay>
	while(!requestSuccessful){
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	f43f af4b 	beq.w	8000780 <requestMeasureData+0x94>

	}

}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	bf00      	nop
 80008f8:	0800850c 	.word	0x0800850c
 80008fc:	08008518 	.word	0x08008518
 8000900:	08008538 	.word	0x08008538
 8000904:	08008548 	.word	0x08008548

08000908 <requestStatusData>:

int requestStatusData(struct statusData* statusInfo, struct rfDataStorage* rfData){
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]

	rfData->activeTxMessageSize = 0;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	22fe      	movs	r2, #254	; 0xfe
 800091e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_GIVE_STATUS_DATA;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	2251      	movs	r2, #81	; 0x51
 8000926:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_TO_ID_POS1] = 70&0x0F;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	2206      	movs	r2, #6
 800092e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	rfData->activeTxMessage[MSG_TO_ID_POS2] = 70&0xF0;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	2240      	movs	r2, #64	; 0x40
 8000936:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0x0F;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	b2da      	uxtb	r2, r3
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = rfData->myDevice.device_id&0xF0;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	889b      	ldrh	r3, [r3, #4]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f023 030f 	bic.w	r3, r3, #15
 8000956:	b2da      	uxtb	r2, r3
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = 0;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	2200      	movs	r2, #0
 800096a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	int requestSuccessful = false;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000984:	48a3      	ldr	r0, [pc, #652]	; (8000c14 <requestStatusData+0x30c>)
 8000986:	f002 fe6f 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f002 fb2e 	bl	8002fec <HAL_Delay>

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+6);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f103 0299 	add.w	r2, r3, #153	; 0x99
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800099c:	3306      	adds	r3, #6
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4619      	mov	r1, r3
 80009a2:	4610      	mov	r0, r2
 80009a4:	f001 fca2 	bl	80022ec <Send>
	int listeningCounter = 200;
 80009a8:	23c8      	movs	r3, #200	; 0xc8
 80009aa:	61bb      	str	r3, [r7, #24]
	while(!requestSuccessful){
 80009ac:	e123      	b.n	8000bf6 <requestStatusData+0x2ee>
		printf("\r\nScanning");
 80009ae:	489a      	ldr	r0, [pc, #616]	; (8000c18 <requestStatusData+0x310>)
 80009b0:	f006 fdac 	bl	800750c <iprintf>
		Comms_Handler(rfData);
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f000 ff21 	bl	80017fc <Comms_Handler>

		for(int i = 0; i<rfData->messageNum; i++){
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e10d      	b.n	8000bdc <requestStatusData+0x2d4>
			//printf("last id: %d -> comparing to: %d", rfData->activeRxMessage[MSG_TO_ID_POS], rfData->myDevice.device_id);
			printf("last message type: %d", rfData->activeRxMessage[i][MSG_TYPE_POS]);
 80009c0:	6839      	ldr	r1, [r7, #0]
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	33af      	adds	r3, #175	; 0xaf
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	4619      	mov	r1, r3
 80009d4:	4891      	ldr	r0, [pc, #580]	; (8000c1c <requestStatusData+0x314>)
 80009d6:	f006 fd99 	bl	800750c <iprintf>
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_REMOTE_DONE){
 80009da:	6839      	ldr	r1, [r7, #0]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	4613      	mov	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	440b      	add	r3, r1
 80009e8:	33af      	adds	r3, #175	; 0xaf
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b54      	cmp	r3, #84	; 0x54
 80009ee:	d10b      	bne.n	8000a08 <requestStatusData+0x100>
				printf("\r\ngot data request reply from: %d", rfData->fromID[i]);
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3340      	adds	r3, #64	; 0x40
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	889b      	ldrh	r3, [r3, #4]
 80009fc:	4619      	mov	r1, r3
 80009fe:	4888      	ldr	r0, [pc, #544]	; (8000c20 <requestStatusData+0x318>)
 8000a00:	f006 fd84 	bl	800750c <iprintf>
				requestSuccessful = true;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]

			}
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_GIVE_BROKEN_DATA){
 8000a08:	6839      	ldr	r1, [r7, #0]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	440b      	add	r3, r1
 8000a16:	33af      	adds	r3, #175	; 0xaf
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b50      	cmp	r3, #80	; 0x50
 8000a1c:	d164      	bne.n	8000ae8 <requestStatusData+0x1e0>
				printf("\r\nbroken data received: %d->", rfData->activeRxMessage[i][MSG_SIZE_POS], statusInfo->brokenNum);
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	33b6      	adds	r3, #182	; 0xb6
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000a38:	461a      	mov	r2, r3
 8000a3a:	487a      	ldr	r0, [pc, #488]	; (8000c24 <requestStatusData+0x31c>)
 8000a3c:	f006 fd66 	bl	800750c <iprintf>
				for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n+=2){
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	e031      	b.n	8000aaa <requestStatusData+0x1a2>

					statusInfo->brokenDevices[statusInfo->brokenNum] = ((uint16_t)rfData->activeRxMessage[i][MSG_BODY_START+n+1]<<8)|(uint16_t)rfData->activeRxMessage[i][MSG_BODY_START+n];
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	f103 010a 	add.w	r1, r3, #10
 8000a4c:	6838      	ldr	r0, [r7, #0]
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	4613      	mov	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4403      	add	r3, r0
 8000a5a:	440b      	add	r3, r1
 8000a5c:	33ae      	adds	r3, #174	; 0xae
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	b219      	sxth	r1, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	f103 0009 	add.w	r0, r3, #9
 8000a6a:	683c      	ldr	r4, [r7, #0]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4423      	add	r3, r4
 8000a78:	4403      	add	r3, r0
 8000a7a:	33ae      	adds	r3, #174	; 0xae
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	430b      	orrs	r3, r1
 8000a82:	b219      	sxth	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	b289      	uxth	r1, r1
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					statusInfo->brokenNum++;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
				for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n+=2){
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	6839      	ldr	r1, [r7, #0]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	33b6      	adds	r3, #182	; 0xb6
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	dbc0      	blt.n	8000a46 <requestStatusData+0x13e>
				}
				printf("\r\nbroken data received: %d->", rfData->activeRxMessage[i][MSG_SIZE_POS], statusInfo->brokenNum);
 8000ac4:	6839      	ldr	r1, [r7, #0]
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	33b6      	adds	r3, #182	; 0xb6
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4850      	ldr	r0, [pc, #320]	; (8000c24 <requestStatusData+0x31c>)
 8000ae2:	f006 fd13 	bl	800750c <iprintf>
 8000ae6:	e076      	b.n	8000bd6 <requestStatusData+0x2ce>

			}
			else if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_GIVE_LOW_BATTERY_DATA){
 8000ae8:	6839      	ldr	r1, [r7, #0]
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	33af      	adds	r3, #175	; 0xaf
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b52      	cmp	r3, #82	; 0x52
 8000afc:	d165      	bne.n	8000bca <requestStatusData+0x2c2>
				printf("\r\nbattery data received: %d->", rfData->activeRxMessage[i][MSG_SIZE_POS], statusInfo->lowBatteryNum);
 8000afe:	6839      	ldr	r1, [r7, #0]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	33b6      	adds	r3, #182	; 0xb6
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4843      	ldr	r0, [pc, #268]	; (8000c28 <requestStatusData+0x320>)
 8000b1c:	f006 fcf6 	bl	800750c <iprintf>
				for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n+=2){
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e032      	b.n	8000b8c <requestStatusData+0x284>

					statusInfo->lowBatteryDevices[statusInfo->lowBatteryNum] = ((uint16_t)rfData->activeRxMessage[i][MSG_BODY_START+n+1]<<8)|(uint16_t)rfData->activeRxMessage[i][MSG_BODY_START+n];
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f103 010a 	add.w	r1, r3, #10
 8000b2c:	6838      	ldr	r0, [r7, #0]
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	4613      	mov	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4403      	add	r3, r0
 8000b3a:	440b      	add	r3, r1
 8000b3c:	33ae      	adds	r3, #174	; 0xae
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b219      	sxth	r1, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f103 0009 	add.w	r0, r3, #9
 8000b4a:	683c      	ldr	r4, [r7, #0]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4423      	add	r3, r4
 8000b58:	4403      	add	r3, r0
 8000b5a:	33ae      	adds	r3, #174	; 0xae
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	430b      	orrs	r3, r1
 8000b62:	b219      	sxth	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	b289      	uxth	r1, r1
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3264      	adds	r2, #100	; 0x64
 8000b72:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					statusInfo->lowBatteryNum++;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
				for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n+=2){
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	6839      	ldr	r1, [r7, #0]
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	440b      	add	r3, r1
 8000b9a:	33b6      	adds	r3, #182	; 0xb6
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	dbbf      	blt.n	8000b26 <requestStatusData+0x21e>
				}
				printf("\r\nbattery data received: %d->", rfData->activeRxMessage[i][MSG_SIZE_POS], statusInfo->lowBatteryNum);
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	33b6      	adds	r3, #182	; 0xb6
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4819      	ldr	r0, [pc, #100]	; (8000c28 <requestStatusData+0x320>)
 8000bc4:	f006 fca2 	bl	800750c <iprintf>
 8000bc8:	e005      	b.n	8000bd6 <requestStatusData+0x2ce>
			}

			else{
				listeningCounter--;
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
				if(listeningCounter<=0){
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	dd0b      	ble.n	8000bee <requestStatusData+0x2e6>
		for(int i = 0; i<rfData->messageNum; i++){
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8000be2:	461a      	mov	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	f6ff aeea 	blt.w	80009c0 <requestStatusData+0xb8>
 8000bec:	e000      	b.n	8000bf0 <requestStatusData+0x2e8>
					break;
 8000bee:	bf00      	nop
				}
			}
		}
		HAL_Delay(100);
 8000bf0:	2064      	movs	r0, #100	; 0x64
 8000bf2:	f002 f9fb 	bl	8002fec <HAL_Delay>
	while(!requestSuccessful){
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f43f aed8 	beq.w	80009ae <requestStatusData+0xa6>

	}
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <requestStatusData+0x30c>)
 8000c06:	f002 fd2f 	bl	8003668 <HAL_GPIO_WritePin>
	return requestSuccessful;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3724      	adds	r7, #36	; 0x24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	48000400 	.word	0x48000400
 8000c18:	0800857c 	.word	0x0800857c
 8000c1c:	08008588 	.word	0x08008588
 8000c20:	080085a0 	.word	0x080085a0
 8000c24:	080085c4 	.word	0x080085c4
 8000c28:	080085e4 	.word	0x080085e4

08000c2c <mainOperationRemote>:

	return 0;
}

void mainOperationRemote(struct rfDataStorage* rfData, struct CommunicationHandles* handles)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	f6ad 3d08 	subw	sp, sp, #2824	; 0xb08
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000c38:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8000c3c:	6018      	str	r0, [r3, #0]
 8000c3e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000c42:	f6a3 3308 	subw	r3, r3, #2824	; 0xb08
 8000c46:	6019      	str	r1, [r3, #0]
	printf("\r\nRemote Operation");
 8000c48:	4850      	ldr	r0, [pc, #320]	; (8000d8c <mainOperationRemote+0x160>)
 8000c4a:	f006 fc5f 	bl	800750c <iprintf>
	if(HAL_GPIO_ReadPin(statusGPIO, statusGPIOPin)== GPIO_PIN_SET)
 8000c4e:	2104      	movs	r1, #4
 8000c50:	484f      	ldr	r0, [pc, #316]	; (8000d90 <mainOperationRemote+0x164>)
 8000c52:	f002 fcf1 	bl	8003638 <HAL_GPIO_ReadPin>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d172      	bne.n	8000d42 <mainOperationRemote+0x116>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c62:	484c      	ldr	r0, [pc, #304]	; (8000d94 <mainOperationRemote+0x168>)
 8000c64:	f002 fd00 	bl	8003668 <HAL_GPIO_WritePin>
		struct statusData statusInfo;
		statusInfo.brokenNum = 0;
 8000c68:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000c6c:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
		statusInfo.lowBatteryNum = 0;
 8000c76:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000c7a:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		if(requestStatusData(&statusInfo, rfData)){
 8000c84:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000c88:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8000c8c:	f107 020c 	add.w	r2, r7, #12
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	4610      	mov	r0, r2
 8000c94:	f7ff fe38 	bl	8000908 <requestStatusData>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d047      	beq.n	8000d2e <mainOperationRemote+0x102>

			printf("\r\nBroken Devices:");
 8000c9e:	483e      	ldr	r0, [pc, #248]	; (8000d98 <mainOperationRemote+0x16c>)
 8000ca0:	f006 fc34 	bl	800750c <iprintf>
			for(int i = 0;i<statusInfo.brokenNum;i++){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 8000caa:	e010      	b.n	8000cce <mainOperationRemote+0xa2>

				printf("\r\n%d", statusInfo.brokenDevices[i]);
 8000cac:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000cb0:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000cb4:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 8000cb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4837      	ldr	r0, [pc, #220]	; (8000d9c <mainOperationRemote+0x170>)
 8000cc0:	f006 fc24 	bl	800750c <iprintf>
			for(int i = 0;i<statusInfo.brokenNum;i++){
 8000cc4:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 8000cce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000cd2:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000cd6:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	dbe3      	blt.n	8000cac <mainOperationRemote+0x80>

			}

			printf("Low Battery Devices:");
 8000ce4:	482e      	ldr	r0, [pc, #184]	; (8000da0 <mainOperationRemote+0x174>)
 8000ce6:	f006 fc11 	bl	800750c <iprintf>
			for(int i = 0;i<statusInfo.lowBatteryNum;i++){
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 3b00 	str.w	r3, [r7, #2816]	; 0xb00
 8000cf0:	e011      	b.n	8000d16 <mainOperationRemote+0xea>

				printf("\r\n%d", statusInfo.lowBatteryDevices[i]);
 8000cf2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000cf6:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000cfa:	f8d7 2b00 	ldr.w	r2, [r7, #2816]	; 0xb00
 8000cfe:	3264      	adds	r2, #100	; 0x64
 8000d00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4825      	ldr	r0, [pc, #148]	; (8000d9c <mainOperationRemote+0x170>)
 8000d08:	f006 fc00 	bl	800750c <iprintf>
			for(int i = 0;i<statusInfo.lowBatteryNum;i++){
 8000d0c:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8000d10:	3301      	adds	r3, #1
 8000d12:	f8c7 3b00 	str.w	r3, [r7, #2816]	; 0xb00
 8000d16:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000d1a:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000d1e:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 8000d22:	461a      	mov	r2, r3
 8000d24:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	dbe2      	blt.n	8000cf2 <mainOperationRemote+0xc6>
 8000d2c:	e002      	b.n	8000d34 <mainOperationRemote+0x108>

			}
		}
		else{
			printf("\r\nNo reply received;");
 8000d2e:	481d      	ldr	r0, [pc, #116]	; (8000da4 <mainOperationRemote+0x178>)
 8000d30:	f006 fbec 	bl	800750c <iprintf>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3a:	4816      	ldr	r0, [pc, #88]	; (8000d94 <mainOperationRemote+0x168>)
 8000d3c:	f002 fc94 	bl	8003668 <HAL_GPIO_WritePin>
		struct deviceData deviceBuf[100];
		requestMeasureData(deviceBuf, &deviceNum, rfData);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	}

}
 8000d40:	e01f      	b.n	8000d82 <mainOperationRemote+0x156>
	else if(HAL_GPIO_ReadPin(dataGPIO, dataGPIOPin)== GPIO_PIN_SET)
 8000d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d46:	4812      	ldr	r0, [pc, #72]	; (8000d90 <mainOperationRemote+0x164>)
 8000d48:	f002 fc76 	bl	8003638 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d117      	bne.n	8000d82 <mainOperationRemote+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2140      	movs	r1, #64	; 0x40
 8000d56:	480f      	ldr	r0, [pc, #60]	; (8000d94 <mainOperationRemote+0x168>)
 8000d58:	f002 fc86 	bl	8003668 <HAL_GPIO_WritePin>
		int deviceNum = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 3afc 	str.w	r3, [r7, #2812]	; 0xafc
		requestMeasureData(deviceBuf, &deviceNum, rfData);
 8000d62:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000d66:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8000d6a:	f607 21fc 	addw	r1, r7, #2812	; 0xafc
 8000d6e:	f107 000c 	add.w	r0, r7, #12
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	f7ff fcba 	bl	80006ec <requestMeasureData>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <mainOperationRemote+0x168>)
 8000d7e:	f002 fc73 	bl	8003668 <HAL_GPIO_WritePin>
}
 8000d82:	bf00      	nop
 8000d84:	f607 3708 	addw	r7, r7, #2824	; 0xb08
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	0800868c 	.word	0x0800868c
 8000d90:	48000400 	.word	0x48000400
 8000d94:	48000800 	.word	0x48000800
 8000d98:	080086a0 	.word	0x080086a0
 8000d9c:	080086b4 	.word	0x080086b4
 8000da0:	080086bc 	.word	0x080086bc
 8000da4:	080086d4 	.word	0x080086d4

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0ec      	sub	sp, #432	; 0x1b0
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	struct CommunicationHandles handles;
	handles.UARThandle = &hlpuart1;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <main+0x84>)
 8000db0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db4:	f002 f8a5 	bl	8002f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db8:	f000 f842 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbc:	f000 f934 	bl	8001028 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000dc0:	f000 f884 	bl	8000ecc <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000dc4:	f000 f8ae 	bl	8000f24 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000dc8:	f000 f8f0 	bl	8000fac <MX_SPI2_Init>
  MX_FATFS_Init();
 8000dcc:	f006 f9c0 	bl	8007150 <MX_FATFS_Init>
  MX_RNG_Init();
 8000dd0:	f000 f8d8 	bl	8000f84 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000dd4:	4816      	ldr	r0, [pc, #88]	; (8000e30 <main+0x88>)
 8000dd6:	f000 f9ef 	bl	80011b8 <RetargetInit>

  HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, 15);
 8000dda:	220f      	movs	r2, #15
 8000ddc:	4915      	ldr	r1, [pc, #84]	; (8000e34 <main+0x8c>)
 8000dde:	4813      	ldr	r0, [pc, #76]	; (8000e2c <main+0x84>)
 8000de0:	f004 fd1a 	bl	8005818 <HAL_UART_Receive_IT>

  struct rfDataStorage rfData;
  rfData.RXFIFO = &RXFIFO;
 8000de4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000de8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000dec:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <main+0x90>)
 8000dee:	601a      	str	r2, [r3, #0]
  init_comms(&rfData, DEVICE_PARENT, 5, 1);
 8000df0:	4638      	mov	r0, r7
 8000df2:	2301      	movs	r3, #1
 8000df4:	2205      	movs	r2, #5
 8000df6:	2100      	movs	r1, #0
 8000df8:	f000 fcb2 	bl	8001760 <init_comms>


  HAL_GPIO_WritePin(spiGPIO, spiGPIOPin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	480e      	ldr	r0, [pc, #56]	; (8000e3c <main+0x94>)
 8000e02:	f002 fc31 	bl	8003668 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <main+0x94>)
 8000e0e:	f002 fc2b 	bl	8003668 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainOperationRemote(&rfData, &handles);
 8000e12:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8000e16:	463b      	mov	r3, r7
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff06 	bl	8000c2c <mainOperationRemote>
	  HAL_Delay(1000);
 8000e20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e24:	f002 f8e2 	bl	8002fec <HAL_Delay>
	  mainOperationRemote(&rfData, &handles);
 8000e28:	e7f3      	b.n	8000e12 <main+0x6a>
 8000e2a:	bf00      	nop
 8000e2c:	200000a4 	.word	0x200000a4
 8000e30:	20000128 	.word	0x20000128
 8000e34:	20000484 	.word	0x20000484
 8000e38:	20000220 	.word	0x20000220
 8000e3c:	48000400 	.word	0x48000400

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b096      	sub	sp, #88	; 0x58
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	2244      	movs	r2, #68	; 0x44
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f006 fa74 	bl	800733c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e66:	f002 fc25 	bl	80036b4 <HAL_PWREx_ControlVoltageScaling>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e70:	f000 f99c 	bl	80011ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e74:	2310      	movs	r3, #16
 8000e76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e80:	2360      	movs	r3, #96	; 0x60
 8000e82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 fc67 	bl	8003760 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000e98:	f000 f988 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 f8b5 	bl	8004024 <HAL_RCC_ClockConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ec0:	f000 f974 	bl	80011ac <Error_Handler>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3758      	adds	r7, #88	; 0x58
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_LPUART1_UART_Init+0x50>)
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <MX_LPUART1_UART_Init+0x54>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_LPUART1_UART_Init+0x50>)
 8000ed8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000edc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_LPUART1_UART_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <MX_LPUART1_UART_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_LPUART1_UART_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <MX_LPUART1_UART_Init+0x50>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_LPUART1_UART_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <MX_LPUART1_UART_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_LPUART1_UART_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_LPUART1_UART_Init+0x50>)
 8000f0a:	f004 fa63 	bl	80053d4 <HAL_UART_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000f14:	f000 f94a 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000a4 	.word	0x200000a4
 8000f20:	40008000 	.word	0x40008000

08000f24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <MX_USART3_UART_Init+0x5c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART3_UART_Init+0x58>)
 8000f68:	f004 fa34 	bl	80053d4 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f72:	f000 f91b 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000128 	.word	0x20000128
 8000f80:	40004800 	.word	0x40004800

08000f84 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_RNG_Init+0x20>)
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <MX_RNG_Init+0x24>)
 8000f8c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_RNG_Init+0x20>)
 8000f90:	f003 fbf2 	bl	8004778 <HAL_RNG_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000f9a:	f000 f907 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001ac 	.word	0x200001ac
 8000fa8:	50060800 	.word	0x50060800

08000fac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <MX_SPI2_Init+0x78>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fde:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_SPI2_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_SPI2_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_SPI2_Init+0x74>)
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_SPI2_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_SPI2_Init+0x74>)
 8001006:	2208      	movs	r2, #8
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_SPI2_Init+0x74>)
 800100c:	f003 fc5a 	bl	80048c4 <HAL_SPI_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 f8c9 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001bc 	.word	0x200001bc
 8001024:	40003800 	.word	0x40003800

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <MX_GPIO_Init+0x100>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a39      	ldr	r2, [pc, #228]	; (8001128 <MX_GPIO_Init+0x100>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <MX_GPIO_Init+0x100>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <MX_GPIO_Init+0x100>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a33      	ldr	r2, [pc, #204]	; (8001128 <MX_GPIO_Init+0x100>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b31      	ldr	r3, [pc, #196]	; (8001128 <MX_GPIO_Init+0x100>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <MX_GPIO_Init+0x100>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <MX_GPIO_Init+0x100>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_GPIO_Init+0x100>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f002 faeb 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 519e 	mov.w	r1, #5056	; 0x13c0
 8001098:	4824      	ldr	r0, [pc, #144]	; (800112c <MX_GPIO_Init+0x104>)
 800109a:	f002 fae5 	bl	8003668 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80010a4:	4822      	ldr	r0, [pc, #136]	; (8001130 <MX_GPIO_Init+0x108>)
 80010a6:	f002 fadf 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f002 f946 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80010c8:	f240 4304 	movw	r3, #1028	; 0x404
 80010cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	4813      	ldr	r0, [pc, #76]	; (800112c <MX_GPIO_Init+0x104>)
 80010de:	f002 f939 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80010e2:	f44f 539e 	mov.w	r3, #5056	; 0x13c0
 80010e6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4619      	mov	r1, r3
 80010fa:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_GPIO_Init+0x104>)
 80010fc:	f002 f92a 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001100:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_GPIO_Init+0x108>)
 800111a:	f002 f91b 	bl	8003354 <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	48000400 	.word	0x48000400
 8001130:	48000800 	.word	0x48000800

08001134 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    //printf("\r\nreceived uart message");
	for (int i = 0; i < 15; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e017      	b.n	8001172 <HAL_UART_RxCpltCallback+0x3e>
	{
		    printf("\r\nreceived uart message: %x", UART2_rxBuffer[i]);
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_UART_RxCpltCallback+0x68>)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	4814      	ldr	r0, [pc, #80]	; (80011a0 <HAL_UART_RxCpltCallback+0x6c>)
 800114e:	f006 f9dd 	bl	800750c <iprintf>
			enqueue(&RXFIFO, UART2_rxBuffer[i]);
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_UART_RxCpltCallback+0x68>)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	4811      	ldr	r0, [pc, #68]	; (80011a4 <HAL_UART_RxCpltCallback+0x70>)
 800115e:	f001 f959 	bl	8002414 <enqueue>
			UART2_rxBuffer[i] = 0;
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_UART_RxCpltCallback+0x68>)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 15; i++)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b0e      	cmp	r3, #14
 8001176:	dde4      	ble.n	8001142 <HAL_UART_RxCpltCallback+0xe>
	}
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, 15);
 8001178:	220f      	movs	r2, #15
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <HAL_UART_RxCpltCallback+0x68>)
 800117c:	480a      	ldr	r0, [pc, #40]	; (80011a8 <HAL_UART_RxCpltCallback+0x74>)
 800117e:	f004 fb4b 	bl	8005818 <HAL_UART_Receive_IT>
    HAL_UART_Abort_IT(&hlpuart1);
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <HAL_UART_RxCpltCallback+0x74>)
 8001184:	f004 fb9e 	bl	80058c4 <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, 15);
 8001188:	220f      	movs	r2, #15
 800118a:	4904      	ldr	r1, [pc, #16]	; (800119c <HAL_UART_RxCpltCallback+0x68>)
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <HAL_UART_RxCpltCallback+0x74>)
 800118e:	f004 fb43 	bl	8005818 <HAL_UART_Receive_IT>

}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000484 	.word	0x20000484
 80011a0:	080086ec 	.word	0x080086ec
 80011a4:	20000220 	.word	0x20000220
 80011a8:	200000a4 	.word	0x200000a4

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <RetargetInit+0x28>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <RetargetInit+0x2c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6898      	ldr	r0, [r3, #8]
 80011cc:	2300      	movs	r3, #0
 80011ce:	2202      	movs	r2, #2
 80011d0:	2100      	movs	r1, #0
 80011d2:	f006 f9c3 	bl	800755c <setvbuf>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000498 	.word	0x20000498
 80011e4:	20000024 	.word	0x20000024

080011e8 <_isatty>:

int _isatty(int fd) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db04      	blt.n	8001200 <_isatty+0x18>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	dc01      	bgt.n	8001200 <_isatty+0x18>
    return 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e005      	b.n	800120c <_isatty+0x24>

  errno = EBADF;
 8001200:	f006 f86a 	bl	80072d8 <__errno>
 8001204:	4603      	mov	r3, r0
 8001206:	2209      	movs	r2, #9
 8001208:	601a      	str	r2, [r3, #0]
  return 0;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <_write>:

int _write(int fd, char* ptr, int len) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d002      	beq.n	800122c <_write+0x18>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d111      	bne.n	8001250 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <_write+0x54>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	b29a      	uxth	r2, r3
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	f004 f919 	bl	8005470 <HAL_UART_Transmit>
 800123e:	4603      	mov	r3, r0
 8001240:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <_write+0x38>
      return len;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	e008      	b.n	800125e <_write+0x4a>
    else
      return EIO;
 800124c:	2305      	movs	r3, #5
 800124e:	e006      	b.n	800125e <_write+0x4a>
  }
  errno = EBADF;
 8001250:	f006 f842 	bl	80072d8 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	2209      	movs	r2, #9
 8001258:	601a      	str	r2, [r3, #0]
  return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000498 	.word	0x20000498

0800126c <_close>:

int _close(int fd) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db04      	blt.n	8001284 <_close+0x18>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	dc01      	bgt.n	8001284 <_close+0x18>
    return 0;
 8001280:	2300      	movs	r3, #0
 8001282:	e006      	b.n	8001292 <_close+0x26>

  errno = EBADF;
 8001284:	f006 f828 	bl	80072d8 <__errno>
 8001288:	4603      	mov	r3, r0
 800128a:	2209      	movs	r2, #9
 800128c:	601a      	str	r2, [r3, #0]
  return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80012a6:	f006 f817 	bl	80072d8 <__errno>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2209      	movs	r2, #9
 80012ae:	601a      	str	r2, [r3, #0]
  return -1;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_read>:

int _read(int fd, char* ptr, int len) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d110      	bne.n	80012f0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <_read+0x4c>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	2201      	movs	r2, #1
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	f004 f95d 	bl	8005598 <HAL_UART_Receive>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <_read+0x30>
      return 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e008      	b.n	80012fe <_read+0x42>
    else
      return EIO;
 80012ec:	2305      	movs	r3, #5
 80012ee:	e006      	b.n	80012fe <_read+0x42>
  }
  errno = EBADF;
 80012f0:	f005 fff2 	bl	80072d8 <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2209      	movs	r2, #9
 80012f8:	601a      	str	r2, [r3, #0]
  return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000498 	.word	0x20000498

0800130c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db08      	blt.n	800132e <_fstat+0x22>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	dc05      	bgt.n	800132e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001328:	605a      	str	r2, [r3, #4]
    return 0;
 800132a:	2300      	movs	r3, #0
 800132c:	e005      	b.n	800133a <_fstat+0x2e>
  }

  errno = EBADF;
 800132e:	f005 ffd3 	bl	80072d8 <__errno>
 8001332:	4603      	mov	r3, r0
 8001334:	2209      	movs	r2, #9
 8001336:	601a      	str	r2, [r3, #0]
  return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_MspInit+0x44>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_MspInit+0x44>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6613      	str	r3, [r2, #96]	; 0x60
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_MspInit+0x44>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_MspInit+0x44>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_MspInit+0x44>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6593      	str	r3, [r2, #88]	; 0x58
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_MspInit+0x44>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000

0800138c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b09a      	sub	sp, #104	; 0x68
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a4:	f107 0320 	add.w	r3, r7, #32
 80013a8:	2234      	movs	r2, #52	; 0x34
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 ffc5 	bl	800733c <memset>
  if(huart->Instance==LPUART1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <HAL_UART_MspInit+0x168>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d13f      	bne.n	800143c <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013bc:	2320      	movs	r3, #32
 80013be:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 f84f 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013d4:	f7ff feea 	bl	80011ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80013d8:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 80013da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013dc:	4a46      	ldr	r2, [pc, #280]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80013e4:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	4a40      	ldr	r2, [pc, #256]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fc:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001408:	230c      	movs	r3, #12
 800140a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001418:	2308      	movs	r3, #8
 800141a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f001 ff95 	bl	8003354 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2046      	movs	r0, #70	; 0x46
 8001430:	f001 fedb 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001434:	2046      	movs	r0, #70	; 0x46
 8001436:	f001 fef4 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800143a:	e057      	b.n	80014ec <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a2e      	ldr	r2, [pc, #184]	; (80014fc <HAL_UART_MspInit+0x170>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d152      	bne.n	80014ec <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001446:	2304      	movs	r3, #4
 8001448:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	4618      	mov	r0, r3
 8001454:	f003 f80a 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800145e:	f7ff fea5 	bl	80011ac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6593      	str	r3, [r2, #88]	; 0x58
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_UART_MspInit+0x16c>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014aa:	2310      	movs	r3, #16
 80014ac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014ba:	2307      	movs	r3, #7
 80014bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014c2:	4619      	mov	r1, r3
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <HAL_UART_MspInit+0x174>)
 80014c6:	f001 ff45 	bl	8003354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014dc:	2307      	movs	r3, #7
 80014de:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014e4:	4619      	mov	r1, r3
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <HAL_UART_MspInit+0x178>)
 80014e8:	f001 ff34 	bl	8003354 <HAL_GPIO_Init>
}
 80014ec:	bf00      	nop
 80014ee:	3768      	adds	r7, #104	; 0x68
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40008000 	.word	0x40008000
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40004800 	.word	0x40004800
 8001500:	48000800 	.word	0x48000800
 8001504:	48000400 	.word	0x48000400

08001508 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b090      	sub	sp, #64	; 0x40
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2234      	movs	r2, #52	; 0x34
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f005 ff0f 	bl	800733c <memset>
  if(hrng->Instance==RNG)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_RNG_MspInit+0x60>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d11b      	bne.n	8001560 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001528:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800152c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 800152e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001532:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4618      	mov	r0, r3
 800153a:	f002 ff97 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001544:	f7ff fe32 	bl	80011ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_RNG_MspInit+0x64>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_RNG_MspInit+0x64>)
 800154e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_RNG_MspInit+0x64>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3740      	adds	r7, #64	; 0x40
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	50060800 	.word	0x50060800
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_SPI_MspInit+0x7c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d128      	bne.n	80015e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6593      	str	r3, [r2, #88]	; 0x58
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015d4:	2305      	movs	r3, #5
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <HAL_SPI_MspInit+0x84>)
 80015e0:	f001 feb8 	bl	8003354 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40003800 	.word	0x40003800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000400 	.word	0x48000400

080015f8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <SDTimer_Handler+0x40>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <SDTimer_Handler+0x1c>
    Timer1--;
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <SDTimer_Handler+0x40>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	3b01      	subs	r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <SDTimer_Handler+0x40>)
 8001612:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <SDTimer_Handler+0x44>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <SDTimer_Handler+0x34>
    Timer2--;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <SDTimer_Handler+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	3b01      	subs	r3, #1
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <SDTimer_Handler+0x44>)
 800162a:	701a      	strb	r2, [r3, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000049d 	.word	0x2000049d
 800163c:	2000049e 	.word	0x2000049e

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 FatFsCnt++;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <SysTick_Handler+0x30>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <SysTick_Handler+0x30>)
 8001698:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <SysTick_Handler+0x30>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b09      	cmp	r3, #9
 80016a2:	d904      	bls.n	80016ae <SysTick_Handler+0x26>
	  {
		FatFsCnt = 0;
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Handler+0x30>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80016aa:	f7ff ffa5 	bl	80015f8 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ae:	f001 fc7d 	bl	8002fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000049c 	.word	0x2000049c

080016bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <LPUART1_IRQHandler+0x10>)
 80016c2:	f004 fa27 	bl	8005b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200000a4 	.word	0x200000a4

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f005 fdea 	bl	80072d8 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000a000 	.word	0x2000a000
 8001730:	00000400 	.word	0x00000400
 8001734:	200004a0 	.word	0x200004a0
 8001738:	200004d0 	.word	0x200004d0

0800173c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <init_comms>:
//uint8_t devices;
//device rfData->myDevice;

//Initialization of communications
void init_comms(struct rfDataStorage* rfData, uint8_t deviceType, int id, int discovered)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	460b      	mov	r3, r1
 800176e:	72fb      	strb	r3, [r7, #11]
	//Create a fifo queuq
	create_queue(rfData->RXFIFO);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fe13 	bl	80023a0 <create_queue>

	//Set device data
	rfData->myDevice.device_id = id;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	809a      	strh	r2, [r3, #4]
	rfData->myDevice.device_type = deviceType;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	7afa      	ldrb	r2, [r7, #11]
 8001786:	719a      	strb	r2, [r3, #6]
	rfData->myDevice.device_is_discovered = discovered;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf14      	ite	ne
 800178e:	2301      	movne	r3, #1
 8001790:	2300      	moveq	r3, #0
 8001792:	b2da      	uxtb	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	721a      	strb	r2, [r3, #8]

	//Set initila forwarding data
	rfData->count = 0;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	729a      	strb	r2, [r3, #10]
	rfData->num_fwds = 0;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	72da      	strb	r2, [r3, #11]

	//Set initial fifo data
	for(int i = 0;i<MAX_NUM_FWDS;i++){
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e020      	b.n	80017ec <init_comms+0x8c>

		rfData->FWDFIFO[i].from_id = 0;
 80017aa:	68f9      	ldr	r1, [r7, #12]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	440b      	add	r3, r1
 80017b8:	330c      	adds	r3, #12
 80017ba:	2200      	movs	r2, #0
 80017bc:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[i].to_id = 0;
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	440b      	add	r3, r1
 80017cc:	330e      	adds	r3, #14
 80017ce:	2200      	movs	r2, #0
 80017d0:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[i].type = 0;
 80017d2:	68f9      	ldr	r1, [r7, #12]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	440b      	add	r3, r1
 80017e0:	3310      	adds	r3, #16
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<MAX_NUM_FWDS;i++){
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b13      	cmp	r3, #19
 80017f0:	dddb      	ble.n	80017aa <init_comms+0x4a>

	}

}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <Comms_Handler>:

//The function to handle all communication traffic
void Comms_Handler(struct rfDataStorage* rfData)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	//If device is child
	if (rfData->myDevice.device_type == DEVICE_CHILD)					//Child Handler
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	799b      	ldrb	r3, [r3, #6]
 8001808:	2b99      	cmp	r3, #153	; 0x99
 800180a:	f040 81bd 	bne.w	8001b88 <Comms_Handler+0x38c>
	{
		//data holder
		uint8_t data = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	73bb      	strb	r3, [r7, #14]

		//Refresh number of active messages
		rfData->messageNum = 0;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112

		//Iterate through fifo
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 800181a:	e19d      	b.n	8001b58 <Comms_Handler+0x35c>
		{
			//Dequeue first data point
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fe29 	bl	8002478 <dequeue>
 8001826:	4603      	mov	r3, r0
 8001828:	73bb      	strb	r3, [r7, #14]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	2bfe      	cmp	r3, #254	; 0xfe
 800182e:	f040 8193 	bne.w	8001b58 <Comms_Handler+0x35c>
			{
				//Set preamble message
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001838:	4619      	mov	r1, r3
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	33ae      	adds	r3, #174	; 0xae
 8001848:	22fe      	movs	r2, #254	; 0xfe
 800184a:	701a      	strb	r2, [r3, #0]

				//Dequeue message type
				data = dequeue(rfData->RXFIFO);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fe11 	bl	8002478 <dequeue>
 8001856:	4603      	mov	r3, r0
 8001858:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] = data;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001860:	4619      	mov	r1, r3
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	33af      	adds	r3, #175	; 0xaf
 8001870:	7bba      	ldrb	r2, [r7, #14]
 8001872:	701a      	strb	r2, [r3, #0]

				//Dequeue both bytes of destination ID
				data = dequeue(rfData->RXFIFO);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fdfd 	bl	8002478 <dequeue>
 800187e:	4603      	mov	r3, r0
 8001880:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS1] = data;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001888:	4619      	mov	r1, r3
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	33b0      	adds	r3, #176	; 0xb0
 8001898:	7bba      	ldrb	r2, [r7, #14]
 800189a:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fde9 	bl	8002478 <dequeue>
 80018a6:	4603      	mov	r3, r0
 80018a8:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS2] = data;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80018b0:	4619      	mov	r1, r3
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	33b1      	adds	r3, #177	; 0xb1
 80018c0:	7bba      	ldrb	r2, [r7, #14]
 80018c2:	701a      	strb	r2, [r3, #0]
				//assign destination ID
				rfData->toID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS2]);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80018ca:	4619      	mov	r1, r3
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	33b1      	adds	r3, #177	; 0xb1
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b21a      	sxth	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80018e6:	4618      	mov	r0, r3
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4603      	mov	r3, r0
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4403      	add	r3, r0
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	33b0      	adds	r3, #176	; 0xb0
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001904:	b291      	uxth	r1, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	3344      	adds	r3, #68	; 0x44
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	460a      	mov	r2, r1
 8001910:	80da      	strh	r2, [r3, #6]

				//Dequeue both bytes of sender ID
				data = dequeue(rfData->RXFIFO);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fdae 	bl	8002478 <dequeue>
 800191c:	4603      	mov	r3, r0
 800191e:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS1] = data;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001926:	4619      	mov	r1, r3
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	33b2      	adds	r3, #178	; 0xb2
 8001936:	7bba      	ldrb	r2, [r7, #14]
 8001938:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fd9a 	bl	8002478 <dequeue>
 8001944:	4603      	mov	r3, r0
 8001946:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS2] = data;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800194e:	4619      	mov	r1, r3
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	33b3      	adds	r3, #179	; 0xb3
 800195e:	7bba      	ldrb	r2, [r7, #14]
 8001960:	701a      	strb	r2, [r3, #0]
				//assign sender
				rfData->fromID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS2]);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001968:	4619      	mov	r1, r3
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	33b3      	adds	r3, #179	; 0xb3
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	b21a      	sxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001984:	4618      	mov	r0, r3
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4603      	mov	r3, r0
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4403      	add	r3, r0
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	33b2      	adds	r3, #178	; 0xb2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21a      	sxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80019a2:	b291      	uxth	r1, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	3340      	adds	r3, #64	; 0x40
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	460a      	mov	r2, r1
 80019ae:	809a      	strh	r2, [r3, #4]

				//Dequeue current number of mesh hops
				data = dequeue(rfData->RXFIFO);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 fd5f 	bl	8002478 <dequeue>
 80019ba:	4603      	mov	r3, r0
 80019bc:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] = data;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80019c4:	4619      	mov	r1, r3
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	33b4      	adds	r3, #180	; 0xb4
 80019d4:	7bba      	ldrb	r2, [r7, #14]
 80019d6:	701a      	strb	r2, [r3, #0]

				//Dequeue maximum allowed number of mesh hops
				data = dequeue(rfData->RXFIFO);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fd4b 	bl	8002478 <dequeue>
 80019e2:	4603      	mov	r3, r0
 80019e4:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_MAX_HOPS_POS] = data;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80019ec:	4619      	mov	r1, r3
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	33b5      	adds	r3, #181	; 0xb5
 80019fc:	7bba      	ldrb	r2, [r7, #14]
 80019fe:	701a      	strb	r2, [r3, #0]

				//Dequeue specified message side
				data = dequeue(rfData->RXFIFO);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fd37 	bl	8002478 <dequeue>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS] = data;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001a14:	4619      	mov	r1, r3
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	33b6      	adds	r3, #182	; 0xb6
 8001a24:	7bba      	ldrb	r2, [r7, #14]
 8001a26:	701a      	strb	r2, [r3, #0]

				//Retrieve message based on specified size
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2c:	e01a      	b.n	8001a64 <Comms_Handler+0x268>
				{
					data = dequeue(rfData->RXFIFO);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fd20 	bl	8002478 <dequeue>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	73bb      	strb	r3, [r7, #14]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001a42:	4618      	mov	r0, r3
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	f103 0209 	add.w	r2, r3, #9
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4403      	add	r3, r0
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	4413      	add	r3, r2
 8001a58:	33ae      	adds	r3, #174	; 0xae
 8001a5a:	7bba      	ldrb	r2, [r7, #14]
 8001a5c:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	33b6      	adds	r3, #182	; 0xb6
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	4293      	cmp	r3, r2
 8001a82:	dbd4      	blt.n	8001a2e <Comms_Handler+0x232>

				}

				int newMessage = 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	623b      	str	r3, [r7, #32]
				//Check if the received message was not received before during this fifo handling
				if(rfData->messageNum>0){
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d054      	beq.n	8001b3c <Comms_Handler+0x340>
					for(int i = 1;i<=rfData->messageNum;i++){
 8001a92:	2301      	movs	r3, #1
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e04a      	b.n	8001b2e <Comms_Handler+0x332>
						//check message type, destination ID and sender ID for comparison
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	33af      	adds	r3, #175	; 0xaf
 8001aae:	7819      	ldrb	r1, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	1ad2      	subs	r2, r2, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4403      	add	r3, r0
 8001ac8:	33af      	adds	r3, #175	; 0xaf
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4299      	cmp	r1, r3
 8001ace:	d12b      	bne.n	8001b28 <Comms_Handler+0x32c>
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	3340      	adds	r3, #64	; 0x40
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	889a      	ldrh	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	1acb      	subs	r3, r1, r3
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	3340      	adds	r3, #64	; 0x40
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	440b      	add	r3, r1
 8001af4:	889b      	ldrh	r3, [r3, #4]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d116      	bne.n	8001b28 <Comms_Handler+0x32c>
						   rfData->toID[rfData->messageNum] == rfData->toID[rfData->messageNum-i]){
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	3344      	adds	r3, #68	; 0x44
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	88da      	ldrh	r2, [r3, #6]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001b10:	4619      	mov	r1, r3
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	1acb      	subs	r3, r1, r3
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	3344      	adds	r3, #68	; 0x44
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	440b      	add	r3, r1
 8001b1e:	88db      	ldrh	r3, [r3, #6]
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d101      	bne.n	8001b28 <Comms_Handler+0x32c>
								newMessage = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
					for(int i = 1;i<=rfData->messageNum;i++){
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001b34:	461a      	mov	r2, r3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	ddad      	ble.n	8001a98 <Comms_Handler+0x29c>
							}
					}
				}
				//Increment number of messages if new message was received
				if(newMessage){
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <Comms_Handler+0x356>

					rfData->messageNum++;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112

				}

				Message_Handler(rfData);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f9eb 	bl	8001f2e <Message_Handler>
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fc47 	bl	80023f0 <is_empty>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f083 0301 	eor.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f47f ae56 	bne.w	800181c <Comms_Handler+0x20>
			}
		}

		//Perform discovery
		if(rfData->myDevice.device_is_discovered == false)			//if not discovered and theres no rfData->activeMessages
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7a1b      	ldrb	r3, [r3, #8]
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 81b7 	beq.w	8001eee <Comms_Handler+0x6f2>
		{
			//Im_Here(rfData);
			Discovery_Handler(rfData);						//go to discovery handler
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f9b8 	bl	8001ef6 <Discovery_Handler>
			}
		}

	}

}
 8001b86:	e1b2      	b.n	8001eee <Comms_Handler+0x6f2>
	else if (rfData->myDevice.device_type == DEVICE_PARENT)			//Parent Handler
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	799b      	ldrb	r3, [r3, #6]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 81ae 	bne.w	8001eee <Comms_Handler+0x6f2>
		uint8_t data = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
		rfData->messageNum = 0;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8001b9e:	e19a      	b.n	8001ed6 <Comms_Handler+0x6da>
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fc67 	bl	8002478 <dequeue>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73fb      	strb	r3, [r7, #15]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	2bfe      	cmp	r3, #254	; 0xfe
 8001bb2:	f040 8190 	bne.w	8001ed6 <Comms_Handler+0x6da>
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	33ae      	adds	r3, #174	; 0xae
 8001bcc:	22fe      	movs	r2, #254	; 0xfe
 8001bce:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fc4f 	bl	8002478 <dequeue>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] = data;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001be4:	4619      	mov	r1, r3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	33af      	adds	r3, #175	; 0xaf
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fc3b 	bl	8002478 <dequeue>
 8001c02:	4603      	mov	r3, r0
 8001c04:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS1] = data;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	33b0      	adds	r3, #176	; 0xb0
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fc27 	bl	8002478 <dequeue>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS2] = data;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001c34:	4619      	mov	r1, r3
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	33b1      	adds	r3, #177	; 0xb1
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	701a      	strb	r2, [r3, #0]
				rfData->toID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS2]);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001c4e:	4619      	mov	r1, r3
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	33b1      	adds	r3, #177	; 0xb1
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4603      	mov	r3, r0
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4403      	add	r3, r0
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	33b0      	adds	r3, #176	; 0xb0
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001c88:	b291      	uxth	r1, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	3344      	adds	r3, #68	; 0x44
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	460a      	mov	r2, r1
 8001c94:	80da      	strh	r2, [r3, #6]
				data = dequeue(rfData->RXFIFO);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fbec 	bl	8002478 <dequeue>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS1] = data;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001caa:	4619      	mov	r1, r3
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	33b2      	adds	r3, #178	; 0xb2
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fbd8 	bl	8002478 <dequeue>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS2] = data;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	33b3      	adds	r3, #179	; 0xb3
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	701a      	strb	r2, [r3, #0]
				rfData->fromID[rfData->messageNum] = bit8Comb(rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS1], rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS2]);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001cec:	4619      	mov	r1, r3
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	33b3      	adds	r3, #179	; 0xb3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001d08:	4618      	mov	r0, r3
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4403      	add	r3, r0
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	33b2      	adds	r3, #178	; 0xb2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001d26:	b291      	uxth	r1, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	3340      	adds	r3, #64	; 0x40
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	460a      	mov	r2, r1
 8001d32:	809a      	strh	r2, [r3, #4]
				data = dequeue(rfData->RXFIFO);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fb9d 	bl	8002478 <dequeue>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] = data;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001d48:	4619      	mov	r1, r3
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	33b4      	adds	r3, #180	; 0xb4
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fb89 	bl	8002478 <dequeue>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_MAX_HOPS_POS] = data;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001d70:	4619      	mov	r1, r3
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	33b5      	adds	r3, #181	; 0xb5
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fb75 	bl	8002478 <dequeue>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS] = data;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001d98:	4619      	mov	r1, r3
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	33b6      	adds	r3, #182	; 0xb6
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	e01a      	b.n	8001de8 <Comms_Handler+0x5ec>
					data = dequeue(rfData->RXFIFO);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fb5e 	bl	8002478 <dequeue>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f103 0209 	add.w	r2, r3, #9
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4403      	add	r3, r0
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	4413      	add	r3, r2
 8001ddc:	33ae      	adds	r3, #174	; 0xae
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001dee:	4619      	mov	r1, r3
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	33b6      	adds	r3, #182	; 0xb6
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	dbd4      	blt.n	8001db2 <Comms_Handler+0x5b6>
				int newMessage = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
				if(rfData->messageNum>0){
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d054      	beq.n	8001ec0 <Comms_Handler+0x6c4>
					for(int i = 1;i<=rfData->messageNum;i++){
 8001e16:	2301      	movs	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	e04a      	b.n	8001eb2 <Comms_Handler+0x6b6>
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001e22:	4619      	mov	r1, r3
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	33af      	adds	r3, #175	; 0xaf
 8001e32:	7819      	ldrb	r1, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4403      	add	r3, r0
 8001e4c:	33af      	adds	r3, #175	; 0xaf
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4299      	cmp	r1, r3
 8001e52:	d12b      	bne.n	8001eac <Comms_Handler+0x6b0>
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	3340      	adds	r3, #64	; 0x40
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	889a      	ldrh	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1acb      	subs	r3, r1, r3
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	3340      	adds	r3, #64	; 0x40
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	440b      	add	r3, r1
 8001e78:	889b      	ldrh	r3, [r3, #4]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d116      	bne.n	8001eac <Comms_Handler+0x6b0>
						   rfData->toID[rfData->messageNum] == rfData->toID[rfData->messageNum-i]){
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	3344      	adds	r3, #68	; 0x44
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	88da      	ldrh	r2, [r3, #6]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001e94:	4619      	mov	r1, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1acb      	subs	r3, r1, r3
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	3344      	adds	r3, #68	; 0x44
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	440b      	add	r3, r1
 8001ea2:	88db      	ldrh	r3, [r3, #6]
						   rfData->fromID[rfData->messageNum] == rfData->fromID[rfData->messageNum-i]&&
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d101      	bne.n	8001eac <Comms_Handler+0x6b0>
								newMessage = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
					for(int i = 1;i<=rfData->messageNum;i++){
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001eb8:	461a      	mov	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	ddad      	ble.n	8001e1c <Comms_Handler+0x620>
				if(newMessage){
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <Comms_Handler+0x6da>
					rfData->messageNum++;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fa88 	bl	80023f0 <is_empty>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f083 0301 	eor.w	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f47f ae59 	bne.w	8001ba0 <Comms_Handler+0x3a4>
}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <Discovery_Handler>:

//Function to handle device discovery
void Discovery_Handler(struct rfDataStorage* rfData)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);
 8001efe:	20c8      	movs	r0, #200	; 0xc8
 8001f00:	f001 f874 	bl	8002fec <HAL_Delay>
	if(rfData->count == 0)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7a9b      	ldrb	r3, [r3, #10]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <Discovery_Handler+0x24>
	{
		Im_Here(rfData);								//send i'm here rfData->activeMessage
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f9ad 	bl	800226c <Im_Here>
		rfData->count = 40;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2228      	movs	r2, #40	; 0x28
 8001f16:	729a      	strb	r2, [r3, #10]
	else
	{
		rfData->count--;
	}

}
 8001f18:	e005      	b.n	8001f26 <Discovery_Handler+0x30>
		rfData->count--;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7a9b      	ldrb	r3, [r3, #10]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	729a      	strb	r2, [r3, #10]
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <Message_Handler>:

//Function to perform any unique message handling
void Message_Handler(struct rfDataStorage* rfData)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	//Check if the device is the destination of the message
	if (rfData->toID[rfData->messageNum] != rfData->myDevice.device_id)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	3344      	adds	r3, #68	; 0x44
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	88da      	ldrh	r2, [r3, #6]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	889b      	ldrh	r3, [r3, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d002      	beq.n	8001f54 <Message_Handler+0x26>
	{
		//perform message forwarding
			Message_Forwarder(rfData);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f804 	bl	8001f5c <Message_Forwarder>
	}

}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <Message_Forwarder>:

void Message_Forwarder(struct rfDataStorage* rfData)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	//printf("\r\nForwarding message, fwds: %d", rfData->num_fwds);
	//Check if message should be forwarded
	if( (rfData->num_fwds == 0) && (rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] < rfData->activeRxMessage[rfData->messageNum][MSG_MAX_HOPS_POS]) )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7adb      	ldrb	r3, [r3, #11]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 8099 	bne.w	80020a0 <Message_Forwarder+0x144>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001f74:	4619      	mov	r1, r3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	33b4      	adds	r3, #180	; 0xb4
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4603      	mov	r3, r0
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4403      	add	r3, r0
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	33b5      	adds	r3, #181	; 0xb5
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d27e      	bcs.n	80020a0 <Message_Forwarder+0x144>
	{
		//increment number of hops
		rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	33b4      	adds	r3, #180	; 0xb4
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	b2d8      	uxtb	r0, r3
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	33b4      	adds	r3, #180	; 0xb4
 8001fcc:	4602      	mov	r2, r0
 8001fce:	701a      	strb	r2, [r3, #0]
		//Send tehe forwarded data
		Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	33a8      	adds	r3, #168	; 0xa8
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	1d98      	adds	r0, r3, #6
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001fee:	4619      	mov	r1, r3
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	33b6      	adds	r3, #182	; 0xb6
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	3309      	adds	r3, #9
 8002002:	b2db      	uxtb	r3, r3
 8002004:	4619      	mov	r1, r3
 8002006:	f000 f971 	bl	80022ec <Send>
		//Add data to fifo FWD
		rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->fromID[rfData->messageNum];
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002010:	4618      	mov	r0, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7adb      	ldrb	r3, [r3, #11]
 8002016:	4619      	mov	r1, r3
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	f100 0340 	add.w	r3, r0, #64	; 0x40
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	8898      	ldrh	r0, [r3, #4]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	440b      	add	r3, r1
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	330c      	adds	r3, #12
 8002032:	4602      	mov	r2, r0
 8002034:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->toID[rfData->messageNum];
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800203c:	4618      	mov	r0, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7adb      	ldrb	r3, [r3, #11]
 8002042:	4619      	mov	r1, r3
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	f100 0344 	add.w	r3, r0, #68	; 0x44
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	88d8      	ldrh	r0, [r3, #6]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	440b      	add	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	330e      	adds	r3, #14
 800205e:	4602      	mov	r2, r0
 8002060:	801a      	strh	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002068:	4618      	mov	r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7adb      	ldrb	r3, [r3, #11]
 800206e:	4619      	mov	r1, r3
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4603      	mov	r3, r0
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4403      	add	r3, r0
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	33af      	adds	r3, #175	; 0xaf
 800207e:	7818      	ldrb	r0, [r3, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	440b      	add	r3, r1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	3310      	adds	r3, #16
 800208e:	4602      	mov	r2, r0
 8002090:	701a      	strb	r2, [r3, #0]
		//Increment numbe rof FWDs
		rfData->num_fwds++;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7adb      	ldrb	r3, [r3, #11]
 8002096:	3301      	adds	r3, #1
 8002098:	b2da      	uxtb	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	72da      	strb	r2, [r3, #11]
			//Send tehe forwarded data
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
		}

	}
}
 800209e:	e0e1      	b.n	8002264 <Message_Forwarder+0x308>
	else if ( rfData->activeRxMessage[MSG_NUM_HOPS_POS] < rfData->activeRxMessage[rfData->messageNum][MSG_MAX_HOPS_POS] )
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f503 7293 	add.w	r2, r3, #294	; 0x126
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80020ac:	4618      	mov	r0, r3
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4603      	mov	r3, r0
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4403      	add	r3, r0
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	33b5      	adds	r3, #181	; 0xb5
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	f080 80d0 	bcs.w	8002264 <Message_Forwarder+0x308>
		int dupe = false;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rfData->num_fwds; i++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	e042      	b.n	8002154 <Message_Forwarder+0x1f8>
			if ( rfData->fromID[rfData->messageNum] == rfData->FWDFIFO[i].from_id )
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	3340      	adds	r3, #64	; 0x40
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	8899      	ldrh	r1, [r3, #4]
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4403      	add	r3, r0
 80020ec:	330c      	adds	r3, #12
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	4299      	cmp	r1, r3
 80020f2:	d12c      	bne.n	800214e <Message_Forwarder+0x1f2>
				if ( rfData->toID[rfData->messageNum] == rfData->FWDFIFO[i].to_id)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	3344      	adds	r3, #68	; 0x44
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	88d9      	ldrh	r1, [r3, #6]
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4403      	add	r3, r0
 8002112:	330e      	adds	r3, #14
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	4299      	cmp	r1, r3
 8002118:	d119      	bne.n	800214e <Message_Forwarder+0x1f2>
					if ( rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->FWDFIFO[i].type )
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002120:	4619      	mov	r1, r3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	33af      	adds	r3, #175	; 0xaf
 8002130:	7819      	ldrb	r1, [r3, #0]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4403      	add	r3, r0
 8002140:	3310      	adds	r3, #16
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4299      	cmp	r1, r3
 8002146:	d102      	bne.n	800214e <Message_Forwarder+0x1f2>
						dupe = true;
 8002148:	2301      	movs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
						break;
 800214c:	e008      	b.n	8002160 <Message_Forwarder+0x204>
		for (int i = 0; i < rfData->num_fwds; i++)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3301      	adds	r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7adb      	ldrb	r3, [r3, #11]
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4293      	cmp	r3, r2
 800215e:	dbb6      	blt.n	80020ce <Message_Forwarder+0x172>
		if (dupe == false)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d17e      	bne.n	8002264 <Message_Forwarder+0x308>
			if ( rfData->num_fwds == MAX_NUM_FWDS ){rfData->num_fwds = 0;}
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7adb      	ldrb	r3, [r3, #11]
 800216a:	2b14      	cmp	r3, #20
 800216c:	d102      	bne.n	8002174 <Message_Forwarder+0x218>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	72da      	strb	r2, [r3, #11]
			rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->fromID[rfData->messageNum];
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800217a:	4618      	mov	r0, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7adb      	ldrb	r3, [r3, #11]
 8002180:	4619      	mov	r1, r3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	8898      	ldrh	r0, [r3, #4]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	440b      	add	r3, r1
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	330c      	adds	r3, #12
 800219c:	4602      	mov	r2, r0
 800219e:	801a      	strh	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->toID[rfData->messageNum];
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80021a6:	4618      	mov	r0, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7adb      	ldrb	r3, [r3, #11]
 80021ac:	4619      	mov	r1, r3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	f100 0344 	add.w	r3, r0, #68	; 0x44
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	88d8      	ldrh	r0, [r3, #6]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	440b      	add	r3, r1
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	330e      	adds	r3, #14
 80021c8:	4602      	mov	r2, r0
 80021ca:	801a      	strh	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80021d2:	4618      	mov	r0, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7adb      	ldrb	r3, [r3, #11]
 80021d8:	4619      	mov	r1, r3
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4603      	mov	r3, r0
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4403      	add	r3, r0
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	33af      	adds	r3, #175	; 0xaf
 80021e8:	7818      	ldrb	r0, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	440b      	add	r3, r1
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	3310      	adds	r3, #16
 80021f8:	4602      	mov	r2, r0
 80021fa:	701a      	strb	r2, [r3, #0]
			rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002202:	461a      	mov	r2, r3
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	33b4      	adds	r3, #180	; 0xb4
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	b2d8      	uxtb	r0, r3
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	33b4      	adds	r3, #180	; 0xb4
 8002226:	4602      	mov	r2, r0
 8002228:	701a      	strb	r2, [r3, #0]
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002230:	461a      	mov	r2, r3
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	33a8      	adds	r3, #168	; 0xa8
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	1d98      	adds	r0, r3, #6
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002248:	4619      	mov	r1, r3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	33b6      	adds	r3, #182	; 0xb6
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	3309      	adds	r3, #9
 800225c:	b2db      	uxtb	r3, r3
 800225e:	4619      	mov	r1, r3
 8002260:	f000 f844 	bl	80022ec <Send>
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <Im_Here>:

//Function to send "I am here" message
void Im_Here(struct rfDataStorage* rfData)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	22fe      	movs	r2, #254	; 0xfe
 8002278:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_IM_HERE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2243      	movs	r2, #67	; 0x43
 8002280:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	rfData->activeTxMessage[MSG_FROM_ID_POS1] = rfData->myDevice.device_id&0x0F;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	889b      	ldrh	r3, [r3, #4]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	b2da      	uxtb	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	rfData->activeTxMessage[MSG_FROM_ID_POS2] = rfData->myDevice.device_id&0xF0;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	889b      	ldrh	r3, [r3, #4]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f023 030f 	bic.w	r3, r3, #15
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	rfData->activeTxMessage[MSG_MAX_HOPS_POS] = 10;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	220a      	movs	r2, #10
 80022b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rfData->activeTxMessageSize = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f103 0299 	add.w	r2, r3, #153	; 0x99
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80022d8:	3309      	adds	r3, #9
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f000 f804 	bl	80022ec <Send>

}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <Send>:

//Function to send data through RF
void Send(uint8_t message[], uint8_t size)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
	//printf("Send comamnd");
	uint8_t fullMessage[MSG_SIZE_TRANSFER];

	for(int i = 0;i<size;i++){
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
 80022fc:	e00c      	b.n	8002318 <Send+0x2c>
		fullMessage[i] = message[i];
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	7819      	ldrb	r1, [r3, #0]
 8002306:	f107 020c 	add.w	r2, r7, #12
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	4413      	add	r3, r2
 800230e:	460a      	mov	r2, r1
 8002310:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<size;i++){
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	3301      	adds	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	429a      	cmp	r2, r3
 800231e:	dbee      	blt.n	80022fe <Send+0x12>
	}
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	e008      	b.n	8002338 <Send+0x4c>
		fullMessage[i] = 0;
 8002326:	f107 020c 	add.w	r2, r7, #12
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	4413      	add	r3, r2
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	3301      	adds	r3, #1
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b13      	cmp	r3, #19
 800233c:	ddf3      	ble.n	8002326 <Send+0x3a>
	/*for(int i = 0 ;i<MSG_SIZE_TRANSFER;i++){

		printf("\r\nsending rf: %x", fullMessage[i]);

	}*/
	random_delay();
 800233e:	f000 f811 	bl	8002364 <random_delay>
	HAL_UART_Transmit_IT(&hlpuart1, fullMessage, MSG_SIZE_TRANSFER);
 8002342:	f107 030c 	add.w	r3, r7, #12
 8002346:	2214      	movs	r2, #20
 8002348:	4619      	mov	r1, r3
 800234a:	4805      	ldr	r0, [pc, #20]	; (8002360 <Send+0x74>)
 800234c:	f003 f9f6 	bl	800573c <HAL_UART_Transmit_IT>
	HAL_Delay(20);
 8002350:	2014      	movs	r0, #20
 8002352:	f000 fe4b 	bl	8002fec <HAL_Delay>

}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	; 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200000a4 	.word	0x200000a4

08002364 <random_delay>:

//Function to add random delay
void random_delay()	//delays between 0 - 9999 (ms)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
	uint32_t randomNumber;
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 800236a:	463b      	mov	r3, r7
 800236c:	4619      	mov	r1, r3
 800236e:	480a      	ldr	r0, [pc, #40]	; (8002398 <random_delay+0x34>)
 8002370:	f002 fa59 	bl	8004826 <HAL_RNG_GenerateRandomNumber>
	uint32_t delay = randomNumber % 1000;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <random_delay+0x38>)
 8002378:	fba2 1203 	umull	r1, r2, r2, r3
 800237c:	0992      	lsrs	r2, r2, #6
 800237e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002382:	fb01 f202 	mul.w	r2, r1, r2
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	607b      	str	r3, [r7, #4]
	HAL_Delay(delay);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fe2e 	bl	8002fec <HAL_Delay>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200001ac 	.word	0x200001ac
 800239c:	10624dd3 	.word	0x10624dd3

080023a0 <create_queue>:

//Function to create a new queue for operation
void create_queue(struct Queue* queue) {
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  queue->head = 0;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
  queue->tail = 0;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
  queue->size = 0;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <is_full>:
void destroy_queue(struct Queue* queue) {
  free(queue);
}

//Function check if queue is full
bool is_full(struct Queue* queue) {
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return (queue->size == MAX_SIZE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80023da:	2b96      	cmp	r3, #150	; 0x96
 80023dc:	bf0c      	ite	eq
 80023de:	2301      	moveq	r3, #1
 80023e0:	2300      	movne	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <is_empty>:

//Function to check if queue is empty
bool is_empty(struct Queue* queue) {
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return (queue->size == 0);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <enqueue>:

//Function to add a value to queue
void enqueue(struct Queue* queue, uint8_t value) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
  if (is_full(queue)) {
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffd3 	bl	80023cc <is_full>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d11f      	bne.n	800246c <enqueue+0x58>
    //printf("Queue is full\n");
    return;
  }
  queue->data[queue->tail] = value;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8002432:	78f9      	ldrb	r1, [r7, #3]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  queue->tail = (queue->tail + 1) % MAX_SIZE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <enqueue+0x60>)
 8002444:	fb83 1302 	smull	r1, r3, r3, r2
 8002448:	1119      	asrs	r1, r3, #4
 800244a:	17d3      	asrs	r3, r2, #31
 800244c:	1acb      	subs	r3, r1, r3
 800244e:	2196      	movs	r1, #150	; 0x96
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
  queue->size++;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800246a:	e000      	b.n	800246e <enqueue+0x5a>
    return;
 800246c:	bf00      	nop
}
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	1b4e81b5 	.word	0x1b4e81b5

08002478 <dequeue>:

//Function to dequeue latest value from the queue
int dequeue(struct Queue* queue) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if (is_empty(queue)) {
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ffb5 	bl	80023f0 <is_empty>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <dequeue+0x1a>
    //printf("Queue is empty\n");
    return -1;
 800248c:	f04f 33ff 	mov.w	r3, #4294967295
 8002490:	e01f      	b.n	80024d2 <dequeue+0x5a>
  }
  int value = queue->data[queue->head];
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	60fb      	str	r3, [r7, #12]
  queue->head = (queue->head + 1) % MAX_SIZE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <dequeue+0x64>)
 80024aa:	fb83 1302 	smull	r1, r3, r3, r2
 80024ae:	1119      	asrs	r1, r3, #4
 80024b0:	17d3      	asrs	r3, r2, #31
 80024b2:	1acb      	subs	r3, r1, r3
 80024b4:	2196      	movs	r1, #150	; 0x96
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
  queue->size--;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
  return value;
 80024d0:	68fb      	ldr	r3, [r7, #12]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	1b4e81b5 	.word	0x1b4e81b5

080024e0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ec:	f001 f8bc 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f000 fd7b 	bl	8002fec <HAL_Delay>
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}

080024fa <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80024fe:	2201      	movs	r2, #1
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002506:	f001 f8af 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800250a:	2001      	movs	r0, #1
 800250c:	f000 fd6e 	bl	8002fec <HAL_Delay>
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}

08002514 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800251e:	bf00      	nop
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <SPI_TxByte+0x30>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d1f8      	bne.n	8002520 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800252e:	1df9      	adds	r1, r7, #7
 8002530:	2364      	movs	r3, #100	; 0x64
 8002532:	2201      	movs	r2, #1
 8002534:	4803      	ldr	r0, [pc, #12]	; (8002544 <SPI_TxByte+0x30>)
 8002536:	f002 fa68 	bl	8004a0a <HAL_SPI_Transmit>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200001bc 	.word	0x200001bc

08002548 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002554:	bf00      	nop
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <SPI_TxBuffer+0x30>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b02      	cmp	r3, #2
 8002562:	d1f8      	bne.n	8002556 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002564:	887a      	ldrh	r2, [r7, #2]
 8002566:	2364      	movs	r3, #100	; 0x64
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4803      	ldr	r0, [pc, #12]	; (8002578 <SPI_TxBuffer+0x30>)
 800256c:	f002 fa4d 	bl	8004a0a <HAL_SPI_Transmit>
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200001bc 	.word	0x200001bc

0800257c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8002582:	23ff      	movs	r3, #255	; 0xff
 8002584:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002586:	bf00      	nop
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <SPI_RxByte+0x34>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b02      	cmp	r3, #2
 8002594:	d1f8      	bne.n	8002588 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002596:	1dba      	adds	r2, r7, #6
 8002598:	1df9      	adds	r1, r7, #7
 800259a:	2364      	movs	r3, #100	; 0x64
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2301      	movs	r3, #1
 80025a0:	4803      	ldr	r0, [pc, #12]	; (80025b0 <SPI_RxByte+0x34>)
 80025a2:	f002 fba0 	bl	8004ce6 <HAL_SPI_TransmitReceive>

	return data;
 80025a6:	79bb      	ldrb	r3, [r7, #6]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200001bc 	.word	0x200001bc

080025b4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80025bc:	f7ff ffde 	bl	800257c <SPI_RxByte>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	701a      	strb	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <SD_ReadyWait+0x30>)
 80025d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025dc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80025de:	f7ff ffcd 	bl	800257c <SPI_RxByte>
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	2bff      	cmp	r3, #255	; 0xff
 80025ea:	d004      	beq.n	80025f6 <SD_ReadyWait+0x26>
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <SD_ReadyWait+0x30>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f3      	bne.n	80025de <SD_ReadyWait+0xe>

	return res;
 80025f6:	79fb      	ldrb	r3, [r7, #7]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000049e 	.word	0x2000049e

08002604 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800260a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800260e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002610:	f7ff ff73 	bl	80024fa <DESELECT>
	for(int i = 0; i < 10; i++)
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	e005      	b.n	8002626 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800261a:	20ff      	movs	r0, #255	; 0xff
 800261c:	f7ff ff7a 	bl	8002514 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3301      	adds	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b09      	cmp	r3, #9
 800262a:	ddf6      	ble.n	800261a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800262c:	f7ff ff58 	bl	80024e0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002630:	2340      	movs	r3, #64	; 0x40
 8002632:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8002644:	2395      	movs	r3, #149	; 0x95
 8002646:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8002648:	463b      	mov	r3, r7
 800264a:	2106      	movs	r1, #6
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff7b 	bl	8002548 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8002652:	e002      	b.n	800265a <SD_PowerOn+0x56>
	{
		cnt--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3b01      	subs	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800265a:	f7ff ff8f 	bl	800257c <SPI_RxByte>
 800265e:	4603      	mov	r3, r0
 8002660:	2b01      	cmp	r3, #1
 8002662:	d002      	beq.n	800266a <SD_PowerOn+0x66>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f4      	bne.n	8002654 <SD_PowerOn+0x50>
	}

	DESELECT();
 800266a:	f7ff ff46 	bl	80024fa <DESELECT>
	SPI_TxByte(0XFF);
 800266e:	20ff      	movs	r0, #255	; 0xff
 8002670:	f7ff ff50 	bl	8002514 <SPI_TxByte>

	PowerFlag = 1;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <SD_PowerOn+0x80>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200004a5 	.word	0x200004a5

08002688 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <SD_PowerOff+0x14>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	200004a5 	.word	0x200004a5

080026a0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <SD_CheckPower+0x14>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	200004a5 	.word	0x200004a5

080026b8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <SD_RxDataBlock+0x5c>)
 80026c4:	22c8      	movs	r2, #200	; 0xc8
 80026c6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80026c8:	f7ff ff58 	bl	800257c <SPI_RxByte>
 80026cc:	4603      	mov	r3, r0
 80026ce:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	d104      	bne.n	80026e0 <SD_RxDataBlock+0x28>
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <SD_RxDataBlock+0x5c>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f3      	bne.n	80026c8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2bfe      	cmp	r3, #254	; 0xfe
 80026e4:	d001      	beq.n	80026ea <SD_RxDataBlock+0x32>
 80026e6:	2300      	movs	r3, #0
 80026e8:	e00f      	b.n	800270a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff5f 	bl	80025b4 <SPI_RxBytePtr>
	} while(len--);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	1e5a      	subs	r2, r3, #1
 80026fa:	603a      	str	r2, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f4      	bne.n	80026ea <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002700:	f7ff ff3c 	bl	800257c <SPI_RxByte>
	SPI_RxByte();
 8002704:	f7ff ff3a 	bl	800257c <SPI_RxByte>

	return TRUE;
 8002708:	2301      	movs	r3, #1
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000049d 	.word	0x2000049d

08002718 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002728:	f7ff ff52 	bl	80025d0 <SD_ReadyWait>
 800272c:	4603      	mov	r3, r0
 800272e:	2bff      	cmp	r3, #255	; 0xff
 8002730:	d001      	beq.n	8002736 <SD_TxDataBlock+0x1e>
 8002732:	2300      	movs	r3, #0
 8002734:	e02f      	b.n	8002796 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff feeb 	bl	8002514 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	2bfd      	cmp	r3, #253	; 0xfd
 8002742:	d020      	beq.n	8002786 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fefd 	bl	8002548 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800274e:	f7ff ff15 	bl	800257c <SPI_RxByte>
		SPI_RxByte();
 8002752:	f7ff ff13 	bl	800257c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002756:	e00b      	b.n	8002770 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002758:	f7ff ff10 	bl	800257c <SPI_RxByte>
 800275c:	4603      	mov	r3, r0
 800275e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	2b05      	cmp	r3, #5
 8002768:	d006      	beq.n	8002778 <SD_TxDataBlock+0x60>
			i++;
 800276a:	7bbb      	ldrb	r3, [r7, #14]
 800276c:	3301      	adds	r3, #1
 800276e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002770:	7bbb      	ldrb	r3, [r7, #14]
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d9f0      	bls.n	8002758 <SD_TxDataBlock+0x40>
 8002776:	e000      	b.n	800277a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002778:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800277a:	bf00      	nop
 800277c:	f7ff fefe 	bl	800257c <SPI_RxByte>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0fa      	beq.n	800277c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2b05      	cmp	r3, #5
 800278e:	d101      	bne.n	8002794 <SD_TxDataBlock+0x7c>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <SD_TxDataBlock+0x7e>

	return FALSE;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	6039      	str	r1, [r7, #0]
 80027a8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80027aa:	f7ff ff11 	bl	80025d0 <SD_ReadyWait>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2bff      	cmp	r3, #255	; 0xff
 80027b2:	d001      	beq.n	80027b8 <SD_SendCmd+0x1a>
 80027b4:	23ff      	movs	r3, #255	; 0xff
 80027b6:	e042      	b.n	800283e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff feaa 	bl	8002514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	0e1b      	lsrs	r3, r3, #24
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fea4 	bl	8002514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	0c1b      	lsrs	r3, r3, #16
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fe9e 	bl	8002514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fe98 	bl	8002514 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fe93 	bl	8002514 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d102      	bne.n	80027fa <SD_SendCmd+0x5c>
 80027f4:	2395      	movs	r3, #149	; 0x95
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e007      	b.n	800280a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	2b48      	cmp	r3, #72	; 0x48
 80027fe:	d102      	bne.n	8002806 <SD_SendCmd+0x68>
 8002800:	2387      	movs	r3, #135	; 0x87
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	e001      	b.n	800280a <SD_SendCmd+0x6c>
	else crc = 1;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fe81 	bl	8002514 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	2b4c      	cmp	r3, #76	; 0x4c
 8002816:	d101      	bne.n	800281c <SD_SendCmd+0x7e>
 8002818:	f7ff feb0 	bl	800257c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800281c:	230a      	movs	r3, #10
 800281e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002820:	f7ff feac 	bl	800257c <SPI_RxByte>
 8002824:	4603      	mov	r3, r0
 8002826:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002828:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800282c:	2b00      	cmp	r3, #0
 800282e:	da05      	bge.n	800283c <SD_SendCmd+0x9e>
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	3b01      	subs	r3, #1
 8002834:	73bb      	strb	r3, [r7, #14]
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f1      	bne.n	8002820 <SD_SendCmd+0x82>

	return res;
 800283c:	7b7b      	ldrb	r3, [r7, #13]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];
	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <SD_disk_initialize+0x14>
 8002858:	2301      	movs	r3, #1
 800285a:	e0ec      	b.n	8002a36 <SD_disk_initialize+0x1ee>
	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800285c:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <SD_disk_initialize+0x1f8>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <SD_disk_initialize+0x2a>
 800286a:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <SD_disk_initialize+0x1f8>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	e0e1      	b.n	8002a36 <SD_disk_initialize+0x1ee>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002872:	2201      	movs	r2, #1
 8002874:	2140      	movs	r1, #64	; 0x40
 8002876:	4873      	ldr	r0, [pc, #460]	; (8002a44 <SD_disk_initialize+0x1fc>)
 8002878:	f000 fef6 	bl	8003668 <HAL_GPIO_WritePin>
	/* power on */
	SD_PowerOn();
 800287c:	f7ff fec2 	bl	8002604 <SD_PowerOn>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8002880:	2201      	movs	r2, #1
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	486f      	ldr	r0, [pc, #444]	; (8002a44 <SD_disk_initialize+0x1fc>)
 8002886:	f000 feef 	bl	8003668 <HAL_GPIO_WritePin>
	/* slave select */
	SELECT();
 800288a:	f7ff fe29 	bl	80024e0 <SELECT>
	/* check disk type */
	type = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002892:	2201      	movs	r2, #1
 8002894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002898:	486a      	ldr	r0, [pc, #424]	; (8002a44 <SD_disk_initialize+0x1fc>)
 800289a:	f000 fee5 	bl	8003668 <HAL_GPIO_WritePin>
	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800289e:	2100      	movs	r1, #0
 80028a0:	2040      	movs	r0, #64	; 0x40
 80028a2:	f7ff ff7c 	bl	800279e <SD_SendCmd>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	f040 80ac 	bne.w	8002a06 <SD_disk_initialize+0x1be>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80028ae:	2201      	movs	r2, #1
 80028b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028b4:	4863      	ldr	r0, [pc, #396]	; (8002a44 <SD_disk_initialize+0x1fc>)
 80028b6:	f000 fed7 	bl	8003668 <HAL_GPIO_WritePin>
		/* timeout 1 sec */
		Timer1 = 1000;
 80028ba:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <SD_disk_initialize+0x200>)
 80028bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028c0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80028c2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80028c6:	2048      	movs	r0, #72	; 0x48
 80028c8:	f7ff ff69 	bl	800279e <SD_SendCmd>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d158      	bne.n	8002984 <SD_disk_initialize+0x13c>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e00c      	b.n	80028f2 <SD_disk_initialize+0xaa>
			{
				ocr[n] = SPI_RxByte();
 80028d8:	7bfc      	ldrb	r4, [r7, #15]
 80028da:	f7ff fe4f 	bl	800257c <SPI_RxByte>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	f104 0310 	add.w	r3, r4, #16
 80028e6:	443b      	add	r3, r7
 80028e8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	3301      	adds	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d9ef      	bls.n	80028d8 <SD_disk_initialize+0x90>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80028f8:	7abb      	ldrb	r3, [r7, #10]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	f040 8083 	bne.w	8002a06 <SD_disk_initialize+0x1be>
 8002900:	7afb      	ldrb	r3, [r7, #11]
 8002902:	2baa      	cmp	r3, #170	; 0xaa
 8002904:	d17f      	bne.n	8002a06 <SD_disk_initialize+0x1be>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002906:	2100      	movs	r1, #0
 8002908:	2077      	movs	r0, #119	; 0x77
 800290a:	f7ff ff48 	bl	800279e <SD_SendCmd>
 800290e:	4603      	mov	r3, r0
 8002910:	2b01      	cmp	r3, #1
 8002912:	d807      	bhi.n	8002924 <SD_disk_initialize+0xdc>
 8002914:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002918:	2069      	movs	r0, #105	; 0x69
 800291a:	f7ff ff40 	bl	800279e <SD_SendCmd>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <SD_disk_initialize+0xe8>
				} while (Timer1);
 8002924:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <SD_disk_initialize+0x200>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1eb      	bne.n	8002906 <SD_disk_initialize+0xbe>
 800292e:	e000      	b.n	8002932 <SD_disk_initialize+0xea>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002930:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002932:	4b45      	ldr	r3, [pc, #276]	; (8002a48 <SD_disk_initialize+0x200>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d064      	beq.n	8002a06 <SD_disk_initialize+0x1be>
 800293c:	2100      	movs	r1, #0
 800293e:	207a      	movs	r0, #122	; 0x7a
 8002940:	f7ff ff2d 	bl	800279e <SD_SendCmd>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d15d      	bne.n	8002a06 <SD_disk_initialize+0x1be>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800294a:	2300      	movs	r3, #0
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e00c      	b.n	800296a <SD_disk_initialize+0x122>
					{
						ocr[n] = SPI_RxByte();
 8002950:	7bfc      	ldrb	r4, [r7, #15]
 8002952:	f7ff fe13 	bl	800257c <SPI_RxByte>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	f104 0310 	add.w	r3, r4, #16
 800295e:	443b      	add	r3, r7
 8002960:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	3301      	adds	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d9ef      	bls.n	8002950 <SD_disk_initialize+0x108>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002970:	7a3b      	ldrb	r3, [r7, #8]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <SD_disk_initialize+0x136>
 800297a:	230c      	movs	r3, #12
 800297c:	e000      	b.n	8002980 <SD_disk_initialize+0x138>
 800297e:	2304      	movs	r3, #4
 8002980:	73bb      	strb	r3, [r7, #14]
 8002982:	e040      	b.n	8002a06 <SD_disk_initialize+0x1be>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002984:	2100      	movs	r1, #0
 8002986:	2077      	movs	r0, #119	; 0x77
 8002988:	f7ff ff09 	bl	800279e <SD_SendCmd>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d808      	bhi.n	80029a4 <SD_disk_initialize+0x15c>
 8002992:	2100      	movs	r1, #0
 8002994:	2069      	movs	r0, #105	; 0x69
 8002996:	f7ff ff02 	bl	800279e <SD_SendCmd>
 800299a:	4603      	mov	r3, r0
 800299c:	2b01      	cmp	r3, #1
 800299e:	d801      	bhi.n	80029a4 <SD_disk_initialize+0x15c>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e000      	b.n	80029a6 <SD_disk_initialize+0x15e>
 80029a4:	2301      	movs	r3, #1
 80029a6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80029a8:	7bbb      	ldrb	r3, [r7, #14]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d10e      	bne.n	80029cc <SD_disk_initialize+0x184>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80029ae:	2100      	movs	r1, #0
 80029b0:	2077      	movs	r0, #119	; 0x77
 80029b2:	f7ff fef4 	bl	800279e <SD_SendCmd>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d80e      	bhi.n	80029da <SD_disk_initialize+0x192>
 80029bc:	2100      	movs	r1, #0
 80029be:	2069      	movs	r0, #105	; 0x69
 80029c0:	f7ff feed 	bl	800279e <SD_SendCmd>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d107      	bne.n	80029da <SD_disk_initialize+0x192>
 80029ca:	e00d      	b.n	80029e8 <SD_disk_initialize+0x1a0>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80029cc:	2100      	movs	r1, #0
 80029ce:	2041      	movs	r0, #65	; 0x41
 80029d0:	f7ff fee5 	bl	800279e <SD_SendCmd>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <SD_disk_initialize+0x19e>
				}

			} while (Timer1);
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <SD_disk_initialize+0x200>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e1      	bne.n	80029a8 <SD_disk_initialize+0x160>
 80029e4:	e000      	b.n	80029e8 <SD_disk_initialize+0x1a0>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80029e6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80029e8:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <SD_disk_initialize+0x200>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <SD_disk_initialize+0x1ba>
 80029f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f6:	2050      	movs	r0, #80	; 0x50
 80029f8:	f7ff fed1 	bl	800279e <SD_SendCmd>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <SD_disk_initialize+0x1be>
 8002a02:	2300      	movs	r3, #0
 8002a04:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002a06:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <SD_disk_initialize+0x204>)
 8002a08:	7bbb      	ldrb	r3, [r7, #14]
 8002a0a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002a0c:	f7ff fd75 	bl	80024fa <DESELECT>
	SPI_RxByte();
 8002a10:	f7ff fdb4 	bl	800257c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <SD_disk_initialize+0x1e4>
	{
		Stat &= ~STA_NOINIT;
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <SD_disk_initialize+0x1f8>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <SD_disk_initialize+0x1f8>)
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e001      	b.n	8002a30 <SD_disk_initialize+0x1e8>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002a2c:	f7ff fe2c 	bl	8002688 <SD_PowerOff>
	}

	return Stat;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <SD_disk_initialize+0x1f8>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	b2db      	uxtb	r3, r3
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd90      	pop	{r4, r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000004 	.word	0x20000004
 8002a44:	48000800 	.word	0x48000800
 8002a48:	2000049d 	.word	0x2000049d
 8002a4c:	200004a4 	.word	0x200004a4

08002a50 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <SD_disk_status+0x14>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e002      	b.n	8002a6a <SD_disk_status+0x1a>
	return Stat;
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <SD_disk_status+0x28>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000004 	.word	0x20000004

08002a7c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	4603      	mov	r3, r0
 8002a8a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <SD_disk_read+0x1c>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <SD_disk_read+0x20>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	e051      	b.n	8002b40 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002a9c:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <SD_disk_read+0xcc>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <SD_disk_read+0x32>
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e048      	b.n	8002b40 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002aae:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <SD_disk_read+0xd0>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <SD_disk_read+0x44>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	025b      	lsls	r3, r3, #9
 8002abe:	607b      	str	r3, [r7, #4]

	SELECT();
 8002ac0:	f7ff fd0e 	bl	80024e0 <SELECT>

	if (count == 1)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d111      	bne.n	8002aee <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	2051      	movs	r0, #81	; 0x51
 8002ace:	f7ff fe66 	bl	800279e <SD_SendCmd>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d129      	bne.n	8002b2c <SD_disk_read+0xb0>
 8002ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002adc:	68b8      	ldr	r0, [r7, #8]
 8002ade:	f7ff fdeb 	bl	80026b8 <SD_RxDataBlock>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d021      	beq.n	8002b2c <SD_disk_read+0xb0>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	e01e      	b.n	8002b2c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	2052      	movs	r0, #82	; 0x52
 8002af2:	f7ff fe54 	bl	800279e <SD_SendCmd>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d117      	bne.n	8002b2c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b00:	68b8      	ldr	r0, [r7, #8]
 8002b02:	f7ff fdd9 	bl	80026b8 <SD_RxDataBlock>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <SD_disk_read+0xa6>
				buff += 512;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b12:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	603b      	str	r3, [r7, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ed      	bne.n	8002afc <SD_disk_read+0x80>
 8002b20:	e000      	b.n	8002b24 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002b22:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002b24:	2100      	movs	r1, #0
 8002b26:	204c      	movs	r0, #76	; 0x4c
 8002b28:	f7ff fe39 	bl	800279e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002b2c:	f7ff fce5 	bl	80024fa <DESELECT>
	SPI_RxByte();
 8002b30:	f7ff fd24 	bl	800257c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	200004a4 	.word	0x200004a4

08002b50 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d102      	bne.n	8002b6c <SD_disk_write+0x1c>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <SD_disk_write+0x20>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	e06b      	b.n	8002c48 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <SD_disk_write+0x100>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <SD_disk_write+0x32>
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e062      	b.n	8002c48 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002b82:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <SD_disk_write+0x100>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <SD_disk_write+0x44>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e059      	b.n	8002c48 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002b94:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <SD_disk_write+0x104>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <SD_disk_write+0x56>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	025b      	lsls	r3, r3, #9
 8002ba4:	607b      	str	r3, [r7, #4]

	SELECT();
 8002ba6:	f7ff fc9b 	bl	80024e0 <SELECT>

	if (count == 1)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d110      	bne.n	8002bd2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	2058      	movs	r0, #88	; 0x58
 8002bb4:	f7ff fdf3 	bl	800279e <SD_SendCmd>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d13a      	bne.n	8002c34 <SD_disk_write+0xe4>
 8002bbe:	21fe      	movs	r1, #254	; 0xfe
 8002bc0:	68b8      	ldr	r0, [r7, #8]
 8002bc2:	f7ff fda9 	bl	8002718 <SD_TxDataBlock>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d033      	beq.n	8002c34 <SD_disk_write+0xe4>
			count = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	e030      	b.n	8002c34 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <SD_disk_write+0x104>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002bde:	2100      	movs	r1, #0
 8002be0:	2077      	movs	r0, #119	; 0x77
 8002be2:	f7ff fddc 	bl	800279e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002be6:	6839      	ldr	r1, [r7, #0]
 8002be8:	2057      	movs	r0, #87	; 0x57
 8002bea:	f7ff fdd8 	bl	800279e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	2059      	movs	r0, #89	; 0x59
 8002bf2:	f7ff fdd4 	bl	800279e <SD_SendCmd>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d11b      	bne.n	8002c34 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002bfc:	21fc      	movs	r1, #252	; 0xfc
 8002bfe:	68b8      	ldr	r0, [r7, #8]
 8002c00:	f7ff fd8a 	bl	8002718 <SD_TxDataBlock>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <SD_disk_write+0xd0>
				buff += 512;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c10:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ee      	bne.n	8002bfc <SD_disk_write+0xac>
 8002c1e:	e000      	b.n	8002c22 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002c20:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002c22:	21fd      	movs	r1, #253	; 0xfd
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7ff fd77 	bl	8002718 <SD_TxDataBlock>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <SD_disk_write+0xe4>
			{
				count = 1;
 8002c30:	2301      	movs	r3, #1
 8002c32:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002c34:	f7ff fc61 	bl	80024fa <DESELECT>
	SPI_RxByte();
 8002c38:	f7ff fca0 	bl	800257c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000004 	.word	0x20000004
 8002c54:	200004a4 	.word	0x200004a4

08002c58 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	603a      	str	r2, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
 8002c64:	460b      	mov	r3, r1
 8002c66:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <SD_disk_ioctl+0x1e>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e115      	b.n	8002ea2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002c7c:	79bb      	ldrb	r3, [r7, #6]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d124      	bne.n	8002ccc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d012      	beq.n	8002cb0 <SD_disk_ioctl+0x58>
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	dc1a      	bgt.n	8002cc4 <SD_disk_ioctl+0x6c>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <SD_disk_ioctl+0x40>
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d006      	beq.n	8002ca4 <SD_disk_ioctl+0x4c>
 8002c96:	e015      	b.n	8002cc4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002c98:	f7ff fcf6 	bl	8002688 <SD_PowerOff>
			res = RES_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002ca2:	e0fc      	b.n	8002e9e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8002ca4:	f7ff fcae 	bl	8002604 <SD_PowerOn>
			res = RES_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002cae:	e0f6      	b.n	8002e9e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	1c5c      	adds	r4, r3, #1
 8002cb4:	f7ff fcf4 	bl	80026a0 <SD_CheckPower>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002cc2:	e0ec      	b.n	8002e9e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002cca:	e0e8      	b.n	8002e9e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002ccc:	4b77      	ldr	r3, [pc, #476]	; (8002eac <SD_disk_ioctl+0x254>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <SD_disk_ioctl+0x86>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0e1      	b.n	8002ea2 <SD_disk_ioctl+0x24a>

		SELECT();
 8002cde:	f7ff fbff 	bl	80024e0 <SELECT>

		switch (ctrl)
 8002ce2:	79bb      	ldrb	r3, [r7, #6]
 8002ce4:	2b0d      	cmp	r3, #13
 8002ce6:	f200 80cb 	bhi.w	8002e80 <SD_disk_ioctl+0x228>
 8002cea:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <SD_disk_ioctl+0x98>)
 8002cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf0:	08002deb 	.word	0x08002deb
 8002cf4:	08002d29 	.word	0x08002d29
 8002cf8:	08002ddb 	.word	0x08002ddb
 8002cfc:	08002e81 	.word	0x08002e81
 8002d00:	08002e81 	.word	0x08002e81
 8002d04:	08002e81 	.word	0x08002e81
 8002d08:	08002e81 	.word	0x08002e81
 8002d0c:	08002e81 	.word	0x08002e81
 8002d10:	08002e81 	.word	0x08002e81
 8002d14:	08002e81 	.word	0x08002e81
 8002d18:	08002e81 	.word	0x08002e81
 8002d1c:	08002dfd 	.word	0x08002dfd
 8002d20:	08002e21 	.word	0x08002e21
 8002d24:	08002e45 	.word	0x08002e45
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2049      	movs	r0, #73	; 0x49
 8002d2c:	f7ff fd37 	bl	800279e <SD_SendCmd>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 80a8 	bne.w	8002e88 <SD_disk_ioctl+0x230>
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	2110      	movs	r1, #16
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fcba 	bl	80026b8 <SD_RxDataBlock>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 809e 	beq.w	8002e88 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002d4c:	7b3b      	ldrb	r3, [r7, #12]
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10e      	bne.n	8002d74 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002d56:	7d7b      	ldrb	r3, [r7, #21]
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	7d3b      	ldrb	r3, [r7, #20]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002d6a:	8bfb      	ldrh	r3, [r7, #30]
 8002d6c:	029a      	lsls	r2, r3, #10
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e02e      	b.n	8002dd2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002d74:	7c7b      	ldrb	r3, [r7, #17]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	7dbb      	ldrb	r3, [r7, #22]
 8002d7e:	09db      	lsrs	r3, r3, #7
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	7d7b      	ldrb	r3, [r7, #21]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 0306 	and.w	r3, r3, #6
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	3302      	adds	r3, #2
 8002d98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002d9c:	7d3b      	ldrb	r3, [r7, #20]
 8002d9e:	099b      	lsrs	r3, r3, #6
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	7cbb      	ldrb	r3, [r7, #18]
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002dc4:	8bfa      	ldrh	r2, [r7, #30]
 8002dc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002dca:	3b09      	subs	r3, #9
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002dd8:	e056      	b.n	8002e88 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002de8:	e055      	b.n	8002e96 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002dea:	f7ff fbf1 	bl	80025d0 <SD_ReadyWait>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2bff      	cmp	r3, #255	; 0xff
 8002df2:	d14b      	bne.n	8002e8c <SD_disk_ioctl+0x234>
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002dfa:	e047      	b.n	8002e8c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	2049      	movs	r0, #73	; 0x49
 8002e00:	f7ff fccd 	bl	800279e <SD_SendCmd>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d142      	bne.n	8002e90 <SD_disk_ioctl+0x238>
 8002e0a:	2110      	movs	r1, #16
 8002e0c:	6a38      	ldr	r0, [r7, #32]
 8002e0e:	f7ff fc53 	bl	80026b8 <SD_RxDataBlock>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d03b      	beq.n	8002e90 <SD_disk_ioctl+0x238>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002e1e:	e037      	b.n	8002e90 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002e20:	2100      	movs	r1, #0
 8002e22:	204a      	movs	r0, #74	; 0x4a
 8002e24:	f7ff fcbb 	bl	800279e <SD_SendCmd>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d132      	bne.n	8002e94 <SD_disk_ioctl+0x23c>
 8002e2e:	2110      	movs	r1, #16
 8002e30:	6a38      	ldr	r0, [r7, #32]
 8002e32:	f7ff fc41 	bl	80026b8 <SD_RxDataBlock>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02b      	beq.n	8002e94 <SD_disk_ioctl+0x23c>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002e42:	e027      	b.n	8002e94 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002e44:	2100      	movs	r1, #0
 8002e46:	207a      	movs	r0, #122	; 0x7a
 8002e48:	f7ff fca9 	bl	800279e <SD_SendCmd>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d116      	bne.n	8002e80 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e58:	e00b      	b.n	8002e72 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002e5a:	6a3c      	ldr	r4, [r7, #32]
 8002e5c:	1c63      	adds	r3, r4, #1
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	f7ff fb8c 	bl	800257c <SPI_RxByte>
 8002e64:	4603      	mov	r3, r0
 8002e66:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002e68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d9ef      	bls.n	8002e5a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002e80:	2304      	movs	r3, #4
 8002e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e86:	e006      	b.n	8002e96 <SD_disk_ioctl+0x23e>
			break;
 8002e88:	bf00      	nop
 8002e8a:	e004      	b.n	8002e96 <SD_disk_ioctl+0x23e>
			break;
 8002e8c:	bf00      	nop
 8002e8e:	e002      	b.n	8002e96 <SD_disk_ioctl+0x23e>
			break;
 8002e90:	bf00      	nop
 8002e92:	e000      	b.n	8002e96 <SD_disk_ioctl+0x23e>
			break;
 8002e94:	bf00      	nop
		}

		DESELECT();
 8002e96:	f7ff fb30 	bl	80024fa <DESELECT>
		SPI_RxByte();
 8002e9a:	f7ff fb6f 	bl	800257c <SPI_RxByte>
	}

	return res;
 8002e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	372c      	adds	r7, #44	; 0x2c
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd90      	pop	{r4, r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000004 	.word	0x20000004

08002eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eb4:	f7fe fc42 	bl	800173c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb8:	480c      	ldr	r0, [pc, #48]	; (8002eec <LoopForever+0x6>)
  ldr r1, =_edata
 8002eba:	490d      	ldr	r1, [pc, #52]	; (8002ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <LoopForever+0xe>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ed0:	4c0a      	ldr	r4, [pc, #40]	; (8002efc <LoopForever+0x16>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ede:	f004 fa01 	bl	80072e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ee2:	f7fd ff61 	bl	8000da8 <main>

08002ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ee6:	e7fe      	b.n	8002ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ee8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002ef4:	080087f8 	.word	0x080087f8
  ldr r2, =_sbss
 8002ef8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002efc:	200004d0 	.word	0x200004d0

08002f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC1_2_IRQHandler>

08002f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	f000 f961 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f12:	200f      	movs	r0, #15
 8002f14:	f000 f80e 	bl	8002f34 <HAL_InitTick>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	71fb      	strb	r3, [r7, #7]
 8002f22:	e001      	b.n	8002f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f24:	f7fe fa0e 	bl	8001344 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f28:	79fb      	ldrb	r3, [r7, #7]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f40:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <HAL_InitTick+0x6c>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d023      	beq.n	8002f90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_InitTick+0x70>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_InitTick+0x6c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	4619      	mov	r1, r3
 8002f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f96d 	bl	800323e <HAL_SYSTICK_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10f      	bne.n	8002f8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d809      	bhi.n	8002f84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f70:	2200      	movs	r2, #0
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	f000 f937 	bl	80031ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_InitTick+0x74>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e007      	b.n	8002f94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e004      	b.n	8002f94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	e001      	b.n	8002f94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000000c 	.word	0x2000000c
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	20000008 	.word	0x20000008

08002fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_IncTick+0x20>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	2000000c 	.word	0x2000000c
 8002fd0:	200004a8 	.word	0x200004a8

08002fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_GetTick+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	200004a8 	.word	0x200004a8

08002fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7ff ffee 	bl	8002fd4 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d005      	beq.n	8003012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_Delay+0x44>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003012:	bf00      	nop
 8003014:	f7ff ffde 	bl	8002fd4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d8f7      	bhi.n	8003014 <HAL_Delay+0x28>
  {
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	2000000c 	.word	0x2000000c

08003034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003050:	4013      	ands	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800305c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003066:	4a04      	ldr	r2, [pc, #16]	; (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	60d3      	str	r3, [r2, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <__NVIC_GetPriorityGrouping+0x18>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 0307 	and.w	r3, r3, #7
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0b      	blt.n	80030c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4907      	ldr	r1, [pc, #28]	; (80030d0 <__NVIC_EnableIRQ+0x38>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	db0a      	blt.n	80030fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	490c      	ldr	r1, [pc, #48]	; (8003120 <__NVIC_SetPriority+0x4c>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	440b      	add	r3, r1
 80030f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030fc:	e00a      	b.n	8003114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4908      	ldr	r1, [pc, #32]	; (8003124 <__NVIC_SetPriority+0x50>)
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	3b04      	subs	r3, #4
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	440b      	add	r3, r1
 8003112:	761a      	strb	r2, [r3, #24]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000e100 	.word	0xe000e100
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f1c3 0307 	rsb	r3, r3, #7
 8003142:	2b04      	cmp	r3, #4
 8003144:	bf28      	it	cs
 8003146:	2304      	movcs	r3, #4
 8003148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3304      	adds	r3, #4
 800314e:	2b06      	cmp	r3, #6
 8003150:	d902      	bls.n	8003158 <NVIC_EncodePriority+0x30>
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3b03      	subs	r3, #3
 8003156:	e000      	b.n	800315a <NVIC_EncodePriority+0x32>
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	f04f 32ff 	mov.w	r2, #4294967295
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	401a      	ands	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	43d9      	mvns	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	4313      	orrs	r3, r2
         );
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a0:	d301      	bcc.n	80031a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00f      	b.n	80031c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <SysTick_Config+0x40>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ae:	210f      	movs	r1, #15
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	f7ff ff8e 	bl	80030d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <SysTick_Config+0x40>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <SysTick_Config+0x40>)
 80031c0:	2207      	movs	r2, #7
 80031c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff29 	bl	8003034 <__NVIC_SetPriorityGrouping>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031fc:	f7ff ff3e 	bl	800307c <__NVIC_GetPriorityGrouping>
 8003200:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff ff8e 	bl	8003128 <NVIC_EncodePriority>
 800320c:	4602      	mov	r2, r0
 800320e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5d 	bl	80030d4 <__NVIC_SetPriority>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff31 	bl	8003098 <__NVIC_EnableIRQ>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ffa2 	bl	8003190 <SysTick_Config>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d008      	beq.n	8003280 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2204      	movs	r2, #4
 8003272:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e022      	b.n	80032c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 020e 	bic.w	r2, r2, #14
 800328e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f003 021c 	and.w	r2, r3, #28
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d005      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2204      	movs	r2, #4
 80032ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	e029      	b.n	800334a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 020e 	bic.w	r2, r2, #14
 8003304:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	f003 021c 	and.w	r2, r3, #28
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f202 	lsl.w	r2, r1, r2
 8003328:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
    }
  }
  return status;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003362:	e14e      	b.n	8003602 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2101      	movs	r1, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	4013      	ands	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8140 	beq.w	80035fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d005      	beq.n	8003394 <HAL_GPIO_Init+0x40>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d130      	bne.n	80033f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ca:	2201      	movs	r2, #1
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 0201 	and.w	r2, r3, #1
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d017      	beq.n	8003432 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d123      	bne.n	8003486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	220f      	movs	r2, #15
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	6939      	ldr	r1, [r7, #16]
 8003482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2203      	movs	r2, #3
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0203 	and.w	r2, r3, #3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 809a 	beq.w	80035fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c8:	4b55      	ldr	r3, [pc, #340]	; (8003620 <HAL_GPIO_Init+0x2cc>)
 80034ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034cc:	4a54      	ldr	r2, [pc, #336]	; (8003620 <HAL_GPIO_Init+0x2cc>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6613      	str	r3, [r2, #96]	; 0x60
 80034d4:	4b52      	ldr	r3, [pc, #328]	; (8003620 <HAL_GPIO_Init+0x2cc>)
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034e0:	4a50      	ldr	r2, [pc, #320]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	3302      	adds	r3, #2
 80034e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	220f      	movs	r2, #15
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800350a:	d013      	beq.n	8003534 <HAL_GPIO_Init+0x1e0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a46      	ldr	r2, [pc, #280]	; (8003628 <HAL_GPIO_Init+0x2d4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00d      	beq.n	8003530 <HAL_GPIO_Init+0x1dc>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a45      	ldr	r2, [pc, #276]	; (800362c <HAL_GPIO_Init+0x2d8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <HAL_GPIO_Init+0x1d8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a44      	ldr	r2, [pc, #272]	; (8003630 <HAL_GPIO_Init+0x2dc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_GPIO_Init+0x1d4>
 8003524:	2303      	movs	r3, #3
 8003526:	e006      	b.n	8003536 <HAL_GPIO_Init+0x1e2>
 8003528:	2307      	movs	r3, #7
 800352a:	e004      	b.n	8003536 <HAL_GPIO_Init+0x1e2>
 800352c:	2302      	movs	r3, #2
 800352e:	e002      	b.n	8003536 <HAL_GPIO_Init+0x1e2>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_GPIO_Init+0x1e2>
 8003534:	2300      	movs	r3, #0
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	f002 0203 	and.w	r2, r2, #3
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	4093      	lsls	r3, r2
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003546:	4937      	ldr	r1, [pc, #220]	; (8003624 <HAL_GPIO_Init+0x2d0>)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003554:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_GPIO_Init+0x2e0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003578:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <HAL_GPIO_Init+0x2e0>)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800357e:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <HAL_GPIO_Init+0x2e0>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035a2:	4a24      	ldr	r2, [pc, #144]	; (8003634 <HAL_GPIO_Init+0x2e0>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_GPIO_Init+0x2e0>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035cc:	4a19      	ldr	r2, [pc, #100]	; (8003634 <HAL_GPIO_Init+0x2e0>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <HAL_GPIO_Init+0x2e0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035f6:	4a0f      	ldr	r2, [pc, #60]	; (8003634 <HAL_GPIO_Init+0x2e0>)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3301      	adds	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f aea9 	bne.w	8003364 <HAL_GPIO_Init+0x10>
  }
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40021000 	.word	0x40021000
 8003624:	40010000 	.word	0x40010000
 8003628:	48000400 	.word	0x48000400
 800362c:	48000800 	.word	0x48000800
 8003630:	48000c00 	.word	0x48000c00
 8003634:	40010400 	.word	0x40010400

08003638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e001      	b.n	800365a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003684:	e002      	b.n	800368c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40007000 	.word	0x40007000

080036b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c2:	d130      	bne.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c4:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d0:	d038      	beq.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2232      	movs	r2, #50	; 0x32
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	0c9b      	lsrs	r3, r3, #18
 80036f4:	3301      	adds	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f8:	e002      	b.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370c:	d102      	bne.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x60>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f2      	bne.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d110      	bne.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e00f      	b.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d007      	beq.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003734:	4b07      	ldr	r3, [pc, #28]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373c:	4a05      	ldr	r2, [pc, #20]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003742:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40007000 	.word	0x40007000
 8003758:	20000000 	.word	0x20000000
 800375c:	431bde83 	.word	0x431bde83

08003760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f000 bc4f 	b.w	8004012 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003774:	4b97      	ldr	r3, [pc, #604]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800377e:	4b95      	ldr	r3, [pc, #596]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80e6 	beq.w	8003962 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_RCC_OscConfig+0x4c>
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	f040 808d 	bne.w	80038be <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	f040 8089 	bne.w	80038be <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ac:	4b89      	ldr	r3, [pc, #548]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <HAL_RCC_OscConfig+0x66>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f000 bc26 	b.w	8004012 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ca:	4b82      	ldr	r3, [pc, #520]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_RCC_OscConfig+0x80>
 80037d6:	4b7f      	ldr	r3, [pc, #508]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037de:	e005      	b.n	80037ec <HAL_RCC_OscConfig+0x8c>
 80037e0:	4b7c      	ldr	r3, [pc, #496]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d224      	bcs.n	800383a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fdd9 	bl	80043ac <RCC_SetFlashLatencyFromMSIRange>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f000 bc06 	b.w	8004012 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003806:	4b73      	ldr	r3, [pc, #460]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a72      	ldr	r2, [pc, #456]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 800380c:	f043 0308 	orr.w	r3, r3, #8
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b70      	ldr	r3, [pc, #448]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	496d      	ldr	r1, [pc, #436]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003824:	4b6b      	ldr	r3, [pc, #428]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	4968      	ldr	r1, [pc, #416]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
 8003838:	e025      	b.n	8003886 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800383a:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a65      	ldr	r2, [pc, #404]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003840:	f043 0308 	orr.w	r3, r3, #8
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	4960      	ldr	r1, [pc, #384]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003858:	4b5e      	ldr	r3, [pc, #376]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	495b      	ldr	r1, [pc, #364]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fd98 	bl	80043ac <RCC_SetFlashLatencyFromMSIRange>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e3c5      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003886:	f000 fccd 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 800388a:	4602      	mov	r2, r0
 800388c:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	4950      	ldr	r1, [pc, #320]	; (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003898:	5ccb      	ldrb	r3, [r1, r3]
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a4e      	ldr	r2, [pc, #312]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80038a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038a6:	4b4e      	ldr	r3, [pc, #312]	; (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fb42 	bl	8002f34 <HAL_InitTick>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d052      	beq.n	8003960 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	e3a9      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d032      	beq.n	800392c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038c6:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a42      	ldr	r2, [pc, #264]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038d2:	f7ff fb7f 	bl	8002fd4 <HAL_GetTick>
 80038d6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038da:	f7ff fb7b 	bl	8002fd4 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e392      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ec:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f0      	beq.n	80038da <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f8:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a35      	ldr	r2, [pc, #212]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038fe:	f043 0308 	orr.w	r3, r3, #8
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	4930      	ldr	r1, [pc, #192]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	492b      	ldr	r1, [pc, #172]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
 800392a:	e01a      	b.n	8003962 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800392c:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003938:	f7ff fb4c 	bl	8002fd4 <HAL_GetTick>
 800393c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003940:	f7ff fb48 	bl	8002fd4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e35f      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1e0>
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003960:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d073      	beq.n	8003a56 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d005      	beq.n	8003980 <HAL_RCC_OscConfig+0x220>
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	2b0c      	cmp	r3, #12
 8003978:	d10e      	bne.n	8003998 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d10b      	bne.n	8003998 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d063      	beq.n	8003a54 <HAL_RCC_OscConfig+0x2f4>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d15f      	bne.n	8003a54 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e33c      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x250>
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e025      	b.n	80039fc <HAL_RCC_OscConfig+0x29c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b8:	d114      	bne.n	80039e4 <HAL_RCC_OscConfig+0x284>
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a02      	ldr	r2, [pc, #8]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e013      	b.n	80039fc <HAL_RCC_OscConfig+0x29c>
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08008708 	.word	0x08008708
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000008 	.word	0x20000008
 80039e4:	4b8f      	ldr	r3, [pc, #572]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a8e      	ldr	r2, [pc, #568]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b8c      	ldr	r3, [pc, #560]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a8b      	ldr	r2, [pc, #556]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7ff fae6 	bl	8002fd4 <HAL_GetTick>
 8003a08:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7ff fae2 	bl	8002fd4 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e2f9      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1e:	4b81      	ldr	r3, [pc, #516]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x2ac>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7ff fad2 	bl	8002fd4 <HAL_GetTick>
 8003a30:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7ff face 	bl	8002fd4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e2e5      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a46:	4b77      	ldr	r3, [pc, #476]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d060      	beq.n	8003b24 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_OscConfig+0x314>
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d119      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d116      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a74:	4b6b      	ldr	r3, [pc, #428]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_OscConfig+0x32c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e2c2      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8c:	4b65      	ldr	r3, [pc, #404]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	4962      	ldr	r1, [pc, #392]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa0:	e040      	b.n	8003b24 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d023      	beq.n	8003af2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aaa:	4b5e      	ldr	r3, [pc, #376]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a5d      	ldr	r2, [pc, #372]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7ff fa8d 	bl	8002fd4 <HAL_GetTick>
 8003aba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003abe:	f7ff fa89 	bl	8002fd4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e2a0      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad0:	4b54      	ldr	r3, [pc, #336]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003adc:	4b51      	ldr	r3, [pc, #324]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	494e      	ldr	r1, [pc, #312]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
 8003af0:	e018      	b.n	8003b24 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af2:	4b4c      	ldr	r3, [pc, #304]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a4b      	ldr	r2, [pc, #300]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7ff fa69 	bl	8002fd4 <HAL_GetTick>
 8003b02:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b06:	f7ff fa65 	bl	8002fd4 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e27c      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b18:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8082 	beq.w	8003c36 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d05f      	beq.n	8003bfa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b40:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d037      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e254      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01b      	beq.n	8003baa <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003b72:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b78:	4a2a      	ldr	r2, [pc, #168]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b82:	f7ff fa27 	bl	8002fd4 <HAL_GetTick>
 8003b86:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7ff fa23 	bl	8002fd4 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b11      	cmp	r3, #17
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e23a      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b9c:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ef      	bne.n	8003b8a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003baa:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb0:	f023 0210 	bic.w	r2, r3, #16
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	491a      	ldr	r1, [pc, #104]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc6:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7ff fa00 	bl	8002fd4 <HAL_GetTick>
 8003bd4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7ff f9fc 	bl	8002fd4 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b11      	cmp	r3, #17
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e213      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bea:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ef      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x478>
 8003bf8:	e01d      	b.n	8003c36 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0a:	f7ff f9e3 	bl	8002fd4 <HAL_GetTick>
 8003c0e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c12:	f7ff f9df 	bl	8002fd4 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b11      	cmp	r3, #17
 8003c1e:	d903      	bls.n	8003c28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e1f6      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
 8003c24:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c28:	4ba9      	ldr	r3, [pc, #676]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ed      	bne.n	8003c12 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80bd 	beq.w	8003dbe <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c4a:	4ba1      	ldr	r3, [pc, #644]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10e      	bne.n	8003c74 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b9e      	ldr	r3, [pc, #632]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	4a9d      	ldr	r2, [pc, #628]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6593      	str	r3, [r2, #88]	; 0x58
 8003c62:	4b9b      	ldr	r3, [pc, #620]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c74:	4b97      	ldr	r3, [pc, #604]	; (8003ed4 <HAL_RCC_OscConfig+0x774>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d118      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c80:	4b94      	ldr	r3, [pc, #592]	; (8003ed4 <HAL_RCC_OscConfig+0x774>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a93      	ldr	r2, [pc, #588]	; (8003ed4 <HAL_RCC_OscConfig+0x774>)
 8003c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8c:	f7ff f9a2 	bl	8002fd4 <HAL_GetTick>
 8003c90:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c94:	f7ff f99e 	bl	8002fd4 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e1b5      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca6:	4b8b      	ldr	r3, [pc, #556]	; (8003ed4 <HAL_RCC_OscConfig+0x774>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d02c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003cbe:	4b84      	ldr	r3, [pc, #528]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd0:	497f      	ldr	r1, [pc, #508]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d010      	beq.n	8003d06 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ce4:	4b7a      	ldr	r3, [pc, #488]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	4a79      	ldr	r2, [pc, #484]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003cec:	f043 0304 	orr.w	r3, r3, #4
 8003cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cf4:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	4a75      	ldr	r2, [pc, #468]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d04:	e018      	b.n	8003d38 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d06:	4b72      	ldr	r3, [pc, #456]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0c:	4a70      	ldr	r2, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d16:	e00f      	b.n	8003d38 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d18:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	4a6c      	ldr	r2, [pc, #432]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d28:	4b69      	ldr	r3, [pc, #420]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	4a68      	ldr	r2, [pc, #416]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d016      	beq.n	8003d6e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7ff f948 	bl	8002fd4 <HAL_GetTick>
 8003d44:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d48:	f7ff f944 	bl	8002fd4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e159      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5e:	4b5c      	ldr	r3, [pc, #368]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ed      	beq.n	8003d48 <HAL_RCC_OscConfig+0x5e8>
 8003d6c:	e01d      	b.n	8003daa <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7ff f931 	bl	8002fd4 <HAL_GetTick>
 8003d72:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7ff f92d 	bl	8002fd4 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e142      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d8c:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1ed      	bne.n	8003d76 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003d9a:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	4a4b      	ldr	r2, [pc, #300]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d105      	bne.n	8003dbe <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	4a46      	ldr	r2, [pc, #280]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d03c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dd2:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dd8:	4a3d      	ldr	r2, [pc, #244]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7ff f8f7 	bl	8002fd4 <HAL_GetTick>
 8003de6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dea:	f7ff f8f3 	bl	8002fd4 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e10a      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dfc:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ef      	beq.n	8003dea <HAL_RCC_OscConfig+0x68a>
 8003e0a:	e01b      	b.n	8003e44 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e0c:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e12:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1c:	f7ff f8da 	bl	8002fd4 <HAL_GetTick>
 8003e20:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e24:	f7ff f8d6 	bl	8002fd4 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0ed      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e36:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ef      	bne.n	8003e24 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80e1 	beq.w	8004010 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	f040 80b5 	bne.w	8003fc2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0203 	and.w	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d124      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	3b01      	subs	r3, #1
 8003e78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d11b      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d113      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d109      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d05f      	beq.n	8003f76 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	2b0c      	cmp	r3, #12
 8003eba:	d05a      	beq.n	8003f72 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a03      	ldr	r2, [pc, #12]	; (8003ed0 <HAL_RCC_OscConfig+0x770>)
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ec8:	f7ff f884 	bl	8002fd4 <HAL_GetTick>
 8003ecc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ece:	e00c      	b.n	8003eea <HAL_RCC_OscConfig+0x78a>
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7ff f87c 	bl	8002fd4 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e093      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eea:	4b4c      	ldr	r3, [pc, #304]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef6:	4b49      	ldr	r3, [pc, #292]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	4b49      	ldr	r3, [pc, #292]	; (8004020 <HAL_RCC_OscConfig+0x8c0>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f06:	3a01      	subs	r2, #1
 8003f08:	0112      	lsls	r2, r2, #4
 8003f0a:	4311      	orrs	r1, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f10:	0212      	lsls	r2, r2, #8
 8003f12:	4311      	orrs	r1, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f18:	0852      	lsrs	r2, r2, #1
 8003f1a:	3a01      	subs	r2, #1
 8003f1c:	0552      	lsls	r2, r2, #21
 8003f1e:	4311      	orrs	r1, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f24:	0852      	lsrs	r2, r2, #1
 8003f26:	3a01      	subs	r2, #1
 8003f28:	0652      	lsls	r2, r2, #25
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	493b      	ldr	r1, [pc, #236]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f32:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a39      	ldr	r2, [pc, #228]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4a36      	ldr	r2, [pc, #216]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f48:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f4a:	f7ff f843 	bl	8002fd4 <HAL_GetTick>
 8003f4e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f52:	f7ff f83f 	bl	8002fd4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e056      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f64:	4b2d      	ldr	r3, [pc, #180]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f70:	e04e      	b.n	8004010 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e04d      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	4b29      	ldr	r3, [pc, #164]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d146      	bne.n	8004010 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f82:	4b26      	ldr	r3, [pc, #152]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a25      	ldr	r2, [pc, #148]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4a22      	ldr	r2, [pc, #136]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f98:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f9a:	f7ff f81b 	bl	8002fd4 <HAL_GetTick>
 8003f9e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7ff f817 	bl	8002fd4 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e02e      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb4:	4b19      	ldr	r3, [pc, #100]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x842>
 8003fc0:	e026      	b.n	8004010 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d021      	beq.n	800400c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b14      	ldr	r3, [pc, #80]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a13      	ldr	r2, [pc, #76]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fffe 	bl	8002fd4 <HAL_GetTick>
 8003fd8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fe fffa 	bl	8002fd4 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e011      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4a07      	ldr	r2, [pc, #28]	; (800401c <HAL_RCC_OscConfig+0x8bc>)
 8004000:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004004:	f023 0303 	bic.w	r3, r3, #3
 8004008:	60d3      	str	r3, [r2, #12]
 800400a:	e001      	b.n	8004010 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3728      	adds	r7, #40	; 0x28
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	f99f808c 	.word	0xf99f808c

08004024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0e7      	b.n	8004208 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004038:	4b75      	ldr	r3, [pc, #468]	; (8004210 <HAL_RCC_ClockConfig+0x1ec>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d910      	bls.n	8004068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b72      	ldr	r3, [pc, #456]	; (8004210 <HAL_RCC_ClockConfig+0x1ec>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 0207 	bic.w	r2, r3, #7
 800404e:	4970      	ldr	r1, [pc, #448]	; (8004210 <HAL_RCC_ClockConfig+0x1ec>)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b6e      	ldr	r3, [pc, #440]	; (8004210 <HAL_RCC_ClockConfig+0x1ec>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0cf      	b.n	8004208 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	4b66      	ldr	r3, [pc, #408]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004080:	429a      	cmp	r2, r3
 8004082:	d908      	bls.n	8004096 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b63      	ldr	r3, [pc, #396]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4960      	ldr	r1, [pc, #384]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04c      	beq.n	800413c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040aa:	4b5a      	ldr	r3, [pc, #360]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d121      	bne.n	80040fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0a6      	b.n	8004208 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d107      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c2:	4b54      	ldr	r3, [pc, #336]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d115      	bne.n	80040fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e09a      	b.n	8004208 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040da:	4b4e      	ldr	r3, [pc, #312]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e08e      	b.n	8004208 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ea:	4b4a      	ldr	r3, [pc, #296]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e086      	b.n	8004208 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040fa:	4b46      	ldr	r3, [pc, #280]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 0203 	bic.w	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4943      	ldr	r1, [pc, #268]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410c:	f7fe ff62 	bl	8002fd4 <HAL_GetTick>
 8004110:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	e00a      	b.n	800412a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004114:	f7fe ff5e 	bl	8002fd4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e06e      	b.n	8004208 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	4b3a      	ldr	r3, [pc, #232]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 020c 	and.w	r2, r3, #12
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	429a      	cmp	r2, r3
 800413a:	d1eb      	bne.n	8004114 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d010      	beq.n	800416a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	4b31      	ldr	r3, [pc, #196]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004154:	429a      	cmp	r2, r3
 8004156:	d208      	bcs.n	800416a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004158:	4b2e      	ldr	r3, [pc, #184]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	492b      	ldr	r1, [pc, #172]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800416a:	4b29      	ldr	r3, [pc, #164]	; (8004210 <HAL_RCC_ClockConfig+0x1ec>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d210      	bcs.n	800419a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004178:	4b25      	ldr	r3, [pc, #148]	; (8004210 <HAL_RCC_ClockConfig+0x1ec>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f023 0207 	bic.w	r2, r3, #7
 8004180:	4923      	ldr	r1, [pc, #140]	; (8004210 <HAL_RCC_ClockConfig+0x1ec>)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	4313      	orrs	r3, r2
 8004186:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004188:	4b21      	ldr	r3, [pc, #132]	; (8004210 <HAL_RCC_ClockConfig+0x1ec>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d001      	beq.n	800419a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e036      	b.n	8004208 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	4918      	ldr	r1, [pc, #96]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d009      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4910      	ldr	r1, [pc, #64]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041d8:	f000 f824 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	091b      	lsrs	r3, r3, #4
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	490b      	ldr	r1, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x1f4>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
 80041f4:	4a09      	ldr	r2, [pc, #36]	; (800421c <HAL_RCC_ClockConfig+0x1f8>)
 80041f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1fc>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe fe99 	bl	8002f34 <HAL_InitTick>
 8004202:	4603      	mov	r3, r0
 8004204:	72fb      	strb	r3, [r7, #11]

  return status;
 8004206:	7afb      	ldrb	r3, [r7, #11]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40022000 	.word	0x40022000
 8004214:	40021000 	.word	0x40021000
 8004218:	08008708 	.word	0x08008708
 800421c:	20000000 	.word	0x20000000
 8004220:	20000008 	.word	0x20000008

08004224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	2300      	movs	r3, #0
 8004230:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004232:	4b3e      	ldr	r3, [pc, #248]	; (800432c <HAL_RCC_GetSysClockFreq+0x108>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800423c:	4b3b      	ldr	r3, [pc, #236]	; (800432c <HAL_RCC_GetSysClockFreq+0x108>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_GetSysClockFreq+0x34>
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d121      	bne.n	8004296 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d11e      	bne.n	8004296 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004258:	4b34      	ldr	r3, [pc, #208]	; (800432c <HAL_RCC_GetSysClockFreq+0x108>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d107      	bne.n	8004274 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004264:	4b31      	ldr	r3, [pc, #196]	; (800432c <HAL_RCC_GetSysClockFreq+0x108>)
 8004266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	e005      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004274:	4b2d      	ldr	r3, [pc, #180]	; (800432c <HAL_RCC_GetSysClockFreq+0x108>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004280:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004288:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10d      	bne.n	80042ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004294:	e00a      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d102      	bne.n	80042a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <HAL_RCC_GetSysClockFreq+0x110>)
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	e004      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042a8:	4b23      	ldr	r3, [pc, #140]	; (8004338 <HAL_RCC_GetSysClockFreq+0x114>)
 80042aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	d134      	bne.n	800431c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042b2:	4b1e      	ldr	r3, [pc, #120]	; (800432c <HAL_RCC_GetSysClockFreq+0x108>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0xa6>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d003      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0xac>
 80042c8:	e005      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042ca:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <HAL_RCC_GetSysClockFreq+0x110>)
 80042cc:	617b      	str	r3, [r7, #20]
      break;
 80042ce:	e005      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042d0:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_RCC_GetSysClockFreq+0x114>)
 80042d2:	617b      	str	r3, [r7, #20]
      break;
 80042d4:	e002      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	617b      	str	r3, [r7, #20]
      break;
 80042da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042dc:	4b13      	ldr	r3, [pc, #76]	; (800432c <HAL_RCC_GetSysClockFreq+0x108>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	3301      	adds	r3, #1
 80042e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <HAL_RCC_GetSysClockFreq+0x108>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	fb03 f202 	mul.w	r2, r3, r2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_RCC_GetSysClockFreq+0x108>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	0e5b      	lsrs	r3, r3, #25
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	3301      	adds	r3, #1
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800431c:	69bb      	ldr	r3, [r7, #24]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3724      	adds	r7, #36	; 0x24
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	08008720 	.word	0x08008720
 8004334:	00f42400 	.word	0x00f42400
 8004338:	007a1200 	.word	0x007a1200

0800433c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <HAL_RCC_GetHCLKFreq+0x14>)
 8004342:	681b      	ldr	r3, [r3, #0]
}
 8004344:	4618      	mov	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	20000000 	.word	0x20000000

08004354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004358:	f7ff fff0 	bl	800433c <HAL_RCC_GetHCLKFreq>
 800435c:	4602      	mov	r2, r0
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4904      	ldr	r1, [pc, #16]	; (800437c <HAL_RCC_GetPCLK1Freq+0x28>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000
 800437c:	08008718 	.word	0x08008718

08004380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004384:	f7ff ffda 	bl	800433c <HAL_RCC_GetHCLKFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	0adb      	lsrs	r3, r3, #11
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4904      	ldr	r1, [pc, #16]	; (80043a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000
 80043a8:	08008718 	.word	0x08008718

080043ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043c4:	f7ff f968 	bl	8003698 <HAL_PWREx_GetVoltageRange>
 80043c8:	6178      	str	r0, [r7, #20]
 80043ca:	e014      	b.n	80043f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043cc:	4b25      	ldr	r3, [pc, #148]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	4a24      	ldr	r2, [pc, #144]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6593      	str	r3, [r2, #88]	; 0x58
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043e4:	f7ff f958 	bl	8003698 <HAL_PWREx_GetVoltageRange>
 80043e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043ea:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fc:	d10b      	bne.n	8004416 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d919      	bls.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2ba0      	cmp	r3, #160	; 0xa0
 8004408:	d902      	bls.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800440a:	2302      	movs	r3, #2
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e013      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004410:	2301      	movs	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	e010      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d902      	bls.n	8004422 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800441c:	2303      	movs	r3, #3
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	e00a      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b80      	cmp	r3, #128	; 0x80
 8004426:	d102      	bne.n	800442e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004428:	2302      	movs	r3, #2
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e004      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b70      	cmp	r3, #112	; 0x70
 8004432:	d101      	bne.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004434:	2301      	movs	r3, #1
 8004436:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 0207 	bic.w	r2, r3, #7
 8004440:	4909      	ldr	r1, [pc, #36]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d001      	beq.n	800445a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40021000 	.word	0x40021000
 8004468:	40022000 	.word	0x40022000

0800446c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004474:	2300      	movs	r3, #0
 8004476:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004478:	2300      	movs	r3, #0
 800447a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 809e 	beq.w	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2300      	movs	r3, #0
 800448c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800448e:	4b46      	ldr	r3, [pc, #280]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b40      	ldr	r3, [pc, #256]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	4a3f      	ldr	r2, [pc, #252]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6593      	str	r3, [r2, #88]	; 0x58
 80044b0:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044bc:	2301      	movs	r3, #1
 80044be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c0:	4b3a      	ldr	r3, [pc, #232]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a39      	ldr	r2, [pc, #228]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80044c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044cc:	f7fe fd82 	bl	8002fd4 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044d2:	e009      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d4:	f7fe fd7e 	bl	8002fd4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d902      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	74fb      	strb	r3, [r7, #19]
        break;
 80044e6:	e005      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044e8:	4b30      	ldr	r3, [pc, #192]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ef      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80044f4:	7cfb      	ldrb	r3, [r7, #19]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d15a      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044fa:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004504:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01e      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	429a      	cmp	r2, r3
 8004514:	d019      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004522:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800453a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004542:	4a19      	ldr	r2, [pc, #100]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d016      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fe fd3e 	bl	8002fd4 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455a:	e00b      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fe fd3a 	bl	8002fd4 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d902      	bls.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	74fb      	strb	r3, [r7, #19]
            break;
 8004572:	e006      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0ec      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004582:	7cfb      	ldrb	r3, [r7, #19]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	4904      	ldr	r1, [pc, #16]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800459e:	e009      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	74bb      	strb	r3, [r7, #18]
 80045a4:	e006      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b4:	7c7b      	ldrb	r3, [r7, #17]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d105      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ba:	4b6e      	ldr	r3, [pc, #440]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	4a6d      	ldr	r2, [pc, #436]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80045c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d2:	4b68      	ldr	r3, [pc, #416]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f023 0203 	bic.w	r2, r3, #3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4964      	ldr	r1, [pc, #400]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045f4:	4b5f      	ldr	r3, [pc, #380]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f023 020c 	bic.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	495c      	ldr	r1, [pc, #368]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004616:	4b57      	ldr	r3, [pc, #348]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4953      	ldr	r1, [pc, #332]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004638:	4b4e      	ldr	r3, [pc, #312]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	494b      	ldr	r1, [pc, #300]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800465a:	4b46      	ldr	r3, [pc, #280]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	4942      	ldr	r1, [pc, #264]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800467c:	4b3d      	ldr	r3, [pc, #244]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	493a      	ldr	r1, [pc, #232]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800469e:	4b35      	ldr	r3, [pc, #212]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	4931      	ldr	r1, [pc, #196]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c0:	4b2c      	ldr	r3, [pc, #176]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	4929      	ldr	r1, [pc, #164]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	4920      	ldr	r1, [pc, #128]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d015      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004704:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	4918      	ldr	r1, [pc, #96]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004722:	d105      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004724:	4b13      	ldr	r3, [pc, #76]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4a12      	ldr	r2, [pc, #72]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800472a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d015      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800473c:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	490a      	ldr	r1, [pc, #40]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800475a:	d105      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004766:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004768:	7cbb      	ldrb	r3, [r7, #18]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40021000 	.word	0x40021000

08004778 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e049      	b.n	800481e <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	795b      	ldrb	r3, [r3, #5]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fc feb4 	bl	8001508 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0204 	orr.w	r2, r2, #4
 80047b4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d104      	bne.n	80047ce <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2204      	movs	r2, #4
 80047c8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e027      	b.n	800481e <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80047ce:	f7fe fc01 	bl	8002fd4 <HAL_GetTick>
 80047d2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80047d4:	e015      	b.n	8004802 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80047d6:	f7fe fbfd 	bl	8002fd4 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d90e      	bls.n	8004802 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d107      	bne.n	8004802 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2204      	movs	r2, #4
 80047f6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e00d      	b.n	800481e <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b04      	cmp	r3, #4
 800480e:	d0e2      	beq.n	80047d6 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	791b      	ldrb	r3, [r3, #4]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_RNG_GenerateRandomNumber+0x1a>
 800483c:	2302      	movs	r3, #2
 800483e:	e03d      	b.n	80048bc <HAL_RNG_GenerateRandomNumber+0x96>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	795b      	ldrb	r3, [r3, #5]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d12c      	bne.n	80048aa <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004856:	f7fe fbbd 	bl	8002fd4 <HAL_GetTick>
 800485a:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800485c:	e011      	b.n	8004882 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800485e:	f7fe fbb9 	bl	8002fd4 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d90a      	bls.n	8004882 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e01c      	b.n	80048bc <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d1e6      	bne.n	800485e <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	715a      	strb	r2, [r3, #5]
 80048a8:	e004      	b.n	80048b4 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2204      	movs	r2, #4
 80048ae:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	711a      	strb	r2, [r3, #4]

  return status;
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e095      	b.n	8004a02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d108      	bne.n	80048f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e6:	d009      	beq.n	80048fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	61da      	str	r2, [r3, #28]
 80048ee:	e005      	b.n	80048fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fc fe2a 	bl	8001570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004932:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800493c:	d902      	bls.n	8004944 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e002      	b.n	800494a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004948:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004952:	d007      	beq.n	8004964 <HAL_SPI_Init+0xa0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	ea42 0103 	orr.w	r1, r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f003 0204 	and.w	r2, r3, #4
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049e0:	ea42 0103 	orr.w	r1, r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_SPI_Transmit+0x22>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e158      	b.n	8004cde <HAL_SPI_Transmit+0x2d4>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a34:	f7fe face 	bl	8002fd4 <HAL_GetTick>
 8004a38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d002      	beq.n	8004a50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a4e:	e13d      	b.n	8004ccc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_SPI_Transmit+0x52>
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a60:	e134      	b.n	8004ccc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2203      	movs	r2, #3
 8004a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	88fa      	ldrh	r2, [r7, #6]
 8004a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	88fa      	ldrh	r2, [r7, #6]
 8004a80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	d10f      	bne.n	8004ace <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004acc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d007      	beq.n	8004aec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004af4:	d94b      	bls.n	8004b8e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_SPI_Transmit+0xfa>
 8004afe:	8afb      	ldrh	r3, [r7, #22]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d13e      	bne.n	8004b82 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	881a      	ldrh	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b28:	e02b      	b.n	8004b82 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d112      	bne.n	8004b5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	1c9a      	adds	r2, r3, #2
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b5c:	e011      	b.n	8004b82 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b5e:	f7fe fa39 	bl	8002fd4 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d803      	bhi.n	8004b76 <HAL_SPI_Transmit+0x16c>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d102      	bne.n	8004b7c <HAL_SPI_Transmit+0x172>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b80:	e0a4      	b.n	8004ccc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ce      	bne.n	8004b2a <HAL_SPI_Transmit+0x120>
 8004b8c:	e07c      	b.n	8004c88 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Transmit+0x192>
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d170      	bne.n	8004c7e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d912      	bls.n	8004bcc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	881a      	ldrh	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	1c9a      	adds	r2, r3, #2
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b02      	subs	r3, #2
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bca:	e058      	b.n	8004c7e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004bf2:	e044      	b.n	8004c7e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d12b      	bne.n	8004c5a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d912      	bls.n	8004c32 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	881a      	ldrh	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	1c9a      	adds	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b02      	subs	r3, #2
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c30:	e025      	b.n	8004c7e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c58:	e011      	b.n	8004c7e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c5a:	f7fe f9bb 	bl	8002fd4 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d803      	bhi.n	8004c72 <HAL_SPI_Transmit+0x268>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d102      	bne.n	8004c78 <HAL_SPI_Transmit+0x26e>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c7c:	e026      	b.n	8004ccc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1b5      	bne.n	8004bf4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fb5b 	bl	8005348 <SPI_EndRxTxTransaction>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e000      	b.n	8004ccc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004cca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b08a      	sub	sp, #40	; 0x28
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x26>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e1fb      	b.n	8005104 <HAL_SPI_TransmitReceive+0x41e>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d14:	f7fe f95e 	bl	8002fd4 <HAL_GetTick>
 8004d18:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d20:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d30:	7efb      	ldrb	r3, [r7, #27]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d00e      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x6e>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3c:	d106      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x66>
 8004d46:	7efb      	ldrb	r3, [r7, #27]
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d003      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d52:	e1cd      	b.n	80050f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x80>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x80>
 8004d60:	887b      	ldrh	r3, [r7, #2]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d6c:	e1c0      	b.n	80050f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d003      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2205      	movs	r2, #5
 8004d7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	887a      	ldrh	r2, [r7, #2]
 8004d92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	887a      	ldrh	r2, [r7, #2]
 8004d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	887a      	ldrh	r2, [r7, #2]
 8004da8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	887a      	ldrh	r2, [r7, #2]
 8004dae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dc4:	d802      	bhi.n	8004dcc <HAL_SPI_TransmitReceive+0xe6>
 8004dc6:	8a3b      	ldrh	r3, [r7, #16]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d908      	bls.n	8004dde <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dda:	605a      	str	r2, [r3, #4]
 8004ddc:	e007      	b.n	8004dee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d007      	beq.n	8004e0c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e14:	d97c      	bls.n	8004f10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_SPI_TransmitReceive+0x13e>
 8004e1e:	8a7b      	ldrh	r3, [r7, #18]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d169      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	881a      	ldrh	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	1c9a      	adds	r2, r3, #2
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e48:	e056      	b.n	8004ef8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d11b      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x1aa>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d016      	beq.n	8004e90 <HAL_SPI_TransmitReceive+0x1aa>
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d113      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	881a      	ldrh	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	1c9a      	adds	r2, r3, #2
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d11c      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x1f2>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	b292      	uxth	r2, r2
 8004eb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ed8:	f7fe f87c 	bl	8002fd4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d807      	bhi.n	8004ef8 <HAL_SPI_TransmitReceive+0x212>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d003      	beq.n	8004ef8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ef6:	e0fb      	b.n	80050f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1a3      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x164>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d19d      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x164>
 8004f0e:	e0df      	b.n	80050d0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_SPI_TransmitReceive+0x23a>
 8004f18:	8a7b      	ldrh	r3, [r7, #18]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	f040 80cb 	bne.w	80050b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d912      	bls.n	8004f50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	881a      	ldrh	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	1c9a      	adds	r2, r3, #2
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b02      	subs	r3, #2
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f4e:	e0b2      	b.n	80050b6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f76:	e09e      	b.n	80050b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d134      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x30a>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d02f      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x30a>
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d12c      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d912      	bls.n	8004fc6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	881a      	ldrh	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	1c9a      	adds	r2, r3, #2
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b02      	subs	r3, #2
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fc4:	e012      	b.n	8004fec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	330c      	adds	r3, #12
 8004fd0:	7812      	ldrb	r2, [r2, #0]
 8004fd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d148      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x3aa>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d042      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	d923      	bls.n	800505e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	b292      	uxth	r2, r2
 8005022:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	1c9a      	adds	r2, r3, #2
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b02      	subs	r3, #2
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d81f      	bhi.n	800508c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800505a:	605a      	str	r2, [r3, #4]
 800505c:	e016      	b.n	800508c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f103 020c 	add.w	r2, r3, #12
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800508c:	2301      	movs	r3, #1
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005090:	f7fd ffa0 	bl	8002fd4 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509c:	429a      	cmp	r2, r3
 800509e:	d803      	bhi.n	80050a8 <HAL_SPI_TransmitReceive+0x3c2>
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	d102      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x3c8>
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d103      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050b4:	e01c      	b.n	80050f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f47f af5b 	bne.w	8004f78 <HAL_SPI_TransmitReceive+0x292>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f47f af54 	bne.w	8004f78 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f937 	bl	8005348 <SPI_EndRxTxTransaction>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d006      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	661a      	str	r2, [r3, #96]	; 0x60
 80050ec:	e000      	b.n	80050f0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80050ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005104:	4618      	mov	r0, r3
 8005106:	3728      	adds	r7, #40	; 0x28
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800511c:	f7fd ff5a 	bl	8002fd4 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	4413      	add	r3, r2
 800512a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800512c:	f7fd ff52 	bl	8002fd4 <HAL_GetTick>
 8005130:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005132:	4b39      	ldr	r3, [pc, #228]	; (8005218 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	015b      	lsls	r3, r3, #5
 8005138:	0d1b      	lsrs	r3, r3, #20
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	fb02 f303 	mul.w	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005142:	e054      	b.n	80051ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d050      	beq.n	80051ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800514c:	f7fd ff42 	bl	8002fd4 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	429a      	cmp	r2, r3
 800515a:	d902      	bls.n	8005162 <SPI_WaitFlagStateUntilTimeout+0x56>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d13d      	bne.n	80051de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005170:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800517a:	d111      	bne.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005184:	d004      	beq.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518e:	d107      	bne.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a8:	d10f      	bne.n	80051ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e017      	b.n	800520e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	bf0c      	ite	eq
 80051fe:	2301      	moveq	r3, #1
 8005200:	2300      	movne	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	429a      	cmp	r2, r3
 800520a:	d19b      	bne.n	8005144 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000000 	.word	0x20000000

0800521c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800522e:	f7fd fed1 	bl	8002fd4 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	4413      	add	r3, r2
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800523e:	f7fd fec9 	bl	8002fd4 <HAL_GetTick>
 8005242:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800524c:	4b3d      	ldr	r3, [pc, #244]	; (8005344 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00da      	lsls	r2, r3, #3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	0d1b      	lsrs	r3, r3, #20
 800525c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525e:	fb02 f303 	mul.w	r3, r2, r3
 8005262:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005264:	e060      	b.n	8005328 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800526c:	d107      	bne.n	800527e <SPI_WaitFifoStateUntilTimeout+0x62>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800527c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d050      	beq.n	8005328 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005286:	f7fd fea5 	bl	8002fd4 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005292:	429a      	cmp	r2, r3
 8005294:	d902      	bls.n	800529c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d13d      	bne.n	8005318 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b4:	d111      	bne.n	80052da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052be:	d004      	beq.n	80052ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c8:	d107      	bne.n	80052da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e2:	d10f      	bne.n	8005304 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005302:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e010      	b.n	800533a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	3b01      	subs	r3, #1
 8005326:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	d196      	bne.n	8005266 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3728      	adds	r7, #40	; 0x28
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000000 	.word	0x20000000

08005348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2200      	movs	r2, #0
 800535c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff ff5b 	bl	800521c <SPI_WaitFifoStateUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005370:	f043 0220 	orr.w	r2, r3, #32
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e027      	b.n	80053cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	2180      	movs	r1, #128	; 0x80
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff fec0 	bl	800510c <SPI_WaitFlagStateUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005396:	f043 0220 	orr.w	r2, r3, #32
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e014      	b.n	80053cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff ff34 	bl	800521c <SPI_WaitFifoStateUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053be:	f043 0220 	orr.w	r2, r3, #32
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e000      	b.n	80053cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e040      	b.n	8005468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fb ffc8 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fe8a 	bl	800612c <UART_SetConfig>
 8005418:	4603      	mov	r3, r0
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e022      	b.n	8005468 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 f8d8 	bl	80065e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800543e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800544e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f001 f95f 	bl	8006724 <UART_CheckIdleState>
 8005466:	4603      	mov	r3, r0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4613      	mov	r3, r2
 800547e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005484:	2b20      	cmp	r3, #32
 8005486:	f040 8082 	bne.w	800558e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_UART_Transmit+0x26>
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e07a      	b.n	8005590 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_UART_Transmit+0x38>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e073      	b.n	8005590 <HAL_UART_Transmit+0x120>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2221      	movs	r2, #33	; 0x21
 80054bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054be:	f7fd fd89 	bl	8002fd4 <HAL_GetTick>
 80054c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d108      	bne.n	80054f0 <HAL_UART_Transmit+0x80>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	e003      	b.n	80054f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005500:	e02d      	b.n	800555e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2200      	movs	r2, #0
 800550a:	2180      	movs	r1, #128	; 0x80
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f001 f952 	bl	80067b6 <UART_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e039      	b.n	8005590 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	881a      	ldrh	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800552e:	b292      	uxth	r2, r2
 8005530:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	3302      	adds	r3, #2
 8005536:	61bb      	str	r3, [r7, #24]
 8005538:	e008      	b.n	800554c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	781a      	ldrb	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	b292      	uxth	r2, r2
 8005544:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	3301      	adds	r3, #1
 800554a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1cb      	bne.n	8005502 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	2140      	movs	r1, #64	; 0x40
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f001 f91e 	bl	80067b6 <UART_WaitOnFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e005      	b.n	8005590 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	e000      	b.n	8005590 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800558e:	2302      	movs	r3, #2
  }
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	f040 80bf 	bne.w	8005730 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <HAL_UART_Receive+0x26>
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e0b7      	b.n	8005732 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_UART_Receive+0x38>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e0b0      	b.n	8005732 <HAL_UART_Receive+0x19a>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2222      	movs	r2, #34	; 0x22
 80055e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055ec:	f7fd fcf2 	bl	8002fd4 <HAL_GetTick>
 80055f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	88fa      	ldrh	r2, [r7, #6]
 80055f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	88fa      	ldrh	r2, [r7, #6]
 80055fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	d10e      	bne.n	800562a <HAL_UART_Receive+0x92>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <HAL_UART_Receive+0x88>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f240 12ff 	movw	r2, #511	; 0x1ff
 800561a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800561e:	e02d      	b.n	800567c <HAL_UART_Receive+0xe4>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	22ff      	movs	r2, #255	; 0xff
 8005624:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005628:	e028      	b.n	800567c <HAL_UART_Receive+0xe4>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10d      	bne.n	800564e <HAL_UART_Receive+0xb6>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <HAL_UART_Receive+0xac>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	22ff      	movs	r2, #255	; 0xff
 800563e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005642:	e01b      	b.n	800567c <HAL_UART_Receive+0xe4>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	227f      	movs	r2, #127	; 0x7f
 8005648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800564c:	e016      	b.n	800567c <HAL_UART_Receive+0xe4>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005656:	d10d      	bne.n	8005674 <HAL_UART_Receive+0xdc>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d104      	bne.n	800566a <HAL_UART_Receive+0xd2>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	227f      	movs	r2, #127	; 0x7f
 8005664:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005668:	e008      	b.n	800567c <HAL_UART_Receive+0xe4>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	223f      	movs	r2, #63	; 0x3f
 800566e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005672:	e003      	b.n	800567c <HAL_UART_Receive+0xe4>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005682:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568c:	d108      	bne.n	80056a0 <HAL_UART_Receive+0x108>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	e003      	b.n	80056a8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056b0:	e033      	b.n	800571a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2120      	movs	r1, #32
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f001 f87a 	bl	80067b6 <UART_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e032      	b.n	8005732 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056d8:	b29a      	uxth	r2, r3
 80056da:	8a7b      	ldrh	r3, [r7, #18]
 80056dc:	4013      	ands	r3, r2
 80056de:	b29a      	uxth	r2, r3
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	3302      	adds	r3, #2
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	e00d      	b.n	8005708 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	8a7b      	ldrh	r3, [r7, #18]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	4013      	ands	r3, r2
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3301      	adds	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1c5      	bne.n	80056b2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	e000      	b.n	8005732 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800573c:	b480      	push	{r7}
 800573e:	b08b      	sub	sp, #44	; 0x2c
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800574e:	2b20      	cmp	r3, #32
 8005750:	d156      	bne.n	8005800 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_UART_Transmit_IT+0x22>
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e04f      	b.n	8005802 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_UART_Transmit_IT+0x34>
 800576c:	2302      	movs	r3, #2
 800576e:	e048      	b.n	8005802 <HAL_UART_Transmit_IT+0xc6>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	88fa      	ldrh	r2, [r7, #6]
 800578a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2221      	movs	r2, #33	; 0x21
 80057a0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057aa:	d107      	bne.n	80057bc <HAL_UART_Transmit_IT+0x80>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d103      	bne.n	80057bc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_UART_Transmit_IT+0xd4>)
 80057b8:	669a      	str	r2, [r3, #104]	; 0x68
 80057ba:	e002      	b.n	80057c2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4a15      	ldr	r2, [pc, #84]	; (8005814 <HAL_UART_Transmit_IT+0xd8>)
 80057c0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	613b      	str	r3, [r7, #16]
   return(result);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	69f9      	ldr	r1, [r7, #28]
 80057ee:	6a3a      	ldr	r2, [r7, #32]
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e6      	bne.n	80057ca <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	e000      	b.n	8005802 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005800:	2302      	movs	r3, #2
  }
}
 8005802:	4618      	mov	r0, r3
 8005804:	372c      	adds	r7, #44	; 0x2c
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	08006d67 	.word	0x08006d67
 8005814:	08006caf 	.word	0x08006caf

08005818 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582a:	2b20      	cmp	r3, #32
 800582c:	d142      	bne.n	80058b4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_UART_Receive_IT+0x22>
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e03b      	b.n	80058b6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_UART_Receive_IT+0x34>
 8005848:	2302      	movs	r3, #2
 800584a:	e034      	b.n	80058b6 <HAL_UART_Receive_IT+0x9e>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <HAL_UART_Receive_IT+0xa8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d01f      	beq.n	80058a4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d018      	beq.n	80058a4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	613b      	str	r3, [r7, #16]
   return(result);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	69f9      	ldr	r1, [r7, #28]
 8005896:	6a3a      	ldr	r2, [r7, #32]
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	61bb      	str	r3, [r7, #24]
   return(result);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e6      	bne.n	8005872 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	461a      	mov	r2, r3
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f001 f848 	bl	8006940 <UART_Start_Receive_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	e000      	b.n	80058b6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80058b4:	2302      	movs	r3, #2
  }
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3728      	adds	r7, #40	; 0x28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40008000 	.word	0x40008000

080058c4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b0a2      	sub	sp, #136	; 0x88
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058e2:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80058e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058f6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e4      	bne.n	80058d2 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3308      	adds	r3, #8
 800590e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591a:	f023 0301 	bic.w	r3, r3, #1
 800591e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005928:	65ba      	str	r2, [r7, #88]	; 0x58
 800592a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800592e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e5      	bne.n	8005908 <HAL_UART_Abort_IT+0x44>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005940:	2b01      	cmp	r3, #1
 8005942:	d118      	bne.n	8005976 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	f023 0310 	bic.w	r3, r3, #16
 8005958:	67bb      	str	r3, [r7, #120]	; 0x78
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005962:	647b      	str	r3, [r7, #68]	; 0x44
 8005964:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e6      	bne.n	8005944 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00f      	beq.n	800599e <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d104      	bne.n	8005996 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005990:	4a5e      	ldr	r2, [pc, #376]	; (8005b0c <HAL_UART_Abort_IT+0x248>)
 8005992:	639a      	str	r2, [r3, #56]	; 0x38
 8005994:	e003      	b.n	800599e <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800599a:	2200      	movs	r2, #0
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00f      	beq.n	80059c6 <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d104      	bne.n	80059be <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	4a55      	ldr	r2, [pc, #340]	; (8005b10 <HAL_UART_Abort_IT+0x24c>)
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38
 80059bc:	e003      	b.n	80059c6 <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	2200      	movs	r2, #0
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d0:	2b80      	cmp	r3, #128	; 0x80
 80059d2:	d12d      	bne.n	8005a30 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	623b      	str	r3, [r7, #32]
   return(result);
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ea:	677b      	str	r3, [r7, #116]	; 0x74
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80059f4:	633a      	str	r2, [r7, #48]	; 0x30
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e5      	bne.n	80059d4 <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00f      	beq.n	8005a30 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fd fc5c 	bl	80032d2 <HAL_DMA_Abort_IT>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a24:	2200      	movs	r2, #0
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38
 8005a28:	e002      	b.n	8005a30 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d130      	bne.n	8005aa0 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a54:	673b      	str	r3, [r7, #112]	; 0x70
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005a5e:	61fa      	str	r2, [r7, #28]
 8005a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	69b9      	ldr	r1, [r7, #24]
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e5      	bne.n	8005a3e <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d012      	beq.n	8005aa0 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fd fc27 	bl	80032d2 <HAL_DMA_Abort_IT>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8e:	2200      	movs	r2, #0
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a98:	e002      	b.n	8005aa0 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8005aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d12b      	bne.n	8005b00 <HAL_UART_Abort_IT+0x23c>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	665a      	str	r2, [r3, #100]	; 0x64
    huart->TxISR = NULL;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	669a      	str	r2, [r3, #104]	; 0x68

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	220f      	movs	r2, #15
 8005ad2:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	8b1b      	ldrh	r3, [r3, #24]
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0208 	orr.w	r2, r2, #8
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	679a      	str	r2, [r3, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fb00 	bl	8006100 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3788      	adds	r7, #136	; 0x88
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	08006bc7 	.word	0x08006bc7
 8005b10:	08006c31 	.word	0x08006c31

08005b14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b0ba      	sub	sp, #232	; 0xe8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b42:	4013      	ands	r3, r2
 8005b44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d115      	bne.n	8005b7c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00f      	beq.n	8005b7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 82a6 	beq.w	80060be <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	4798      	blx	r3
      }
      return;
 8005b7a:	e2a0      	b.n	80060be <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005b7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8117 	beq.w	8005db4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b96:	4b85      	ldr	r3, [pc, #532]	; (8005dac <HAL_UART_IRQHandler+0x298>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 810a 	beq.w	8005db4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d011      	beq.n	8005bd0 <HAL_UART_IRQHandler+0xbc>
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc6:	f043 0201 	orr.w	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d011      	beq.n	8005c00 <HAL_UART_IRQHandler+0xec>
 8005bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00b      	beq.n	8005c00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2202      	movs	r2, #2
 8005bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bf6:	f043 0204 	orr.w	r2, r3, #4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d011      	beq.n	8005c30 <HAL_UART_IRQHandler+0x11c>
 8005c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c26:	f043 0202 	orr.w	r2, r3, #2
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d017      	beq.n	8005c6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00b      	beq.n	8005c6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2208      	movs	r2, #8
 8005c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d012      	beq.n	8005c9e <HAL_UART_IRQHandler+0x18a>
 8005c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00c      	beq.n	8005c9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 820c 	beq.w	80060c2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00d      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d005      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d04f      	beq.n	8005d96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 feec 	bl	8006ad4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b40      	cmp	r3, #64	; 0x40
 8005d08:	d141      	bne.n	8005d8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1d9      	bne.n	8005d0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d013      	beq.n	8005d86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	4a13      	ldr	r2, [pc, #76]	; (8005db0 <HAL_UART_IRQHandler+0x29c>)
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fd fab1 	bl	80032d2 <HAL_DMA_Abort_IT>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d017      	beq.n	8005da6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005d80:	4610      	mov	r0, r2
 8005d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d84:	e00f      	b.n	8005da6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f9b0 	bl	80060ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	e00b      	b.n	8005da6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f9ac 	bl	80060ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	e007      	b.n	8005da6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f9a8 	bl	80060ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005da4:	e18d      	b.n	80060c2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da6:	bf00      	nop
    return;
 8005da8:	e18b      	b.n	80060c2 <HAL_UART_IRQHandler+0x5ae>
 8005daa:	bf00      	nop
 8005dac:	04000120 	.word	0x04000120
 8005db0:	08006b9b 	.word	0x08006b9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	f040 8146 	bne.w	800604a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc2:	f003 0310 	and.w	r3, r3, #16
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 813f 	beq.w	800604a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8138 	beq.w	800604a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2210      	movs	r2, #16
 8005de0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	f040 80b4 	bne.w	8005f5a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 815f 	beq.w	80060c6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e12:	429a      	cmp	r2, r3
 8005e14:	f080 8157 	bcs.w	80060c6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 8085 	bne.w	8005f3e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1da      	bne.n	8005e34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3308      	adds	r3, #8
 8005e84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ea2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e1      	bne.n	8005e7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ede:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ee0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ee4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e3      	bne.n	8005eba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f0e:	f023 0310 	bic.w	r3, r3, #16
 8005f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f20:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e4      	bne.n	8005efe <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd f98c 	bl	8003256 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f8de 	bl	8006114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f58:	e0b5      	b.n	80060c6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 80a7 	beq.w	80060ca <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005f7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80a2 	beq.w	80060ca <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8005faa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e4      	bne.n	8005f86 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	623b      	str	r3, [r7, #32]
   return(result);
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	f023 0301 	bic.w	r3, r3, #1
 8005fd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fe0:	633a      	str	r2, [r7, #48]	; 0x30
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e3      	bne.n	8005fbc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	60fb      	str	r3, [r7, #12]
   return(result);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0310 	bic.w	r3, r3, #16
 800601a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	69b9      	ldr	r1, [r7, #24]
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	617b      	str	r3, [r7, #20]
   return(result);
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e4      	bne.n	8006006 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800603c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f866 	bl	8006114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006048:	e03f      	b.n	80060ca <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800604a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00e      	beq.n	8006074 <HAL_UART_IRQHandler+0x560>
 8006056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800606a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 f864 	bl	800713a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006072:	e02d      	b.n	80060d0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00e      	beq.n	800609e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01c      	beq.n	80060ce <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	4798      	blx	r3
    }
    return;
 800609c:	e017      	b.n	80060ce <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d012      	beq.n	80060d0 <HAL_UART_IRQHandler+0x5bc>
 80060aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00c      	beq.n	80060d0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 feb5 	bl	8006e26 <UART_EndTransmit_IT>
    return;
 80060bc:	e008      	b.n	80060d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80060be:	bf00      	nop
 80060c0:	e006      	b.n	80060d0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80060c2:	bf00      	nop
 80060c4:	e004      	b.n	80060d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80060c6:	bf00      	nop
 80060c8:	e002      	b.n	80060d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80060ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80060d0:	37e8      	adds	r7, #232	; 0xe8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop

080060d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800612c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006130:	b08a      	sub	sp, #40	; 0x28
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	431a      	orrs	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	431a      	orrs	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	4313      	orrs	r3, r2
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4b9e      	ldr	r3, [pc, #632]	; (80063d4 <UART_SetConfig+0x2a8>)
 800615c:	4013      	ands	r3, r2
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006164:	430b      	orrs	r3, r1
 8006166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a93      	ldr	r2, [pc, #588]	; (80063d8 <UART_SetConfig+0x2ac>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006194:	4313      	orrs	r3, r2
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a8:	430a      	orrs	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a8a      	ldr	r2, [pc, #552]	; (80063dc <UART_SetConfig+0x2b0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d126      	bne.n	8006204 <UART_SetConfig+0xd8>
 80061b6:	4b8a      	ldr	r3, [pc, #552]	; (80063e0 <UART_SetConfig+0x2b4>)
 80061b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d81b      	bhi.n	80061fc <UART_SetConfig+0xd0>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <UART_SetConfig+0xa0>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061ed 	.word	0x080061ed
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061f5 	.word	0x080061f5
 80061dc:	2301      	movs	r3, #1
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e2:	e0ab      	b.n	800633c <UART_SetConfig+0x210>
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ea:	e0a7      	b.n	800633c <UART_SetConfig+0x210>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f2:	e0a3      	b.n	800633c <UART_SetConfig+0x210>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fa:	e09f      	b.n	800633c <UART_SetConfig+0x210>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006202:	e09b      	b.n	800633c <UART_SetConfig+0x210>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a76      	ldr	r2, [pc, #472]	; (80063e4 <UART_SetConfig+0x2b8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d138      	bne.n	8006280 <UART_SetConfig+0x154>
 800620e:	4b74      	ldr	r3, [pc, #464]	; (80063e0 <UART_SetConfig+0x2b4>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d82d      	bhi.n	8006278 <UART_SetConfig+0x14c>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0xf8>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006259 	.word	0x08006259
 8006228:	08006279 	.word	0x08006279
 800622c:	08006279 	.word	0x08006279
 8006230:	08006279 	.word	0x08006279
 8006234:	08006269 	.word	0x08006269
 8006238:	08006279 	.word	0x08006279
 800623c:	08006279 	.word	0x08006279
 8006240:	08006279 	.word	0x08006279
 8006244:	08006261 	.word	0x08006261
 8006248:	08006279 	.word	0x08006279
 800624c:	08006279 	.word	0x08006279
 8006250:	08006279 	.word	0x08006279
 8006254:	08006271 	.word	0x08006271
 8006258:	2300      	movs	r3, #0
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625e:	e06d      	b.n	800633c <UART_SetConfig+0x210>
 8006260:	2302      	movs	r3, #2
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006266:	e069      	b.n	800633c <UART_SetConfig+0x210>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626e:	e065      	b.n	800633c <UART_SetConfig+0x210>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006276:	e061      	b.n	800633c <UART_SetConfig+0x210>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627e:	e05d      	b.n	800633c <UART_SetConfig+0x210>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a58      	ldr	r2, [pc, #352]	; (80063e8 <UART_SetConfig+0x2bc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d125      	bne.n	80062d6 <UART_SetConfig+0x1aa>
 800628a:	4b55      	ldr	r3, [pc, #340]	; (80063e0 <UART_SetConfig+0x2b4>)
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006290:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006294:	2b30      	cmp	r3, #48	; 0x30
 8006296:	d016      	beq.n	80062c6 <UART_SetConfig+0x19a>
 8006298:	2b30      	cmp	r3, #48	; 0x30
 800629a:	d818      	bhi.n	80062ce <UART_SetConfig+0x1a2>
 800629c:	2b20      	cmp	r3, #32
 800629e:	d00a      	beq.n	80062b6 <UART_SetConfig+0x18a>
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d814      	bhi.n	80062ce <UART_SetConfig+0x1a2>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <UART_SetConfig+0x182>
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d008      	beq.n	80062be <UART_SetConfig+0x192>
 80062ac:	e00f      	b.n	80062ce <UART_SetConfig+0x1a2>
 80062ae:	2300      	movs	r3, #0
 80062b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b4:	e042      	b.n	800633c <UART_SetConfig+0x210>
 80062b6:	2302      	movs	r3, #2
 80062b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062bc:	e03e      	b.n	800633c <UART_SetConfig+0x210>
 80062be:	2304      	movs	r3, #4
 80062c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c4:	e03a      	b.n	800633c <UART_SetConfig+0x210>
 80062c6:	2308      	movs	r3, #8
 80062c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062cc:	e036      	b.n	800633c <UART_SetConfig+0x210>
 80062ce:	2310      	movs	r3, #16
 80062d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d4:	e032      	b.n	800633c <UART_SetConfig+0x210>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a3f      	ldr	r2, [pc, #252]	; (80063d8 <UART_SetConfig+0x2ac>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d12a      	bne.n	8006336 <UART_SetConfig+0x20a>
 80062e0:	4b3f      	ldr	r3, [pc, #252]	; (80063e0 <UART_SetConfig+0x2b4>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062ee:	d01a      	beq.n	8006326 <UART_SetConfig+0x1fa>
 80062f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062f4:	d81b      	bhi.n	800632e <UART_SetConfig+0x202>
 80062f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fa:	d00c      	beq.n	8006316 <UART_SetConfig+0x1ea>
 80062fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006300:	d815      	bhi.n	800632e <UART_SetConfig+0x202>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <UART_SetConfig+0x1e2>
 8006306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630a:	d008      	beq.n	800631e <UART_SetConfig+0x1f2>
 800630c:	e00f      	b.n	800632e <UART_SetConfig+0x202>
 800630e:	2300      	movs	r3, #0
 8006310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006314:	e012      	b.n	800633c <UART_SetConfig+0x210>
 8006316:	2302      	movs	r3, #2
 8006318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631c:	e00e      	b.n	800633c <UART_SetConfig+0x210>
 800631e:	2304      	movs	r3, #4
 8006320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006324:	e00a      	b.n	800633c <UART_SetConfig+0x210>
 8006326:	2308      	movs	r3, #8
 8006328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632c:	e006      	b.n	800633c <UART_SetConfig+0x210>
 800632e:	2310      	movs	r3, #16
 8006330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006334:	e002      	b.n	800633c <UART_SetConfig+0x210>
 8006336:	2310      	movs	r3, #16
 8006338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a25      	ldr	r2, [pc, #148]	; (80063d8 <UART_SetConfig+0x2ac>)
 8006342:	4293      	cmp	r3, r2
 8006344:	f040 808a 	bne.w	800645c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800634c:	2b08      	cmp	r3, #8
 800634e:	d824      	bhi.n	800639a <UART_SetConfig+0x26e>
 8006350:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <UART_SetConfig+0x22c>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	0800637d 	.word	0x0800637d
 800635c:	0800639b 	.word	0x0800639b
 8006360:	08006385 	.word	0x08006385
 8006364:	0800639b 	.word	0x0800639b
 8006368:	0800638b 	.word	0x0800638b
 800636c:	0800639b 	.word	0x0800639b
 8006370:	0800639b 	.word	0x0800639b
 8006374:	0800639b 	.word	0x0800639b
 8006378:	08006393 	.word	0x08006393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800637c:	f7fd ffea 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 8006380:	61f8      	str	r0, [r7, #28]
        break;
 8006382:	e010      	b.n	80063a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006384:	4b19      	ldr	r3, [pc, #100]	; (80063ec <UART_SetConfig+0x2c0>)
 8006386:	61fb      	str	r3, [r7, #28]
        break;
 8006388:	e00d      	b.n	80063a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800638a:	f7fd ff4b 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 800638e:	61f8      	str	r0, [r7, #28]
        break;
 8006390:	e009      	b.n	80063a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006396:	61fb      	str	r3, [r7, #28]
        break;
 8006398:	e005      	b.n	80063a6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 8109 	beq.w	80065c0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d305      	bcc.n	80063ca <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d912      	bls.n	80063f0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063d0:	e0f6      	b.n	80065c0 <UART_SetConfig+0x494>
 80063d2:	bf00      	nop
 80063d4:	efff69f3 	.word	0xefff69f3
 80063d8:	40008000 	.word	0x40008000
 80063dc:	40013800 	.word	0x40013800
 80063e0:	40021000 	.word	0x40021000
 80063e4:	40004400 	.word	0x40004400
 80063e8:	40004800 	.word	0x40004800
 80063ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	2200      	movs	r2, #0
 80063f4:	461c      	mov	r4, r3
 80063f6:	4615      	mov	r5, r2
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	022b      	lsls	r3, r5, #8
 8006402:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006406:	0222      	lsls	r2, r4, #8
 8006408:	68f9      	ldr	r1, [r7, #12]
 800640a:	6849      	ldr	r1, [r1, #4]
 800640c:	0849      	lsrs	r1, r1, #1
 800640e:	2000      	movs	r0, #0
 8006410:	4688      	mov	r8, r1
 8006412:	4681      	mov	r9, r0
 8006414:	eb12 0a08 	adds.w	sl, r2, r8
 8006418:	eb43 0b09 	adc.w	fp, r3, r9
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	607a      	str	r2, [r7, #4]
 8006426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642a:	4650      	mov	r0, sl
 800642c:	4659      	mov	r1, fp
 800642e:	f7f9 ff1f 	bl	8000270 <__aeabi_uldivmod>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4613      	mov	r3, r2
 8006438:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006440:	d308      	bcc.n	8006454 <UART_SetConfig+0x328>
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006448:	d204      	bcs.n	8006454 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	60da      	str	r2, [r3, #12]
 8006452:	e0b5      	b.n	80065c0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800645a:	e0b1      	b.n	80065c0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006464:	d15d      	bne.n	8006522 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006466:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800646a:	2b08      	cmp	r3, #8
 800646c:	d827      	bhi.n	80064be <UART_SetConfig+0x392>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <UART_SetConfig+0x348>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006499 	.word	0x08006499
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a9 	.word	0x080064a9
 8006480:	080064bf 	.word	0x080064bf
 8006484:	080064af 	.word	0x080064af
 8006488:	080064bf 	.word	0x080064bf
 800648c:	080064bf 	.word	0x080064bf
 8006490:	080064bf 	.word	0x080064bf
 8006494:	080064b7 	.word	0x080064b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006498:	f7fd ff5c 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 800649c:	61f8      	str	r0, [r7, #28]
        break;
 800649e:	e014      	b.n	80064ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a0:	f7fd ff6e 	bl	8004380 <HAL_RCC_GetPCLK2Freq>
 80064a4:	61f8      	str	r0, [r7, #28]
        break;
 80064a6:	e010      	b.n	80064ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a8:	4b4c      	ldr	r3, [pc, #304]	; (80065dc <UART_SetConfig+0x4b0>)
 80064aa:	61fb      	str	r3, [r7, #28]
        break;
 80064ac:	e00d      	b.n	80064ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ae:	f7fd feb9 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 80064b2:	61f8      	str	r0, [r7, #28]
        break;
 80064b4:	e009      	b.n	80064ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ba:	61fb      	str	r3, [r7, #28]
        break;
 80064bc:	e005      	b.n	80064ca <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d077      	beq.n	80065c0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	005a      	lsls	r2, r3, #1
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	441a      	add	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b0f      	cmp	r3, #15
 80064ea:	d916      	bls.n	800651a <UART_SetConfig+0x3ee>
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f2:	d212      	bcs.n	800651a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f023 030f 	bic.w	r3, r3, #15
 80064fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	b29b      	uxth	r3, r3
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	b29a      	uxth	r2, r3
 800650a:	8afb      	ldrh	r3, [r7, #22]
 800650c:	4313      	orrs	r3, r2
 800650e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	8afa      	ldrh	r2, [r7, #22]
 8006516:	60da      	str	r2, [r3, #12]
 8006518:	e052      	b.n	80065c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006520:	e04e      	b.n	80065c0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006526:	2b08      	cmp	r3, #8
 8006528:	d827      	bhi.n	800657a <UART_SetConfig+0x44e>
 800652a:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x404>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006555 	.word	0x08006555
 8006534:	0800655d 	.word	0x0800655d
 8006538:	08006565 	.word	0x08006565
 800653c:	0800657b 	.word	0x0800657b
 8006540:	0800656b 	.word	0x0800656b
 8006544:	0800657b 	.word	0x0800657b
 8006548:	0800657b 	.word	0x0800657b
 800654c:	0800657b 	.word	0x0800657b
 8006550:	08006573 	.word	0x08006573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006554:	f7fd fefe 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 8006558:	61f8      	str	r0, [r7, #28]
        break;
 800655a:	e014      	b.n	8006586 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800655c:	f7fd ff10 	bl	8004380 <HAL_RCC_GetPCLK2Freq>
 8006560:	61f8      	str	r0, [r7, #28]
        break;
 8006562:	e010      	b.n	8006586 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006564:	4b1d      	ldr	r3, [pc, #116]	; (80065dc <UART_SetConfig+0x4b0>)
 8006566:	61fb      	str	r3, [r7, #28]
        break;
 8006568:	e00d      	b.n	8006586 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800656a:	f7fd fe5b 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 800656e:	61f8      	str	r0, [r7, #28]
        break;
 8006570:	e009      	b.n	8006586 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006576:	61fb      	str	r3, [r7, #28]
        break;
 8006578:	e005      	b.n	8006586 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006584:	bf00      	nop
    }

    if (pclk != 0U)
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d019      	beq.n	80065c0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	085a      	lsrs	r2, r3, #1
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	441a      	add	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	fbb2 f3f3 	udiv	r3, r2, r3
 800659e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b0f      	cmp	r3, #15
 80065a4:	d909      	bls.n	80065ba <UART_SetConfig+0x48e>
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ac:	d205      	bcs.n	80065ba <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60da      	str	r2, [r3, #12]
 80065b8:	e002      	b.n	80065c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3728      	adds	r7, #40	; 0x28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065da:	bf00      	nop
 80065dc:	00f42400 	.word	0x00f42400

080065e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00a      	beq.n	800664e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01a      	beq.n	80066f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066de:	d10a      	bne.n	80066f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	605a      	str	r2, [r3, #4]
  }
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af02      	add	r7, sp, #8
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006734:	f7fc fc4e 	bl	8002fd4 <HAL_GetTick>
 8006738:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b08      	cmp	r3, #8
 8006746:	d10e      	bne.n	8006766 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f82d 	bl	80067b6 <UART_WaitOnFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e023      	b.n	80067ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b04      	cmp	r3, #4
 8006772:	d10e      	bne.n	8006792 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f817 	bl	80067b6 <UART_WaitOnFlagUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e00d      	b.n	80067ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b09c      	sub	sp, #112	; 0x70
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	603b      	str	r3, [r7, #0]
 80067c2:	4613      	mov	r3, r2
 80067c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c6:	e0a5      	b.n	8006914 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ce:	f000 80a1 	beq.w	8006914 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d2:	f7fc fbff 	bl	8002fd4 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067de:	429a      	cmp	r2, r3
 80067e0:	d302      	bcc.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80067e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d13e      	bne.n	8006866 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067fc:	667b      	str	r3, [r7, #100]	; 0x64
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006808:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800680c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e6      	bne.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	f023 0301 	bic.w	r3, r3, #1
 8006830:	663b      	str	r3, [r7, #96]	; 0x60
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3308      	adds	r3, #8
 8006838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800683a:	64ba      	str	r2, [r7, #72]	; 0x48
 800683c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2220      	movs	r2, #32
 8006852:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e067      	b.n	8006936 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d04f      	beq.n	8006914 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800687e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006882:	d147      	bne.n	8006914 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800688c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
 80068ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e6      	bne.n	800688e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3308      	adds	r3, #8
 80068c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	613b      	str	r3, [r7, #16]
   return(result);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f023 0301 	bic.w	r3, r3, #1
 80068d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068e0:	623a      	str	r2, [r7, #32]
 80068e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	69f9      	ldr	r1, [r7, #28]
 80068e6:	6a3a      	ldr	r2, [r7, #32]
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e5      	bne.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e010      	b.n	8006936 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69da      	ldr	r2, [r3, #28]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4013      	ands	r3, r2
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	429a      	cmp	r2, r3
 8006922:	bf0c      	ite	eq
 8006924:	2301      	moveq	r3, #1
 8006926:	2300      	movne	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	461a      	mov	r2, r3
 800692c:	79fb      	ldrb	r3, [r7, #7]
 800692e:	429a      	cmp	r2, r3
 8006930:	f43f af4a 	beq.w	80067c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3770      	adds	r7, #112	; 0x70
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006940:	b480      	push	{r7}
 8006942:	b097      	sub	sp, #92	; 0x5c
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	4613      	mov	r3, r2
 800694c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	88fa      	ldrh	r2, [r7, #6]
 8006960:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006972:	d10e      	bne.n	8006992 <UART_Start_Receive_IT+0x52>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <UART_Start_Receive_IT+0x48>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006986:	e02d      	b.n	80069e4 <UART_Start_Receive_IT+0xa4>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	22ff      	movs	r2, #255	; 0xff
 800698c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006990:	e028      	b.n	80069e4 <UART_Start_Receive_IT+0xa4>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10d      	bne.n	80069b6 <UART_Start_Receive_IT+0x76>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d104      	bne.n	80069ac <UART_Start_Receive_IT+0x6c>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	22ff      	movs	r2, #255	; 0xff
 80069a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069aa:	e01b      	b.n	80069e4 <UART_Start_Receive_IT+0xa4>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	227f      	movs	r2, #127	; 0x7f
 80069b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069b4:	e016      	b.n	80069e4 <UART_Start_Receive_IT+0xa4>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069be:	d10d      	bne.n	80069dc <UART_Start_Receive_IT+0x9c>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <UART_Start_Receive_IT+0x92>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	227f      	movs	r2, #127	; 0x7f
 80069cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069d0:	e008      	b.n	80069e4 <UART_Start_Receive_IT+0xa4>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	223f      	movs	r2, #63	; 0x3f
 80069d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069da:	e003      	b.n	80069e4 <UART_Start_Receive_IT+0xa4>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2222      	movs	r2, #34	; 0x22
 80069f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	657b      	str	r3, [r7, #84]	; 0x54
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a12:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e5      	bne.n	80069f2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2e:	d107      	bne.n	8006a40 <UART_Start_Receive_IT+0x100>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a24      	ldr	r2, [pc, #144]	; (8006acc <UART_Start_Receive_IT+0x18c>)
 8006a3c:	665a      	str	r2, [r3, #100]	; 0x64
 8006a3e:	e002      	b.n	8006a46 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a23      	ldr	r2, [pc, #140]	; (8006ad0 <UART_Start_Receive_IT+0x190>)
 8006a44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d019      	beq.n	8006a8a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
 8006a76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e6      	bne.n	8006a56 <UART_Start_Receive_IT+0x116>
 8006a88:	e018      	b.n	8006abc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	613b      	str	r3, [r7, #16]
   return(result);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f043 0320 	orr.w	r3, r3, #32
 8006a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa8:	623b      	str	r3, [r7, #32]
 8006aaa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	69f9      	ldr	r1, [r7, #28]
 8006aae:	6a3a      	ldr	r2, [r7, #32]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	375c      	adds	r7, #92	; 0x5c
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	08006fdb 	.word	0x08006fdb
 8006ad0:	08006e7b 	.word	0x08006e7b

08006ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b095      	sub	sp, #84	; 0x54
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006af0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afa:	643b      	str	r3, [r7, #64]	; 0x40
 8006afc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e6      	bne.n	8006adc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e5      	bne.n	8006b0e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d118      	bne.n	8006b7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f023 0310 	bic.w	r3, r3, #16
 8006b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6979      	ldr	r1, [r7, #20]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	613b      	str	r3, [r7, #16]
   return(result);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e6      	bne.n	8006b4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006b8e:	bf00      	nop
 8006b90:	3754      	adds	r7, #84	; 0x54
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7ff fa97 	bl	80060ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bbe:	bf00      	nop
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd8:	2200      	movs	r2, #0
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d11c      	bne.n	8006c28 <UART_DMATxAbortCallback+0x62>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	220f      	movs	r2, #15
 8006c0c:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fa6d 	bl	8006100 <HAL_UART_AbortCpltCallback>
 8006c26:	e000      	b.n	8006c2a <UART_DMATxAbortCallback+0x64>
      return;
 8006c28:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c42:	2200      	movs	r2, #0
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d126      	bne.n	8006ca6 <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	220f      	movs	r2, #15
 8006c76:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	8b1b      	ldrh	r3, [r3, #24]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f042 0208 	orr.w	r2, r2, #8
 8006c88:	b292      	uxth	r2, r2
 8006c8a:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2220      	movs	r2, #32
 8006c96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff fa2e 	bl	8006100 <HAL_UART_AbortCpltCallback>
 8006ca4:	e000      	b.n	8006ca8 <UART_DMARxAbortCallback+0x78>
      return;
 8006ca6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b08f      	sub	sp, #60	; 0x3c
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cba:	2b21      	cmp	r3, #33	; 0x21
 8006cbc:	d14d      	bne.n	8006d5a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d132      	bne.n	8006d30 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e6      	bne.n	8006cca <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d10:	633b      	str	r3, [r7, #48]	; 0x30
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6979      	ldr	r1, [r7, #20]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	613b      	str	r3, [r7, #16]
   return(result);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e6      	bne.n	8006cfc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006d2e:	e014      	b.n	8006d5a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d34:	781a      	ldrb	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	b292      	uxth	r2, r2
 8006d3c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006d5a:	bf00      	nop
 8006d5c:	373c      	adds	r7, #60	; 0x3c
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b091      	sub	sp, #68	; 0x44
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d72:	2b21      	cmp	r3, #33	; 0x21
 8006d74:	d151      	bne.n	8006e1a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d132      	bne.n	8006de8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	633b      	str	r3, [r7, #48]	; 0x30
 8006da2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e6      	bne.n	8006d82 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	69b9      	ldr	r1, [r7, #24]
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	617b      	str	r3, [r7, #20]
   return(result);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e6      	bne.n	8006db4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006de6:	e018      	b.n	8006e1a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df0:	881a      	ldrh	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dfa:	b292      	uxth	r2, r2
 8006dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	1c9a      	adds	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e1a:	bf00      	nop
 8006e1c:	3744      	adds	r7, #68	; 0x44
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b088      	sub	sp, #32
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6979      	ldr	r1, [r7, #20]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e6      	bne.n	8006e2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff f933 	bl	80060d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e72:	bf00      	nop
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b096      	sub	sp, #88	; 0x58
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e90:	2b22      	cmp	r3, #34	; 0x22
 8006e92:	f040 8094 	bne.w	8006fbe <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e9c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ea0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ea4:	b2d9      	uxtb	r1, r3
 8006ea6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb0:	400a      	ands	r2, r1
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d179      	bne.n	8006fd2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efc:	647b      	str	r3, [r7, #68]	; 0x44
 8006efe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e6      	bne.n	8006ede <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f30:	633a      	str	r2, [r7, #48]	; 0x30
 8006f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2220      	movs	r2, #32
 8006f48:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d12e      	bne.n	8006fb6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0310 	bic.w	r3, r3, #16
 8006f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	69b9      	ldr	r1, [r7, #24]
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	617b      	str	r3, [r7, #20]
   return(result);
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e6      	bne.n	8006f5e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f003 0310 	and.w	r3, r3, #16
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d103      	bne.n	8006fa6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2210      	movs	r2, #16
 8006fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff f8b0 	bl	8006114 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fb4:	e00d      	b.n	8006fd2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fa f8bc 	bl	8001134 <HAL_UART_RxCpltCallback>
}
 8006fbc:	e009      	b.n	8006fd2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	8b1b      	ldrh	r3, [r3, #24]
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0208 	orr.w	r2, r2, #8
 8006fce:	b292      	uxth	r2, r2
 8006fd0:	831a      	strh	r2, [r3, #24]
}
 8006fd2:	bf00      	nop
 8006fd4:	3758      	adds	r7, #88	; 0x58
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b096      	sub	sp, #88	; 0x58
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fe8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff0:	2b22      	cmp	r3, #34	; 0x22
 8006ff2:	f040 8094 	bne.w	800711e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ffc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007004:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007006:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800700a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800700e:	4013      	ands	r3, r2
 8007010:	b29a      	uxth	r2, r3
 8007012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007014:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701a:	1c9a      	adds	r2, r3, #2
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d179      	bne.n	8007132 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800705c:	643b      	str	r3, [r7, #64]	; 0x40
 800705e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e6      	bne.n	800703e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3308      	adds	r3, #8
 8007076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	f023 0301 	bic.w	r3, r3, #1
 8007086:	64bb      	str	r3, [r7, #72]	; 0x48
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3308      	adds	r3, #8
 800708e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007090:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e5      	bne.n	8007070 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d12e      	bne.n	8007116 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	e853 3f00 	ldrex	r3, [r3]
 80070ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f023 0310 	bic.w	r3, r3, #16
 80070d2:	647b      	str	r3, [r7, #68]	; 0x44
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070dc:	61bb      	str	r3, [r7, #24]
 80070de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e0:	6979      	ldr	r1, [r7, #20]
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	e841 2300 	strex	r3, r2, [r1]
 80070e8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1e6      	bne.n	80070be <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d103      	bne.n	8007106 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2210      	movs	r2, #16
 8007104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff f800 	bl	8006114 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007114:	e00d      	b.n	8007132 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fa f80c 	bl	8001134 <HAL_UART_RxCpltCallback>
}
 800711c:	e009      	b.n	8007132 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	8b1b      	ldrh	r3, [r3, #24]
 8007124:	b29a      	uxth	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0208 	orr.w	r2, r2, #8
 800712e:	b292      	uxth	r2, r2
 8007130:	831a      	strh	r2, [r3, #24]
}
 8007132:	bf00      	nop
 8007134:	3758      	adds	r7, #88	; 0x58
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007154:	4904      	ldr	r1, [pc, #16]	; (8007168 <MX_FATFS_Init+0x18>)
 8007156:	4805      	ldr	r0, [pc, #20]	; (800716c <MX_FATFS_Init+0x1c>)
 8007158:	f000 f8ae 	bl	80072b8 <FATFS_LinkDriver>
 800715c:	4603      	mov	r3, r0
 800715e:	461a      	mov	r2, r3
 8007160:	4b03      	ldr	r3, [pc, #12]	; (8007170 <MX_FATFS_Init+0x20>)
 8007162:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007164:	bf00      	nop
 8007166:	bd80      	pop	{r7, pc}
 8007168:	200004b0 	.word	0x200004b0
 800716c:	20000010 	.word	0x20000010
 8007170:	200004ac 	.word	0x200004ac

08007174 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	4618      	mov	r0, r3
 8007182:	f7fb fb61 	bl	8002848 <SD_disk_initialize>
 8007186:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	4618      	mov	r0, r3
 800719e:	f7fb fc57 	bl	8002a50 <SD_disk_status>
 80071a2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80071bc:	7bf8      	ldrb	r0, [r7, #15]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	f7fb fc5a 	bl	8002a7c <SD_disk_read>
 80071c8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80071e2:	7bf8      	ldrb	r0, [r7, #15]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	f7fb fcb1 	bl	8002b50 <SD_disk_write>
 80071ee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	603a      	str	r2, [r7, #0]
 8007202:	71fb      	strb	r3, [r7, #7]
 8007204:	460b      	mov	r3, r1
 8007206:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8007208:	79b9      	ldrb	r1, [r7, #6]
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	4618      	mov	r0, r3
 8007210:	f7fb fd22 	bl	8002c58 <SD_disk_ioctl>
 8007214:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007236:	4b1f      	ldr	r3, [pc, #124]	; (80072b4 <FATFS_LinkDriverEx+0x94>)
 8007238:	7a5b      	ldrb	r3, [r3, #9]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d131      	bne.n	80072a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007240:	4b1c      	ldr	r3, [pc, #112]	; (80072b4 <FATFS_LinkDriverEx+0x94>)
 8007242:	7a5b      	ldrb	r3, [r3, #9]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	4b1a      	ldr	r3, [pc, #104]	; (80072b4 <FATFS_LinkDriverEx+0x94>)
 800724a:	2100      	movs	r1, #0
 800724c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800724e:	4b19      	ldr	r3, [pc, #100]	; (80072b4 <FATFS_LinkDriverEx+0x94>)
 8007250:	7a5b      	ldrb	r3, [r3, #9]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <FATFS_LinkDriverEx+0x94>)
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800725e:	4b15      	ldr	r3, [pc, #84]	; (80072b4 <FATFS_LinkDriverEx+0x94>)
 8007260:	7a5b      	ldrb	r3, [r3, #9]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <FATFS_LinkDriverEx+0x94>)
 8007268:	4413      	add	r3, r2
 800726a:	79fa      	ldrb	r2, [r7, #7]
 800726c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800726e:	4b11      	ldr	r3, [pc, #68]	; (80072b4 <FATFS_LinkDriverEx+0x94>)
 8007270:	7a5b      	ldrb	r3, [r3, #9]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	b2d1      	uxtb	r1, r2
 8007278:	4a0e      	ldr	r2, [pc, #56]	; (80072b4 <FATFS_LinkDriverEx+0x94>)
 800727a:	7251      	strb	r1, [r2, #9]
 800727c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800727e:	7dbb      	ldrb	r3, [r7, #22]
 8007280:	3330      	adds	r3, #48	; 0x30
 8007282:	b2da      	uxtb	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	3301      	adds	r3, #1
 800728c:	223a      	movs	r2, #58	; 0x3a
 800728e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	3302      	adds	r3, #2
 8007294:	222f      	movs	r2, #47	; 0x2f
 8007296:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	3303      	adds	r3, #3
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	200004b4 	.word	0x200004b4

080072b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80072c2:	2200      	movs	r2, #0
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff ffaa 	bl	8007220 <FATFS_LinkDriverEx>
 80072cc:	4603      	mov	r3, r0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <__errno>:
 80072d8:	4b01      	ldr	r3, [pc, #4]	; (80072e0 <__errno+0x8>)
 80072da:	6818      	ldr	r0, [r3, #0]
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20000024 	.word	0x20000024

080072e4 <__libc_init_array>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	4d0d      	ldr	r5, [pc, #52]	; (800731c <__libc_init_array+0x38>)
 80072e8:	4c0d      	ldr	r4, [pc, #52]	; (8007320 <__libc_init_array+0x3c>)
 80072ea:	1b64      	subs	r4, r4, r5
 80072ec:	10a4      	asrs	r4, r4, #2
 80072ee:	2600      	movs	r6, #0
 80072f0:	42a6      	cmp	r6, r4
 80072f2:	d109      	bne.n	8007308 <__libc_init_array+0x24>
 80072f4:	4d0b      	ldr	r5, [pc, #44]	; (8007324 <__libc_init_array+0x40>)
 80072f6:	4c0c      	ldr	r4, [pc, #48]	; (8007328 <__libc_init_array+0x44>)
 80072f8:	f001 f87c 	bl	80083f4 <_init>
 80072fc:	1b64      	subs	r4, r4, r5
 80072fe:	10a4      	asrs	r4, r4, #2
 8007300:	2600      	movs	r6, #0
 8007302:	42a6      	cmp	r6, r4
 8007304:	d105      	bne.n	8007312 <__libc_init_array+0x2e>
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	f855 3b04 	ldr.w	r3, [r5], #4
 800730c:	4798      	blx	r3
 800730e:	3601      	adds	r6, #1
 8007310:	e7ee      	b.n	80072f0 <__libc_init_array+0xc>
 8007312:	f855 3b04 	ldr.w	r3, [r5], #4
 8007316:	4798      	blx	r3
 8007318:	3601      	adds	r6, #1
 800731a:	e7f2      	b.n	8007302 <__libc_init_array+0x1e>
 800731c:	080087f0 	.word	0x080087f0
 8007320:	080087f0 	.word	0x080087f0
 8007324:	080087f0 	.word	0x080087f0
 8007328:	080087f4 	.word	0x080087f4

0800732c <malloc>:
 800732c:	4b02      	ldr	r3, [pc, #8]	; (8007338 <malloc+0xc>)
 800732e:	4601      	mov	r1, r0
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	f000 b877 	b.w	8007424 <_malloc_r>
 8007336:	bf00      	nop
 8007338:	20000024 	.word	0x20000024

0800733c <memset>:
 800733c:	4402      	add	r2, r0
 800733e:	4603      	mov	r3, r0
 8007340:	4293      	cmp	r3, r2
 8007342:	d100      	bne.n	8007346 <memset+0xa>
 8007344:	4770      	bx	lr
 8007346:	f803 1b01 	strb.w	r1, [r3], #1
 800734a:	e7f9      	b.n	8007340 <memset+0x4>

0800734c <_free_r>:
 800734c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800734e:	2900      	cmp	r1, #0
 8007350:	d044      	beq.n	80073dc <_free_r+0x90>
 8007352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007356:	9001      	str	r0, [sp, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f1a1 0404 	sub.w	r4, r1, #4
 800735e:	bfb8      	it	lt
 8007360:	18e4      	addlt	r4, r4, r3
 8007362:	f000 fca1 	bl	8007ca8 <__malloc_lock>
 8007366:	4a1e      	ldr	r2, [pc, #120]	; (80073e0 <_free_r+0x94>)
 8007368:	9801      	ldr	r0, [sp, #4]
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	b933      	cbnz	r3, 800737c <_free_r+0x30>
 800736e:	6063      	str	r3, [r4, #4]
 8007370:	6014      	str	r4, [r2, #0]
 8007372:	b003      	add	sp, #12
 8007374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007378:	f000 bc9c 	b.w	8007cb4 <__malloc_unlock>
 800737c:	42a3      	cmp	r3, r4
 800737e:	d908      	bls.n	8007392 <_free_r+0x46>
 8007380:	6825      	ldr	r5, [r4, #0]
 8007382:	1961      	adds	r1, r4, r5
 8007384:	428b      	cmp	r3, r1
 8007386:	bf01      	itttt	eq
 8007388:	6819      	ldreq	r1, [r3, #0]
 800738a:	685b      	ldreq	r3, [r3, #4]
 800738c:	1949      	addeq	r1, r1, r5
 800738e:	6021      	streq	r1, [r4, #0]
 8007390:	e7ed      	b.n	800736e <_free_r+0x22>
 8007392:	461a      	mov	r2, r3
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	b10b      	cbz	r3, 800739c <_free_r+0x50>
 8007398:	42a3      	cmp	r3, r4
 800739a:	d9fa      	bls.n	8007392 <_free_r+0x46>
 800739c:	6811      	ldr	r1, [r2, #0]
 800739e:	1855      	adds	r5, r2, r1
 80073a0:	42a5      	cmp	r5, r4
 80073a2:	d10b      	bne.n	80073bc <_free_r+0x70>
 80073a4:	6824      	ldr	r4, [r4, #0]
 80073a6:	4421      	add	r1, r4
 80073a8:	1854      	adds	r4, r2, r1
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	6011      	str	r1, [r2, #0]
 80073ae:	d1e0      	bne.n	8007372 <_free_r+0x26>
 80073b0:	681c      	ldr	r4, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	6053      	str	r3, [r2, #4]
 80073b6:	4421      	add	r1, r4
 80073b8:	6011      	str	r1, [r2, #0]
 80073ba:	e7da      	b.n	8007372 <_free_r+0x26>
 80073bc:	d902      	bls.n	80073c4 <_free_r+0x78>
 80073be:	230c      	movs	r3, #12
 80073c0:	6003      	str	r3, [r0, #0]
 80073c2:	e7d6      	b.n	8007372 <_free_r+0x26>
 80073c4:	6825      	ldr	r5, [r4, #0]
 80073c6:	1961      	adds	r1, r4, r5
 80073c8:	428b      	cmp	r3, r1
 80073ca:	bf04      	itt	eq
 80073cc:	6819      	ldreq	r1, [r3, #0]
 80073ce:	685b      	ldreq	r3, [r3, #4]
 80073d0:	6063      	str	r3, [r4, #4]
 80073d2:	bf04      	itt	eq
 80073d4:	1949      	addeq	r1, r1, r5
 80073d6:	6021      	streq	r1, [r4, #0]
 80073d8:	6054      	str	r4, [r2, #4]
 80073da:	e7ca      	b.n	8007372 <_free_r+0x26>
 80073dc:	b003      	add	sp, #12
 80073de:	bd30      	pop	{r4, r5, pc}
 80073e0:	200004c0 	.word	0x200004c0

080073e4 <sbrk_aligned>:
 80073e4:	b570      	push	{r4, r5, r6, lr}
 80073e6:	4e0e      	ldr	r6, [pc, #56]	; (8007420 <sbrk_aligned+0x3c>)
 80073e8:	460c      	mov	r4, r1
 80073ea:	6831      	ldr	r1, [r6, #0]
 80073ec:	4605      	mov	r5, r0
 80073ee:	b911      	cbnz	r1, 80073f6 <sbrk_aligned+0x12>
 80073f0:	f000 f8a4 	bl	800753c <_sbrk_r>
 80073f4:	6030      	str	r0, [r6, #0]
 80073f6:	4621      	mov	r1, r4
 80073f8:	4628      	mov	r0, r5
 80073fa:	f000 f89f 	bl	800753c <_sbrk_r>
 80073fe:	1c43      	adds	r3, r0, #1
 8007400:	d00a      	beq.n	8007418 <sbrk_aligned+0x34>
 8007402:	1cc4      	adds	r4, r0, #3
 8007404:	f024 0403 	bic.w	r4, r4, #3
 8007408:	42a0      	cmp	r0, r4
 800740a:	d007      	beq.n	800741c <sbrk_aligned+0x38>
 800740c:	1a21      	subs	r1, r4, r0
 800740e:	4628      	mov	r0, r5
 8007410:	f000 f894 	bl	800753c <_sbrk_r>
 8007414:	3001      	adds	r0, #1
 8007416:	d101      	bne.n	800741c <sbrk_aligned+0x38>
 8007418:	f04f 34ff 	mov.w	r4, #4294967295
 800741c:	4620      	mov	r0, r4
 800741e:	bd70      	pop	{r4, r5, r6, pc}
 8007420:	200004c4 	.word	0x200004c4

08007424 <_malloc_r>:
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	1ccd      	adds	r5, r1, #3
 800742a:	f025 0503 	bic.w	r5, r5, #3
 800742e:	3508      	adds	r5, #8
 8007430:	2d0c      	cmp	r5, #12
 8007432:	bf38      	it	cc
 8007434:	250c      	movcc	r5, #12
 8007436:	2d00      	cmp	r5, #0
 8007438:	4607      	mov	r7, r0
 800743a:	db01      	blt.n	8007440 <_malloc_r+0x1c>
 800743c:	42a9      	cmp	r1, r5
 800743e:	d905      	bls.n	800744c <_malloc_r+0x28>
 8007440:	230c      	movs	r3, #12
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	2600      	movs	r6, #0
 8007446:	4630      	mov	r0, r6
 8007448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800744c:	4e2e      	ldr	r6, [pc, #184]	; (8007508 <_malloc_r+0xe4>)
 800744e:	f000 fc2b 	bl	8007ca8 <__malloc_lock>
 8007452:	6833      	ldr	r3, [r6, #0]
 8007454:	461c      	mov	r4, r3
 8007456:	bb34      	cbnz	r4, 80074a6 <_malloc_r+0x82>
 8007458:	4629      	mov	r1, r5
 800745a:	4638      	mov	r0, r7
 800745c:	f7ff ffc2 	bl	80073e4 <sbrk_aligned>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	4604      	mov	r4, r0
 8007464:	d14d      	bne.n	8007502 <_malloc_r+0xde>
 8007466:	6834      	ldr	r4, [r6, #0]
 8007468:	4626      	mov	r6, r4
 800746a:	2e00      	cmp	r6, #0
 800746c:	d140      	bne.n	80074f0 <_malloc_r+0xcc>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	4631      	mov	r1, r6
 8007472:	4638      	mov	r0, r7
 8007474:	eb04 0803 	add.w	r8, r4, r3
 8007478:	f000 f860 	bl	800753c <_sbrk_r>
 800747c:	4580      	cmp	r8, r0
 800747e:	d13a      	bne.n	80074f6 <_malloc_r+0xd2>
 8007480:	6821      	ldr	r1, [r4, #0]
 8007482:	3503      	adds	r5, #3
 8007484:	1a6d      	subs	r5, r5, r1
 8007486:	f025 0503 	bic.w	r5, r5, #3
 800748a:	3508      	adds	r5, #8
 800748c:	2d0c      	cmp	r5, #12
 800748e:	bf38      	it	cc
 8007490:	250c      	movcc	r5, #12
 8007492:	4629      	mov	r1, r5
 8007494:	4638      	mov	r0, r7
 8007496:	f7ff ffa5 	bl	80073e4 <sbrk_aligned>
 800749a:	3001      	adds	r0, #1
 800749c:	d02b      	beq.n	80074f6 <_malloc_r+0xd2>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	442b      	add	r3, r5
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	e00e      	b.n	80074c4 <_malloc_r+0xa0>
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	1b52      	subs	r2, r2, r5
 80074aa:	d41e      	bmi.n	80074ea <_malloc_r+0xc6>
 80074ac:	2a0b      	cmp	r2, #11
 80074ae:	d916      	bls.n	80074de <_malloc_r+0xba>
 80074b0:	1961      	adds	r1, r4, r5
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	6025      	str	r5, [r4, #0]
 80074b6:	bf18      	it	ne
 80074b8:	6059      	strne	r1, [r3, #4]
 80074ba:	6863      	ldr	r3, [r4, #4]
 80074bc:	bf08      	it	eq
 80074be:	6031      	streq	r1, [r6, #0]
 80074c0:	5162      	str	r2, [r4, r5]
 80074c2:	604b      	str	r3, [r1, #4]
 80074c4:	4638      	mov	r0, r7
 80074c6:	f104 060b 	add.w	r6, r4, #11
 80074ca:	f000 fbf3 	bl	8007cb4 <__malloc_unlock>
 80074ce:	f026 0607 	bic.w	r6, r6, #7
 80074d2:	1d23      	adds	r3, r4, #4
 80074d4:	1af2      	subs	r2, r6, r3
 80074d6:	d0b6      	beq.n	8007446 <_malloc_r+0x22>
 80074d8:	1b9b      	subs	r3, r3, r6
 80074da:	50a3      	str	r3, [r4, r2]
 80074dc:	e7b3      	b.n	8007446 <_malloc_r+0x22>
 80074de:	6862      	ldr	r2, [r4, #4]
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	bf0c      	ite	eq
 80074e4:	6032      	streq	r2, [r6, #0]
 80074e6:	605a      	strne	r2, [r3, #4]
 80074e8:	e7ec      	b.n	80074c4 <_malloc_r+0xa0>
 80074ea:	4623      	mov	r3, r4
 80074ec:	6864      	ldr	r4, [r4, #4]
 80074ee:	e7b2      	b.n	8007456 <_malloc_r+0x32>
 80074f0:	4634      	mov	r4, r6
 80074f2:	6876      	ldr	r6, [r6, #4]
 80074f4:	e7b9      	b.n	800746a <_malloc_r+0x46>
 80074f6:	230c      	movs	r3, #12
 80074f8:	603b      	str	r3, [r7, #0]
 80074fa:	4638      	mov	r0, r7
 80074fc:	f000 fbda 	bl	8007cb4 <__malloc_unlock>
 8007500:	e7a1      	b.n	8007446 <_malloc_r+0x22>
 8007502:	6025      	str	r5, [r4, #0]
 8007504:	e7de      	b.n	80074c4 <_malloc_r+0xa0>
 8007506:	bf00      	nop
 8007508:	200004c0 	.word	0x200004c0

0800750c <iprintf>:
 800750c:	b40f      	push	{r0, r1, r2, r3}
 800750e:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <iprintf+0x2c>)
 8007510:	b513      	push	{r0, r1, r4, lr}
 8007512:	681c      	ldr	r4, [r3, #0]
 8007514:	b124      	cbz	r4, 8007520 <iprintf+0x14>
 8007516:	69a3      	ldr	r3, [r4, #24]
 8007518:	b913      	cbnz	r3, 8007520 <iprintf+0x14>
 800751a:	4620      	mov	r0, r4
 800751c:	f000 fabe 	bl	8007a9c <__sinit>
 8007520:	ab05      	add	r3, sp, #20
 8007522:	9a04      	ldr	r2, [sp, #16]
 8007524:	68a1      	ldr	r1, [r4, #8]
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	4620      	mov	r0, r4
 800752a:	f000 fbf3 	bl	8007d14 <_vfiprintf_r>
 800752e:	b002      	add	sp, #8
 8007530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007534:	b004      	add	sp, #16
 8007536:	4770      	bx	lr
 8007538:	20000024 	.word	0x20000024

0800753c <_sbrk_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d06      	ldr	r5, [pc, #24]	; (8007558 <_sbrk_r+0x1c>)
 8007540:	2300      	movs	r3, #0
 8007542:	4604      	mov	r4, r0
 8007544:	4608      	mov	r0, r1
 8007546:	602b      	str	r3, [r5, #0]
 8007548:	f7fa f8c2 	bl	80016d0 <_sbrk>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d102      	bne.n	8007556 <_sbrk_r+0x1a>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	b103      	cbz	r3, 8007556 <_sbrk_r+0x1a>
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	bd38      	pop	{r3, r4, r5, pc}
 8007558:	200004cc 	.word	0x200004cc

0800755c <setvbuf>:
 800755c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007560:	461d      	mov	r5, r3
 8007562:	4b5d      	ldr	r3, [pc, #372]	; (80076d8 <setvbuf+0x17c>)
 8007564:	681f      	ldr	r7, [r3, #0]
 8007566:	4604      	mov	r4, r0
 8007568:	460e      	mov	r6, r1
 800756a:	4690      	mov	r8, r2
 800756c:	b127      	cbz	r7, 8007578 <setvbuf+0x1c>
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	b913      	cbnz	r3, 8007578 <setvbuf+0x1c>
 8007572:	4638      	mov	r0, r7
 8007574:	f000 fa92 	bl	8007a9c <__sinit>
 8007578:	4b58      	ldr	r3, [pc, #352]	; (80076dc <setvbuf+0x180>)
 800757a:	429c      	cmp	r4, r3
 800757c:	d167      	bne.n	800764e <setvbuf+0xf2>
 800757e:	687c      	ldr	r4, [r7, #4]
 8007580:	f1b8 0f02 	cmp.w	r8, #2
 8007584:	d006      	beq.n	8007594 <setvbuf+0x38>
 8007586:	f1b8 0f01 	cmp.w	r8, #1
 800758a:	f200 809f 	bhi.w	80076cc <setvbuf+0x170>
 800758e:	2d00      	cmp	r5, #0
 8007590:	f2c0 809c 	blt.w	80076cc <setvbuf+0x170>
 8007594:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007596:	07db      	lsls	r3, r3, #31
 8007598:	d405      	bmi.n	80075a6 <setvbuf+0x4a>
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	0598      	lsls	r0, r3, #22
 800759e:	d402      	bmi.n	80075a6 <setvbuf+0x4a>
 80075a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075a2:	f000 fb19 	bl	8007bd8 <__retarget_lock_acquire_recursive>
 80075a6:	4621      	mov	r1, r4
 80075a8:	4638      	mov	r0, r7
 80075aa:	f000 f9e3 	bl	8007974 <_fflush_r>
 80075ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075b0:	b141      	cbz	r1, 80075c4 <setvbuf+0x68>
 80075b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075b6:	4299      	cmp	r1, r3
 80075b8:	d002      	beq.n	80075c0 <setvbuf+0x64>
 80075ba:	4638      	mov	r0, r7
 80075bc:	f7ff fec6 	bl	800734c <_free_r>
 80075c0:	2300      	movs	r3, #0
 80075c2:	6363      	str	r3, [r4, #52]	; 0x34
 80075c4:	2300      	movs	r3, #0
 80075c6:	61a3      	str	r3, [r4, #24]
 80075c8:	6063      	str	r3, [r4, #4]
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	0619      	lsls	r1, r3, #24
 80075ce:	d503      	bpl.n	80075d8 <setvbuf+0x7c>
 80075d0:	6921      	ldr	r1, [r4, #16]
 80075d2:	4638      	mov	r0, r7
 80075d4:	f7ff feba 	bl	800734c <_free_r>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80075de:	f023 0303 	bic.w	r3, r3, #3
 80075e2:	f1b8 0f02 	cmp.w	r8, #2
 80075e6:	81a3      	strh	r3, [r4, #12]
 80075e8:	d06c      	beq.n	80076c4 <setvbuf+0x168>
 80075ea:	ab01      	add	r3, sp, #4
 80075ec:	466a      	mov	r2, sp
 80075ee:	4621      	mov	r1, r4
 80075f0:	4638      	mov	r0, r7
 80075f2:	f000 faf3 	bl	8007bdc <__swhatbuf_r>
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	4318      	orrs	r0, r3
 80075fa:	81a0      	strh	r0, [r4, #12]
 80075fc:	2d00      	cmp	r5, #0
 80075fe:	d130      	bne.n	8007662 <setvbuf+0x106>
 8007600:	9d00      	ldr	r5, [sp, #0]
 8007602:	4628      	mov	r0, r5
 8007604:	f7ff fe92 	bl	800732c <malloc>
 8007608:	4606      	mov	r6, r0
 800760a:	2800      	cmp	r0, #0
 800760c:	d155      	bne.n	80076ba <setvbuf+0x15e>
 800760e:	f8dd 9000 	ldr.w	r9, [sp]
 8007612:	45a9      	cmp	r9, r5
 8007614:	d14a      	bne.n	80076ac <setvbuf+0x150>
 8007616:	f04f 35ff 	mov.w	r5, #4294967295
 800761a:	2200      	movs	r2, #0
 800761c:	60a2      	str	r2, [r4, #8]
 800761e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007622:	6022      	str	r2, [r4, #0]
 8007624:	6122      	str	r2, [r4, #16]
 8007626:	2201      	movs	r2, #1
 8007628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800762c:	6162      	str	r2, [r4, #20]
 800762e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007630:	f043 0302 	orr.w	r3, r3, #2
 8007634:	07d2      	lsls	r2, r2, #31
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	d405      	bmi.n	8007646 <setvbuf+0xea>
 800763a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800763e:	d102      	bne.n	8007646 <setvbuf+0xea>
 8007640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007642:	f000 faca 	bl	8007bda <__retarget_lock_release_recursive>
 8007646:	4628      	mov	r0, r5
 8007648:	b003      	add	sp, #12
 800764a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800764e:	4b24      	ldr	r3, [pc, #144]	; (80076e0 <setvbuf+0x184>)
 8007650:	429c      	cmp	r4, r3
 8007652:	d101      	bne.n	8007658 <setvbuf+0xfc>
 8007654:	68bc      	ldr	r4, [r7, #8]
 8007656:	e793      	b.n	8007580 <setvbuf+0x24>
 8007658:	4b22      	ldr	r3, [pc, #136]	; (80076e4 <setvbuf+0x188>)
 800765a:	429c      	cmp	r4, r3
 800765c:	bf08      	it	eq
 800765e:	68fc      	ldreq	r4, [r7, #12]
 8007660:	e78e      	b.n	8007580 <setvbuf+0x24>
 8007662:	2e00      	cmp	r6, #0
 8007664:	d0cd      	beq.n	8007602 <setvbuf+0xa6>
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	b913      	cbnz	r3, 8007670 <setvbuf+0x114>
 800766a:	4638      	mov	r0, r7
 800766c:	f000 fa16 	bl	8007a9c <__sinit>
 8007670:	f1b8 0f01 	cmp.w	r8, #1
 8007674:	bf08      	it	eq
 8007676:	89a3      	ldrheq	r3, [r4, #12]
 8007678:	6026      	str	r6, [r4, #0]
 800767a:	bf04      	itt	eq
 800767c:	f043 0301 	orreq.w	r3, r3, #1
 8007680:	81a3      	strheq	r3, [r4, #12]
 8007682:	89a2      	ldrh	r2, [r4, #12]
 8007684:	f012 0308 	ands.w	r3, r2, #8
 8007688:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800768c:	d01c      	beq.n	80076c8 <setvbuf+0x16c>
 800768e:	07d3      	lsls	r3, r2, #31
 8007690:	bf41      	itttt	mi
 8007692:	2300      	movmi	r3, #0
 8007694:	426d      	negmi	r5, r5
 8007696:	60a3      	strmi	r3, [r4, #8]
 8007698:	61a5      	strmi	r5, [r4, #24]
 800769a:	bf58      	it	pl
 800769c:	60a5      	strpl	r5, [r4, #8]
 800769e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80076a0:	f015 0501 	ands.w	r5, r5, #1
 80076a4:	d115      	bne.n	80076d2 <setvbuf+0x176>
 80076a6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80076aa:	e7c8      	b.n	800763e <setvbuf+0xe2>
 80076ac:	4648      	mov	r0, r9
 80076ae:	f7ff fe3d 	bl	800732c <malloc>
 80076b2:	4606      	mov	r6, r0
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d0ae      	beq.n	8007616 <setvbuf+0xba>
 80076b8:	464d      	mov	r5, r9
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c0:	81a3      	strh	r3, [r4, #12]
 80076c2:	e7d0      	b.n	8007666 <setvbuf+0x10a>
 80076c4:	2500      	movs	r5, #0
 80076c6:	e7a8      	b.n	800761a <setvbuf+0xbe>
 80076c8:	60a3      	str	r3, [r4, #8]
 80076ca:	e7e8      	b.n	800769e <setvbuf+0x142>
 80076cc:	f04f 35ff 	mov.w	r5, #4294967295
 80076d0:	e7b9      	b.n	8007646 <setvbuf+0xea>
 80076d2:	2500      	movs	r5, #0
 80076d4:	e7b7      	b.n	8007646 <setvbuf+0xea>
 80076d6:	bf00      	nop
 80076d8:	20000024 	.word	0x20000024
 80076dc:	08008774 	.word	0x08008774
 80076e0:	08008794 	.word	0x08008794
 80076e4:	08008754 	.word	0x08008754

080076e8 <__swbuf_r>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	460e      	mov	r6, r1
 80076ec:	4614      	mov	r4, r2
 80076ee:	4605      	mov	r5, r0
 80076f0:	b118      	cbz	r0, 80076fa <__swbuf_r+0x12>
 80076f2:	6983      	ldr	r3, [r0, #24]
 80076f4:	b90b      	cbnz	r3, 80076fa <__swbuf_r+0x12>
 80076f6:	f000 f9d1 	bl	8007a9c <__sinit>
 80076fa:	4b21      	ldr	r3, [pc, #132]	; (8007780 <__swbuf_r+0x98>)
 80076fc:	429c      	cmp	r4, r3
 80076fe:	d12b      	bne.n	8007758 <__swbuf_r+0x70>
 8007700:	686c      	ldr	r4, [r5, #4]
 8007702:	69a3      	ldr	r3, [r4, #24]
 8007704:	60a3      	str	r3, [r4, #8]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	071a      	lsls	r2, r3, #28
 800770a:	d52f      	bpl.n	800776c <__swbuf_r+0x84>
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	b36b      	cbz	r3, 800776c <__swbuf_r+0x84>
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	6820      	ldr	r0, [r4, #0]
 8007714:	1ac0      	subs	r0, r0, r3
 8007716:	6963      	ldr	r3, [r4, #20]
 8007718:	b2f6      	uxtb	r6, r6
 800771a:	4283      	cmp	r3, r0
 800771c:	4637      	mov	r7, r6
 800771e:	dc04      	bgt.n	800772a <__swbuf_r+0x42>
 8007720:	4621      	mov	r1, r4
 8007722:	4628      	mov	r0, r5
 8007724:	f000 f926 	bl	8007974 <_fflush_r>
 8007728:	bb30      	cbnz	r0, 8007778 <__swbuf_r+0x90>
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	3b01      	subs	r3, #1
 800772e:	60a3      	str	r3, [r4, #8]
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	6022      	str	r2, [r4, #0]
 8007736:	701e      	strb	r6, [r3, #0]
 8007738:	6963      	ldr	r3, [r4, #20]
 800773a:	3001      	adds	r0, #1
 800773c:	4283      	cmp	r3, r0
 800773e:	d004      	beq.n	800774a <__swbuf_r+0x62>
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	07db      	lsls	r3, r3, #31
 8007744:	d506      	bpl.n	8007754 <__swbuf_r+0x6c>
 8007746:	2e0a      	cmp	r6, #10
 8007748:	d104      	bne.n	8007754 <__swbuf_r+0x6c>
 800774a:	4621      	mov	r1, r4
 800774c:	4628      	mov	r0, r5
 800774e:	f000 f911 	bl	8007974 <_fflush_r>
 8007752:	b988      	cbnz	r0, 8007778 <__swbuf_r+0x90>
 8007754:	4638      	mov	r0, r7
 8007756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <__swbuf_r+0x9c>)
 800775a:	429c      	cmp	r4, r3
 800775c:	d101      	bne.n	8007762 <__swbuf_r+0x7a>
 800775e:	68ac      	ldr	r4, [r5, #8]
 8007760:	e7cf      	b.n	8007702 <__swbuf_r+0x1a>
 8007762:	4b09      	ldr	r3, [pc, #36]	; (8007788 <__swbuf_r+0xa0>)
 8007764:	429c      	cmp	r4, r3
 8007766:	bf08      	it	eq
 8007768:	68ec      	ldreq	r4, [r5, #12]
 800776a:	e7ca      	b.n	8007702 <__swbuf_r+0x1a>
 800776c:	4621      	mov	r1, r4
 800776e:	4628      	mov	r0, r5
 8007770:	f000 f80c 	bl	800778c <__swsetup_r>
 8007774:	2800      	cmp	r0, #0
 8007776:	d0cb      	beq.n	8007710 <__swbuf_r+0x28>
 8007778:	f04f 37ff 	mov.w	r7, #4294967295
 800777c:	e7ea      	b.n	8007754 <__swbuf_r+0x6c>
 800777e:	bf00      	nop
 8007780:	08008774 	.word	0x08008774
 8007784:	08008794 	.word	0x08008794
 8007788:	08008754 	.word	0x08008754

0800778c <__swsetup_r>:
 800778c:	4b32      	ldr	r3, [pc, #200]	; (8007858 <__swsetup_r+0xcc>)
 800778e:	b570      	push	{r4, r5, r6, lr}
 8007790:	681d      	ldr	r5, [r3, #0]
 8007792:	4606      	mov	r6, r0
 8007794:	460c      	mov	r4, r1
 8007796:	b125      	cbz	r5, 80077a2 <__swsetup_r+0x16>
 8007798:	69ab      	ldr	r3, [r5, #24]
 800779a:	b913      	cbnz	r3, 80077a2 <__swsetup_r+0x16>
 800779c:	4628      	mov	r0, r5
 800779e:	f000 f97d 	bl	8007a9c <__sinit>
 80077a2:	4b2e      	ldr	r3, [pc, #184]	; (800785c <__swsetup_r+0xd0>)
 80077a4:	429c      	cmp	r4, r3
 80077a6:	d10f      	bne.n	80077c8 <__swsetup_r+0x3c>
 80077a8:	686c      	ldr	r4, [r5, #4]
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077b0:	0719      	lsls	r1, r3, #28
 80077b2:	d42c      	bmi.n	800780e <__swsetup_r+0x82>
 80077b4:	06dd      	lsls	r5, r3, #27
 80077b6:	d411      	bmi.n	80077dc <__swsetup_r+0x50>
 80077b8:	2309      	movs	r3, #9
 80077ba:	6033      	str	r3, [r6, #0]
 80077bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077c0:	81a3      	strh	r3, [r4, #12]
 80077c2:	f04f 30ff 	mov.w	r0, #4294967295
 80077c6:	e03e      	b.n	8007846 <__swsetup_r+0xba>
 80077c8:	4b25      	ldr	r3, [pc, #148]	; (8007860 <__swsetup_r+0xd4>)
 80077ca:	429c      	cmp	r4, r3
 80077cc:	d101      	bne.n	80077d2 <__swsetup_r+0x46>
 80077ce:	68ac      	ldr	r4, [r5, #8]
 80077d0:	e7eb      	b.n	80077aa <__swsetup_r+0x1e>
 80077d2:	4b24      	ldr	r3, [pc, #144]	; (8007864 <__swsetup_r+0xd8>)
 80077d4:	429c      	cmp	r4, r3
 80077d6:	bf08      	it	eq
 80077d8:	68ec      	ldreq	r4, [r5, #12]
 80077da:	e7e6      	b.n	80077aa <__swsetup_r+0x1e>
 80077dc:	0758      	lsls	r0, r3, #29
 80077de:	d512      	bpl.n	8007806 <__swsetup_r+0x7a>
 80077e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077e2:	b141      	cbz	r1, 80077f6 <__swsetup_r+0x6a>
 80077e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077e8:	4299      	cmp	r1, r3
 80077ea:	d002      	beq.n	80077f2 <__swsetup_r+0x66>
 80077ec:	4630      	mov	r0, r6
 80077ee:	f7ff fdad 	bl	800734c <_free_r>
 80077f2:	2300      	movs	r3, #0
 80077f4:	6363      	str	r3, [r4, #52]	; 0x34
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077fc:	81a3      	strh	r3, [r4, #12]
 80077fe:	2300      	movs	r3, #0
 8007800:	6063      	str	r3, [r4, #4]
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	f043 0308 	orr.w	r3, r3, #8
 800780c:	81a3      	strh	r3, [r4, #12]
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	b94b      	cbnz	r3, 8007826 <__swsetup_r+0x9a>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781c:	d003      	beq.n	8007826 <__swsetup_r+0x9a>
 800781e:	4621      	mov	r1, r4
 8007820:	4630      	mov	r0, r6
 8007822:	f000 fa01 	bl	8007c28 <__smakebuf_r>
 8007826:	89a0      	ldrh	r0, [r4, #12]
 8007828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800782c:	f010 0301 	ands.w	r3, r0, #1
 8007830:	d00a      	beq.n	8007848 <__swsetup_r+0xbc>
 8007832:	2300      	movs	r3, #0
 8007834:	60a3      	str	r3, [r4, #8]
 8007836:	6963      	ldr	r3, [r4, #20]
 8007838:	425b      	negs	r3, r3
 800783a:	61a3      	str	r3, [r4, #24]
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	b943      	cbnz	r3, 8007852 <__swsetup_r+0xc6>
 8007840:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007844:	d1ba      	bne.n	80077bc <__swsetup_r+0x30>
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	0781      	lsls	r1, r0, #30
 800784a:	bf58      	it	pl
 800784c:	6963      	ldrpl	r3, [r4, #20]
 800784e:	60a3      	str	r3, [r4, #8]
 8007850:	e7f4      	b.n	800783c <__swsetup_r+0xb0>
 8007852:	2000      	movs	r0, #0
 8007854:	e7f7      	b.n	8007846 <__swsetup_r+0xba>
 8007856:	bf00      	nop
 8007858:	20000024 	.word	0x20000024
 800785c:	08008774 	.word	0x08008774
 8007860:	08008794 	.word	0x08008794
 8007864:	08008754 	.word	0x08008754

08007868 <__sflush_r>:
 8007868:	898a      	ldrh	r2, [r1, #12]
 800786a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800786e:	4605      	mov	r5, r0
 8007870:	0710      	lsls	r0, r2, #28
 8007872:	460c      	mov	r4, r1
 8007874:	d458      	bmi.n	8007928 <__sflush_r+0xc0>
 8007876:	684b      	ldr	r3, [r1, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	dc05      	bgt.n	8007888 <__sflush_r+0x20>
 800787c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800787e:	2b00      	cmp	r3, #0
 8007880:	dc02      	bgt.n	8007888 <__sflush_r+0x20>
 8007882:	2000      	movs	r0, #0
 8007884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800788a:	2e00      	cmp	r6, #0
 800788c:	d0f9      	beq.n	8007882 <__sflush_r+0x1a>
 800788e:	2300      	movs	r3, #0
 8007890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007894:	682f      	ldr	r7, [r5, #0]
 8007896:	602b      	str	r3, [r5, #0]
 8007898:	d032      	beq.n	8007900 <__sflush_r+0x98>
 800789a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	075a      	lsls	r2, r3, #29
 80078a0:	d505      	bpl.n	80078ae <__sflush_r+0x46>
 80078a2:	6863      	ldr	r3, [r4, #4]
 80078a4:	1ac0      	subs	r0, r0, r3
 80078a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078a8:	b10b      	cbz	r3, 80078ae <__sflush_r+0x46>
 80078aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078ac:	1ac0      	subs	r0, r0, r3
 80078ae:	2300      	movs	r3, #0
 80078b0:	4602      	mov	r2, r0
 80078b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078b4:	6a21      	ldr	r1, [r4, #32]
 80078b6:	4628      	mov	r0, r5
 80078b8:	47b0      	blx	r6
 80078ba:	1c43      	adds	r3, r0, #1
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	d106      	bne.n	80078ce <__sflush_r+0x66>
 80078c0:	6829      	ldr	r1, [r5, #0]
 80078c2:	291d      	cmp	r1, #29
 80078c4:	d82c      	bhi.n	8007920 <__sflush_r+0xb8>
 80078c6:	4a2a      	ldr	r2, [pc, #168]	; (8007970 <__sflush_r+0x108>)
 80078c8:	40ca      	lsrs	r2, r1
 80078ca:	07d6      	lsls	r6, r2, #31
 80078cc:	d528      	bpl.n	8007920 <__sflush_r+0xb8>
 80078ce:	2200      	movs	r2, #0
 80078d0:	6062      	str	r2, [r4, #4]
 80078d2:	04d9      	lsls	r1, r3, #19
 80078d4:	6922      	ldr	r2, [r4, #16]
 80078d6:	6022      	str	r2, [r4, #0]
 80078d8:	d504      	bpl.n	80078e4 <__sflush_r+0x7c>
 80078da:	1c42      	adds	r2, r0, #1
 80078dc:	d101      	bne.n	80078e2 <__sflush_r+0x7a>
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	b903      	cbnz	r3, 80078e4 <__sflush_r+0x7c>
 80078e2:	6560      	str	r0, [r4, #84]	; 0x54
 80078e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078e6:	602f      	str	r7, [r5, #0]
 80078e8:	2900      	cmp	r1, #0
 80078ea:	d0ca      	beq.n	8007882 <__sflush_r+0x1a>
 80078ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078f0:	4299      	cmp	r1, r3
 80078f2:	d002      	beq.n	80078fa <__sflush_r+0x92>
 80078f4:	4628      	mov	r0, r5
 80078f6:	f7ff fd29 	bl	800734c <_free_r>
 80078fa:	2000      	movs	r0, #0
 80078fc:	6360      	str	r0, [r4, #52]	; 0x34
 80078fe:	e7c1      	b.n	8007884 <__sflush_r+0x1c>
 8007900:	6a21      	ldr	r1, [r4, #32]
 8007902:	2301      	movs	r3, #1
 8007904:	4628      	mov	r0, r5
 8007906:	47b0      	blx	r6
 8007908:	1c41      	adds	r1, r0, #1
 800790a:	d1c7      	bne.n	800789c <__sflush_r+0x34>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0c4      	beq.n	800789c <__sflush_r+0x34>
 8007912:	2b1d      	cmp	r3, #29
 8007914:	d001      	beq.n	800791a <__sflush_r+0xb2>
 8007916:	2b16      	cmp	r3, #22
 8007918:	d101      	bne.n	800791e <__sflush_r+0xb6>
 800791a:	602f      	str	r7, [r5, #0]
 800791c:	e7b1      	b.n	8007882 <__sflush_r+0x1a>
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007924:	81a3      	strh	r3, [r4, #12]
 8007926:	e7ad      	b.n	8007884 <__sflush_r+0x1c>
 8007928:	690f      	ldr	r7, [r1, #16]
 800792a:	2f00      	cmp	r7, #0
 800792c:	d0a9      	beq.n	8007882 <__sflush_r+0x1a>
 800792e:	0793      	lsls	r3, r2, #30
 8007930:	680e      	ldr	r6, [r1, #0]
 8007932:	bf08      	it	eq
 8007934:	694b      	ldreq	r3, [r1, #20]
 8007936:	600f      	str	r7, [r1, #0]
 8007938:	bf18      	it	ne
 800793a:	2300      	movne	r3, #0
 800793c:	eba6 0807 	sub.w	r8, r6, r7
 8007940:	608b      	str	r3, [r1, #8]
 8007942:	f1b8 0f00 	cmp.w	r8, #0
 8007946:	dd9c      	ble.n	8007882 <__sflush_r+0x1a>
 8007948:	6a21      	ldr	r1, [r4, #32]
 800794a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800794c:	4643      	mov	r3, r8
 800794e:	463a      	mov	r2, r7
 8007950:	4628      	mov	r0, r5
 8007952:	47b0      	blx	r6
 8007954:	2800      	cmp	r0, #0
 8007956:	dc06      	bgt.n	8007966 <__sflush_r+0xfe>
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800795e:	81a3      	strh	r3, [r4, #12]
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	e78e      	b.n	8007884 <__sflush_r+0x1c>
 8007966:	4407      	add	r7, r0
 8007968:	eba8 0800 	sub.w	r8, r8, r0
 800796c:	e7e9      	b.n	8007942 <__sflush_r+0xda>
 800796e:	bf00      	nop
 8007970:	20400001 	.word	0x20400001

08007974 <_fflush_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	690b      	ldr	r3, [r1, #16]
 8007978:	4605      	mov	r5, r0
 800797a:	460c      	mov	r4, r1
 800797c:	b913      	cbnz	r3, 8007984 <_fflush_r+0x10>
 800797e:	2500      	movs	r5, #0
 8007980:	4628      	mov	r0, r5
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	b118      	cbz	r0, 800798e <_fflush_r+0x1a>
 8007986:	6983      	ldr	r3, [r0, #24]
 8007988:	b90b      	cbnz	r3, 800798e <_fflush_r+0x1a>
 800798a:	f000 f887 	bl	8007a9c <__sinit>
 800798e:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <_fflush_r+0x6c>)
 8007990:	429c      	cmp	r4, r3
 8007992:	d11b      	bne.n	80079cc <_fflush_r+0x58>
 8007994:	686c      	ldr	r4, [r5, #4]
 8007996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0ef      	beq.n	800797e <_fflush_r+0xa>
 800799e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079a0:	07d0      	lsls	r0, r2, #31
 80079a2:	d404      	bmi.n	80079ae <_fflush_r+0x3a>
 80079a4:	0599      	lsls	r1, r3, #22
 80079a6:	d402      	bmi.n	80079ae <_fflush_r+0x3a>
 80079a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079aa:	f000 f915 	bl	8007bd8 <__retarget_lock_acquire_recursive>
 80079ae:	4628      	mov	r0, r5
 80079b0:	4621      	mov	r1, r4
 80079b2:	f7ff ff59 	bl	8007868 <__sflush_r>
 80079b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079b8:	07da      	lsls	r2, r3, #31
 80079ba:	4605      	mov	r5, r0
 80079bc:	d4e0      	bmi.n	8007980 <_fflush_r+0xc>
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	059b      	lsls	r3, r3, #22
 80079c2:	d4dd      	bmi.n	8007980 <_fflush_r+0xc>
 80079c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079c6:	f000 f908 	bl	8007bda <__retarget_lock_release_recursive>
 80079ca:	e7d9      	b.n	8007980 <_fflush_r+0xc>
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <_fflush_r+0x70>)
 80079ce:	429c      	cmp	r4, r3
 80079d0:	d101      	bne.n	80079d6 <_fflush_r+0x62>
 80079d2:	68ac      	ldr	r4, [r5, #8]
 80079d4:	e7df      	b.n	8007996 <_fflush_r+0x22>
 80079d6:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <_fflush_r+0x74>)
 80079d8:	429c      	cmp	r4, r3
 80079da:	bf08      	it	eq
 80079dc:	68ec      	ldreq	r4, [r5, #12]
 80079de:	e7da      	b.n	8007996 <_fflush_r+0x22>
 80079e0:	08008774 	.word	0x08008774
 80079e4:	08008794 	.word	0x08008794
 80079e8:	08008754 	.word	0x08008754

080079ec <std>:
 80079ec:	2300      	movs	r3, #0
 80079ee:	b510      	push	{r4, lr}
 80079f0:	4604      	mov	r4, r0
 80079f2:	e9c0 3300 	strd	r3, r3, [r0]
 80079f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079fa:	6083      	str	r3, [r0, #8]
 80079fc:	8181      	strh	r1, [r0, #12]
 80079fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007a00:	81c2      	strh	r2, [r0, #14]
 8007a02:	6183      	str	r3, [r0, #24]
 8007a04:	4619      	mov	r1, r3
 8007a06:	2208      	movs	r2, #8
 8007a08:	305c      	adds	r0, #92	; 0x5c
 8007a0a:	f7ff fc97 	bl	800733c <memset>
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <std+0x38>)
 8007a10:	6263      	str	r3, [r4, #36]	; 0x24
 8007a12:	4b05      	ldr	r3, [pc, #20]	; (8007a28 <std+0x3c>)
 8007a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a16:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <std+0x40>)
 8007a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a1a:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <std+0x44>)
 8007a1c:	6224      	str	r4, [r4, #32]
 8007a1e:	6323      	str	r3, [r4, #48]	; 0x30
 8007a20:	bd10      	pop	{r4, pc}
 8007a22:	bf00      	nop
 8007a24:	0800829d 	.word	0x0800829d
 8007a28:	080082bf 	.word	0x080082bf
 8007a2c:	080082f7 	.word	0x080082f7
 8007a30:	0800831b 	.word	0x0800831b

08007a34 <_cleanup_r>:
 8007a34:	4901      	ldr	r1, [pc, #4]	; (8007a3c <_cleanup_r+0x8>)
 8007a36:	f000 b8af 	b.w	8007b98 <_fwalk_reent>
 8007a3a:	bf00      	nop
 8007a3c:	08007975 	.word	0x08007975

08007a40 <__sfmoreglue>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	2268      	movs	r2, #104	; 0x68
 8007a44:	1e4d      	subs	r5, r1, #1
 8007a46:	4355      	muls	r5, r2
 8007a48:	460e      	mov	r6, r1
 8007a4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a4e:	f7ff fce9 	bl	8007424 <_malloc_r>
 8007a52:	4604      	mov	r4, r0
 8007a54:	b140      	cbz	r0, 8007a68 <__sfmoreglue+0x28>
 8007a56:	2100      	movs	r1, #0
 8007a58:	e9c0 1600 	strd	r1, r6, [r0]
 8007a5c:	300c      	adds	r0, #12
 8007a5e:	60a0      	str	r0, [r4, #8]
 8007a60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a64:	f7ff fc6a 	bl	800733c <memset>
 8007a68:	4620      	mov	r0, r4
 8007a6a:	bd70      	pop	{r4, r5, r6, pc}

08007a6c <__sfp_lock_acquire>:
 8007a6c:	4801      	ldr	r0, [pc, #4]	; (8007a74 <__sfp_lock_acquire+0x8>)
 8007a6e:	f000 b8b3 	b.w	8007bd8 <__retarget_lock_acquire_recursive>
 8007a72:	bf00      	nop
 8007a74:	200004c9 	.word	0x200004c9

08007a78 <__sfp_lock_release>:
 8007a78:	4801      	ldr	r0, [pc, #4]	; (8007a80 <__sfp_lock_release+0x8>)
 8007a7a:	f000 b8ae 	b.w	8007bda <__retarget_lock_release_recursive>
 8007a7e:	bf00      	nop
 8007a80:	200004c9 	.word	0x200004c9

08007a84 <__sinit_lock_acquire>:
 8007a84:	4801      	ldr	r0, [pc, #4]	; (8007a8c <__sinit_lock_acquire+0x8>)
 8007a86:	f000 b8a7 	b.w	8007bd8 <__retarget_lock_acquire_recursive>
 8007a8a:	bf00      	nop
 8007a8c:	200004ca 	.word	0x200004ca

08007a90 <__sinit_lock_release>:
 8007a90:	4801      	ldr	r0, [pc, #4]	; (8007a98 <__sinit_lock_release+0x8>)
 8007a92:	f000 b8a2 	b.w	8007bda <__retarget_lock_release_recursive>
 8007a96:	bf00      	nop
 8007a98:	200004ca 	.word	0x200004ca

08007a9c <__sinit>:
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	f7ff fff0 	bl	8007a84 <__sinit_lock_acquire>
 8007aa4:	69a3      	ldr	r3, [r4, #24]
 8007aa6:	b11b      	cbz	r3, 8007ab0 <__sinit+0x14>
 8007aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aac:	f7ff bff0 	b.w	8007a90 <__sinit_lock_release>
 8007ab0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ab4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ab6:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <__sinit+0x68>)
 8007ab8:	4a13      	ldr	r2, [pc, #76]	; (8007b08 <__sinit+0x6c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	bf04      	itt	eq
 8007ac2:	2301      	moveq	r3, #1
 8007ac4:	61a3      	streq	r3, [r4, #24]
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 f820 	bl	8007b0c <__sfp>
 8007acc:	6060      	str	r0, [r4, #4]
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 f81c 	bl	8007b0c <__sfp>
 8007ad4:	60a0      	str	r0, [r4, #8]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 f818 	bl	8007b0c <__sfp>
 8007adc:	2200      	movs	r2, #0
 8007ade:	60e0      	str	r0, [r4, #12]
 8007ae0:	2104      	movs	r1, #4
 8007ae2:	6860      	ldr	r0, [r4, #4]
 8007ae4:	f7ff ff82 	bl	80079ec <std>
 8007ae8:	68a0      	ldr	r0, [r4, #8]
 8007aea:	2201      	movs	r2, #1
 8007aec:	2109      	movs	r1, #9
 8007aee:	f7ff ff7d 	bl	80079ec <std>
 8007af2:	68e0      	ldr	r0, [r4, #12]
 8007af4:	2202      	movs	r2, #2
 8007af6:	2112      	movs	r1, #18
 8007af8:	f7ff ff78 	bl	80079ec <std>
 8007afc:	2301      	movs	r3, #1
 8007afe:	61a3      	str	r3, [r4, #24]
 8007b00:	e7d2      	b.n	8007aa8 <__sinit+0xc>
 8007b02:	bf00      	nop
 8007b04:	08008750 	.word	0x08008750
 8007b08:	08007a35 	.word	0x08007a35

08007b0c <__sfp>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	4607      	mov	r7, r0
 8007b10:	f7ff ffac 	bl	8007a6c <__sfp_lock_acquire>
 8007b14:	4b1e      	ldr	r3, [pc, #120]	; (8007b90 <__sfp+0x84>)
 8007b16:	681e      	ldr	r6, [r3, #0]
 8007b18:	69b3      	ldr	r3, [r6, #24]
 8007b1a:	b913      	cbnz	r3, 8007b22 <__sfp+0x16>
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f7ff ffbd 	bl	8007a9c <__sinit>
 8007b22:	3648      	adds	r6, #72	; 0x48
 8007b24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	d503      	bpl.n	8007b34 <__sfp+0x28>
 8007b2c:	6833      	ldr	r3, [r6, #0]
 8007b2e:	b30b      	cbz	r3, 8007b74 <__sfp+0x68>
 8007b30:	6836      	ldr	r6, [r6, #0]
 8007b32:	e7f7      	b.n	8007b24 <__sfp+0x18>
 8007b34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b38:	b9d5      	cbnz	r5, 8007b70 <__sfp+0x64>
 8007b3a:	4b16      	ldr	r3, [pc, #88]	; (8007b94 <__sfp+0x88>)
 8007b3c:	60e3      	str	r3, [r4, #12]
 8007b3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b42:	6665      	str	r5, [r4, #100]	; 0x64
 8007b44:	f000 f847 	bl	8007bd6 <__retarget_lock_init_recursive>
 8007b48:	f7ff ff96 	bl	8007a78 <__sfp_lock_release>
 8007b4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b54:	6025      	str	r5, [r4, #0]
 8007b56:	61a5      	str	r5, [r4, #24]
 8007b58:	2208      	movs	r2, #8
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b60:	f7ff fbec 	bl	800733c <memset>
 8007b64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b70:	3468      	adds	r4, #104	; 0x68
 8007b72:	e7d9      	b.n	8007b28 <__sfp+0x1c>
 8007b74:	2104      	movs	r1, #4
 8007b76:	4638      	mov	r0, r7
 8007b78:	f7ff ff62 	bl	8007a40 <__sfmoreglue>
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	6030      	str	r0, [r6, #0]
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d1d5      	bne.n	8007b30 <__sfp+0x24>
 8007b84:	f7ff ff78 	bl	8007a78 <__sfp_lock_release>
 8007b88:	230c      	movs	r3, #12
 8007b8a:	603b      	str	r3, [r7, #0]
 8007b8c:	e7ee      	b.n	8007b6c <__sfp+0x60>
 8007b8e:	bf00      	nop
 8007b90:	08008750 	.word	0x08008750
 8007b94:	ffff0001 	.word	0xffff0001

08007b98 <_fwalk_reent>:
 8007b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	4688      	mov	r8, r1
 8007ba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ba4:	2700      	movs	r7, #0
 8007ba6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007baa:	f1b9 0901 	subs.w	r9, r9, #1
 8007bae:	d505      	bpl.n	8007bbc <_fwalk_reent+0x24>
 8007bb0:	6824      	ldr	r4, [r4, #0]
 8007bb2:	2c00      	cmp	r4, #0
 8007bb4:	d1f7      	bne.n	8007ba6 <_fwalk_reent+0xe>
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bbc:	89ab      	ldrh	r3, [r5, #12]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d907      	bls.n	8007bd2 <_fwalk_reent+0x3a>
 8007bc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	d003      	beq.n	8007bd2 <_fwalk_reent+0x3a>
 8007bca:	4629      	mov	r1, r5
 8007bcc:	4630      	mov	r0, r6
 8007bce:	47c0      	blx	r8
 8007bd0:	4307      	orrs	r7, r0
 8007bd2:	3568      	adds	r5, #104	; 0x68
 8007bd4:	e7e9      	b.n	8007baa <_fwalk_reent+0x12>

08007bd6 <__retarget_lock_init_recursive>:
 8007bd6:	4770      	bx	lr

08007bd8 <__retarget_lock_acquire_recursive>:
 8007bd8:	4770      	bx	lr

08007bda <__retarget_lock_release_recursive>:
 8007bda:	4770      	bx	lr

08007bdc <__swhatbuf_r>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	460e      	mov	r6, r1
 8007be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be4:	2900      	cmp	r1, #0
 8007be6:	b096      	sub	sp, #88	; 0x58
 8007be8:	4614      	mov	r4, r2
 8007bea:	461d      	mov	r5, r3
 8007bec:	da08      	bge.n	8007c00 <__swhatbuf_r+0x24>
 8007bee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	602a      	str	r2, [r5, #0]
 8007bf6:	061a      	lsls	r2, r3, #24
 8007bf8:	d410      	bmi.n	8007c1c <__swhatbuf_r+0x40>
 8007bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bfe:	e00e      	b.n	8007c1e <__swhatbuf_r+0x42>
 8007c00:	466a      	mov	r2, sp
 8007c02:	f000 fbb1 	bl	8008368 <_fstat_r>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	dbf1      	blt.n	8007bee <__swhatbuf_r+0x12>
 8007c0a:	9a01      	ldr	r2, [sp, #4]
 8007c0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c14:	425a      	negs	r2, r3
 8007c16:	415a      	adcs	r2, r3
 8007c18:	602a      	str	r2, [r5, #0]
 8007c1a:	e7ee      	b.n	8007bfa <__swhatbuf_r+0x1e>
 8007c1c:	2340      	movs	r3, #64	; 0x40
 8007c1e:	2000      	movs	r0, #0
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	b016      	add	sp, #88	; 0x58
 8007c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c28 <__smakebuf_r>:
 8007c28:	898b      	ldrh	r3, [r1, #12]
 8007c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c2c:	079d      	lsls	r5, r3, #30
 8007c2e:	4606      	mov	r6, r0
 8007c30:	460c      	mov	r4, r1
 8007c32:	d507      	bpl.n	8007c44 <__smakebuf_r+0x1c>
 8007c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	6123      	str	r3, [r4, #16]
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	6163      	str	r3, [r4, #20]
 8007c40:	b002      	add	sp, #8
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	ab01      	add	r3, sp, #4
 8007c46:	466a      	mov	r2, sp
 8007c48:	f7ff ffc8 	bl	8007bdc <__swhatbuf_r>
 8007c4c:	9900      	ldr	r1, [sp, #0]
 8007c4e:	4605      	mov	r5, r0
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7ff fbe7 	bl	8007424 <_malloc_r>
 8007c56:	b948      	cbnz	r0, 8007c6c <__smakebuf_r+0x44>
 8007c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c5c:	059a      	lsls	r2, r3, #22
 8007c5e:	d4ef      	bmi.n	8007c40 <__smakebuf_r+0x18>
 8007c60:	f023 0303 	bic.w	r3, r3, #3
 8007c64:	f043 0302 	orr.w	r3, r3, #2
 8007c68:	81a3      	strh	r3, [r4, #12]
 8007c6a:	e7e3      	b.n	8007c34 <__smakebuf_r+0xc>
 8007c6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <__smakebuf_r+0x7c>)
 8007c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	6020      	str	r0, [r4, #0]
 8007c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c78:	81a3      	strh	r3, [r4, #12]
 8007c7a:	9b00      	ldr	r3, [sp, #0]
 8007c7c:	6163      	str	r3, [r4, #20]
 8007c7e:	9b01      	ldr	r3, [sp, #4]
 8007c80:	6120      	str	r0, [r4, #16]
 8007c82:	b15b      	cbz	r3, 8007c9c <__smakebuf_r+0x74>
 8007c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f000 fb7f 	bl	800838c <_isatty_r>
 8007c8e:	b128      	cbz	r0, 8007c9c <__smakebuf_r+0x74>
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	f023 0303 	bic.w	r3, r3, #3
 8007c96:	f043 0301 	orr.w	r3, r3, #1
 8007c9a:	81a3      	strh	r3, [r4, #12]
 8007c9c:	89a0      	ldrh	r0, [r4, #12]
 8007c9e:	4305      	orrs	r5, r0
 8007ca0:	81a5      	strh	r5, [r4, #12]
 8007ca2:	e7cd      	b.n	8007c40 <__smakebuf_r+0x18>
 8007ca4:	08007a35 	.word	0x08007a35

08007ca8 <__malloc_lock>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	; (8007cb0 <__malloc_lock+0x8>)
 8007caa:	f7ff bf95 	b.w	8007bd8 <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	200004c8 	.word	0x200004c8

08007cb4 <__malloc_unlock>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <__malloc_unlock+0x8>)
 8007cb6:	f7ff bf90 	b.w	8007bda <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	200004c8 	.word	0x200004c8

08007cc0 <__sfputc_r>:
 8007cc0:	6893      	ldr	r3, [r2, #8]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	b410      	push	{r4}
 8007cc8:	6093      	str	r3, [r2, #8]
 8007cca:	da08      	bge.n	8007cde <__sfputc_r+0x1e>
 8007ccc:	6994      	ldr	r4, [r2, #24]
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	db01      	blt.n	8007cd6 <__sfputc_r+0x16>
 8007cd2:	290a      	cmp	r1, #10
 8007cd4:	d103      	bne.n	8007cde <__sfputc_r+0x1e>
 8007cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cda:	f7ff bd05 	b.w	80076e8 <__swbuf_r>
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	1c58      	adds	r0, r3, #1
 8007ce2:	6010      	str	r0, [r2, #0]
 8007ce4:	7019      	strb	r1, [r3, #0]
 8007ce6:	4608      	mov	r0, r1
 8007ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <__sfputs_r>:
 8007cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	460f      	mov	r7, r1
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	18d5      	adds	r5, r2, r3
 8007cf8:	42ac      	cmp	r4, r5
 8007cfa:	d101      	bne.n	8007d00 <__sfputs_r+0x12>
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e007      	b.n	8007d10 <__sfputs_r+0x22>
 8007d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d04:	463a      	mov	r2, r7
 8007d06:	4630      	mov	r0, r6
 8007d08:	f7ff ffda 	bl	8007cc0 <__sfputc_r>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d1f3      	bne.n	8007cf8 <__sfputs_r+0xa>
 8007d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d14 <_vfiprintf_r>:
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	460d      	mov	r5, r1
 8007d1a:	b09d      	sub	sp, #116	; 0x74
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	4698      	mov	r8, r3
 8007d20:	4606      	mov	r6, r0
 8007d22:	b118      	cbz	r0, 8007d2c <_vfiprintf_r+0x18>
 8007d24:	6983      	ldr	r3, [r0, #24]
 8007d26:	b90b      	cbnz	r3, 8007d2c <_vfiprintf_r+0x18>
 8007d28:	f7ff feb8 	bl	8007a9c <__sinit>
 8007d2c:	4b89      	ldr	r3, [pc, #548]	; (8007f54 <_vfiprintf_r+0x240>)
 8007d2e:	429d      	cmp	r5, r3
 8007d30:	d11b      	bne.n	8007d6a <_vfiprintf_r+0x56>
 8007d32:	6875      	ldr	r5, [r6, #4]
 8007d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d36:	07d9      	lsls	r1, r3, #31
 8007d38:	d405      	bmi.n	8007d46 <_vfiprintf_r+0x32>
 8007d3a:	89ab      	ldrh	r3, [r5, #12]
 8007d3c:	059a      	lsls	r2, r3, #22
 8007d3e:	d402      	bmi.n	8007d46 <_vfiprintf_r+0x32>
 8007d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d42:	f7ff ff49 	bl	8007bd8 <__retarget_lock_acquire_recursive>
 8007d46:	89ab      	ldrh	r3, [r5, #12]
 8007d48:	071b      	lsls	r3, r3, #28
 8007d4a:	d501      	bpl.n	8007d50 <_vfiprintf_r+0x3c>
 8007d4c:	692b      	ldr	r3, [r5, #16]
 8007d4e:	b9eb      	cbnz	r3, 8007d8c <_vfiprintf_r+0x78>
 8007d50:	4629      	mov	r1, r5
 8007d52:	4630      	mov	r0, r6
 8007d54:	f7ff fd1a 	bl	800778c <__swsetup_r>
 8007d58:	b1c0      	cbz	r0, 8007d8c <_vfiprintf_r+0x78>
 8007d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d5c:	07dc      	lsls	r4, r3, #31
 8007d5e:	d50e      	bpl.n	8007d7e <_vfiprintf_r+0x6a>
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	b01d      	add	sp, #116	; 0x74
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	4b7b      	ldr	r3, [pc, #492]	; (8007f58 <_vfiprintf_r+0x244>)
 8007d6c:	429d      	cmp	r5, r3
 8007d6e:	d101      	bne.n	8007d74 <_vfiprintf_r+0x60>
 8007d70:	68b5      	ldr	r5, [r6, #8]
 8007d72:	e7df      	b.n	8007d34 <_vfiprintf_r+0x20>
 8007d74:	4b79      	ldr	r3, [pc, #484]	; (8007f5c <_vfiprintf_r+0x248>)
 8007d76:	429d      	cmp	r5, r3
 8007d78:	bf08      	it	eq
 8007d7a:	68f5      	ldreq	r5, [r6, #12]
 8007d7c:	e7da      	b.n	8007d34 <_vfiprintf_r+0x20>
 8007d7e:	89ab      	ldrh	r3, [r5, #12]
 8007d80:	0598      	lsls	r0, r3, #22
 8007d82:	d4ed      	bmi.n	8007d60 <_vfiprintf_r+0x4c>
 8007d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d86:	f7ff ff28 	bl	8007bda <__retarget_lock_release_recursive>
 8007d8a:	e7e9      	b.n	8007d60 <_vfiprintf_r+0x4c>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d90:	2320      	movs	r3, #32
 8007d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d9a:	2330      	movs	r3, #48	; 0x30
 8007d9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f60 <_vfiprintf_r+0x24c>
 8007da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007da4:	f04f 0901 	mov.w	r9, #1
 8007da8:	4623      	mov	r3, r4
 8007daa:	469a      	mov	sl, r3
 8007dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007db0:	b10a      	cbz	r2, 8007db6 <_vfiprintf_r+0xa2>
 8007db2:	2a25      	cmp	r2, #37	; 0x25
 8007db4:	d1f9      	bne.n	8007daa <_vfiprintf_r+0x96>
 8007db6:	ebba 0b04 	subs.w	fp, sl, r4
 8007dba:	d00b      	beq.n	8007dd4 <_vfiprintf_r+0xc0>
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7ff ff93 	bl	8007cee <__sfputs_r>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	f000 80aa 	beq.w	8007f22 <_vfiprintf_r+0x20e>
 8007dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd0:	445a      	add	r2, fp
 8007dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8007dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80a2 	beq.w	8007f22 <_vfiprintf_r+0x20e>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f04f 32ff 	mov.w	r2, #4294967295
 8007de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007de8:	f10a 0a01 	add.w	sl, sl, #1
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	9307      	str	r3, [sp, #28]
 8007df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007df4:	931a      	str	r3, [sp, #104]	; 0x68
 8007df6:	4654      	mov	r4, sl
 8007df8:	2205      	movs	r2, #5
 8007dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfe:	4858      	ldr	r0, [pc, #352]	; (8007f60 <_vfiprintf_r+0x24c>)
 8007e00:	f7f8 f9e6 	bl	80001d0 <memchr>
 8007e04:	9a04      	ldr	r2, [sp, #16]
 8007e06:	b9d8      	cbnz	r0, 8007e40 <_vfiprintf_r+0x12c>
 8007e08:	06d1      	lsls	r1, r2, #27
 8007e0a:	bf44      	itt	mi
 8007e0c:	2320      	movmi	r3, #32
 8007e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e12:	0713      	lsls	r3, r2, #28
 8007e14:	bf44      	itt	mi
 8007e16:	232b      	movmi	r3, #43	; 0x2b
 8007e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e20:	2b2a      	cmp	r3, #42	; 0x2a
 8007e22:	d015      	beq.n	8007e50 <_vfiprintf_r+0x13c>
 8007e24:	9a07      	ldr	r2, [sp, #28]
 8007e26:	4654      	mov	r4, sl
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f04f 0c0a 	mov.w	ip, #10
 8007e2e:	4621      	mov	r1, r4
 8007e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e34:	3b30      	subs	r3, #48	; 0x30
 8007e36:	2b09      	cmp	r3, #9
 8007e38:	d94e      	bls.n	8007ed8 <_vfiprintf_r+0x1c4>
 8007e3a:	b1b0      	cbz	r0, 8007e6a <_vfiprintf_r+0x156>
 8007e3c:	9207      	str	r2, [sp, #28]
 8007e3e:	e014      	b.n	8007e6a <_vfiprintf_r+0x156>
 8007e40:	eba0 0308 	sub.w	r3, r0, r8
 8007e44:	fa09 f303 	lsl.w	r3, r9, r3
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	46a2      	mov	sl, r4
 8007e4e:	e7d2      	b.n	8007df6 <_vfiprintf_r+0xe2>
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	1d19      	adds	r1, r3, #4
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	9103      	str	r1, [sp, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bfbb      	ittet	lt
 8007e5c:	425b      	neglt	r3, r3
 8007e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e62:	9307      	strge	r3, [sp, #28]
 8007e64:	9307      	strlt	r3, [sp, #28]
 8007e66:	bfb8      	it	lt
 8007e68:	9204      	strlt	r2, [sp, #16]
 8007e6a:	7823      	ldrb	r3, [r4, #0]
 8007e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e6e:	d10c      	bne.n	8007e8a <_vfiprintf_r+0x176>
 8007e70:	7863      	ldrb	r3, [r4, #1]
 8007e72:	2b2a      	cmp	r3, #42	; 0x2a
 8007e74:	d135      	bne.n	8007ee2 <_vfiprintf_r+0x1ce>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	1d1a      	adds	r2, r3, #4
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	9203      	str	r2, [sp, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfb8      	it	lt
 8007e82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e86:	3402      	adds	r4, #2
 8007e88:	9305      	str	r3, [sp, #20]
 8007e8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f70 <_vfiprintf_r+0x25c>
 8007e8e:	7821      	ldrb	r1, [r4, #0]
 8007e90:	2203      	movs	r2, #3
 8007e92:	4650      	mov	r0, sl
 8007e94:	f7f8 f99c 	bl	80001d0 <memchr>
 8007e98:	b140      	cbz	r0, 8007eac <_vfiprintf_r+0x198>
 8007e9a:	2340      	movs	r3, #64	; 0x40
 8007e9c:	eba0 000a 	sub.w	r0, r0, sl
 8007ea0:	fa03 f000 	lsl.w	r0, r3, r0
 8007ea4:	9b04      	ldr	r3, [sp, #16]
 8007ea6:	4303      	orrs	r3, r0
 8007ea8:	3401      	adds	r4, #1
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb0:	482c      	ldr	r0, [pc, #176]	; (8007f64 <_vfiprintf_r+0x250>)
 8007eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eb6:	2206      	movs	r2, #6
 8007eb8:	f7f8 f98a 	bl	80001d0 <memchr>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d03f      	beq.n	8007f40 <_vfiprintf_r+0x22c>
 8007ec0:	4b29      	ldr	r3, [pc, #164]	; (8007f68 <_vfiprintf_r+0x254>)
 8007ec2:	bb1b      	cbnz	r3, 8007f0c <_vfiprintf_r+0x1f8>
 8007ec4:	9b03      	ldr	r3, [sp, #12]
 8007ec6:	3307      	adds	r3, #7
 8007ec8:	f023 0307 	bic.w	r3, r3, #7
 8007ecc:	3308      	adds	r3, #8
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed2:	443b      	add	r3, r7
 8007ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed6:	e767      	b.n	8007da8 <_vfiprintf_r+0x94>
 8007ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007edc:	460c      	mov	r4, r1
 8007ede:	2001      	movs	r0, #1
 8007ee0:	e7a5      	b.n	8007e2e <_vfiprintf_r+0x11a>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	3401      	adds	r4, #1
 8007ee6:	9305      	str	r3, [sp, #20]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	f04f 0c0a 	mov.w	ip, #10
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ef4:	3a30      	subs	r2, #48	; 0x30
 8007ef6:	2a09      	cmp	r2, #9
 8007ef8:	d903      	bls.n	8007f02 <_vfiprintf_r+0x1ee>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0c5      	beq.n	8007e8a <_vfiprintf_r+0x176>
 8007efe:	9105      	str	r1, [sp, #20]
 8007f00:	e7c3      	b.n	8007e8a <_vfiprintf_r+0x176>
 8007f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f06:	4604      	mov	r4, r0
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e7f0      	b.n	8007eee <_vfiprintf_r+0x1da>
 8007f0c:	ab03      	add	r3, sp, #12
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	462a      	mov	r2, r5
 8007f12:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <_vfiprintf_r+0x258>)
 8007f14:	a904      	add	r1, sp, #16
 8007f16:	4630      	mov	r0, r6
 8007f18:	f3af 8000 	nop.w
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	1c78      	adds	r0, r7, #1
 8007f20:	d1d6      	bne.n	8007ed0 <_vfiprintf_r+0x1bc>
 8007f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f24:	07d9      	lsls	r1, r3, #31
 8007f26:	d405      	bmi.n	8007f34 <_vfiprintf_r+0x220>
 8007f28:	89ab      	ldrh	r3, [r5, #12]
 8007f2a:	059a      	lsls	r2, r3, #22
 8007f2c:	d402      	bmi.n	8007f34 <_vfiprintf_r+0x220>
 8007f2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f30:	f7ff fe53 	bl	8007bda <__retarget_lock_release_recursive>
 8007f34:	89ab      	ldrh	r3, [r5, #12]
 8007f36:	065b      	lsls	r3, r3, #25
 8007f38:	f53f af12 	bmi.w	8007d60 <_vfiprintf_r+0x4c>
 8007f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f3e:	e711      	b.n	8007d64 <_vfiprintf_r+0x50>
 8007f40:	ab03      	add	r3, sp, #12
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	462a      	mov	r2, r5
 8007f46:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <_vfiprintf_r+0x258>)
 8007f48:	a904      	add	r1, sp, #16
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f000 f880 	bl	8008050 <_printf_i>
 8007f50:	e7e4      	b.n	8007f1c <_vfiprintf_r+0x208>
 8007f52:	bf00      	nop
 8007f54:	08008774 	.word	0x08008774
 8007f58:	08008794 	.word	0x08008794
 8007f5c:	08008754 	.word	0x08008754
 8007f60:	080087b4 	.word	0x080087b4
 8007f64:	080087be 	.word	0x080087be
 8007f68:	00000000 	.word	0x00000000
 8007f6c:	08007cef 	.word	0x08007cef
 8007f70:	080087ba 	.word	0x080087ba

08007f74 <_printf_common>:
 8007f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f78:	4616      	mov	r6, r2
 8007f7a:	4699      	mov	r9, r3
 8007f7c:	688a      	ldr	r2, [r1, #8]
 8007f7e:	690b      	ldr	r3, [r1, #16]
 8007f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f84:	4293      	cmp	r3, r2
 8007f86:	bfb8      	it	lt
 8007f88:	4613      	movlt	r3, r2
 8007f8a:	6033      	str	r3, [r6, #0]
 8007f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f90:	4607      	mov	r7, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	b10a      	cbz	r2, 8007f9a <_printf_common+0x26>
 8007f96:	3301      	adds	r3, #1
 8007f98:	6033      	str	r3, [r6, #0]
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	0699      	lsls	r1, r3, #26
 8007f9e:	bf42      	ittt	mi
 8007fa0:	6833      	ldrmi	r3, [r6, #0]
 8007fa2:	3302      	addmi	r3, #2
 8007fa4:	6033      	strmi	r3, [r6, #0]
 8007fa6:	6825      	ldr	r5, [r4, #0]
 8007fa8:	f015 0506 	ands.w	r5, r5, #6
 8007fac:	d106      	bne.n	8007fbc <_printf_common+0x48>
 8007fae:	f104 0a19 	add.w	sl, r4, #25
 8007fb2:	68e3      	ldr	r3, [r4, #12]
 8007fb4:	6832      	ldr	r2, [r6, #0]
 8007fb6:	1a9b      	subs	r3, r3, r2
 8007fb8:	42ab      	cmp	r3, r5
 8007fba:	dc26      	bgt.n	800800a <_printf_common+0x96>
 8007fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fc0:	1e13      	subs	r3, r2, #0
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	bf18      	it	ne
 8007fc6:	2301      	movne	r3, #1
 8007fc8:	0692      	lsls	r2, r2, #26
 8007fca:	d42b      	bmi.n	8008024 <_printf_common+0xb0>
 8007fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	47c0      	blx	r8
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	d01e      	beq.n	8008018 <_printf_common+0xa4>
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	68e5      	ldr	r5, [r4, #12]
 8007fde:	6832      	ldr	r2, [r6, #0]
 8007fe0:	f003 0306 	and.w	r3, r3, #6
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	bf08      	it	eq
 8007fe8:	1aad      	subeq	r5, r5, r2
 8007fea:	68a3      	ldr	r3, [r4, #8]
 8007fec:	6922      	ldr	r2, [r4, #16]
 8007fee:	bf0c      	ite	eq
 8007ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ff4:	2500      	movne	r5, #0
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	bfc4      	itt	gt
 8007ffa:	1a9b      	subgt	r3, r3, r2
 8007ffc:	18ed      	addgt	r5, r5, r3
 8007ffe:	2600      	movs	r6, #0
 8008000:	341a      	adds	r4, #26
 8008002:	42b5      	cmp	r5, r6
 8008004:	d11a      	bne.n	800803c <_printf_common+0xc8>
 8008006:	2000      	movs	r0, #0
 8008008:	e008      	b.n	800801c <_printf_common+0xa8>
 800800a:	2301      	movs	r3, #1
 800800c:	4652      	mov	r2, sl
 800800e:	4649      	mov	r1, r9
 8008010:	4638      	mov	r0, r7
 8008012:	47c0      	blx	r8
 8008014:	3001      	adds	r0, #1
 8008016:	d103      	bne.n	8008020 <_printf_common+0xac>
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008020:	3501      	adds	r5, #1
 8008022:	e7c6      	b.n	8007fb2 <_printf_common+0x3e>
 8008024:	18e1      	adds	r1, r4, r3
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	2030      	movs	r0, #48	; 0x30
 800802a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800802e:	4422      	add	r2, r4
 8008030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008038:	3302      	adds	r3, #2
 800803a:	e7c7      	b.n	8007fcc <_printf_common+0x58>
 800803c:	2301      	movs	r3, #1
 800803e:	4622      	mov	r2, r4
 8008040:	4649      	mov	r1, r9
 8008042:	4638      	mov	r0, r7
 8008044:	47c0      	blx	r8
 8008046:	3001      	adds	r0, #1
 8008048:	d0e6      	beq.n	8008018 <_printf_common+0xa4>
 800804a:	3601      	adds	r6, #1
 800804c:	e7d9      	b.n	8008002 <_printf_common+0x8e>
	...

08008050 <_printf_i>:
 8008050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008054:	7e0f      	ldrb	r7, [r1, #24]
 8008056:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008058:	2f78      	cmp	r7, #120	; 0x78
 800805a:	4691      	mov	r9, r2
 800805c:	4680      	mov	r8, r0
 800805e:	460c      	mov	r4, r1
 8008060:	469a      	mov	sl, r3
 8008062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008066:	d807      	bhi.n	8008078 <_printf_i+0x28>
 8008068:	2f62      	cmp	r7, #98	; 0x62
 800806a:	d80a      	bhi.n	8008082 <_printf_i+0x32>
 800806c:	2f00      	cmp	r7, #0
 800806e:	f000 80d8 	beq.w	8008222 <_printf_i+0x1d2>
 8008072:	2f58      	cmp	r7, #88	; 0x58
 8008074:	f000 80a3 	beq.w	80081be <_printf_i+0x16e>
 8008078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800807c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008080:	e03a      	b.n	80080f8 <_printf_i+0xa8>
 8008082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008086:	2b15      	cmp	r3, #21
 8008088:	d8f6      	bhi.n	8008078 <_printf_i+0x28>
 800808a:	a101      	add	r1, pc, #4	; (adr r1, 8008090 <_printf_i+0x40>)
 800808c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008090:	080080e9 	.word	0x080080e9
 8008094:	080080fd 	.word	0x080080fd
 8008098:	08008079 	.word	0x08008079
 800809c:	08008079 	.word	0x08008079
 80080a0:	08008079 	.word	0x08008079
 80080a4:	08008079 	.word	0x08008079
 80080a8:	080080fd 	.word	0x080080fd
 80080ac:	08008079 	.word	0x08008079
 80080b0:	08008079 	.word	0x08008079
 80080b4:	08008079 	.word	0x08008079
 80080b8:	08008079 	.word	0x08008079
 80080bc:	08008209 	.word	0x08008209
 80080c0:	0800812d 	.word	0x0800812d
 80080c4:	080081eb 	.word	0x080081eb
 80080c8:	08008079 	.word	0x08008079
 80080cc:	08008079 	.word	0x08008079
 80080d0:	0800822b 	.word	0x0800822b
 80080d4:	08008079 	.word	0x08008079
 80080d8:	0800812d 	.word	0x0800812d
 80080dc:	08008079 	.word	0x08008079
 80080e0:	08008079 	.word	0x08008079
 80080e4:	080081f3 	.word	0x080081f3
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	1d1a      	adds	r2, r3, #4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	602a      	str	r2, [r5, #0]
 80080f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080f8:	2301      	movs	r3, #1
 80080fa:	e0a3      	b.n	8008244 <_printf_i+0x1f4>
 80080fc:	6820      	ldr	r0, [r4, #0]
 80080fe:	6829      	ldr	r1, [r5, #0]
 8008100:	0606      	lsls	r6, r0, #24
 8008102:	f101 0304 	add.w	r3, r1, #4
 8008106:	d50a      	bpl.n	800811e <_printf_i+0xce>
 8008108:	680e      	ldr	r6, [r1, #0]
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	2e00      	cmp	r6, #0
 800810e:	da03      	bge.n	8008118 <_printf_i+0xc8>
 8008110:	232d      	movs	r3, #45	; 0x2d
 8008112:	4276      	negs	r6, r6
 8008114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008118:	485e      	ldr	r0, [pc, #376]	; (8008294 <_printf_i+0x244>)
 800811a:	230a      	movs	r3, #10
 800811c:	e019      	b.n	8008152 <_printf_i+0x102>
 800811e:	680e      	ldr	r6, [r1, #0]
 8008120:	602b      	str	r3, [r5, #0]
 8008122:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008126:	bf18      	it	ne
 8008128:	b236      	sxthne	r6, r6
 800812a:	e7ef      	b.n	800810c <_printf_i+0xbc>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	1d19      	adds	r1, r3, #4
 8008132:	6029      	str	r1, [r5, #0]
 8008134:	0601      	lsls	r1, r0, #24
 8008136:	d501      	bpl.n	800813c <_printf_i+0xec>
 8008138:	681e      	ldr	r6, [r3, #0]
 800813a:	e002      	b.n	8008142 <_printf_i+0xf2>
 800813c:	0646      	lsls	r6, r0, #25
 800813e:	d5fb      	bpl.n	8008138 <_printf_i+0xe8>
 8008140:	881e      	ldrh	r6, [r3, #0]
 8008142:	4854      	ldr	r0, [pc, #336]	; (8008294 <_printf_i+0x244>)
 8008144:	2f6f      	cmp	r7, #111	; 0x6f
 8008146:	bf0c      	ite	eq
 8008148:	2308      	moveq	r3, #8
 800814a:	230a      	movne	r3, #10
 800814c:	2100      	movs	r1, #0
 800814e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008152:	6865      	ldr	r5, [r4, #4]
 8008154:	60a5      	str	r5, [r4, #8]
 8008156:	2d00      	cmp	r5, #0
 8008158:	bfa2      	ittt	ge
 800815a:	6821      	ldrge	r1, [r4, #0]
 800815c:	f021 0104 	bicge.w	r1, r1, #4
 8008160:	6021      	strge	r1, [r4, #0]
 8008162:	b90e      	cbnz	r6, 8008168 <_printf_i+0x118>
 8008164:	2d00      	cmp	r5, #0
 8008166:	d04d      	beq.n	8008204 <_printf_i+0x1b4>
 8008168:	4615      	mov	r5, r2
 800816a:	fbb6 f1f3 	udiv	r1, r6, r3
 800816e:	fb03 6711 	mls	r7, r3, r1, r6
 8008172:	5dc7      	ldrb	r7, [r0, r7]
 8008174:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008178:	4637      	mov	r7, r6
 800817a:	42bb      	cmp	r3, r7
 800817c:	460e      	mov	r6, r1
 800817e:	d9f4      	bls.n	800816a <_printf_i+0x11a>
 8008180:	2b08      	cmp	r3, #8
 8008182:	d10b      	bne.n	800819c <_printf_i+0x14c>
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	07de      	lsls	r6, r3, #31
 8008188:	d508      	bpl.n	800819c <_printf_i+0x14c>
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	6861      	ldr	r1, [r4, #4]
 800818e:	4299      	cmp	r1, r3
 8008190:	bfde      	ittt	le
 8008192:	2330      	movle	r3, #48	; 0x30
 8008194:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008198:	f105 35ff 	addle.w	r5, r5, #4294967295
 800819c:	1b52      	subs	r2, r2, r5
 800819e:	6122      	str	r2, [r4, #16]
 80081a0:	f8cd a000 	str.w	sl, [sp]
 80081a4:	464b      	mov	r3, r9
 80081a6:	aa03      	add	r2, sp, #12
 80081a8:	4621      	mov	r1, r4
 80081aa:	4640      	mov	r0, r8
 80081ac:	f7ff fee2 	bl	8007f74 <_printf_common>
 80081b0:	3001      	adds	r0, #1
 80081b2:	d14c      	bne.n	800824e <_printf_i+0x1fe>
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295
 80081b8:	b004      	add	sp, #16
 80081ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081be:	4835      	ldr	r0, [pc, #212]	; (8008294 <_printf_i+0x244>)
 80081c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081c4:	6829      	ldr	r1, [r5, #0]
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80081cc:	6029      	str	r1, [r5, #0]
 80081ce:	061d      	lsls	r5, r3, #24
 80081d0:	d514      	bpl.n	80081fc <_printf_i+0x1ac>
 80081d2:	07df      	lsls	r7, r3, #31
 80081d4:	bf44      	itt	mi
 80081d6:	f043 0320 	orrmi.w	r3, r3, #32
 80081da:	6023      	strmi	r3, [r4, #0]
 80081dc:	b91e      	cbnz	r6, 80081e6 <_printf_i+0x196>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	f023 0320 	bic.w	r3, r3, #32
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	2310      	movs	r3, #16
 80081e8:	e7b0      	b.n	800814c <_printf_i+0xfc>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	f043 0320 	orr.w	r3, r3, #32
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	2378      	movs	r3, #120	; 0x78
 80081f4:	4828      	ldr	r0, [pc, #160]	; (8008298 <_printf_i+0x248>)
 80081f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081fa:	e7e3      	b.n	80081c4 <_printf_i+0x174>
 80081fc:	0659      	lsls	r1, r3, #25
 80081fe:	bf48      	it	mi
 8008200:	b2b6      	uxthmi	r6, r6
 8008202:	e7e6      	b.n	80081d2 <_printf_i+0x182>
 8008204:	4615      	mov	r5, r2
 8008206:	e7bb      	b.n	8008180 <_printf_i+0x130>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	6826      	ldr	r6, [r4, #0]
 800820c:	6961      	ldr	r1, [r4, #20]
 800820e:	1d18      	adds	r0, r3, #4
 8008210:	6028      	str	r0, [r5, #0]
 8008212:	0635      	lsls	r5, r6, #24
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	d501      	bpl.n	800821c <_printf_i+0x1cc>
 8008218:	6019      	str	r1, [r3, #0]
 800821a:	e002      	b.n	8008222 <_printf_i+0x1d2>
 800821c:	0670      	lsls	r0, r6, #25
 800821e:	d5fb      	bpl.n	8008218 <_printf_i+0x1c8>
 8008220:	8019      	strh	r1, [r3, #0]
 8008222:	2300      	movs	r3, #0
 8008224:	6123      	str	r3, [r4, #16]
 8008226:	4615      	mov	r5, r2
 8008228:	e7ba      	b.n	80081a0 <_printf_i+0x150>
 800822a:	682b      	ldr	r3, [r5, #0]
 800822c:	1d1a      	adds	r2, r3, #4
 800822e:	602a      	str	r2, [r5, #0]
 8008230:	681d      	ldr	r5, [r3, #0]
 8008232:	6862      	ldr	r2, [r4, #4]
 8008234:	2100      	movs	r1, #0
 8008236:	4628      	mov	r0, r5
 8008238:	f7f7 ffca 	bl	80001d0 <memchr>
 800823c:	b108      	cbz	r0, 8008242 <_printf_i+0x1f2>
 800823e:	1b40      	subs	r0, r0, r5
 8008240:	6060      	str	r0, [r4, #4]
 8008242:	6863      	ldr	r3, [r4, #4]
 8008244:	6123      	str	r3, [r4, #16]
 8008246:	2300      	movs	r3, #0
 8008248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800824c:	e7a8      	b.n	80081a0 <_printf_i+0x150>
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	462a      	mov	r2, r5
 8008252:	4649      	mov	r1, r9
 8008254:	4640      	mov	r0, r8
 8008256:	47d0      	blx	sl
 8008258:	3001      	adds	r0, #1
 800825a:	d0ab      	beq.n	80081b4 <_printf_i+0x164>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	079b      	lsls	r3, r3, #30
 8008260:	d413      	bmi.n	800828a <_printf_i+0x23a>
 8008262:	68e0      	ldr	r0, [r4, #12]
 8008264:	9b03      	ldr	r3, [sp, #12]
 8008266:	4298      	cmp	r0, r3
 8008268:	bfb8      	it	lt
 800826a:	4618      	movlt	r0, r3
 800826c:	e7a4      	b.n	80081b8 <_printf_i+0x168>
 800826e:	2301      	movs	r3, #1
 8008270:	4632      	mov	r2, r6
 8008272:	4649      	mov	r1, r9
 8008274:	4640      	mov	r0, r8
 8008276:	47d0      	blx	sl
 8008278:	3001      	adds	r0, #1
 800827a:	d09b      	beq.n	80081b4 <_printf_i+0x164>
 800827c:	3501      	adds	r5, #1
 800827e:	68e3      	ldr	r3, [r4, #12]
 8008280:	9903      	ldr	r1, [sp, #12]
 8008282:	1a5b      	subs	r3, r3, r1
 8008284:	42ab      	cmp	r3, r5
 8008286:	dcf2      	bgt.n	800826e <_printf_i+0x21e>
 8008288:	e7eb      	b.n	8008262 <_printf_i+0x212>
 800828a:	2500      	movs	r5, #0
 800828c:	f104 0619 	add.w	r6, r4, #25
 8008290:	e7f5      	b.n	800827e <_printf_i+0x22e>
 8008292:	bf00      	nop
 8008294:	080087c5 	.word	0x080087c5
 8008298:	080087d6 	.word	0x080087d6

0800829c <__sread>:
 800829c:	b510      	push	{r4, lr}
 800829e:	460c      	mov	r4, r1
 80082a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a4:	f000 f894 	bl	80083d0 <_read_r>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	bfab      	itete	ge
 80082ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082ae:	89a3      	ldrhlt	r3, [r4, #12]
 80082b0:	181b      	addge	r3, r3, r0
 80082b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082b6:	bfac      	ite	ge
 80082b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80082ba:	81a3      	strhlt	r3, [r4, #12]
 80082bc:	bd10      	pop	{r4, pc}

080082be <__swrite>:
 80082be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c2:	461f      	mov	r7, r3
 80082c4:	898b      	ldrh	r3, [r1, #12]
 80082c6:	05db      	lsls	r3, r3, #23
 80082c8:	4605      	mov	r5, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	4616      	mov	r6, r2
 80082ce:	d505      	bpl.n	80082dc <__swrite+0x1e>
 80082d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d4:	2302      	movs	r3, #2
 80082d6:	2200      	movs	r2, #0
 80082d8:	f000 f868 	bl	80083ac <_lseek_r>
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	4632      	mov	r2, r6
 80082ea:	463b      	mov	r3, r7
 80082ec:	4628      	mov	r0, r5
 80082ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082f2:	f000 b817 	b.w	8008324 <_write_r>

080082f6 <__sseek>:
 80082f6:	b510      	push	{r4, lr}
 80082f8:	460c      	mov	r4, r1
 80082fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082fe:	f000 f855 	bl	80083ac <_lseek_r>
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	bf15      	itete	ne
 8008308:	6560      	strne	r0, [r4, #84]	; 0x54
 800830a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800830e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008312:	81a3      	strheq	r3, [r4, #12]
 8008314:	bf18      	it	ne
 8008316:	81a3      	strhne	r3, [r4, #12]
 8008318:	bd10      	pop	{r4, pc}

0800831a <__sclose>:
 800831a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800831e:	f000 b813 	b.w	8008348 <_close_r>
	...

08008324 <_write_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d07      	ldr	r5, [pc, #28]	; (8008344 <_write_r+0x20>)
 8008328:	4604      	mov	r4, r0
 800832a:	4608      	mov	r0, r1
 800832c:	4611      	mov	r1, r2
 800832e:	2200      	movs	r2, #0
 8008330:	602a      	str	r2, [r5, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f7f8 ff6e 	bl	8001214 <_write>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_write_r+0x1e>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_write_r+0x1e>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	200004cc 	.word	0x200004cc

08008348 <_close_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d06      	ldr	r5, [pc, #24]	; (8008364 <_close_r+0x1c>)
 800834c:	2300      	movs	r3, #0
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	f7f8 ff8a 	bl	800126c <_close>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_close_r+0x1a>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_close_r+0x1a>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	200004cc 	.word	0x200004cc

08008368 <_fstat_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4d07      	ldr	r5, [pc, #28]	; (8008388 <_fstat_r+0x20>)
 800836c:	2300      	movs	r3, #0
 800836e:	4604      	mov	r4, r0
 8008370:	4608      	mov	r0, r1
 8008372:	4611      	mov	r1, r2
 8008374:	602b      	str	r3, [r5, #0]
 8008376:	f7f8 ffc9 	bl	800130c <_fstat>
 800837a:	1c43      	adds	r3, r0, #1
 800837c:	d102      	bne.n	8008384 <_fstat_r+0x1c>
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	b103      	cbz	r3, 8008384 <_fstat_r+0x1c>
 8008382:	6023      	str	r3, [r4, #0]
 8008384:	bd38      	pop	{r3, r4, r5, pc}
 8008386:	bf00      	nop
 8008388:	200004cc 	.word	0x200004cc

0800838c <_isatty_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4d06      	ldr	r5, [pc, #24]	; (80083a8 <_isatty_r+0x1c>)
 8008390:	2300      	movs	r3, #0
 8008392:	4604      	mov	r4, r0
 8008394:	4608      	mov	r0, r1
 8008396:	602b      	str	r3, [r5, #0]
 8008398:	f7f8 ff26 	bl	80011e8 <_isatty>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	d102      	bne.n	80083a6 <_isatty_r+0x1a>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	b103      	cbz	r3, 80083a6 <_isatty_r+0x1a>
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	200004cc 	.word	0x200004cc

080083ac <_lseek_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4d07      	ldr	r5, [pc, #28]	; (80083cc <_lseek_r+0x20>)
 80083b0:	4604      	mov	r4, r0
 80083b2:	4608      	mov	r0, r1
 80083b4:	4611      	mov	r1, r2
 80083b6:	2200      	movs	r2, #0
 80083b8:	602a      	str	r2, [r5, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	f7f8 ff6d 	bl	800129a <_lseek>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_lseek_r+0x1e>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_lseek_r+0x1e>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	200004cc 	.word	0x200004cc

080083d0 <_read_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d07      	ldr	r5, [pc, #28]	; (80083f0 <_read_r+0x20>)
 80083d4:	4604      	mov	r4, r0
 80083d6:	4608      	mov	r0, r1
 80083d8:	4611      	mov	r1, r2
 80083da:	2200      	movs	r2, #0
 80083dc:	602a      	str	r2, [r5, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	f7f8 ff6c 	bl	80012bc <_read>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_read_r+0x1e>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_read_r+0x1e>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	200004cc 	.word	0x200004cc

080083f4 <_init>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr

08008400 <_fini>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr
